/**
 * 阴影的管理类
 * @private
 */
export declare class LightShadow {
    private rhi;
    private _mapSize;
    private _renderTarget;
    bias: any;
    intensity: any;
    radius: any;
    projectionMatrix: any;
    constructor(props?: {
        engine: any;
        width: number;
        height: number;
    });
    /**
     * shadow map 对应的 RenderTarget
     * @member {RenderTarget}
     * @readonly
     */
    get renderTarget(): any;
    /**
     * shadow map 纹理对象
     * @member {Texture2D}
     * @readonly
     */
    get map(): any;
    /**
     * shadow map 纹理大小
     * @member {Vector2}
     * @readonly
     */
    get mapSize(): any;
    /**
     * 初始化光照的投影矩阵
     * @param {ALight} light
     */
    initShadowProjectionMatrix(light: any): void;
    /**
     * 将阴影参数值提交到阴影材质对象
     * @param {Material} mtl
     * @param {number} index
     * @param {Component} component
     * @param {ALight} light
     */
    bindShadowValues(mtl: any, index: any, light: any): void;
    /**
     * 生成 Technique 所需的 uniform 定义
     * @param {number} index ShadowMap Index
     */
    static getUniformDefine(index: any): {};
}
