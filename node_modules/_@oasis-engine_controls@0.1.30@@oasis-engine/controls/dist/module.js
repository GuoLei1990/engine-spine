import { MathUtil, Script, Vector3, Spherical, Vector2 } from 'oasis-engine';
import { Tween, doTransform, Easing } from '@oasis-engine/tween';

const ESP = MathUtil.zeroTolerance;
function includes(array, ...filterArray) {
  return filterArray.some((e) => array.indexOf(e) !== -1);
}
const tween2 = new Tween();
class FreeControl extends Script {
  constructor(entity) {
    super(entity);
    this._forward = new Vector3();
    this._right = new Vector3();
    this.tempVec3 = new Vector3();
    this.camera = entity;
    this.mainElement = this.scene.engine.canvas._webCanvas;
    this.domElement = document;
    this.movementSpeed = 1;
    this.rotateSpeed = 1;
    this.floorMock = true;
    this.floorY = 0;
    this.jumpY = 1;
    this.jumpDuration = 600;
    this.press = false;
    this.keysForward = ["KeyW", "ArrowUp"];
    this.keysBackward = ["KeyS", "ArrowDown"];
    this.keysLeft = ["KeyA", "ArrowLeft"];
    this.keysRight = ["KeyD", "ArrowRight"];
    this.keysJump = ["Space"];
    this._theta = 0;
    this._phi = 0;
    this._moveForward = false;
    this._moveBackward = false;
    this._moveLeft = false;
    this._moveRight = false;
    this._moveJump = false;
    this._v3Cache = new Vector3();
    this._spherical = new Spherical();
    this._rotateOri = [0, 0];
    this._events = [
      {type: "mousemove", listener: this.onMouseMove.bind(this)},
      {type: "touchmove", listener: this.onMouseMove.bind(this)},
      {type: "mousedown", listener: this.onMouseDown.bind(this)},
      {type: "touchstart", listener: this.onMouseDown.bind(this)},
      {type: "mouseup", listener: this.onMouseUp.bind(this)},
      {type: "touchend", listener: this.onMouseUp.bind(this)},
      {type: "keydown", listener: this.onKeyDown.bind(this), element: window},
      {type: "keyup", listener: this.onKeyUp.bind(this), element: window},
      {type: "contextmenu", listener: this.onContextMenu.bind(this)}
    ];
    this.initEvents();
    this.updateSpherical();
  }
  onContextMenu(event) {
    event.preventDefault();
  }
  onKeyDown(event) {
    const {code, key, keyCode} = event;
    if (includes(this.keysForward, code, key, keyCode)) {
      this._moveForward = true;
    } else if (includes(this.keysBackward, code, key, keyCode)) {
      this._moveBackward = true;
    } else if (includes(this.keysLeft, code, key, keyCode)) {
      this._moveLeft = true;
    } else if (includes(this.keysRight, code, key, keyCode)) {
      this._moveRight = true;
    } else if (includes(this.keysJump, code, key, keyCode)) {
      this.jump();
    }
  }
  onKeyUp(event) {
    const {code, key, keyCode} = event;
    if (includes(this.keysForward, code, key, keyCode)) {
      this._moveForward = false;
    } else if (includes(this.keysBackward, code, key, keyCode)) {
      this._moveBackward = false;
    } else if (includes(this.keysLeft, code, key, keyCode)) {
      this._moveLeft = false;
    } else if (includes(this.keysRight, code, key, keyCode)) {
      this._moveRight = false;
    }
  }
  onMouseDown(event) {
    event.stopPropagation();
    event = event.changedTouches && event.changedTouches[0] || event;
    if (this.domElement !== document) {
      this.domElement.focus();
    }
    this.press = true;
    this._rotateOri = [event.clientX, event.clientY];
  }
  onMouseUp(event) {
    event.preventDefault();
    event.stopPropagation();
    this.press = false;
  }
  onMouseMove(event) {
    if (this.press === false)
      return;
    if (this.enabled === false)
      return;
    event.preventDefault();
    event.stopPropagation();
    event = event.changedTouches && event.changedTouches[0] || event;
    const movementX = event.clientX - this._rotateOri[0];
    const movementY = event.clientY - this._rotateOri[1];
    this._rotateOri[0] = event.clientX;
    this._rotateOri[1] = event.clientY;
    const factorX = 180 / this.mainElement.width;
    const factorY = 180 / this.mainElement.height;
    const actualX = movementX * factorX;
    const actualY = movementY * factorY;
    this.rotate(-actualX, actualY);
  }
  rotate(alpha = 0, beta = 0) {
    this._theta += MathUtil.degreeToRadian(alpha);
    this._phi += MathUtil.degreeToRadian(beta);
    this._phi = MathUtil.clamp(this._phi, ESP, Math.PI - ESP);
    this._spherical.theta = this._theta;
    this._spherical.phi = this._phi;
    this._spherical.setToVec3(this._v3Cache);
    Vector3.add(this.camera.position, this._v3Cache, this._v3Cache);
    this.camera.transform.lookAt(this._v3Cache, new Vector3(0, 1, 0));
  }
  jump() {
    if (this._moveJump)
      return;
    this._moveJump = true;
    let p = this.camera.position;
    doTransform.Translate(this.camera, new Vector3(p.x, this.jumpY, p.z), this.jumpDuration / 2, {
      easing: Easing.easeOutSine,
      onComplete: () => {
        doTransform.Translate(this.camera, new Vector3(p.x, this.floorY, p.z), this.jumpDuration / 2, {
          easing: Easing.easeInSine,
          onComplete: () => {
            this._moveJump = false;
          }
        }).start(tween2);
      }
    }).start(tween2);
  }
  translateOnAxis(axis, distance, v3 = this.camera.position) {
    const diff = new Vector3();
    Vector3.normalize(axis, diff);
    v3.add(diff.scale(distance));
  }
  onUpdate(delta) {
    if (this.enabled === false)
      return;
    const actualMoveSpeed = delta / 1e3 * this.movementSpeed;
    this.camera.transform.getWorldForward(this._forward);
    this.camera.transform.getWorldRight(this._right);
    if (this._moveForward) {
      this.translateOnAxis(this._forward, actualMoveSpeed);
    }
    if (this._moveBackward) {
      this.translateOnAxis(this._forward, -actualMoveSpeed);
    }
    if (this._moveLeft) {
      this.translateOnAxis(this._right, -actualMoveSpeed);
    }
    if (this._moveRight) {
      this.translateOnAxis(this._right, actualMoveSpeed);
    }
    tween2.update(delta);
    const position = this.camera.transform.position;
    if (this.floorMock && !this._moveJump) {
      position.setValue(position.x, this.floorY, position.z);
      this.camera.transform.position = position;
    }
  }
  initEvents() {
    this._events.forEach((ele) => {
      if (ele.element) {
        ele.element.addEventListener(ele.type, ele.listener, false);
      } else {
        this.mainElement.addEventListener(ele.type, ele.listener, false);
      }
    });
  }
  destroy() {
    this._events.forEach((ele) => {
      if (ele.element) {
        ele.element.removeEventListener(ele.type, ele.listener, false);
      } else {
        this.mainElement.removeEventListener(ele.type, ele.listener, false);
      }
    });
    super.destroy();
  }
  updateSpherical() {
    this._v3Cache.setValue(0, 0, -1);
    Vector3.transformByQuat(this._v3Cache, this.camera.rotation, this._v3Cache);
    this._spherical.setFromVec3(this._v3Cache);
    this._theta = this._spherical.theta;
    this._phi = this._spherical.phi;
  }
}

class OrbitControl extends Script {
  constructor(entity) {
    super(entity);
    this.camera = entity;
    this.mainElement = this.engine.canvas._webCanvas;
    this.domElement = document;
    this.fov = 45;
    this.target = new Vector3();
    this.up = new Vector3(0, 1, 0);
    this.minDistance = 0.1;
    this.maxDistance = Infinity;
    this.minZoom = 0;
    this.maxZoom = Infinity;
    this.minPolarAngle = 0;
    this.maxPolarAngle = Math.PI;
    this.minAzimuthAngle = -Infinity;
    this.maxAzimuthAngle = Infinity;
    this.enableDamping = true;
    this.dampingFactor = 0.1;
    this.zoomFactor = 0.2;
    this.enableZoom = true;
    this.zoomSpeed = 1;
    this.enableRotate = true;
    this.rotateSpeed = 1;
    this.enablePan = true;
    this.keyPanSpeed = 7;
    this.autoRotate = false;
    this.autoRotateSpeed = 2;
    this.enableKeys = false;
    this.keys = {
      LEFT: 37,
      UP: 38,
      RIGHT: 39,
      BOTTOM: 40
    };
    this.mouseButtons = {
      ORBIT: 0,
      ZOOM: 1,
      PAN: 2
    };
    this.touchFingers = {
      ORBIT: 1,
      ZOOM: 2,
      PAN: 3
    };
    this._position = new Vector3();
    this._offset = new Vector3();
    this._spherical = new Spherical();
    this._sphericalDelta = new Spherical();
    this._sphericalDump = new Spherical();
    this._zoomFrag = 0;
    this._scale = 1;
    this._panOffset = new Vector3();
    this._isMouseUp = true;
    this._vPan = new Vector3();
    this._rotateStart = new Vector2();
    this._rotateEnd = new Vector2();
    this._rotateDelta = new Vector2();
    this._panStart = new Vector2();
    this._panEnd = new Vector2();
    this._panDelta = new Vector2();
    this._zoomStart = new Vector2();
    this._zoomEnd = new Vector2();
    this._zoomDelta = new Vector2();
    this.STATE = {
      NONE: -1,
      ROTATE: 0,
      ZOOM: 1,
      PAN: 2,
      TOUCH_ROTATE: 3,
      TOUCH_ZOOM: 4,
      TOUCH_PAN: 5
    };
    this._state = this.STATE.NONE;
    this.constEvents = [
      {type: "mousedown", listener: this.onMouseDown.bind(this)},
      {type: "wheel", listener: this.onMouseWheel.bind(this)},
      {type: "keydown", listener: this.onKeyDown.bind(this), element: window},
      {type: "touchstart", listener: this.onTouchStart.bind(this)},
      {type: "touchmove", listener: this.onTouchMove.bind(this)},
      {type: "touchend", listener: this.onTouchEnd.bind(this)},
      {type: "contextmenu", listener: this.onContextMenu.bind(this)}
    ];
    this.mouseUpEvents = [
      {type: "mousemove", listener: this.onMouseMove.bind(this)},
      {type: "mouseup", listener: this.onMouseUp.bind(this)}
    ];
    this.constEvents.forEach((ele) => {
      if (ele.element) {
        ele.element.addEventListener(ele.type, ele.listener, false);
      } else {
        this.mainElement.addEventListener(ele.type, ele.listener, false);
      }
    });
    this.addEventListener("disabled", () => {
      const element = this.domElement === document ? this.domElement.body : this.domElement;
      this.mainElement.removeEventListener(this.mouseUpEvents[0].type, this.mouseUpEvents[0].listener, false);
      element.removeEventListener(this.mouseUpEvents[1].type, this.mouseUpEvents[1].listener, false);
    });
  }
  destroy() {
    this.constEvents.forEach((ele) => {
      if (ele.element) {
        ele.element.removeEventListener(ele.type, ele.listener, false);
      } else {
        this.mainElement.removeEventListener(ele.type, ele.listener, false);
      }
    });
    const element = this.domElement === document ? this.domElement.body : this.domElement;
    this.mainElement.removeEventListener(this.mouseUpEvents[0].type, this.mouseUpEvents[0].listener, false);
    element.removeEventListener(this.mouseUpEvents[1].type, this.mouseUpEvents[1].listener, false);
    super.destroy();
  }
  setOneFingerRotate() {
    this.touchFingers.ORBIT = 1;
    this.touchFingers.ZOOM = 2;
    this.touchFingers.PAN = 3;
  }
  setOneFingerPan() {
    this.touchFingers.ORBIT = 3;
    this.touchFingers.ZOOM = 2;
    this.touchFingers.PAN = 1;
  }
  onUpdate(dtime) {
    if (!this.enabled)
      return;
    super.onUpdate(dtime);
    const position = this.camera.position;
    position.cloneTo(this._offset);
    this._offset.subtract(this.target);
    this._spherical.setFromVec3(this._offset);
    if (this.autoRotate && this._state === this.STATE.NONE) {
      this.rotateLeft(this.getAutoRotationAngle(dtime));
    }
    this._spherical.theta += this._sphericalDelta.theta;
    this._spherical.phi += this._sphericalDelta.phi;
    this._spherical.theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, this._spherical.theta));
    this._spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this._spherical.phi));
    this._spherical.makeSafe();
    if (this._scale !== 1) {
      this._zoomFrag = this._spherical.radius * (this._scale - 1);
    }
    this._spherical.radius += this._zoomFrag;
    this._spherical.radius = Math.max(this.minDistance, Math.min(this.maxDistance, this._spherical.radius));
    this.target.add(this._panOffset);
    this._spherical.setToVec3(this._offset);
    this.target.cloneTo(this._position);
    this._position.add(this._offset);
    this.camera.position = this._position;
    this.camera.transform.lookAt(this.target, this.up);
    if (this.enableDamping === true) {
      this._sphericalDump.theta *= 1 - this.dampingFactor;
      this._sphericalDump.phi *= 1 - this.dampingFactor;
      this._zoomFrag *= 1 - this.zoomFactor;
      if (this._isMouseUp) {
        this._sphericalDelta.theta = this._sphericalDump.theta;
        this._sphericalDelta.phi = this._sphericalDump.phi;
      } else {
        this._sphericalDelta.set(0, 0, 0);
      }
    } else {
      this._sphericalDelta.set(0, 0, 0);
      this._zoomFrag = 0;
    }
    this._scale = 1;
    this._panOffset.setValue(0, 0, 0);
  }
  getAutoRotationAngle(dtime) {
    return 2 * Math.PI / this.autoRotateSpeed / 1e3 * dtime;
  }
  getZoomScale() {
    return Math.pow(0.95, this.zoomSpeed);
  }
  rotateLeft(radian) {
    this._sphericalDelta.theta -= radian;
    if (this.enableDamping) {
      this._sphericalDump.theta = -radian;
    }
  }
  rotateUp(radian) {
    this._sphericalDelta.phi -= radian;
    if (this.enableDamping) {
      this._sphericalDump.phi = -radian;
    }
  }
  panLeft(distance, worldMatrix) {
    const e = worldMatrix.elements;
    this._vPan.setValue(e[0], e[1], e[2]);
    this._vPan.scale(distance);
    this._panOffset.add(this._vPan);
  }
  panUp(distance, worldMatrix) {
    const e = worldMatrix.elements;
    this._vPan.setValue(e[4], e[5], e[6]);
    this._vPan.scale(distance);
    this._panOffset.add(this._vPan);
  }
  pan(deltaX, deltaY) {
    const element = this.domElement === document ? this.domElement.body : this.domElement;
    const position = this.camera.position;
    position.cloneTo(this._vPan);
    this._vPan.subtract(this.target);
    let targetDistance = this._vPan.length();
    targetDistance *= this.fov / 2 * (Math.PI / 180);
    this.panLeft(-2 * deltaX * (targetDistance / element.clientHeight), this.camera.transform.worldMatrix);
    this.panUp(2 * deltaY * (targetDistance / element.clientHeight), this.camera.transform.worldMatrix);
  }
  zoomIn(zoomScale) {
    this._scale *= zoomScale;
  }
  zoomOut(zoomScale) {
    this._scale /= zoomScale;
  }
  handleMouseDownRotate(event) {
    this._rotateStart.setValue(event.clientX, event.clientY);
  }
  handleMouseDownZoom(event) {
    this._zoomStart.setValue(event.clientX, event.clientY);
  }
  handleMouseDownPan(event) {
    this._panStart.setValue(event.clientX, event.clientY);
  }
  handleMouseMoveRotate(event) {
    this._rotateEnd.setValue(event.clientX, event.clientY);
    Vector2.subtract(this._rotateEnd, this._rotateStart, this._rotateDelta);
    const element = this.domElement === document ? document.body : this.domElement;
    this.rotateLeft(2 * Math.PI * (this._rotateDelta.x / element.clientWidth) * this.rotateSpeed);
    this.rotateUp(2 * Math.PI * (this._rotateDelta.y / element.clientHeight) * this.rotateSpeed);
    this._rotateEnd.cloneTo(this._rotateStart);
  }
  handleMouseMoveZoom(event) {
    this._zoomEnd.setValue(event.clientX, event.clientY);
    Vector2.subtract(this._zoomEnd, this._zoomStart, this._zoomDelta);
    if (this._zoomDelta.y > 0) {
      this.zoomOut(this.getZoomScale());
    } else if (this._zoomDelta.y < 0) {
      this.zoomIn(this.getZoomScale());
    }
    this._zoomEnd.cloneTo(this._zoomStart);
  }
  handleMouseMovePan(event) {
    this._panEnd.setValue(event.clientX, event.clientY);
    Vector2.subtract(this._panEnd, this._panStart, this._panDelta);
    this.pan(this._panDelta.x, this._panDelta.y);
    this._panEnd.cloneTo(this._panStart);
  }
  handleMouseWheel(event) {
    if (event.deltaY < 0) {
      this.zoomIn(this.getZoomScale());
    } else if (event.deltaY > 0) {
      this.zoomOut(this.getZoomScale());
    }
  }
  handleKeyDown(event) {
    switch (event.keyCode) {
      case this.keys.UP:
        this.pan(0, this.keyPanSpeed);
        break;
      case this.keys.BOTTOM:
        this.pan(0, -this.keyPanSpeed);
        break;
      case this.keys.LEFT:
        this.pan(this.keyPanSpeed, 0);
        break;
      case this.keys.RIGHT:
        this.pan(-this.keyPanSpeed, 0);
        break;
    }
  }
  handleTouchStartRotate(event) {
    this._rotateStart.setValue(event.touches[0].pageX, event.touches[0].pageY);
  }
  handleTouchStartZoom(event) {
    const dx = event.touches[0].pageX - event.touches[1].pageX;
    const dy = event.touches[0].pageY - event.touches[1].pageY;
    const distance = Math.sqrt(dx * dx + dy * dy);
    this._zoomStart.setValue(0, distance);
  }
  handleTouchStartPan(event) {
    this._panStart.setValue(event.touches[0].pageX, event.touches[0].pageY);
  }
  handleTouchMoveRotate(event) {
    this._rotateEnd.setValue(event.touches[0].pageX, event.touches[0].pageY);
    Vector2.subtract(this._rotateEnd, this._rotateStart, this._rotateDelta);
    const element = this.domElement === document ? this.domElement.body : this.domElement;
    this.rotateLeft(2 * Math.PI * this._rotateDelta.x / element.clientWidth * this.rotateSpeed);
    this.rotateUp(2 * Math.PI * this._rotateDelta.y / element.clientHeight * this.rotateSpeed);
    this._rotateEnd.cloneTo(this._rotateStart);
  }
  handleTouchMoveZoom(event) {
    const dx = event.touches[0].pageX - event.touches[1].pageX;
    const dy = event.touches[0].pageY - event.touches[1].pageY;
    const distance = Math.sqrt(dx * dx + dy * dy);
    this._zoomEnd.setValue(0, distance);
    Vector2.subtract(this._zoomEnd, this._zoomStart, this._zoomDelta);
    if (this._zoomDelta.y > 0) {
      this.zoomIn(this.getZoomScale());
    } else if (this._zoomDelta.y < 0) {
      this.zoomOut(this.getZoomScale());
    }
    this._zoomEnd.cloneTo(this._zoomStart);
  }
  handleTouchMovePan(event) {
    this._panEnd.setValue(event.touches[0].pageX, event.touches[0].pageY);
    Vector2.subtract(this._panEnd, this._panStart, this._panDelta);
    this.pan(this._panDelta.x, this._panDelta.y);
    this._panEnd.cloneTo(this._panStart);
  }
  onMouseDown(event) {
    if (this.enabled === false)
      return;
    event.preventDefault();
    this._isMouseUp = false;
    switch (event.button) {
      case this.mouseButtons.ORBIT:
        if (this.enableRotate === false)
          return;
        this.handleMouseDownRotate(event);
        this._state = this.STATE.ROTATE;
        break;
      case this.mouseButtons.ZOOM:
        if (this.enableZoom === false)
          return;
        this.handleMouseDownZoom(event);
        this._state = this.STATE.ZOOM;
        break;
      case this.mouseButtons.PAN:
        if (this.enablePan === false)
          return;
        this.handleMouseDownPan(event);
        this._state = this.STATE.PAN;
        break;
    }
    if (this._state !== this.STATE.NONE) {
      const element = this.domElement === document ? this.domElement.body : this.domElement;
      this.mainElement.addEventListener(this.mouseUpEvents[0].type, this.mouseUpEvents[0].listener, false);
      element.addEventListener(this.mouseUpEvents[1].type, this.mouseUpEvents[1].listener, false);
    }
  }
  onMouseMove(event) {
    if (this.enabled === false)
      return;
    event.preventDefault();
    switch (this._state) {
      case this.STATE.ROTATE:
        if (this.enableRotate === false)
          return;
        this.handleMouseMoveRotate(event);
        break;
      case this.STATE.ZOOM:
        if (this.enableZoom === false)
          return;
        this.handleMouseMoveZoom(event);
        break;
      case this.STATE.PAN:
        if (this.enablePan === false)
          return;
        this.handleMouseMovePan(event);
        break;
    }
  }
  onMouseUp() {
    if (this.enabled === false)
      return;
    this._isMouseUp = true;
    this.mouseUpEvents.forEach((ele) => {
      const element = this.domElement === document ? this.domElement.body : this.domElement;
      element.removeEventListener(ele.type, ele.listener, false);
      this.mainElement.removeEventListener(ele.type, ele.listener, false);
    });
    this._state = this.STATE.NONE;
  }
  onMouseWheel(event) {
    if (this.enabled === false || this.enableZoom === false || this._state !== this.STATE.NONE && this._state !== this.STATE.ROTATE)
      return;
    event.preventDefault();
    event.stopPropagation();
    this.handleMouseWheel(event);
  }
  onKeyDown(event) {
    if (this.enabled === false || this.enableKeys === false || this.enablePan === false)
      return;
    this.handleKeyDown(event);
  }
  onTouchStart(event) {
    if (this.enabled === false)
      return;
    this._isMouseUp = false;
    switch (event.touches.length) {
      case this.touchFingers.ORBIT:
        if (this.enableRotate === false)
          return;
        this.handleTouchStartRotate(event);
        this._state = this.STATE.TOUCH_ROTATE;
        break;
      case this.touchFingers.ZOOM:
        if (this.enableZoom === false)
          return;
        this.handleTouchStartZoom(event);
        this._state = this.STATE.TOUCH_ZOOM;
        break;
      case this.touchFingers.PAN:
        if (this.enablePan === false)
          return;
        this.handleTouchStartPan(event);
        this._state = this.STATE.TOUCH_PAN;
        break;
      default:
        this._state = this.STATE.NONE;
    }
  }
  onTouchMove(event) {
    if (this.enabled === false)
      return;
    event.preventDefault();
    event.stopPropagation();
    switch (event.touches.length) {
      case this.touchFingers.ORBIT:
        if (this.enableRotate === false)
          return;
        if (this._state !== this.STATE.TOUCH_ROTATE)
          return;
        this.handleTouchMoveRotate(event);
        break;
      case this.touchFingers.ZOOM:
        if (this.enableZoom === false)
          return;
        if (this._state !== this.STATE.TOUCH_ZOOM)
          return;
        this.handleTouchMoveZoom(event);
        break;
      case this.touchFingers.PAN:
        if (this.enablePan === false)
          return;
        if (this._state !== this.STATE.TOUCH_PAN)
          return;
        this.handleTouchMovePan(event);
        break;
      default:
        this._state = this.STATE.NONE;
    }
  }
  onTouchEnd() {
    if (this.enabled === false)
      return;
    this._isMouseUp = true;
    this._state = this.STATE.NONE;
  }
  onContextMenu(event) {
    if (this.enabled === false)
      return;
    event.preventDefault();
  }
}

export { FreeControl, OrbitControl };
//# sourceMappingURL=module.js.map
