declare class ShaderFactory {
    /**
     * GLSL 版本
     * @param {string} version - "100" | "300 es"
     * */
    static parseVersion(version?: string): string;
    static parsePrecision(vertP: string, fragP: string, compileVert?: boolean): string;
    static parseShaderName(name: any): string;
    static parseAttributeMacros(macros: any): string;
    static parseCustomMacros(macros: any): string;
    static parseShader(src: any): any;
    static parseIncludes(src: any): any;
    static InjectShaderSlices(slices: any): void;
    /**
     * 相应版本的 extension
     * @param {string[]} extensions - such as ["GL_EXT_shader_texture_lod"]
     * */
    static parseExtension(extensions: string[]): string;
    /**
     * 切换低版本 GLSL 到 GLSL 300 es
     * @param {string} shader - code
     * @param {boolean} isFrag - 是否为片元着色器。
     * */
    static convertTo300(shader: string, isFrag?: boolean): string;
    /**
     * 返回相应 shaderCode 中的 draw buffer 长度
     * @param shader - shader code
     */
    static getMaxDrawBuffers(shader: string): number;
    /**
     * 1. 兼容 gl_FragColor 和 gl_FragData 同时存在的报错
     * */
    static compatible(fragmentShader: string): string;
    private static replaceMRTShader;
}
export { ShaderFactory };
