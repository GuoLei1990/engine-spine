import { Vector3, Vector4 } from "@oasis-engine/math";
import { Side } from "../base/Constant";
import { Camera } from "../Camera";
import { Component } from "../Component";
import { Engine } from "../Engine";
import { Material } from "../material/Material";
import { RenderTechnique } from "../material/RenderTechnique";
import { RenderContext } from "../RenderPipeline/RenderContext";
/**
 * PBR（Physically-Based Rendering）材质
 */
declare class PBRMaterial extends Material {
    private _uniformObj;
    private _stateObj;
    private _ambientLightCount;
    private _envMapLightCount;
    private _spotLightCount;
    private _directLightCount;
    private _pointLightCount;
    private _useDiffuseEnv;
    private _useSpecularEnv;
    private _clipPlaneCount;
    private _useOIT;
    /**
     * PBR 材质
     * @param {String} [name='PBR_MATERIAL'] 材质名
     * @param {Object} [props] 包含以下参数
     * @param {Vector4} [props.baseColorFactor=[1, 1, 1, 1]] 基础颜色因子
     * @param {Texture2D} [props.baseColorTexture] 基础颜色纹理
     * @param {Number} [props.metallicFactor=1] 金属度
     * @param {Number} [props.roughnessFactor=1] 粗糙度
     * @param {Texture2D} [props.metallicTexture] 金属纹理
     * @param {Texture2D} [props.roughnessTexture] 粗糙度纹理
     * @param {Texture2D} [props.metallicRoughnessTexture] 金属粗糙度纹理
     * @param {Texture2D} [props.normalTexture] 法线纹理
     * @param {Number} [props.normalScale=1] 法线缩放量
     * @param {Texture2D} [props.emissiveTexture] 发散光纹理
     * @param {Vector3} [props.emissiveFactor=[0, 0, 0]] 发散光因子
     * @param {Texture2D} [props.occlusionTexture] 遮蔽纹理
     * @param {Number} [props.occlusionStrength=1] 遮蔽强度
     * @param {Number} [props.alphaCutoff=0.5] alpha裁剪值
     * @param {String} [props.alphaMode='OPAQUE'] alpha混合模式
     * @param {Boolean} [props.doubleSided=false] 是否显示双面
     * @param {Side} [props.side=Side.Front] 显示哪一个面，向下兼容doubleSided
     * @param {Boolean} [props.unlit=false] 是否不使用光照
     * @param {Boolean} [props.srgb=false] 是否为 SRGB 色彩空间
     * @param {Boolean} [props.srgbFast=true] sRGB线性校正是否使用近似快速算法
     * @param {Boolean} [props.gamma=false] 是否使用 Gamma 纠正
     * @param {Number} [props.opacity=1] 透明度
     * @param {Texture2D} [props.opacityTexture] 透明度贴图
     * @param {boolean} [props.getOpacityFromRGB=false] true:取透明度贴图的rgb亮度，false:取alpha通道
     *
     * @param {boolean} [props.isMetallicWorkflow=true] ture:金属粗糙度模式，false：高光光泽度模式
     * @param {Vector3} [props.specularFactor=[1，1，1]] 高光度因子
     * @param {number} [props.glossinessFactor=0] 光泽度
     * @param {Texture2D} [props.specularGlossinessTexture] 高光光泽度纹理
     *
     * @param {number} [props.envMapIntensity] 反射模式时的反射强度；
     *
     *  todo: IOR 更加符合材质的属性，但是需要增加额外的属性来表示非真空折射率，如摄像机在水中等情况。
     * @param {number} [props.refractionRatio] 折射模式时的折射率的比例，如真空折射率/水折射率=1/1.33;
     * @param {boolean} [props.envMapModeRefract=false] 全局环境贴图使用 反射或者折射 模式;
     * @param {Texture2D} [props.refractionTexture] 局部 折射纹理;
     * @param {number} [props.refractionDepth] 局部 折射纹理 深度值，用来模拟折射距离;
     *
     * @param {Texture2D} [props.perturbationTexture] 扰动纹理
     * @param {number} [props.perturbationUOffset] 扰动纹理U偏移
     * @param {number} [props.perturbationVOffset] 扰动纹理V偏移
     *
     * @param {TextureCubeMap} [props.reflectionTexture] 局部反射贴图，可以覆盖 AEnvironmentMapLight
     *
     */
    constructor(engine: Engine, name?: string, props?: {});
    /**
     * 创建默认的参数值
     * @private
     */
    createDefaulteValues(): void;
    /**
     * 设置使用到的Uniform信息
     * @param {Object} obj 使用到的Uniform信息
     * @private
     */
    setUniforms(obj: any): void;
    /**
     * 设置渲染状态信息
     * @param {Object} obj 渲染状态信息
     * @private
     */
    setStates(obj: any): void;
    /**
     * 根据 uniform 的参数名设置材质值
     * @private
     */
    setValueByParamName(paramName: any, value: any): void;
    /** 根据 state 跟新 technique */
    private updateTechnique;
    /****************************************   uniform start **************************************** /
  
     /**
     * 基础颜色因子
     * @type {Vector4}
     */
    get baseColorFactor(): Vector4;
    set baseColorFactor(v: Vector4);
    get opacity(): number;
    set opacity(val: number);
    /**
     * 基础颜色纹理
     * @type {Texture2D}
     */
    get baseColorTexture(): any;
    set baseColorTexture(v: any);
    /**
     * 透明贴图
     * @type {Texture2D}
     * */
    get opacityTexture(): any;
    set opacityTexture(v: any);
    /**
     * 金属度
     * @type {Number}
     */
    get metallicFactor(): any;
    set metallicFactor(v: any);
    /**
     * 粗糙度
     * @type {Number}
     */
    get roughnessFactor(): any;
    set roughnessFactor(v: any);
    /**
     * 金属纹理
     * @type {Texture2D}
     */
    get metallicTexture(): any;
    set metallicTexture(v: any);
    /**
     * 粗糙度纹理
     * @type {Texture2D}
     */
    get roughnessTexture(): any;
    set roughnessTexture(v: any);
    /**
     * 金属粗糙度纹理
     * @type {Texture2D}
     */
    get metallicRoughnessTexture(): any;
    set metallicRoughnessTexture(v: any);
    /**
     * 法线纹理
     * @type {Texture2D}
     */
    get normalTexture(): any;
    set normalTexture(v: any);
    /**
     * 法线缩放量
     * @type {Number}
     */
    get normalScale(): any;
    set normalScale(v: any);
    /**
     * 发散光纹理
     * @type {Texture2D}
     */
    get emissiveTexture(): any;
    set emissiveTexture(v: any);
    /**
     * 发散光因子
     * @type {Vector3}
     */
    get emissiveFactor(): Vector3;
    set emissiveFactor(v: Vector3);
    /**
     * 遮蔽纹理
     * @type {Texture2D}
     */
    get occlusionTexture(): any;
    set occlusionTexture(v: any);
    /**
     * 遮蔽强度
     * @type {Number}
     */
    get occlusionStrength(): any;
    set occlusionStrength(v: any);
    /**
     * alpha裁剪值
     * @type {Number}
     */
    get alphaCutoff(): any;
    set alphaCutoff(v: any);
    /**
     * 高光度因子
     * @type {Vector3}
     */
    get specularFactor(): any;
    set specularFactor(v: any);
    /**
     * 光泽度
     * @type {Array}
     */
    get glossinessFactor(): any;
    set glossinessFactor(v: any);
    /**
     * 高光光泽度纹理
     * @type {Texture2D}
     */
    get specularGlossinessTexture(): any;
    set specularGlossinessTexture(v: any);
    /**
     * 镜面反射纹理
     * @type {TextureCubeMap}
     */
    get reflectionTexture(): any;
    set reflectionTexture(v: any);
    /**
     * 反射强度
     * @type {number}
     */
    get envMapIntensity(): any;
    set envMapIntensity(v: any);
    /**
     * 折射率比
     * @type {number}
     */
    get refractionRatio(): any;
    set refractionRatio(v: any);
    /**
     * 局部折射纹理的深度值，用来模拟折射距离
     * @type {number}
     */
    get refractionDepth(): any;
    set refractionDepth(v: any);
    /**
     * 局部折射纹理
     * @type {Texture2D}
     */
    get refractionTexture(): any;
    set refractionTexture(v: any);
    /**
     * 扰动纹理
     * @type {Texture2D}
     */
    get perturbationTexture(): any;
    set perturbationTexture(v: any);
    /**
     * 扰动纹理U偏移
     * @type {number}
     */
    get perturbationUOffset(): any;
    set perturbationUOffset(v: any);
    /**
     * 扰动纹理V偏移
     * @type {number}
     */
    get perturbationVOffset(): any;
    set perturbationVOffset(v: any);
    /****************************************   uniform end **************************************** /
  
  
    /****************************************   state start **************************************** /
  
     /**
     * alpha混合模式
     * @type {'OPAQUE'|'MASK'|'BLEND'}
     */
    get alphaMode(): any;
    set alphaMode(v: any);
    /**
     * 是否显示双面
     * @type {Boolean}
     */
    get doubleSided(): any;
    set doubleSided(v: any);
    /**
     * 显示哪个面
     * @type {Side}
     * */
    get side(): Side;
    set side(v: Side);
    /**
     * 是否使用光源
     * @type {Boolean}
     */
    get unlit(): any;
    set unlit(v: any);
    /**
     * 是否 SRGB 色彩空间
     * @type {Boolean}
     */
    get srgb(): any;
    set srgb(v: any);
    /**
     * sRGB线性校正是否使用近似快速算法
     * */
    get srgbFast(): boolean;
    set srgbFast(v: boolean);
    /**
     * 是否使用 Gamma 纠正
     * @type {Boolean}
     */
    get gamma(): any;
    set gamma(v: any);
    get blendFunc(): any;
    set blendFunc(v: any);
    get blendFuncSeparate(): any;
    set blendFuncSeparate(v: any);
    get depthMask(): any;
    set depthMask(v: any);
    /**
     * 透明度通道选择
     * true:取透明度贴图的rgb亮度，false:取alpha通道
     * @type{boolean}
     * */
    get getOpacityFromRGB(): boolean;
    set getOpacityFromRGB(v: boolean);
    /**
     * pbr工作流是否是金属粗糙度模式
     * @type{boolean}
     * */
    get isMetallicWorkflow(): boolean;
    set isMetallicWorkflow(v: boolean);
    /**
     * 是否使用折射模式，默认反射模式
     * @type{boolean}
     * */
    get envMapModeRefract(): boolean;
    set envMapModeRefract(v: boolean);
    /****************************************   state end **************************************** /
  
    /**
     * 绘制前准备
     * @param {Camera} camera 相机
     * @param {Component} component 组件
     * @private
     */
    prepareDrawing(context: RenderContext, component: Component, primitive: any): void;
    /**
     * 创建Technique
     * @param {Camera} camera 相机
     * @param {Ability} component 组件
     * @private
     */
    _generateTechnique(camera: Camera, component: any, primitive: any): RenderTechnique;
    /**
     * 创建宏
     * @param {Camera} camera 相机
     * @param {Ability} component 组件
     * @private
     */
    _generateShaderMacros(camera: Camera, component: any, primitive: any): string[];
    /**
     * 创建Technique配置信息
     */
    _generateConfig(): {
        attributes: {};
        uniforms: any;
        states: {
            disable: any[];
            enable: any[];
            functions: {};
        };
    } & {
        states: {
            disable: any[];
            enable: any[];
            functions: any;
        };
    };
    /**
     * 创建一个副本
     * @param {string} name - name
     */
    clone(name?: string): PBRMaterial;
    /**
     * 默认材质名 ‘PBR_MATERIAL’
     * @private
     */
    static MATERIAL_NAME: string;
    /**
     * 默认Technique名 ‘PBR_TECHNIQUE’
     * @private
     */
    static TECHNIQUE_NAME: string;
    /**
     * 顶点着色器
     * @private
     */
    static STATIC_VERTEX_SHADER: string;
    /**
     * 片断着色器
     * @private
     */
    static STATIC_FRAGMENT_SHADER: string;
    /**
     * 已占用定点着色器 Uniform Vector 个数
     * @private
     */
    static attribUniformVec4: number;
    /**
     * 默认 Technique 配置信息
     * @private
     */
    static TECH_CONFIG: {
        attributes: {};
        uniforms: any;
        states: {
            disable: any[];
            enable: any[];
            functions: {};
        };
    };
}
export { PBRMaterial };
