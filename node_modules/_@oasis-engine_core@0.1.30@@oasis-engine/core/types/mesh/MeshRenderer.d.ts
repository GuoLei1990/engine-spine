import { Camera } from "../Camera";
import { Entity } from "../Entity";
import { Material } from "../material/Material";
import { RenderableComponent } from "../RenderableComponent";
import { Mesh } from "./Mesh";
/**
 * 负责渲染一个Mesh对象的组件
 */
export declare class MeshRenderer extends RenderableComponent {
    private _mesh;
    private _instanceMaterials;
    private _sharedMaterials;
    constructor(entity: Entity);
    /**
     * 当前绑定的 Mesh 对象
     */
    get mesh(): Mesh;
    /**
     * 指定需要渲染的Mesh对象；多个MeshRenderer对象可以引用同一个Mesh对象
     * @param {Mesh} mesh Mesh 对象
     */
    set mesh(mesh: Mesh);
    /**
     * 指定一个Primitive所使用的材质（替代Primitive的默认材质）
     * @param {number} primitiveIndex Primitive 的名称
     * @param {Material} material 材质对象
     */
    setSharedMaterial(primitiveIndex: number, material: Material): void;
    /**
     * 指定一个Primitive所使用的材质（替代Primitive的默认材质）
     * @param {number} primitiveIndex Primitive 的名称
     * @param {Material} material 材质对象
     */
    setMaterial(primitiveIndex: number, material: Material): void;
    /**
     * 取得这个组件独有的材质对象
     * @param {number} primitiveIndex 索引值
     * @return {Material}
     */
    getInstanceMaterial(primitiveIndex: number): Material;
    /**
     * 取得共享的Primitive的材质对象
     * @param {number} primitiveIndex 索引值
     * @return {Material}
     */
    getSharedMaterial(primitiveIndex: number): Material;
    /**
     * 执行渲染
     * @param {CameraComponent} camera
     */
    render(camera: Camera): void;
    /**
     * 释放资源
     */
    destroy(): void;
    /**
     * @override
     */
    protected _updateBounds(worldBounds: any): void;
}
