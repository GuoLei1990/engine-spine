import { SceneFeature } from "../SceneFeature";
import { Light } from "./Light";
/**
 * 判断场景中是否有灯光
 * @returns {boolean}
 * @private
 */
export declare function hasLight(): boolean;
/**
 * Scene Feature：在场景中添加灯光特性
 * @extends SceneFeature
 * @private
 */
export declare class LightFeature extends SceneFeature {
    visibleLights: Light[];
    /**
     * 获取光源种类的相应数量
     * */
    get lightSortAmount(): {
        ambientLightCount: number;
        directLightCount: number;
        pointLightCount: number;
        spotLightCount: number;
        envMapLightCount: number;
        useDiffuseEnv: boolean;
        useSpecularEnv: boolean;
    };
    constructor();
    /**
     * 向当前场景注册一个灯光对象
     * @param {Light} light 灯光对象
     * @private
     */
    attachRenderLight(light: Light): void;
    /**
     * 从当前场景移除一个灯光对象
     * @param {Light} light 灯光对象
     * @private
     */
    detachRenderLight(light: Light): void;
    /**
     * 将灯光数据绑定到指定的材质中（指定 Uniform 的值）
     * @param {Material} mtl 材质对象
     * @private
     */
    bindMaterialValues(mtl: any): void;
    /**
     * 生成 Technique 所需的全部 uniform 定义
     */
    getUniformDefine(): {};
}
