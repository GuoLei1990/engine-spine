import { IntersectInfo } from "./enums/IntersectInfo";
import { Matrix } from "./Matrix";
import { Vector3 } from "./Vector3";
import { Vector4 } from "./Vector4";
/**
 * 方向包围盒(Oriented Bounding Box)
 * */
export declare class OBB {
    private static _tempVec3;
    /** 本地坐标系 */
    min: Vector3;
    max: Vector3;
    corners: Vector3[];
    /** 世界坐标系 */
    minWorld: Vector3;
    maxWorld: Vector3;
    cornersWorld: Vector3[];
    /**
     * 初始化 OBB, 之后可以通过 modelMatrix 缓存计算
     * @param {Vector3} minLocal - 本地坐标系的最小坐标
     * @param {Vector3} maxLocal - 本地坐标系的最大坐标
     * @param {Matrix} modelMatrix - Local to World矩阵
     * */
    constructor(minLocal: Vector3, maxLocal: Vector3, modelMatrix: Matrix);
    /**
     * 根据 min/max ,取得八个顶点的位置
     * @param {Vector3} min - 最小坐标
     * @param {Vector3} max - 最大坐标
     */
    getCornersFromMinMax(min: Vector3, max: Vector3): Vector3[];
    /**
     * 通过模型矩阵，和缓存的本地坐标系 OBB，获取新的世界坐标系 OBB
     * @param {Matrix} modelMatrix - Local to World矩阵
     * */
    updateByModelMatrix(modelMatrix: Matrix): void;
    /**
     * 获取与视锥体的 具体相交状态
     * @param { Vector4[] } frustumPlanes - Oasis 视锥体的6个平面方程
     * @return {IntersectInfo} 返回相交状态
     * */
    intersectsFrustum(frustumPlanes: Vector4[]): IntersectInfo;
    /**
     * 是否在视锥体内部（包含或者交叉）
     * @param { Vector4[] } frustumPlanes - Oasis 视锥体的6个平面方程
     * @return {boolean}
     * */
    isInFrustum(frustumPlanes: Vector4[]): boolean;
}
