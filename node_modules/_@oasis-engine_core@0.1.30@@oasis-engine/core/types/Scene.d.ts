import { Vector3, Vector4 } from "@oasis-engine/math";
import { EventDispatcher, MaskList } from "./base";
import { Camera } from "./Camera";
import { Engine } from "./Engine";
import { Entity } from "./Entity";
import { FeatureManager } from "./FeatureManager";
import { SceneFeature } from "./SceneFeature";
/**
 * 场景。
 */
export declare class Scene extends EventDispatcher {
    static sceneFeatureManager: FeatureManager<SceneFeature>;
    /** 场景名字 */
    name: string;
    /**
     * @private
     * @deprecated
     * @todo: migrate to camera
     * 裁剪面，平面方程组。裁剪面以下的片元将被剔除绘制
     * @example
     * scene.clipPlanes = [[0,1,0,0]];
     * */
    clipPlanes: Vector4[];
    _activeCameras: Camera[];
    _isActiveInEngine: boolean;
    private _destroyed;
    private _rootEntities;
    /**
     * 当前的所属 Engine。
     */
    get engine(): Engine;
    /**
     * 根实体的数量。
     */
    get rootEntitiesCount(): number;
    /**
     * 根实体集合。
     */
    get rootEntities(): Readonly<Entity[]>;
    /**
     * 是否已销毁。
     */
    get destroyed(): boolean;
    /**
     * 创建场景。
     * @param engine - 引擎
     * @param name - 名称
     */
    constructor(engine: Engine, name?: string);
    /**
     * 创建根实体。
     * @param name - 实体名称
     * @returns 实体
     */
    createRootEntity(name?: string): Entity;
    /**
     * 添加根实体。
     * @param entity - 根实体
     */
    addRootEntity(entity: Entity): void;
    /**
     * 移除根实体。
     * @param entity - 根实体
     */
    removeRootEntity(entity: Entity): void;
    /**
     * 通过索引获取根实体。
     * @param index - 索引
     */
    getRootEntity(index?: number): Entity | null;
    /**
     * 根据名字全局查找实体。
     * @param name - 实体名称
     * @returns 实体
     */
    findEntityByName(name: string): Entity | null;
    /**
     * 根据路径全局查找实体，使用‘/’符号作为路径分割符。
     * @param path - 实体路径
     * @returns 实体
     */
    findEntityByPath(path: string): Entity | null;
    /**
     * 销毁场景。
     */
    destroy(): void;
    /**
     * 向当前场景注册一个摄像机对象
     * @param {CameraComponent} camera 摄像机对象
     * @private
     */
    attachRenderCamera(camera: Camera): void;
    /**
     * 从当前场景移除一个摄像机对象
     * @param {CameraComponent} camera 摄像机对象
     * @private
     */
    detachRenderCamera(camera: Camera): void;
    private _removeEntity;
    static registerFeature(Feature: new () => SceneFeature): void;
    findFeature<T extends SceneFeature>(Feature: {
        new (): T;
    }): T;
    features: SceneFeature[];
    /**
     * @deprecated
     * 射线
     * @param ray
     */
    raycast(ray: {
        origin: Vector3;
        direction: Vector3;
    }, outPos?: Vector3, tag?: MaskList): any;
}
