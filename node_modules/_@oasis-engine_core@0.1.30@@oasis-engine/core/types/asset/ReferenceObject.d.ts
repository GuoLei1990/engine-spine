import { Engine } from "../Engine";
import { AssetObject } from "./AssetObject";
/**
 * 资产的基类，具有引用计数能力。
 */
export declare abstract class ReferenceObject extends AssetObject {
    /** 是否忽略垃圾回收的检查,如果为 true ,将不受 ResourceManager.gc() 影响。*/
    isGCIgnored: boolean;
    protected _engine: Engine;
    protected _gcPriority: number;
    private _referenceCount;
    private _destroyed;
    /**
     * 被有效引用计数。
     */
    get referenceCount(): number;
    /**
     * 是否已销毁。
     */
    get destroyed(): boolean;
    protected constructor(engine?: Engine);
    /**
     * 销毁。
     * @param force - 是否强制销毁,如果为 fasle 则 referenceCount = 0 可释放成功
     * @returns 是否释放成功
     */
    destroy(force?: boolean): boolean;
    /**
     * 当资源真正销毁时调。交由子类重写
     */
    protected abstract onDestroy(): void;
    /**
     * @private
     */
    _addReference(referenceCount: number): void;
}
