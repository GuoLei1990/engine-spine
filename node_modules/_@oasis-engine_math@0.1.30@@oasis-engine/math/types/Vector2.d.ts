import { IClone } from "@oasis-engine/design";
/**
 * 二维向量。
 */
export declare class Vector2 implements IClone {
    /** @internal 零向量。*/
    static readonly _zero: Vector2;
    /** @internal 一向量。*/
    static readonly _one: Vector2;
    /**
     * 将两个向量相加并输出结果至 out。
     * @param left - 左向量
     * @param right - 右向量
     * @param out - 向量相加结果
     */
    static add(left: Vector2, right: Vector2, out: Vector2): void;
    /**
     * 将两个向量相减并输出结果至 out。
     * @param left - 左向量
     * @param right - 右向量
     * @param out - 两个二维向量的相减结果
     */
    static subtract(left: Vector2, right: Vector2, out: Vector2): void;
    /**
     * 将两个向量相乘并输出结果至 out。
     * @param left - 左向量
     * @param right - 右向量
     * @param out - 两个二维向量的相乘结果
     */
    static multiply(left: Vector2, right: Vector2, out: Vector2): void;
    /**
     * 将两个二维向量相除并输出结果至 out。
     * @param left - 左向量
     * @param right - 右向量
     * @param out - 两个二维向量的相除结果
     */
    static divide(left: Vector2, right: Vector2, out: Vector2): void;
    /**
     * 计算两个二维向量的点积。
     * @param left - 左向量
     * @param right - 右向量
     * @returns 两个向量的点积
     */
    static dot(left: Vector2, right: Vector2): number;
    /**
     * 计算两个二维向量的距离。
     * @param left - 向量
     * @param right - 向量
     * @returns 两个向量的距离
     */
    static distance(left: Vector2, right: Vector2): number;
    /**
     * 计算两个二维向量的距离的平方。
     * @param left - 向量
     * @param right - 向量
     * @returns 两个向量的距离的平方
     */
    static distanceSquared(left: Vector2, right: Vector2): number;
    /**
     * 判断两个二维向量的值是否相等。
     * @param left - 向量
     * @param right - 向量
     * @returns 两个向量是否相等，是返回 true，否则返回 false
     */
    static equals(left: Vector2, right: Vector2): boolean;
    /**
     * 插值二维向量。
     * @param left - 左向量
     * @param right - 右向量
     * @param t - 插值比例
     * @param out - 插值结果
     */
    static lerp(left: Vector2, right: Vector2, t: number, out: Vector2): void;
    /**
     * 分别取两个二维向量 x、y 的最大值计算新的二维向量。
     * @param left - 向量
     * @param right - 向量
     * @param out - 结果向量
     */
    static max(left: Vector2, right: Vector2, out: Vector2): void;
    /**
     * 分别取两个二维向量 x、y 的最小值计算新的二维向量。
     * @param left - 向量
     * @param right - 向量
     * @param out - 结果向量
     */
    static min(left: Vector2, right: Vector2, out: Vector2): void;
    /**
     * 将向量 left 反转的结果输出到 out。
     * @param left - 向量
     * @param out - 向量反转的结果
     */
    static negate(left: Vector2, out: Vector2): void;
    /**
     * 将向量 left 归一化的结果输出到 out。
     * @param left - 向量
     * @param out - 向量归一化的结果
     */
    static normalize(left: Vector2, out: Vector2): void;
    /**
     * 将向量 left 缩放的结果输出到 out。
     * @param left - 向量
     * @param scale - 缩放因子
     * @param out - 向量缩放的结果
     */
    static scale(left: Vector2, s: number, out: Vector2): void;
    /** 向量的 X 分量。 */
    x: number;
    /** 向量的 Y 分量。 */
    y: number;
    /**
     * 创建一个 Vector2 实例。
     * @param x - 向量的 X 分量，默认值 0
     * @param y - 向量的 Y 分量，默认值 0
     */
    constructor(x?: number, y?: number);
    /**
     * 设置 x, y 的值，并返回当前向量。
     * @param x - 向量的 X 分量
     * @param y - 向量的 Y 分量
     * @returns 当前向量
     */
    setValue(x: number, y: number): Vector2;
    /**
     * 通过数组设置值，并返回当前向量。
     * @param array - 数组
     * @param offset - 数组偏移
     * @returns 当前向量
     */
    setValueByArray(array: ArrayLike<number>, offset?: number): Vector2;
    /**
     * 将当前向量加上给定的向量 right，并返回当前向量。
     * @param right - 给定的向量
     * @returns 当前向量
     */
    add(right: Vector2): Vector2;
    /**
     * 将当前向量减去给定的向量 right，并返回当前向量。
     * @param right - 给定的向量
     * @returns 当前向量
     */
    subtract(right: Vector2): Vector2;
    /**
     * 将当前向量乘以给定的向量 right，并返回当前向量。
     * @param right - 给定的向量
     * @returns 当前向量
     */
    multiply(right: Vector2): Vector2;
    /**
     * 将当前向量除以给定的向量 right，并返回当前向量。
     * @param right - 给定的向量
     * @returns 当前向量
     */
    divide(right: Vector2): Vector2;
    /**
     * 计算一个二维向量的标量长度。
     * @returns 当前向量的标量长度
     */
    length(): number;
    /**
     * 计算一个二维向量的标量长度的平方。
     * @returns 当前向量的标量长度的平方
     */
    lengthSquared(): number;
    /**
     * 向量反转。
     * @returns 当前向量
     */
    negate(): Vector2;
    /**
     * 当前向量归一化，并返回。
     * @returns 当前向量
     */
    normalize(): Vector2;
    /**
     * 向量缩放。
     * @param s - 缩放因子
     * @returns 当前向量
     */
    scale(s: number): Vector2;
    /**
     * 拷贝到数组。
     * @param out - 数组。
     * @param outOffset - 数组偏移。
     */
    toArray(out: number[] | Float32Array | Float64Array, outOffset?: number): void;
    /**
     * 克隆并返回一个新的二维向量对象。
     * @returns 新的二维向量对象
     */
    clone(): Vector2;
    /**
     * 将当前向量值拷贝给目标向量。
     * @param out - 目标向量
     */
    cloneTo(out: Vector2): Vector2;
}
