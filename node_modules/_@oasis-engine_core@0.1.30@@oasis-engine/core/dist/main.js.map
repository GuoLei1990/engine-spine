{"version":3,"file":"main.js","sources":["../src/base/Event.ts","../src/base/EngineObject.ts","../src/base/EventDispatcher.ts","../src/base/Logger.ts","../src/base/Time.ts","../src/base/Util.ts","../src/base/Constant.ts","../src/asset/AssetPromise.ts","../src/asset/ResourceManager.ts","../src/FeatureManager.ts","../src/ComponentsDependencies.ts","../src/DisorderedArray.ts","../src/Component.ts","../src/UpdateFlag.ts","../src/Transform.ts","../src/Entity.ts","../src/Scene.ts","../src/SceneManager.ts","../src/ComponentsManager.ts","../src/Engine.ts","../src/SystemInfo.ts","../src/EngineFeature.ts","../src/asset/AssetObject.ts","../src/SceneVisitor.ts","../src/SceneFeature.ts","../src/Script.ts","../src/RenderableComponent.ts","../src/RenderPipeline/RenderPass.ts","../src/RenderPipeline/RenderContext.ts","../src/RenderPipeline/RenderQueue.ts","../src/RenderPipeline/SeparateSpritePass.ts","../src/RenderPipeline/BasicRenderPipeline.ts","../src/Camera.ts","../src/asset/request.ts","../src/asset/Loader.ts","../src/asset/AssetType.ts","../src/asset/ReferenceObject.ts","../src/lighting/Light.ts","../src/lighting/AmbientLight.ts","../src/lighting/DirectLight.ts","../src/lighting/EnvironmentMapLight.ts","../src/lighting/PointLight.ts","../src/lighting/SpotLight.ts","../src/lighting/LightFeature.ts","../src/bounding-info/util.ts","../src/bounding-info/AABB.ts","../src/bounding-info/OBB.ts","../src/bounding-info/BoudingSphere.ts","../src/mesh/Mesh.ts","../src/mesh/Skin.ts","../src/mesh/MeshRenderer.ts","../src/texture/enums/RenderBufferColorFormat.ts","../src/texture/enums/RenderBufferDepthFormat.ts","../src/texture/enums/TextureCubeFace.ts","../src/texture/enums/TextureFilterMode.ts","../src/texture/enums/TextureFormat.ts","../src/texture/enums/TextureWrapMode.ts","../src/material/type.ts","../src/texture/Texture.ts","../src/texture/Texture2D.ts","../src/mesh/SkinnedMeshRenderer.ts","../src/mesh/LODGroup.ts","../src/graphic/enums/BufferUsage.ts","../src/graphic/enums/VertexElementFormat.ts","../src/graphic/enums/IndexFormat.ts","../src/graphic/BufferUtil.ts","../src/graphic/enums/PrimitiveTopology.ts","../src/graphic/IndexBufferBinding.ts","../src/primitive/Primitive.ts","../src/material/Material.ts","../src/material/ComplexMaterial.ts","../src/shaderlib/pbr/index.ts","../src/shaderlib/ShaderLib.ts","../src/shaderlib/ShaderFactory.ts","../src/graphic/enums/SetDataOptions.ts","../src/graphic/IndexBuffer.ts","../src/graphic/VertexBuffer.ts","../src/graphic/VertexBufferBinding.ts","../src/graphic/VertexElement.ts","../src/material/RenderTechnique.ts","../src/texture/TextureCubeMap.ts","../src/texture/RenderDepthTexture.ts","../src/texture/RenderTarget.ts","../src/texture/RenderColorTexture.ts","../src/2d/SpriteRenderer.ts","../src/animation/AnimationConst.ts","../src/animation/AnimationClip.ts","../src/animation/AnimationLayer.ts","../src/animation/Animation.ts","../src/mobile-material/CommonMaterial.ts","../src/mobile-material/ConstantMaterial.ts","../src/mobile-material/LambertMaterial.ts","../src/mobile-material/BlinnPhongMaterial.ts","../src/mobile-material/TextureMaterial.ts","../src/mobile-material/TransparentMaterial.ts","../src/mobile-material/ShaderMaterial.ts","../src/graphic/DrawGroup.ts","../src/geometry/BufferGeometry.ts","../src/geometry/GeometryRenderer.ts","../src/geometry-shape/GeometryShape.ts","../src/geometry-shape/Cuboid.ts","../src/geometry-shape/Sphere.ts","../src/geometry-shape/Plane.ts","../src/geometry-shape/Cylinder.ts","../src/geometry-shape/CircleGeometry.ts","../src/geometry-shape/ScreenQuadGeometry.ts","../src/geometry-shape/TorusGeometry.ts","../src/geometry-shape/Model.ts","../src/skybox/SkyBoxMaterial.ts","../src/skybox/SkyBox.ts","../src/pbr/PBRMaterial.ts","../src/particle/particle.ts","../src/particle/particle-editor.ts","../src/trail/TrailMaterial.ts","../src/trail/TrailRenderer.ts","../src/rayCast/Ray.ts","../src/rayCast/RaycastHit.ts","../src/collider/ColliderFeature.ts","../src/collider/Collider.ts","../src/collider/ABoxCollider.ts","../src/collider/ASphereCollider.ts","../src/collider/PlaneCollider.ts","../src/rayCast/index.ts","../src/collider/BoxCollider.ts","../src/collider/SphereCollider.ts","../src/collider/index.ts","../src/collision/intersect.ts","../src/collision/CollisionDetection.ts","../src/fog/Fog.ts","../src/fog/EXP2Fog.ts","../src/fog/FogFeature.ts","../src/fog/LinearFog.ts","../src/fog/index.ts","../src/env-probe/Probe.ts","../src/env-probe/PlaneProbe.ts","../src/env-probe/CubeProbe.ts","../src/shadow/LightShadow.ts","../src/shadow/Extension.ts","../src/shadow/ShadowMapMaterial.ts","../src/shadow/ShadowMapPass.ts","../src/shadow/ShadowMaterial.ts","../src/shadow/ShadowPass.ts","../src/shadow/ShadowFeature.ts","../src/shadow/index.ts","../src/index.ts"],"sourcesContent":["import { EventDispatcher } from \"./EventDispatcher\";\n\nexport type Listener = ((e: Event) => any) & { once?: boolean };\n\n/** 事件对象* @class */\nexport class Event {\n  get propagationStopped(): boolean {\n    return this._propagationStopped;\n  }\n\n  get target(): EventDispatcher {\n    return this._target;\n  }\n\n  set target(t) {\n    this._target = t;\n  }\n\n  get timeStamp(): number {\n    return this._timeStamp;\n  }\n\n  get currentTarget(): EventDispatcher {\n    return this._currentTarget;\n  }\n\n  set currentTarget(t) {\n    this._currentTarget = t;\n  }\n\n  get bubbles(): boolean {\n    return this._bubbles;\n  }\n\n  get type(): string | number {\n    return this._type;\n  }\n\n  public data: any;\n\n  private _timeStamp: number;\n\n  private _target: EventDispatcher;\n\n  private _currentTarget: any;\n\n  private _bubbles: boolean;\n\n  private _propagationStopped: boolean;\n\n  private _type: string | number;\n\n  constructor(type: string | number, target: EventDispatcher = null, data: any = {}, bubbles: boolean = true) {\n    this._timeStamp = new Date().getTime();\n    this._target = target;\n    this.data = data;\n    this._currentTarget = null;\n    this._bubbles = bubbles;\n    this._propagationStopped = false;\n    this._type = type;\n  }\n\n  public stopPropagation(): void {\n    this._propagationStopped = true;\n  }\n}\n","/**\n * 引擎对象。\n */\nexport abstract class EngineObject {\n  private static _instanceIdCounter = 0;\n\n  readonly instanceId: number = ++EngineObject._instanceIdCounter;\n}\n","import { Listener, Event } from \"./Event\";\nimport { EngineObject } from \"./EngineObject\";\n\n/**\n * 事件派发管理，可作为基类继承\n * @class\n */\nexport class EventDispatcher extends EngineObject {\n  private _listeners: { [k: string]: Listener[] };\n\n  constructor() {\n    super();\n    this._listeners = {};\n  }\n\n  /**\n   * 添加对指定事件的监听\n   * @param {string} type\n   * @param {function} listener\n   */\n  public addEventListener(type: string, listener: Listener): EventDispatcher {\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      listeners[type] = [];\n    }\n\n    if (listeners[type].indexOf(listener) === -1) {\n      listeners[type].push(listener);\n    }\n\n    return this;\n  }\n\n  /**\n   * 指定事件发生时，只回调一次\n   * @param {string} type\n   * @param {function} listener\n   */\n  public once(type: string, listener: Listener): EventDispatcher {\n    listener.once = true;\n    this.addEventListener(type, listener);\n\n    return this;\n  }\n\n  /**\n   * 移除对指定事件的监听\n   * @param {string | number} type\n   * @param {function} listener\n   */\n  public removeEventListener(type: string | number, listener: Listener): EventDispatcher {\n    const listeners = this._listeners;\n\n    if (arguments.length === 0) {\n      this._listeners = {};\n      return this;\n    }\n\n    if (arguments.length === 1) {\n      listeners[type] = [];\n      return this;\n    }\n\n    if (arguments.length === 2) {\n      if (listeners[type]) {\n        const index = listeners[type].indexOf(listener);\n        listeners[type].splice(index, 1);\n      }\n      return this;\n    }\n\n    return this;\n  }\n\n  /**\n   * 移除所有事件的监听\n   * @param {string} type\n   * @param {function} listener\n   */\n  public removeAllEventListeners(): void {\n    this._listeners = {};\n  }\n\n  public hasEvent(type: string | number, listener?: Listener): boolean {\n    const listeners = this._listeners;\n\n    if (arguments.length === 1 && listeners[type] && listeners[type].length !== 0) {\n      return true;\n    }\n\n    if (listeners[type] && listeners[type].indexOf(listener) !== -1) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * 触发事件\n   * @param {Event} event\n   */\n  public trigger(event: Event): EventDispatcher {\n    const listeners = this._listeners;\n    const listenersArray = listeners[event.type];\n    event.target = this;\n    if (listenersArray) {\n      // copy listeners into copied array\n      const copiedListeners = listenersArray.slice();\n\n      // then loop copied array instead of original listeners\n      for (let i = 0, l = copiedListeners.length; i !== l; ++i) {\n        const listener: Listener = copiedListeners[i];\n        listener.call(this, event);\n\n        if (listener.once) {\n          // remove this listener once called\n          this.removeEventListener(event.type, listener);\n        }\n      }\n    }\n\n    if (event.bubbles) {\n      const parent = (this as any).parent;\n      if (parent && !event.propagationStopped) {\n        parent.trigger(event);\n      }\n    }\n\n    return this;\n  }\n}\n\n(EventDispatcher.prototype as any).on = EventDispatcher.prototype.addEventListener;\n(EventDispatcher.prototype as any).off = EventDispatcher.prototype.removeEventListener;\n","/**\n * console log的简单封装，默认为关闭状态，需要调用Logger.enable()来开启\n * @class\n * @private\n */\n/* tslint:disable */\nconst noop = (message?: any, ...optionalParams: any[]) => {};\nconst debug = console.log.bind(console);\nconst info = console.info.bind(console);\nconst warn = console.warn.bind(console);\nconst error = console.error.bind(console);\n\nexport const Logger = {\n  debug: noop,\n  info: noop,\n  warn: noop,\n  error: noop,\n  isEnabled: false,\n\n  /** 开启Log */\n  enable() {\n    this.debug = debug;\n    this.info = info;\n    this.warn = warn;\n    this.error = error;\n    this.isEnabled = true;\n  },\n\n  /** 关闭Log */\n  disable() {\n    this.debug = noop;\n    this.info = noop;\n    this.warn = noop;\n    this.error = noop;\n    this.isEnabled = false;\n  }\n};\n","/**\n * 计算每帧时间的工具类\n * @class\n */\nexport class Time {\n  private _clock: { now: () => number };\n\n  private _timeScale: number;\n\n  private _deltaTime: number;\n\n  private _startTime: number;\n\n  private _lastTickTime: number;\n  /**\n   * 初始化内部数据\n   * @constructor\n   */\n  constructor() {\n    // 优先使用 performance 进行计时\n    this._clock = performance ? performance : Date;\n\n    this._timeScale = 1.0;\n    this._deltaTime = 0.0001;\n\n    const now = this._clock.now();\n    this._startTime = now;\n    this._lastTickTime = now;\n  }\n\n  /**\n   * 当前时间\n   * @readonly\n   */\n  get nowTime(): number {\n    return this._clock.now();\n  }\n\n  /**\n   * 两次 tick 之间的时间\n   * @readonly\n   */\n  get deltaTime(): number {\n    return this._deltaTime;\n  }\n\n  /**\n   * Delta Time 的缩放值\n   */\n  get timeScale(): number {\n    return this._timeScale;\n  }\n  set timeScale(s) {\n    this._timeScale = s;\n  }\n\n  /**\n   * 未经缩放的 Delta Time 数值\n   * @readonly\n   */\n  get unscaledDeltaTime(): number {\n    return this._deltaTime / this._timeScale;\n  }\n\n  /**\n   * 时钟初始化之后，经历的时间\n   */\n  get timeSinceStartup(): number {\n    return this.nowTime - this._startTime;\n  }\n\n  /**\n   * 每帧调用，更新 Delta Time 等内部数据\n   */\n  public tick(): void {\n    const now = this.nowTime;\n    this._deltaTime = (now - this._lastTickTime) * this._timeScale;\n    this._lastTickTime = now;\n  }\n}\n","export const Util = {\n  isArray:\n    \"isArray\" in Array\n      ? Array.isArray\n      : (value: any): boolean => {\n          return toString.call(value) === \"[object Array]\";\n        },\n  isArrayLike(x: any): boolean {\n    return !!x && typeof x.length === \"number\" && typeof x !== \"function\";\n  },\n  clone<T>(obj: T): T {\n    if (typeof obj !== \"object\" || obj === null) {\n      return obj;\n    }\n    let rst;\n    if (Util.isArrayLike(obj)) {\n      rst = (obj as any).slice();\n      for (let i = 0, l = (obj as any).length; i < l; i++) {\n        rst[i] = Util.clone(obj[i]);\n      }\n    } else {\n      rst = {};\n      for (const k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          rst[k] = Util.clone(obj[k]);\n        }\n      }\n    }\n\n    return rst;\n  },\n  /**\n   * 下载Blob对象\n   * @param {Blob} blob - 浏览器 blob 对象\n   * @param {string} fileName - 下载文件名字\n   */\n  downloadBlob(blob: Blob, fileName: string = \"\") {\n    if (navigator && navigator.msSaveBlob) {\n      navigator.msSaveBlob(blob, fileName);\n      return;\n    }\n\n    let url = window.URL.createObjectURL(blob);\n    let a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style.display = \"none\";\n    a.href = url;\n    a.download = fileName;\n    a.addEventListener(\"click\", () => {\n      if (a.parentElement) {\n        a.parentElement.removeChild(a);\n      }\n    });\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n};\n\nexport const isArrayLike = <T>(x: any): x is ArrayLike<T> =>\n  x && typeof x.length === \"number\" && typeof x !== \"function\";\n\nconst b = (x) => {\n  return x && typeof x.length === \"number\" && typeof x !== \"function\";\n};\n","/**\n * 资源的类型，主要用来处理资源对象关联的GL对象的回收\n */\nexport enum InternalAssetType {\n  /** 属于当前场景的，场景切换时，GL资源会被自动释放 */\n  Scene = 1,\n  /** Cache自动处理，在一段时间内没有用到，则GL资源会被释放 */\n  Cache = 2\n}\n\n/**\n * Camera 的清空模式枚举\n * @readonly\n */\nexport enum ClearMode {\n  /** 不执行任何清空背景的操作 */\n  DONT_CLEAR = 0,\n  /** 清空背景颜色和深度缓冲 */\n  SOLID_COLOR = 1,\n  /** 只清空深度缓冲 */\n  DEPTH_ONLY = 2,\n  /** 只清空颜色 */\n  COLOR_ONLY = 3,\n  /** 只清空模版缓冲*/\n  STENCIL_ONLY = 4,\n  /** 清空所有缓冲区 */\n  ALL_CLEAR = 5\n}\n\n/**\n * 材质类型枚举\n * @readonly\n */\nexport enum MaterialType {\n  /** 不透明 */\n  OPAQUE = 1000,\n  /** 透明或半透明 */\n  TRANSPARENT = 2000\n}\n\n/**\n * 可以开启或者关闭的渲染状态\n * @readonly\n */\nexport enum RenderState {\n  /** 片元的颜色融合计算 */\n  BLEND = 3042,\n  /** 多边形正反面剔除 */\n  CULL_FACE = 2884,\n  /** 深度测试 */\n  DEPTH_TEST = 2929,\n  /** Alpha通道测试 */\n  ALPHA_TEST = 3008,\n  /** 多边形片段的深度值偏移 */\n  POLYGON_OFFSET_FILL = 32823,\n  /** 通过alpha值决定的临时覆盖值计算。 */\n  SAMPLE_ALPHA_TO_COVERAGE = 32926,\n  /** 剪裁测试，即丢弃在剪裁矩形范围外的片段。 */\n  SCISSOR_TEST = 3089\n}\n\n/**\n * 面朝向枚举\n * @readonly\n */\nexport enum FrontFace {\n  /** 顺时针 */\n  CW = 0x0900,\n  /** 逆时针 */\n  CCW = 0x0901\n}\n\n/**\n * 面剔除枚举\n * @readonly\n */\nexport enum CullFace {\n  /** 正面 */\n  FRONT = 1028,\n  /** 反面 */\n  BACK = 1029,\n  /** 正面和反面 */\n  FRONT_AND_BACK = 1032\n}\n\n/**\n * 显示面枚举\n * @readonly\n * */\nexport enum Side {\n  /** 背面剔除，只显示正面 */\n  FRONT,\n  /** 正面剔除，只显示背面 */\n  BACK,\n  /** 光珊化前剔除，不显示任何面 */\n  NONE,\n  /** 关闭剔除，显示正反面 */\n  DOUBLE\n}\n\n/**\n * 比较函数枚举\n * @readonly\n */\nexport enum CompFunc {\n  /** 永不通过 */\n  NEVER = 0x0200,\n  /** 小于参考值时通过 */\n  LESS = 0x0201,\n  /** 等于参考值时通过 */\n  EQUAL = 0x0202,\n  /** 小于等于参考值时通过 */\n  LEQUAL = 0x0203,\n  /** 大于参考值时通过 */\n  GREATER = 0x0204,\n  /** 不等于参考值时通过 */\n  NOTEQUAL = 0x0205,\n  /** 大于等于参考值时通过 */\n  GEQUAL = 0x0206,\n  /** 总是通过 */\n  ALWAYS = 0x0207\n}\n\n/**\n * 纹理过滤枚举\n * @readonly\n */\nexport enum TextureFilter {\n  NEAREST = 9728, // gl.NEAREST\n  LINEAR = 9729, // gl.LINEAR\n  NEAREST_MIPMAP_NEAREST = 9984, // gl.NEAREST_MIPMAP_NEAREST\n  LINEAR_MIPMAP_NEAREST = 9985, // gl.LINEAR_MIPMAP_NEAREST\n  NEAREST_MIPMAP_LINEAR = 9986, // gl.NEAREST_MIPMAP_LINEAR\n  LINEAR_MIPMAP_LINEAR = 9987 // gl.LINEAR_MIPMAP_LINEAR\n}\n\n/**\n * 数据类型枚举\n */\nexport enum DataType {\n  /** 浮点数 */\n  FLOAT = 5126, // gl.FLOAT\n  /** 浮点型二维向量 */\n  FLOAT_VEC2 = 35664, // gl.FLOAT_VEC2\n  /** 浮点型三维向量 */\n  FLOAT_VEC3 = 35665, // gl.FLOAT_VEC3\n  /** 浮点型四维向量 */\n  FLOAT_VEC4 = 35666, // gl.FLOAT_VEC4\n\n  /** 整数 */\n  INT = 5124, // gl.INT\n  /** 整型二维向量 */\n  INT_VEC2 = 35667, // gl.INT_VEC2\n  /** 整型三维向量 */\n  INT_VEC3 = 35668, // gl.INT_VEC3\n  /** 整型四维向量 */\n  INT_VEC4 = 35669, // gl.INT_VEC4\n\n  /** 布尔类型 */\n  BOOL = 35670, // gl.BOOL\n  /** 布尔型二维向量 */\n  BOOL_VEC2 = 35671, // gl.BOOL_VEC2\n  /** 布尔型三维向量 */\n  BOOL_VEC3 = 35672, // gl.BOOL_VEC3\n  /** 布尔型四维向量 */\n  BOOL_VEC4 = 35673, // gl.BOOL_VEC4\n\n  /** 二阶矩阵 */\n  FLOAT_MAT2 = 35674, // gl.FLOAT_MAT2\n  /** 三阶矩阵 */\n  FLOAT_MAT3 = 35675, // gl.FLOAT_MAT3\n  /** 四阶矩阵 */\n  FLOAT_MAT4 = 35676, // gl.FLOAT_MAT4\n\n  /** 浮点数组 */\n  FLOAT_ARRAY = 35677, // gl.FLOAT_ARRAY\n  /** 浮点型二维向量数组 */\n  FLOAT_VEC2_ARRAY = 100000,\n  /** 浮点型三维向量数组 */\n  FLOAT_VEC3_ARRAY,\n  /** 浮点型四维向量数组 */\n  FLOAT_VEC4_ARRAY,\n\n  /** 整数数组 */\n  INT_ARRAY,\n  /** 整型二维向量数组 */\n  INT_VEC2_ARRAY,\n  /** 整型三维向量数组 */\n  INT_VEC3_ARRAY,\n  /** 整型四维向量数组 */\n  INT_VEC4_ARRAY,\n\n  /** 二阶矩阵数组 */\n  FLOAT_MAT2_ARRAY,\n  /** 三阶矩阵数组 */\n  FLOAT_MAT3_ARRAY,\n  /** 四阶矩阵数组 */\n  FLOAT_MAT4_ARRAY,\n\n  /** 2D 纹理采样数组 */\n  SAMPLER_2D_ARRAY,\n  /** Cube Map 纹理采样数组 */\n  SAMPLER_CUBE_ARRAY,\n\n  /** 2D 纹理采样 */\n  SAMPLER_2D = 35678, // gl.SAMPLER_2D\n  /** Cube Map 纹理采样 */\n  SAMPLER_CUBE = 35680, // gl.SAMPLER_CUBE\n\n  /** 单字节类型 */\n  BYTE = 5120, // gl.BYTE\n  /** 无符号的字节类型 */\n  UNSIGNED_BYTE = 5121, // gl.UNSIGNED_BYTE\n  /** Short 类型 */\n  SHORT = 5122, // gl.SHORT\n  /** 无符号的 Short 在线 */\n  UNSIGNED_SHORT = 5123, // gl.UNSIGNED_SHORT\n  /** 无符号整数 */\n  UNSIGNED_INT = 5125 // gl.UNSIGNED_INT\n}\n\n/**\n * glTF 1.0所支持的Uniform Semantic以及Oasis3D的扩展\n * @readonly\n */\nexport enum UniformSemantic {\n  // -- GLTF\n  /** Local 矩阵 */\n  LOCAL = 1,\n  /** Model 矩阵 */\n  MODEL = 2,\n  /** View 矩阵 */\n  VIEW = 3,\n  /** Project 矩阵 */\n  PROJECTION = 4,\n  /** Model View 矩阵 */\n  MODELVIEW = 5,\n  /** View Projection 矩阵 */\n  VIEWPROJECTION = 21,\n  /** Model View Project 矩阵 */\n  MODELVIEWPROJECTION = 6,\n  /** Model 矩阵的逆矩阵 */\n  MODELINVERSE = 7,\n  /** View 矩阵的逆矩阵 */\n  VIEWINVERSE = 8,\n  /** Projection 矩阵的逆矩阵 */\n  PROJECTIONINVERSE = 9,\n  /** Model View 矩阵的逆矩阵 */\n  MODELVIEWINVERSE = 10,\n  /** Model View Project 矩阵的逆矩阵 */\n  MODELVIEWPROJECTIONINVERSE = 11,\n  /** Model 矩阵的逆转置矩阵，可用来变换 Normal */\n  MODELINVERSETRANSPOSE = 12,\n  /** Model View 矩阵的逆转置矩阵 */\n  MODELVIEWINVERSETRANSPOSE = 13,\n  /** Viewport 参数 */\n  VIEWPORT = 14,\n  /** 骨骼矩阵数组 */\n  JOINTMATRIX = 15,\n  /** MorphTarget 权重 */\n  MORPHWEIGHTS = 16,\n\n  // --\n  /** 当前的摄像机的位置 */\n  EYEPOS = 17,\n  /** 当前程序运行的时长 */\n  TIME = 18,\n  /** 骨骼矩阵纹理 */\n  JOINTTEXTURE = 19,\n  /** joint 个数 */\n  JOINTCOUNT = 20\n}\n\n/**\n * 颜色混合方式枚举\n */\nexport enum BlendFunc {\n  /** 所有通道乘以0 */\n  ZERO = 0,\n  /** 所有通道乘以1 */\n  ONE = 1,\n  /** 所有通道乘以 Source Color */\n  SRC_COLOR = 768,\n  /** 所有通道乘以 1 减去 Source Color */\n  ONE_MINUS_SRC_COLOR = 769,\n  /** 所有通道乘以 Source Alpha */\n  SRC_ALPHA = 770,\n  /** 所有通道乘以 1 减去 Source Alpha */\n  ONE_MINUS_SRC_ALPHA = 771,\n  /** 所有通道乘以 destination Alpha */\n  DST_ALPHA = 772,\n  /** 所有通道乘以 1 减去 destination Alpha */\n  ONE_MINUS_DST_ALPHA = 773,\n  /** 所有通道乘以 1 减去 destination Color */\n  DST_COLOR = 774,\n  /** 所有通道乘以 1 减去 destination Color */\n  ONE_MINUS_DST_COLOR = 775,\n  /**\n   * Multiplies the RGB colors by the smaller of either the source alpha value or the value of 1 minus the destination alpha value. The alpha value is multiplied by 1.\n   */\n  SRC_ALPHA_SATURATE = 776,\n  /**\n   * 所有通道乘以一个颜色常量\n   */\n  enumANT_COLOR = 32769,\n  /** 所有通道乘以 1 减去颜色常量 */\n  ONE_MINUS_enumANT_COLOR = 32770,\n  /**\n   * 所有通道乘以一个Alpha常量\n   */\n  enumANT_ALPHA = 32771,\n  /**\n   * 所有通道乘以一减去Alpha常量\n   */\n  ONE_MINUS_enumANT_ALPHA = 32772\n}\n\n/**\n * RenderPass 的可用 MASK\n * @readonly\n * @private\n */\nexport enum MaskList {\n  MASK1 = 0b1,\n  MASK2 = 0b10,\n  MASK3 = 0b100,\n  MASK4 = 0b1000,\n  MASK5 = 0b10000,\n  MASK6 = 0b100000,\n  MASK7 = 0b1000000,\n  MASK8 = 0b10000000,\n  MASK9 = 0b100000000,\n  MASK10 = 0b1000000000,\n  MASK11 = 0b10000000000,\n  MASK12 = 0b100000000000,\n  MASK13 = 0b1000000000000,\n  MASK14 = 0b10000000000000,\n  MASK15 = 0b100000000000000,\n  MASK16 = 0b1000000000000000,\n  MASK17 = 0b10000000000000000,\n  MASK18 = 0b100000000000000000,\n  MASK19 = 0b1000000000000000000,\n  MASK20 = 0b10000000000000000000,\n  // MASK21=        0b100000000000000000000,  // 预留\n  // MASK22=        0b1000000000000000000000,\n  // MASK23=        0b10000000000000000000000,\n  // MASK24=        0b100000000000000000000000,\n  // MASK25=        0b1000000000000000000000000,\n  // MASK26=        0b10000000000000000000000000,\n  // MASK27=        0b100000000000000000000000000,\n  EVERYTHING = 0b1111111111111111111111111111,\n  SHADOW = 0b10000000000000000000000000000,\n  SHADOW_MAP = 0b100000000000000000000000000000\n}\n\n/**\n * 探针渲染速率\n * */\nexport enum RefreshRate {\n  /** 只渲染一次 */\n  ONCE = 1,\n  /** 每帧渲染 */\n  EVERYFRAME = 2\n}\n\n/**\n * 相交信息\n * */\nexport enum IntersectInfo {\n  /** 分离 */\n  EXCLUDE,\n  /** 交叉 */\n  INTERSECT,\n  /** 包含 */\n  INCLUDE\n}\n\n/**\n * 包围物类型\n * */\nexport enum BoundingType {\n  /** 轴对齐包围盒 */\n  AABB,\n  /** 方向包围盒 */\n  OBB,\n  /** 包围球 */\n  SPHERE\n}\n\n/**\n * GL 层能力\n * 有些能力可以靠 extension 来抹平，有些能力必须支持 WebGL 2.0\n * */\nexport enum GLCapabilityType {\n  standardDerivatives = \"OES_standard_derivatives\",\n  shaderTextureLod = \"EXT_shader_texture_lod\",\n  elementIndexUint = \"OES_element_index_uint\",\n  depthTexture = \"WEBGL_depth_texture\",\n  drawBuffers = \"WEBGL_draw_buffers\",\n  vertexArrayObject = \"OES_vertex_array_object\",\n  instancedArrays = \"ANGLE_instanced_arrays\",\n  multipleSample = \"multipleSampleOnlySupportedInWebGL2\",\n  textureFloat = \"OES_texture_float\",\n  textureFloatLinear = \"OES_texture_float_linear\",\n  textureHalfFloat = \"OES_texture_half_float\",\n  textureHalfFloatLinear = \"OES_texture_half_float_linear\",\n  WEBGL_colorBufferFloat = \"WEBGL_color_buffer_float\",\n  colorBufferFloat = \"EXT_color_buffer_float\",\n  colorBufferHalfFloat = \"EXT_color_buffer_half_float\",\n  textureFilterAnisotropic = \"EXT_texture_filter_anisotropic\",\n\n  astc = \"WEBGL_compressed_texture_astc\",\n  astc_webkit = \"WEBKIT_WEBGL_compressed_texture_astc\",\n  etc = \"WEBGL_compressed_texture_etc\",\n  etc_webkit = \"WEBKIT_WEBGL_compressed_texture_etc\",\n  etc1 = \"WEBGL_compressed_texture_etc1\",\n  etc1_webkit = \"WEBKIT_WEBGL_compressed_texture_etc1\",\n  pvrtc = \"WEBGL_compressed_texture_pvrtc\",\n  pvrtc_webkit = \"WEBKIT_WEBGL_compressed_texture_pvrtc\",\n  s3tc = \"WEBGL_compressed_texture_s3tc\",\n  s3tc_webkit = \"WEBKIT_WEBGL_compressed_texture_s3tc\"\n  // atc = \"WEBGL_compressed_texture_atc\",\n  // s3tc_srgb = \"WEBGL_compressed_texture_s3tc_srgb\"\n}\n\n/**\n * OIT 模式\n * */\nexport enum OITMode {\n  /** 加权平均算法，性能较高 */\n  WEIGHTED_AVERAGE,\n  /** 深度剥离算法，性能较低，但精确度高 */\n  DEPTH_PEEL,\n  /** 双层深度剥离，性能更好，强依赖 MRT */\n  DUAL_DEPTH_PEEL\n}\n\nexport type TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray\n  | Float32Array\n  | Float64Array;\n","type PromiseNotifier = (progress: number) => void;\n\n/**\n * 资源 Promise 状态\n */\nexport enum AssetPromiseStatus {\n  /** 成功。*/\n  Success,\n  /** 请求中。*/\n  Pending,\n  /** 失败。*/\n  Failed\n}\n/**\n * 资源加载的 Promise。\n */\nexport class AssetPromise<T> extends Promise<T> {\n  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>,\n      T9 | PromiseLike<T9>,\n      T10 | PromiseLike<T10>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>,\n      T9 | PromiseLike<T9>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7, T8>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7]>;\n\n  static all<T1, T2, T3, T4, T5, T6>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6]>;\n\n  static all<T1, T2, T3, T4, T5>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5]>;\n\n  static all<T1, T2, T3, T4>(\n    values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>]\n  ): AssetPromise<[T1, T2, T3, T4]>;\n\n  static all<T1, T2, T3>(\n    values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]\n  ): AssetPromise<[T1, T2, T3]>;\n\n  static all<T1, T2>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): AssetPromise<[T1, T2]>;\n\n  static all<T>(values: readonly (T | PromiseLike<T>)[]): AssetPromise<T[]>;\n\n  /**\n   * 通过提供的资源 Promise 集合返回一个新的资源 Promise。\n   * 当提供集合中所有的 Promise 完成时会触发新资源 Promise 的 resolved。\n   * @param - 资源 Promise 集合\n   * @returns 资源 Promise\n   */\n  static all<T>(promises: T | PromiseLike<T>[]): AssetPromise<T[]> {\n    return new AssetPromise((resolve, reject, setProgress) => {\n      if (!Array.isArray(promises)) {\n        return resolve([promises]);\n      }\n\n      let completed = 0;\n      let total = promises.length;\n      let results = new Array<T>(total);\n\n      promises.forEach((value, index) => {\n        Promise.resolve(value)\n          .then((result) => {\n            results[index] = result;\n\n            completed += 1;\n            setProgress(completed / total);\n\n            if (completed == total) {\n              resolve(results);\n            }\n          })\n          .catch((err) => reject(err));\n      });\n    });\n  }\n\n  private _status: AssetPromiseStatus;\n  private _progress: number;\n  private _reject: (reason?: any) => void;\n  private _listeners: Set<PromiseNotifier>;\n\n  /**\n   * 当前 promise 状态。\n   */\n  get status(): AssetPromiseStatus {\n    return this._status;\n  }\n\n  /**\n   * 加载进度。\n   */\n  get progress(): number {\n    return this._progress;\n  }\n\n  /**\n   * 进度回调。\n   * @param callback - 进度回调\n   * @returns 资源 Promise\n   */\n  onProgress(callback: (progress?: number) => any): AssetPromise<T> {\n    this._listeners.add(callback);\n    return this;\n  }\n\n  /**\n   * 取消 Promise 请求。\n   * @returns 资源 Promise\n   */\n  cancel(): AssetPromise<T> {\n    if (this._status !== AssetPromiseStatus.Pending) {\n      return this;\n    }\n    this._reject(\"Promise Canceled\");\n    return this;\n  }\n\n  /**\n   * 创建一个资源加载的 Promise。\n   * @param executor - A callback used to initialize the promise. This callback is passed two arguments:\n   * a resolve callback used to resolve the promise with a value or the result of another promise,\n   * and a reject callback used to reject the promise with a provided reason or error.\n   * and a setProgress callback used to set promise progress with a percent.\n   */\n  constructor(\n    executor: (\n      resolve: (value?: T | PromiseLike<T>) => void,\n      reject?: (reason?: any) => void,\n      setProgress?: PromiseNotifier\n    ) => void\n  ) {\n    let newReject: (reason?: any) => void;\n\n    const setProgress = (progress: number) => {\n      if (progress <= this._progress) {\n        return;\n      }\n      this._progress = progress;\n\n      for (const listener of this._listeners) {\n        listener(progress);\n      }\n    };\n\n    super((resolve, reject) => {\n      newReject = (reason?: any) => {\n        // 加入到微任务中，避免直接调用找不到 this 报错\n        Promise.resolve().then(() => {\n          this._status = AssetPromiseStatus.Failed;\n          reject(reason);\n        });\n      };\n      executor(\n        (value: T) => {\n          // 加入到微任务中，避免直接调用找不到 this 报错\n          Promise.resolve().then(() => {\n            setProgress(1);\n            this._status = AssetPromiseStatus.Success;\n            resolve(value);\n          });\n        },\n        newReject,\n        (progress: number) => {\n          // 加入到微任务中，避免直接调用找不到 this 报错\n          Promise.resolve().then(() => {\n            setProgress(progress);\n          });\n        }\n      );\n    });\n    this._reject = newReject;\n    this._listeners = new Set();\n    this._progress = 0;\n    this._status = AssetPromiseStatus.Pending;\n  }\n}\n","import { AssetPromise } from \"./AssetPromise\";\nimport { LoadItem } from \"./LoadItem\";\nimport { ReferenceObject } from \"./ReferenceObject\";\nimport { Engine } from \"..\";\nimport { Loader } from \"./Loader\";\nimport { AssetType } from \"./AssetType\";\n\n/**\n * 资源管理员。\n */\nexport class ResourceManager {\n  /** loader 集合。*/\n  private static _loaders: { [key: number]: Loader<any> } = {};\n  private static _extTypeMapping: { [key: string]: AssetType } = {};\n\n  /**\n   * @internal\n   */\n  static _addLoader(type: AssetType, loader: Loader<any>, extnames: string[]) {\n    this._loaders[type] = loader;\n    for (let i = 0, len = extnames.length; i < len; i++) {\n      this._extTypeMapping[extnames[i]] = type;\n    }\n  }\n\n  private static _getTypeByUrl(url: string): AssetType {\n    return this._extTypeMapping[url.substring(url.lastIndexOf(\".\") + 1)];\n  }\n\n  /** 加载资产失败后的重试次数。*/\n  retryCount: number = 1;\n  /** 加载资产失败后的重试延迟时间，单位是毫秒(ms)。*/\n  retryInterval: number = 0;\n  /** 加载资产默认的超时时间，单位是毫秒(ms)。*/\n  timeout: number = 20000;\n\n  /** 资产路径池,key为资产ID，值为资产路径，通过路径加载的资源均放入该池中，用于资源文件管理。*/\n  private _assetPool: { [key: number]: string } = Object.create(null);\n  /** 资产池,key为资产路径，值为资产，通过路径加载的资源均放入该池中，用于资产文件管理。*/\n  private _assetUrlPool: { [key: string]: Object } = Object.create(null);\n  /** 引用计数对象池,key为对象ID，引用计数的对象均放入该池中。*/\n  private _referenceObjectPool: { [key: number]: ReferenceObject } = Object.create(null);\n  /** 加载中的资源。*/\n  private _loadingPromises: { [url: string]: AssetPromise<any> } = {};\n\n  /**\n   * 创建资源管理员。\n   * @param engine - 当前资源管理所属的 engine\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * 通过路径异步加载资源。\n   * @param path - 路径\n   * @returns 资源 Promise\n   */\n  load<T>(path: string): AssetPromise<T>;\n\n  /**\n   * 通过路径集合异步加载资源集合。\n   * @param path - 路径集合\n   * @returns 资源 Promise\n   */\n  load(pathes: string[]): AssetPromise<Object[]>;\n\n  /**\n   * 通过加载信息集合异步加载资源集合。\n   * @param assetItem - 资源加载项\n   * @returns 资源 Promise\n   */\n  load<T>(assetItem: LoadItem): AssetPromise<T>;\n\n  /**\n   * 通过加载信息集合异步加载资源集合。\n   * @param assetItems - 资源加载项集合\n   * @returns 资源 Promise\n   */\n  load(assetItems: LoadItem[]): AssetPromise<Object[]>;\n\n  /**\n   * @internal\n   */\n  load<T>(assetInfo: string | LoadItem | (LoadItem | string)[]): AssetPromise<T | Object[]> {\n    // single item\n    if (!Array.isArray(assetInfo)) {\n      return this._loadSingleItem(assetInfo);\n    }\n    // multi items\n    const promises = assetInfo.map((item) => this._loadSingleItem<T>(item));\n    return AssetPromise.all(promises);\n  }\n\n  /**\n   * 取消所有未完成加载的资产。\n   */\n  cancelNotLoaded(): void;\n\n  /**\n   * 取消 url 未完成加载的资产。\n   * @param url - 资源链接\n   */\n  cancelNotLoaded(url: string): void;\n\n  /**\n   * 取消加载 urls 中未完成加载的资产。\n   * @param urls - 资源链接数组\n   */\n  cancelNotLoaded(urls: string[]): void;\n\n  /**\n   * @internal\n   */\n  cancelNotLoaded(url?: string | string[]): void {\n    if (!url) {\n      Object.values(this._loadingPromises).forEach((promise) => {\n        promise.cancel();\n      });\n    } else if (typeof url === \"string\") {\n      this._loadingPromises[url]?.cancel();\n    } else {\n      url.forEach((p) => {\n        this._loadingPromises[p]?.cancel();\n      });\n    }\n  }\n\n  /**\n   * 垃圾回收，会释放受引用计数管理的资源对象。\n   * @remarks 释放原则为没有被组件实例引用，包含直接引用和间接引用。\n   */\n  gc(): void {\n    const objects = Object.values(this._referenceObjectPool);\n    objects.sort((refObj1, refObj2) => refObj1.gcPriority - refObj2.gcPriority);\n    for (let i = 0, len = objects.length; i < len; i++) {\n      if (!objects[i].isGCIgnored) {\n        objects[i].destroy();\n      }\n    }\n  }\n\n  /**\n   * 根据 instanceId 获取资源路径\n   * @param instanceId 对象 id\n   * @returns 资源路径\n   */\n  getAssetPath(instanceId: number): string {\n    return this._assetPool[instanceId];\n  }\n\n  /**\n   * @internal\n   */\n  _addAsset(path: string, asset: ReferenceObject): void {\n    this._assetPool[asset.instanceId] = path;\n    this._assetUrlPool[path] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteAsset(asset: ReferenceObject): void {\n    const id = asset.instanceId;\n    const path = this._assetPool[id];\n    if (path) {\n      delete this._assetPool[id];\n      delete this._assetUrlPool[path];\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addReferenceObject(id: number, asset: ReferenceObject): void {\n    this._referenceObjectPool[id] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteReferenceObject(id: number): void {\n    delete this._referenceObjectPool[id];\n  }\n\n  private _assignDefaultOptions(assetInfo: LoadItem): LoadItem | never {\n    assetInfo.type = assetInfo.type ?? ResourceManager._getTypeByUrl(assetInfo.url);\n    if (assetInfo.type === undefined) {\n      throw `asset type should be specified: ${assetInfo.url}`;\n    }\n    assetInfo.retryCount = assetInfo.retryCount ?? this.retryCount;\n    assetInfo.timeout = assetInfo.timeout ?? this.timeout;\n    assetInfo.retryInterval = assetInfo.retryInterval ?? this.retryInterval;\n    assetInfo.url = assetInfo.url ?? assetInfo.urls.join(\",\");\n    return assetInfo;\n  }\n\n  private _loadSingleItem<T>(item: LoadItem | string): AssetPromise<T> {\n    const info = this._assignDefaultOptions(typeof item === \"string\" ? { url: item } : item);\n    const url = info.url;\n    // has cache\n    if (this._assetUrlPool[url]) {\n      return new AssetPromise((resolve) => {\n        resolve(this._assetUrlPool[url] as T);\n      });\n    }\n    // loading\n    if (this._loadingPromises[url]) {\n      return this._loadingPromises[info.url];\n    }\n    const loader = ResourceManager._loaders[info.type];\n    const promise = loader.load(info, this);\n    this._loadingPromises[url] = promise;\n    promise\n      .then((res) => {\n        if (loader.useCache) this._addAsset(url, res);\n        delete this._loadingPromises[url];\n      })\n      .catch(() => {\n        // then 会产生一个新的 promise，若是报错没有 catch 会导致 uncaught error\n      });\n    return promise;\n  }\n}\n\n/**\n * 声明 resourceLoader 的装饰器。\n * @param assetType - 资源类型\n * @param extnames - 扩展名\n */\nexport function resourceLoader(assetType: AssetType, extnames: string[], useCache: boolean = true) {\n  return <T extends Loader<any>>(Target: { new (useCache: boolean): T }) => {\n    const loader = new Target(useCache);\n    ResourceManager._addLoader(assetType, loader, extnames);\n  };\n}\n","import { SceneFeature } from \"./SceneFeature\";\nimport { EngineFeature } from \"./EngineFeature\";\nimport { Scene } from \"./Scene\";\nimport { Engine } from \"./Engine\";\n\n/**\n * 管理一组功能特性对象\n * @class\n */\nexport class FeatureManager<T extends EngineFeature | SceneFeature> {\n  private _features: Array<new (engine: Engine) => T> = [];\n\n  private _objects = [];\n\n  /**\n   * 注册一个功能特性\n   * @param {SceneFeature|EngineFeature} Feature\n   */\n  public registerFeature(IFeature: new () => T): void {\n    const featureArray = this._features;\n\n    // -- 按照 type 查找，避免重复添加\n    for (let i = 0, len = featureArray.length; i < len; i++) {\n      if (featureArray[i] === IFeature) {\n        return;\n      }\n    }\n\n    // -- 添加到全局数组\n    featureArray.push(IFeature);\n\n    // -- 添加到现有场景实例中\n    const objectArray = this._objects;\n    for (let i = 0, len = objectArray.length; i < len; i++) {\n      objectArray[i].features.push(new IFeature());\n    }\n  }\n\n  /**\n   * 添加一个具有功能特性的对象\n   * @param {Scene|Engine} obj\n   */\n  public addObject(obj: Scene | Engine): void {\n    obj.features = [];\n    for (let i = 0, len = this._features.length; i < len; i++) {\n      obj.features.push(new this._features[i]((<any>obj).engine ?? <any>obj) as any);\n    }\n    this._objects.push(obj);\n  }\n\n  /**\n   * 调用功能特性的指定方法\n   * @param {Scene|Engine} obj\n   * @param {string} method\n   * @param {Array} args\n   */\n  public callFeatureMethod(obj: Scene | Engine, method: string, args: any[]): void {\n    const features = obj.features;\n    const count = features.length;\n\n    for (let i = 0; i < count; i++) {\n      const feature = features[i];\n      if (feature[method]) {\n        feature[method].apply(feature, args);\n      }\n    }\n  }\n\n  /**\n   * 查找特性\n   * @param {Scene|Engine} obj\n   * @param {SceneFeature|EngineFeature} feature\n   */\n\n  public findFeature(obj: Scene | Engine, IFeature: new () => T): T {\n    const features = obj.features;\n    const count = features.length;\n\n    for (let i = 0; i < count; i++) {\n      const feature = features[i];\n      if (feature.constructor === (IFeature as any)) {\n        return feature as any;\n      }\n    }\n    return undefined;\n  }\n}\n","import { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\n\ntype ComponentConstructor = { new (...args: any): Component };\n\n/**\n * 用于组件依赖注册。\n */\nexport class ComponentsDependencies {\n  /**\n   * @internal\n   */\n  private static _dependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n  private static _invDependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n\n  /**\n   * 注册组件依赖关系。\n   * @param currentComponent\n   * @param dependentComponent\n   */\n  static register(currentComponent: ComponentConstructor, dependentComponent: ComponentConstructor) {\n    this._addDependency(currentComponent, dependentComponent, this._dependenciesMap);\n    this._addDependency(dependentComponent, currentComponent, this._invDependenciesMap);\n  }\n\n  /**\n   * @internal\n   */\n  static _addCheck(entity: Entity, type: ComponentConstructor) {\n    // 检查是否有被依赖组件\n    const dependencies = ComponentsDependencies._dependenciesMap.get(type);\n    if (dependencies) {\n      for (let i = 0, len = dependencies.length; i < len; i++) {\n        if (!entity.getComponent(dependencies[i])) {\n          throw `you should add ${dependencies[i]} before adding ${type}`;\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _removeCheck(entity: Entity, type: ComponentConstructor) {\n    const invDenpendencies = ComponentsDependencies._invDependenciesMap.get(type);\n    if (invDenpendencies) {\n      for (let i = 0, len = invDenpendencies.length; i < len; i++) {\n        if (entity.getComponent(invDenpendencies[i])) {\n          throw `you should remove ${invDenpendencies[i]} before adding ${type}`;\n        }\n      }\n    }\n  }\n\n  private static _addDependency(\n    currentComponent: ComponentConstructor,\n    dependentComponent: ComponentConstructor,\n    map: Map<any, any>\n  ) {\n    let components = map.get(currentComponent);\n    if (!components) {\n      components = [];\n      map.set(currentComponent, components);\n    }\n    if (components.indexOf(dependentComponent) === -1) {\n      components.push(dependentComponent);\n    }\n  }\n\n  private constructor() {}\n}\n\nexport function dependencies(...abilityClass: ComponentConstructor[]) {\n  return function <T extends ComponentConstructor>(target: T): void {\n    abilityClass.forEach((ability) => ComponentsDependencies.register(target, ability));\n  };\n}\n","/**\n * 高性能无序数组，delete采用交换法提升行,内部数只扩不缩。\n */\nexport class DisorderedArray<T> {\n  _elements: T[];\n\n  length: number = 0;\n\n  constructor(count: number = 0) {\n    this._elements = new Array<T>(count);\n  }\n\n  add(element: T): void {\n    if (this.length === this._elements.length) this._elements.push(element);\n    else this._elements[this.length] = element;\n    this.length++;\n  }\n\n  delete(element: T): void {\n    const index = this._elements.indexOf(element); //CM:可修改为自定义二分查找等算法,目前this._elements>=this.length 浪费性能\n    this.deleteByIndex(index);\n  }\n  /**\n   *\n   * @param index\n   * @returns 被替换过来的项 用于外部重置他的index\n   */\n  deleteByIndex(index: number): T {\n    var elements: T[] = this._elements;\n    let end: T = null;\n    const lastIndex = this.length - 1;\n    if (index !== lastIndex) {\n      end = elements[lastIndex];\n      elements[index] = end;\n    }\n    this.length--;\n    return end;\n  }\n\n  garbageCollection(): void {\n    this._elements.length = this.length;\n  }\n}\n","import { EventDispatcher, MaskList } from \"./base\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { Scene } from \"./Scene\";\n\n/**\n * 组件的基类。\n */\nexport abstract class Component extends EventDispatcher {\n  /** @internal */\n  _entity: Entity;\n  /** @internal */\n  _destroyed: boolean = false;\n\n  protected _props: object;\n\n  private _enabled: boolean = true;\n  private _awaked: boolean = false;\n\n  /**\n   * 是否启用。\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(value: boolean) {\n    if (value === this._enabled) {\n      return;\n    }\n    this._enabled = value;\n    if (value) {\n      this._entity.isActiveInHierarchy && this._onEnable();\n    } else {\n      this._entity.isActiveInHierarchy && this._onDisable();\n    }\n  }\n\n  /**\n   * 是否已经销毁。\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * 所属节点对象。\n   */\n  get entity(): Entity {\n    return this._entity;\n  }\n\n  /**\n   * 所属场景对象。\n   */\n  get scene(): Scene {\n    return this._entity.scene;\n  }\n\n  /**\n   * 所属的Engine对象。\n   */\n  get engine(): Engine {\n    return this._entity.engine;\n  }\n\n  /**\n   * 创建组件实例。\n   * @param entity - 对象所在实体\n   * @param props - 配置参数\n   */\n  constructor(entity: Entity, props: object = {}) {\n    super();\n    this._props = props;\n    this._entity = entity;\n\n    this._renderPassFlag = MaskList.EVERYTHING; // @deprecated\n    this._passMasks = [MaskList.EVERYTHING]; // @deprecated\n  }\n\n  /**\n   * 销毁本组件对象\n   */\n  destroy(): void {\n    if (this._destroyed) return;\n    this._entity._removeComponent(this);\n    if (this._entity.isActiveInHierarchy) {\n      this._enabled && this._onDisable();\n      this._onInActive();\n    }\n    this._destroyed = true;\n    this._onDestroy();\n  }\n\n  /**\n   * @internal\n   */\n  _onAwake(): void {}\n\n  /**\n   * @internal\n   */\n  _onEnable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDisable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {}\n\n  /**\n   * @internal\n   */\n  _onActive(): void {}\n\n  /**\n   * @internal\n   */\n  _onInActive(): void {}\n\n  /**\n   * @internal\n   */\n  _setActive(value: boolean): void {\n    if (value) {\n      if (!this._awaked) {\n        this._awaked = true;\n        this._onAwake();\n      }\n      // onAwake can do isActive = false,for example write this in Script's onAwake().\n      if (this._entity._isActiveInHierarchy) {\n        this._onActive();\n        this._enabled && this._onEnable();\n      }\n    } else {\n      this._enabled && this._onDisable();\n      this._onInActive();\n    }\n  }\n\n  /**\n   * @todo 临时方案，未来组件可以统一使用浅拷贝解决\n   * @internal\n   */\n  _cloneTo(desComponent: Component): void {}\n\n  //---------------------------------------------Deprecated-----------------------------------------------------------------\n\n  private _renderPriority: number = 0;\n  private _renderPassFlag: MaskList;\n  private _passMasks: MaskList[];\n  private _cullDistanceSq: number = 0; // 等于0，代表不进行 distance cull\n\n  /**\n   * @deprecated\n   * 渲染优先级\n   * @member {number}\n   */\n  get renderPriority(): number {\n    return this._renderPriority;\n  }\n  set renderPriority(val: number) {\n    this._renderPriority = val;\n  }\n\n  /**\n   * @deprecated\n   */\n  get cullDistanceSq(): number {\n    return this._cullDistanceSq;\n  }\n\n  /**\n   * @deprecated\n   */\n  get cullDistance(): number {\n    return Math.sqrt(this._cullDistanceSq);\n  }\n  set cullDistance(val: number) {\n    this._cullDistanceSq = val * val;\n  }\n\n  /**\n   * @deprecated\n   */\n  get renderPassFlag(): MaskList {\n    return this._renderPassFlag;\n  }\n  set renderPassFlag(val: MaskList) {\n    this._renderPassFlag = val;\n  }\n\n  /**\n   * @deprecated\n   * 设置通过的 Pass Mask，\n   * @param  {PassMask} masks 各个 mask\n   */\n  public setPassMasks(...masks: MaskList[]): void {\n    this._passMasks = masks;\n    this._renderPassFlag = masks.reduce((a, b) => a | b, 0);\n  }\n\n  /**\n   * @deprecated\n   * 添加 Mask 到通过列表\n   * @param  {PassMask} masks 各个 mask\n   */\n  public addPassMasks(...masks: MaskList[]): void {\n    for (const mask of masks) {\n      const idx = this._passMasks.indexOf(mask);\n      if (idx < 0) {\n        this._passMasks.push(mask);\n      }\n    }\n\n    this.setPassMasks(...this._passMasks);\n  }\n\n  /**\n   * @deprecated\n   * 从当前的通过列表移除 Mask\n   * @param  {PassMask} masks 各个 mask\n   */\n  public removePassMasks(...masks: MaskList[]): void {\n    for (const mask of masks) {\n      const idx = this._passMasks.indexOf(mask);\n      if (idx > -1) {\n        this._passMasks.splice(idx, 1);\n      }\n    }\n\n    this.setPassMasks(...this._passMasks);\n  }\n}\n","/**\n * 由于更新标记。\n */\nexport class UpdateFlag {\n  /** 标记。 */\n  flag = true;\n\n  constructor(private _flags: UpdateFlag[] = []) {}\n\n  /**\n   * 销毁。\n   */\n  destroy(): void {\n    const flags = this._flags;\n    // avoid repeated destroy\n    if (flags) {\n      const index = flags.indexOf(this);\n      const last = flags.length - 1;\n      if (index !== last) {\n        const end = flags[last];\n        flags[index] = end;\n      }\n      flags.length--;\n      this._flags = null;\n    }\n  }\n}\n","import { MathUtil, Matrix, Matrix3x3, Quaternion, Vector3, Vector4 } from \"@alipay/o3-math\";\nimport { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * 用于实现变换相关功能。\n */\nexport class Transform extends Component {\n  private static _tempQuat0: Quaternion = new Quaternion();\n  private static _tempVec3: Vector3 = new Vector3();\n  private static _tempMat30: Matrix3x3 = new Matrix3x3();\n  private static _tempMat31: Matrix3x3 = new Matrix3x3();\n  private static _tempMat32: Matrix3x3 = new Matrix3x3();\n  private static _tempMat40: Matrix = new Matrix();\n  private static _tempMat41: Matrix = new Matrix();\n  private static _tempMat42: Matrix = new Matrix();\n  private static _tempMat43: Matrix = new Matrix();\n\n  private static _LOCAL_EULER_FLAG: number = 0x1;\n  private static _LOCAL_QUAT_FLAG: number = 0x2;\n  private static _WORLD_POSITION_FLAG: number = 0x4;\n  private static _WORLD_EULER_FLAG: number = 0x8;\n  private static _WORLD_QUAT_FLAG: number = 0x10;\n  private static _WORLD_SCALE_FLAG: number = 0x20;\n  private static _LOCAL_MATRIX_FLAG: number = 0x40;\n  private static _WORLD_MATRIX_FLAG: number = 0x80;\n\n  /** _WORLD_MATRIX_FLAG | _WORLD_POSITION_FLAG */\n  private static _WM_WP_FLAGS: number = 0x84;\n  /** _WORLD_MATRIX_FLAG | _WORLD_EULER_FLAG | _WORLD_QUAT_FLAG */\n  private static _WM_WE_WQ_FLAGS: number = 0x98;\n  /** _WORLD_MATRIX_FLAG | _WORLD_POSITION_FLAG | _WORLD_EULER_FLAG ｜ _WORLD_QUAT_FLAG */\n  private static _WM_WP_WE_WQ_FLAGS: number = 0x9c;\n  /** Transform._WORLD_MATRIX_FLAG | Transform._WORLD_SCALE_FLAG */\n  private static _WM_WS_FLAGS: number = 0xa0;\n  /** Transform._WORLD_MATRIX_FLAG | Transform._WORLD_POSITION_FLAG | Transform._WORLD_SCALE_FLAG */\n  private static _WM_WP_WS_FLAGS: number = 0xa4;\n  /** Transform._WORLD_MATRIX_FLAG | Transform._WORLD_POSITION_FLAG | Transform._WORLD_EULER_FLAG | Transform._WORLD_QUAT_FLAG | Transform._WORLD_SCALE_FLAG */\n  private static _WM_WP_WE_WQ_WS_FLAGS: number = 0xbc;\n\n  private _position: Vector3 = new Vector3();\n  private _rotation: Vector3 = new Vector3();\n  private _rotationQuaternion: Quaternion = new Quaternion();\n  private _scale: Vector3 = new Vector3(1, 1, 1);\n  private _worldPosition: Vector3 = new Vector3();\n  private _worldRotation: Vector3 = new Vector3();\n  private _worldRotationQuaternion: Quaternion = new Quaternion();\n  private _lossyWorldScale: Vector3 = new Vector3(1, 1, 1);\n  private _localMatrix: Matrix = new Matrix();\n  private _worldMatrix: Matrix = new Matrix();\n  private _dirtyFlag: number = Transform._WM_WP_WE_WQ_WS_FLAGS;\n  private _changeFlags: UpdateFlag[] = [];\n  private _isParentDirty: boolean = true;\n  private _parentTransformCache: Transform = null;\n\n  /**\n   * 局部位置。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      value.cloneTo(this._position);\n    }\n    this._setDirtyFlagTrue(Transform._LOCAL_MATRIX_FLAG);\n    this._updateWorldPositionFlag();\n  }\n\n  /**\n   * 世界位置。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get worldPosition(): Vector3 {\n    if (this._isContainDirtyFlag(Transform._WORLD_POSITION_FLAG)) {\n      if (this._getParentTransform()) {\n        this.worldMatrix.getTranslation(this._worldPosition);\n      } else {\n        this._position.cloneTo(this._worldPosition);\n      }\n      this._setDirtyFlagFalse(Transform._WORLD_POSITION_FLAG);\n    }\n    return this._worldPosition;\n  }\n\n  set worldPosition(value: Vector3) {\n    if (this._worldPosition !== value) {\n      value.cloneTo(this._worldPosition);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat41);\n      Vector3.transformCoordinate(value, Transform._tempMat41, this._position);\n    } else {\n      value.cloneTo(this._position);\n    }\n    this.position = this._position;\n    this._setDirtyFlagFalse(Transform._WORLD_POSITION_FLAG);\n  }\n\n  /**\n   * 局部旋转，欧拉角表达，单位是角度制，欧拉角的旋转顺序为 Yaw、Pitch、Roll。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get rotation(): Vector3 {\n    if (this._isContainDirtyFlag(Transform._LOCAL_EULER_FLAG)) {\n      this._rotationQuaternion.toEuler(this._rotation);\n      this._rotation.scale(MathUtil.radToDegreeFactor); // 弧度转角度\n\n      this._setDirtyFlagFalse(Transform._LOCAL_EULER_FLAG);\n    }\n    return this._rotation;\n  }\n\n  set rotation(value: Vector3) {\n    if (this._rotation !== value) {\n      value.cloneTo(this._rotation);\n    }\n    this._setDirtyFlagTrue(Transform._LOCAL_MATRIX_FLAG | Transform._LOCAL_QUAT_FLAG);\n    this._setDirtyFlagFalse(Transform._LOCAL_EULER_FLAG);\n    this._updateWorldRotationFlag();\n  }\n\n  /**\n   * 世界旋转，欧拉角表达，单位是角度制，欧拉角的旋转顺序为 Yaw、Pitch、Roll。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get worldRotation(): Vector3 {\n    if (this._isContainDirtyFlag(Transform._WORLD_EULER_FLAG)) {\n      this.worldRotationQuaternion.toEuler(this._worldRotation);\n      this._worldRotation.scale(MathUtil.radToDegreeFactor); // 弧度转角度\n      this._setDirtyFlagFalse(Transform._WORLD_EULER_FLAG);\n    }\n    return this._worldRotation;\n  }\n\n  set worldRotation(value: Vector3) {\n    if (this._worldRotation !== value) {\n      value.cloneTo(this._worldRotation);\n    }\n    Quaternion.rotationEuler(\n      MathUtil.degreeToRadian(value.x),\n      MathUtil.degreeToRadian(value.y),\n      MathUtil.degreeToRadian(value.z),\n      this._worldRotationQuaternion\n    );\n    this.worldRotationQuaternion = this._worldRotationQuaternion;\n    this._setDirtyFlagFalse(Transform._WORLD_EULER_FLAG);\n  }\n\n  /**\n   * 局部旋转，四元数表达。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get rotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(Transform._LOCAL_QUAT_FLAG)) {\n      Quaternion.rotationEuler(\n        MathUtil.degreeToRadian(this._rotation.x),\n        MathUtil.degreeToRadian(this._rotation.y),\n        MathUtil.degreeToRadian(this._rotation.z),\n        this._rotationQuaternion\n      );\n      this._setDirtyFlagFalse(Transform._LOCAL_QUAT_FLAG);\n    }\n    return this._rotationQuaternion;\n  }\n\n  set rotationQuaternion(value: Quaternion) {\n    if (this._rotationQuaternion !== value) {\n      value.cloneTo(this._rotationQuaternion);\n    }\n    this._setDirtyFlagTrue(Transform._LOCAL_MATRIX_FLAG | Transform._LOCAL_EULER_FLAG);\n    this._setDirtyFlagFalse(Transform._LOCAL_QUAT_FLAG);\n    this._updateWorldRotationFlag();\n  }\n\n  /**\n   * 世界旋转，四元数表达。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get worldRotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(Transform._WORLD_QUAT_FLAG)) {\n      const parent = this._getParentTransform();\n      if (parent != null) {\n        Quaternion.multiply(parent.worldRotationQuaternion, this.rotationQuaternion, this._worldRotationQuaternion);\n      } else {\n        this.rotationQuaternion.cloneTo(this._worldRotationQuaternion);\n      }\n      this._setDirtyFlagFalse(Transform._WORLD_QUAT_FLAG);\n    }\n    return this._worldRotationQuaternion;\n  }\n\n  set worldRotationQuaternion(value: Quaternion) {\n    if (this._worldRotationQuaternion !== value) {\n      value.cloneTo(this._worldRotationQuaternion);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Quaternion.invert(parent.worldRotationQuaternion, Transform._tempQuat0);\n      Quaternion.multiply(value, Transform._tempQuat0, this._rotationQuaternion);\n    } else {\n      value.cloneTo(this._rotationQuaternion);\n    }\n    this.rotationQuaternion = this._rotationQuaternion;\n    this._setDirtyFlagFalse(Transform._WORLD_QUAT_FLAG);\n  }\n\n  /**\n   * 局部缩放。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get scale(): Vector3 {\n    return this._scale;\n  }\n\n  set scale(value: Vector3) {\n    if (this._scale !== value) {\n      value.cloneTo(this._scale);\n    }\n    this._setDirtyFlagTrue(Transform._LOCAL_MATRIX_FLAG);\n    this._updateWorldScaleFlag();\n  }\n\n  /**\n   * 世界有损缩放。\n   * @remarks 某种条件下获取该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用Vector3正确表示,必须使用Matrix3x3矩阵才能正确表示。\n   */\n  get lossyWorldScale(): Vector3 {\n    if (this._isContainDirtyFlag(Transform._WORLD_SCALE_FLAG)) {\n      if (this._getParentTransform()) {\n        const scaleMat = this._getScaleMatrix();\n        const e = scaleMat.elements;\n        this._lossyWorldScale.setValue(e[0], e[4], e[8]);\n      } else {\n        this._scale.cloneTo(this._lossyWorldScale);\n      }\n      this._setDirtyFlagFalse(Transform._WORLD_SCALE_FLAG);\n    }\n    return this._lossyWorldScale;\n  }\n\n  /**\n   * 局部矩阵。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get localMatrix(): Matrix {\n    if (this._isContainDirtyFlag(Transform._LOCAL_MATRIX_FLAG)) {\n      Matrix.affineTransformation(this._scale, this.rotationQuaternion, this._position, this._localMatrix);\n      this._setDirtyFlagFalse(Transform._LOCAL_MATRIX_FLAG);\n    }\n    return this._localMatrix;\n  }\n\n  set localMatrix(value: Matrix) {\n    if (this._localMatrix !== value) {\n      value.cloneTo(this._localMatrix);\n    }\n    this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale);\n    this._setDirtyFlagTrue(Transform._LOCAL_EULER_FLAG);\n    this._setDirtyFlagFalse(Transform._LOCAL_MATRIX_FLAG);\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * 世界矩阵。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get worldMatrix(): Matrix {\n    if (this._isContainDirtyFlag(Transform._WORLD_MATRIX_FLAG)) {\n      const parent = this._getParentTransform();\n      if (parent) {\n        Matrix.multiply(parent.worldMatrix, this.localMatrix, this._worldMatrix);\n      } else {\n        this.localMatrix.cloneTo(this._worldMatrix);\n      }\n      this._setDirtyFlagFalse(Transform._WORLD_MATRIX_FLAG);\n    }\n    return this._worldMatrix;\n  }\n\n  set worldMatrix(value: Matrix) {\n    if (this._worldMatrix !== value) {\n      value.cloneTo(this._worldMatrix);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat42);\n      Matrix.multiply(value, Transform._tempMat42, this._localMatrix);\n    } else {\n      value.cloneTo(this._localMatrix);\n    }\n    this.localMatrix = this._localMatrix;\n    this._setDirtyFlagFalse(Transform._WORLD_MATRIX_FLAG);\n  }\n\n  /**\n   * @internal\n   * 构建一个变换组件。\n   */\n  constructor(entity?: Entity) {\n    super(entity);\n  }\n\n  /**\n   * 通过位置的 X Y Z 设置局部位置。\n   * @param x - 位置的 X 坐标\n   * @param y - 位置的 Y 坐标\n   * @param z - 位置的 Z 坐标\n   */\n  setPosition(x: number, y: number, z: number): void {\n    this._position.setValue(x, y, z);\n    this.position = this._position;\n  }\n\n  /**\n   * 通过欧拉角的 X、Y、Z 分量设置局部旋转，单位是角度制，欧拉角的旋转顺序为 Yaw、Pitch、Roll。\n   * @param x - 绕 X 轴旋转的角度\n   * @param y - 绕 Y 轴旋转的角度\n   * @param z - 绕 Z 轴旋转的角度\n   */\n  setRotation(x: number, y: number, z: number): void {\n    this._rotation.setValue(x, y, z);\n    this.rotation = this._rotation;\n  }\n\n  /**\n   * 通过四元数的 X、Y、Z、W 分量设置局部旋转。\n   * @param x - 四元数的 X 分量\n   * @param y - 四元数的 Y 分量\n   * @param z - 四元数的 Z 分量\n   * @param w - 四元数的 W 分量\n   */\n  setRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._rotationQuaternion.setValue(x, y, z, w);\n    this.rotationQuaternion = this._rotationQuaternion;\n  }\n\n  /**\n   * 通过沿 X、Y、Z 的缩放值设置局部缩放。\n   * @param x - 沿 X 缩放\n   * @param y - 沿 Y 缩放\n   * @param z - 沿 Z 缩放\n   */\n  setScale(x: number, y: number, z: number): void {\n    this._scale.setValue(x, y, z);\n    this.scale = this._scale;\n  }\n\n  /**\n   * 通过位置的 X Y Z 设置世界位置。\n   * @param x - 位置的 X 坐标\n   * @param y - 位置的 Y 坐标\n   * @param z - 位置的 Z 坐标\n   */\n  setWorldPosition(x: number, y: number, z: number): void {\n    this._worldPosition.setValue(x, y, z);\n    this.worldPosition = this._worldPosition;\n  }\n\n  /**\n   * 通过欧拉角的 X、Y、Z 分量设置世界旋转，单位是角度制，欧拉角的旋转顺序为 Yaw、Pitch、Roll。\n   * @param x - 绕 X 轴旋转的角度\n   * @param y - 绕 Y 轴旋转的角度\n   * @param z - 绕 Z 轴旋转的角度\n   */\n  setWorldRotation(x: number, y: number, z: number): void {\n    this._worldRotation.setValue(x, y, z);\n    this.worldRotation = this._worldRotation;\n  }\n\n  /**\n   * 通过四元数的 X、Y、Z、W 分量设置世界旋转。\n   * @param x - 四元数的 X 分量\n   * @param y - 四元数的 Y 分量\n   * @param z - 四元数的 Z 分量\n   * @param w - 四元数的 W 分量\n   */\n  setWorldRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._worldRotationQuaternion.setValue(x, y, z, w);\n    this.worldRotationQuaternion = this._worldRotationQuaternion;\n  }\n\n  /**\n   * 获取世界矩阵的前向量。\n   * @param forward - 前向量\n   * @returns 前向量\n   */\n  getWorldForward(forward: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    forward.setValue(-e[8], -e[9], -e[10]);\n    return forward.normalize();\n  }\n\n  /**\n   * 获取世界矩阵的右向量。\n   * @param right - 右向量\n   * @returns 右向量\n   */\n  getWorldRight(right: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    right.setValue(e[0], e[1], e[2]);\n    return right.normalize();\n  }\n\n  /**\n   * 获取世界矩阵的上向量。\n   * @param up - 上向量\n   * @returns 上向量\n   */\n  getWorldUp(up: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    up.setValue(e[4], e[5], e[6]);\n    return up.normalize();\n  }\n\n  /**\n   * 在指定的方向和距离上位移。\n   * @param translation - 位移的方向和距离\n   * @param relativeToLocal - 是否相对局部空间\n   */\n  translate(translation: Vector3, relativeToLocal: boolean = true): void {\n    if (relativeToLocal) {\n      const rotationMat = Transform._tempMat40;\n      Matrix.rotationQuaternion(this.rotationQuaternion, rotationMat);\n      Vector3.transformCoordinate(translation, rotationMat, Transform._tempVec3);\n      this.position = this._position.add(Transform._tempVec3);\n    } else {\n      this.worldPosition = this._worldPosition.add(translation);\n    }\n  }\n\n  /**\n   * 在指定的方向和距离上位移。\n   * @param x - X 轴的位移的方向和距离\n   * @param y - Y 轴的位移的方向和距离\n   * @param z - Z 轴的位移的方向和距离\n   * @param relativeToLocal - 是否相对局部空间\n   */\n  translateXYZ(x: number, y: number, z: number, relativeToLocal: boolean = true): void {\n    const translate = Transform._tempVec3;\n    translate.setValue(x, y, z);\n    this.translate(translate, relativeToLocal);\n  }\n\n  /**\n   * 根据指定欧拉角旋转。\n   * @param rotation - 旋转角度，欧拉角表达，单位是角度制\n   * @param relativeToLocal - 是否相对局部空间\n   */\n  rotate(rotation: Vector3, relativeToLocal: boolean = true): void {\n    this.rotateXYZ(rotation.x, rotation.y, rotation.z, relativeToLocal);\n  }\n\n  /**\n   * 根据指定欧拉角旋转。\n   * @param x - X 轴旋转角度,单位是角度制\n   * @param y - Y 轴旋转角度,单位是角度制\n   * @param z - Z 轴旋转角度,单位是角度制\n   * @param relativeToLocal - 是否相对局部空间\n   */\n  rotateXYZ(x: number, y: number, z: number, relativeToLocal: boolean = true): void {\n    const radFactor = MathUtil.degreeToRadFactor;\n    const rotQuat = Transform._tempQuat0;\n    Quaternion.rotationEuler(x * radFactor, y * radFactor, z * radFactor, rotQuat);\n    this._rotateByQuat(rotQuat, relativeToLocal);\n  }\n\n  /**\n   * 根据指定角度围绕指定轴进行旋转。\n   * @param axis - 旋转轴\n   * @param angle - 旋转角度，单位是角度制\n   * @param relativeToLocal - 是否相对局部空间\n   */\n  rotateByAxis(axis: Vector3, angle: number, relativeToLocal: boolean = true): void {\n    const rad = angle * MathUtil.degreeToRadFactor;\n    Quaternion.rotationAxisAngle(axis, rad, Transform._tempQuat0);\n    this._rotateByQuat(Transform._tempQuat0, relativeToLocal);\n  }\n\n  /**\n   * 旋转并且保证世界前向量指向目标世界位置。\n   * @param worldPosition - 目标世界位置\n   * @param worldUp - 世界上向量，默认是 [0, 1, 0]\n   */\n  lookAt(worldPosition: Vector3, worldUp?: Vector3): void {\n    const position = this.worldPosition;\n    const EPSILON = MathUtil.zeroTolerance;\n    if (\n      //todo:如果数学苦做保护了的话，可以删除\n      Math.abs(position.x - worldPosition.x) < EPSILON &&\n      Math.abs(position.y - worldPosition.y) < EPSILON &&\n      Math.abs(position.z - worldPosition.z) < EPSILON\n    ) {\n      return;\n    }\n    worldUp = worldUp ?? Transform._tempVec3.setValue(0, 1, 0);\n    const mat = Transform._tempMat43;\n    Matrix.lookAt(position, worldPosition, worldUp, mat); //CM:可采用3x3矩阵优化\n    mat.invert();\n\n    this.worldRotationQuaternion = mat.getRotation(this._worldRotationQuaternion); //CM:正常应该再求一次逆，因为lookat的返回值相当于viewMatrix,viewMatrix是世界矩阵的逆，需要测试一个模型和相机分别lookAt一个物体的效果（是否正确和lookAt方法有关）\n  }\n\n  /**\n   * 注册世界变换改变标记。\n   * @returns 改变标记\n   */\n  registerWorldChangeFlag(): UpdateFlag {\n    const flag = new UpdateFlag(this._changeFlags);\n    this._changeFlags.push(flag);\n    return flag;\n  }\n\n  /**\n   * @internal\n   */\n  _parentChange(): void {\n    this._isParentDirty = true;\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: Transform): Transform {\n    target.localMatrix = this.localMatrix;\n    return target;\n  }\n\n  /**\n   * 获取 worldMatrix：会触发自身以及所有父节点的worldMatrix更新\n   * 获取 worldPosition：会触发自身 position 和自身 worldMatrix 以及所有父节点的 worldMatrix 更新\n   * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix）的脏标记为 false\n   */\n  private _updateWorldPositionFlag(): void {\n    if (!this._isContainDirtyFlags(Transform._WM_WP_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WP_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionFlag();\n      }\n    }\n  }\n\n  /**\n   * 获取worldMatrix：会触发自身以及所有父节点的worldMatrix更新\n   * 获取worldPosition：会触发自身position和自身worldMatrix以及所有父节点的worldMatrix更新\n   * 获取worldRotationQuaternion：会触发自身以及所有父节点的worldRotationQuaternion更新\n   * 获取worldRotation：会触发自身worldRotation和自身worldRotationQuaternion以及所有父节点的worldRotationQuaternion更新\n   * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix或orldRotationQuaternion）的脏标记为false\n   */\n  private _updateWorldRotationFlag() {\n    if (!this._isContainDirtyFlags(Transform._WM_WE_WQ_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WE_WQ_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag(); //父节点旋转发生变化，子节点的世界位置和旋转都需要更新\n      }\n    }\n  }\n\n  /**\n   * 获取 worldMatrix：会触发自身以及所有父节点的 worldMatrix 更新\n   * 获取 worldPosition：会触发自身 position 和自身 worldMatrix 以及所有父节点的 worldMatrix 更新\n   * 获取 worldRotationQuaternion：会触发自身以及所有父节点的 worldRotationQuaternion 更新\n   * 获取 worldRotation：会触发自身 worldRotation 和自身 worldRotationQuaternion 以及所有父节点的worldRotationQuaternion更新\n   * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix 或 worldRotationQuaternion）的脏标记为false\n   */\n  private _updateWorldPositionAndRotationFlag() {\n    if (!this._isContainDirtyFlags(Transform._WM_WP_WE_WQ_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WP_WE_WQ_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag();\n      }\n    }\n  }\n\n  /**\n   * 获取 worldMatrix：会触发自身以及所有父节点的 worldMatrix 更新\n   * 获取 worldPosition：会触发自身 position 和自身 worldMatrix 以及所有父节点的 worldMatrix 更新\n   * 获取 worldScale：会触发自身以及所有父节点的 worldMatrix 更新\n   * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix）的脏标记为 false。\n   */\n  private _updateWorldScaleFlag() {\n    if (!this._isContainDirtyFlags(Transform._WM_WS_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WS_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * 获取 worldMatrix：会触发自身以及所有父节点的 worldMatrix 更新\n   * 获取 worldPosition：会触发自身 position 和自身 worldMatrix 以及所有父节点的 worldMatrix 更新\n   * 获取 worldScale：会触发自身以及所有父节点的worldMatrix更新\n   * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix）的脏标记为 false。\n   */\n  private _updateWorldPositionAndScaleFlag(): void {\n    if (!this._isContainDirtyFlags(Transform._WM_WP_WS_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WP_WS_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * 更新所有世界标记，原理同上。\n   */\n  private _updateAllWorldFlag(): void {\n    if (!this._isContainDirtyFlags(Transform._WM_WP_WE_WQ_WS_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WP_WE_WQ_WS_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateAllWorldFlag();\n      }\n    }\n  }\n\n  private _getParentTransform(): Transform | null {\n    if (!this._isParentDirty) {\n      return this._parentTransformCache;\n    }\n    let parentCache: Transform = null;\n    let parent = this._entity.parent;\n    while (parent) {\n      const transform = parent.transform;\n      if (transform) {\n        parentCache = transform;\n        break;\n      } else {\n        parent = parent.parent;\n      }\n    }\n    this._parentTransformCache = parentCache;\n    this._isParentDirty = false;\n    return parentCache;\n  }\n\n  private _getScaleMatrix(): Matrix3x3 {\n    const invRotation = Transform._tempQuat0;\n    const invRotationMat = Transform._tempMat30;\n    const worldRotScaMat = Transform._tempMat31;\n    const scaMat = Transform._tempMat32;\n    worldRotScaMat.setValueByMatrix(this.worldMatrix);\n    Quaternion.invert(this.worldRotationQuaternion, invRotation);\n    Matrix3x3.rotationQuaternion(invRotation, invRotationMat);\n    Matrix3x3.multiply(invRotationMat, worldRotScaMat, scaMat);\n    return scaMat;\n  }\n\n  private _isContainDirtyFlags(targetDirtyFlags: number): boolean {\n    return (this._dirtyFlag & targetDirtyFlags) === targetDirtyFlags;\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number) {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number) {\n    this._dirtyFlag &= ~type;\n  }\n\n  private _worldAssociatedChange(type: number): void {\n    this._dirtyFlag |= type;\n    const len = this._changeFlags.length;\n    for (let i = len - 1; i >= 0; i--) {\n      this._changeFlags[i].flag = true;\n    }\n  }\n\n  private _rotateByQuat(rotateQuat: Quaternion, relativeToLocal: boolean) {\n    if (relativeToLocal) {\n      Quaternion.multiply(this.rotationQuaternion, rotateQuat, this._rotationQuaternion);\n      this.rotationQuaternion = this._rotationQuaternion;\n    } else {\n      Quaternion.multiply(this.worldRotationQuaternion, rotateQuat, this._worldRotationQuaternion);\n      this.worldRotationQuaternion = this._worldRotationQuaternion;\n    }\n  }\n}\n","import { Matrix, Quaternion, Vector3 } from \"@alipay/o3-math\";\nimport { EventDispatcher } from \"./base\";\nimport { Component } from \"./Component\";\nimport { ComponentsDependencies } from \"./ComponentsDependencies\";\nimport { DisorderedArray } from \"./DisorderedArray\";\nimport { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\nimport { Transform } from \"./Transform\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * 实体,可作为组件的容器。\n */\nexport class Entity extends EventDispatcher {\n  static _entitys: DisorderedArray<Entity> = new DisorderedArray();\n\n  /**\n   * 根据名字全局查找节点。\n   * @param name - 名字\n   * @returns 节点\n   */\n  static findByName(name: string): Entity {\n    const { _entitys } = Entity;\n    const elements = _entitys._elements;\n    for (let i = _entitys.length - 1; i >= 0; i--) {\n      const entity = elements[i];\n      const nodeName = entity.name;\n      if (nodeName === name) {\n        return entity;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 根据路径全局查找节点，使用‘/’符号作为路径分割符。\n   * @param path - 路径\n   * @param scene - 查找场景，如果为空则使用最新创建 Engine 的激活场景\n   * @returns 节点\n   */\n  static findByPath(path: string, scene?: Scene): Entity | null {\n    scene || (scene = Engine._lastCreateEngine?.sceneManager.activeScene);\n    if (scene) {\n      const splits = path.split(\"/\").filter(Boolean);\n      for (let i = 0, n = scene.rootEntitiesCount; i < n; i++) {\n        let findEntity = scene.getRootEntity(i);\n        if (findEntity.name != splits[0]) continue;\n        for (let j = 1, m = splits.length; j < m; ++j) {\n          findEntity = Entity._findChildByName(findEntity, splits[j]);\n          if (!findEntity) break;\n        }\n        return findEntity;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  static _findChildByName(root: Entity, name: string): Entity {\n    const children = root._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  static _traverseSetOwnerScene(entity: Entity, scene: Scene): void {\n    entity._scene = scene;\n    const children = entity._children;\n    for (let i = entity.childCount - 1; i >= 0; i--) {\n      this._traverseSetOwnerScene(children[i], scene);\n    }\n  }\n\n  /* 名字。*/\n  name: string;\n  /* 变换。*/\n  readonly transform: Transform;\n\n  /** @internal */\n  _isActiveInHierarchy: boolean = false;\n  /** @internal */\n  _components: Component[] = [];\n  /** @internal */\n  _children: Entity[] = [];\n  /** @internal */\n  _scene: Scene;\n  /** @internal */\n  _isRoot: boolean = false;\n  /** @internal */\n  _isActive: boolean = true;\n\n  private _engine: Engine;\n  private _parent: Entity = null;\n  private _activeChangedComponents: Component[];\n\n  /**\n   * 是否局部激活。\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  set isActive(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      if (value) {\n        const parent = this._parent;\n        if (parent?._isActiveInHierarchy || (this._isRoot && this._scene._isActiveInEngine)) {\n          this._processActive();\n        }\n      } else {\n        if (this._isActiveInHierarchy) {\n          this._processInActive();\n        }\n      }\n    }\n  }\n\n  /**\n   * 在层级中是否处于激活状态。\n   */\n  get isActiveInHierarchy(): boolean {\n    return this._isActiveInHierarchy;\n  }\n\n  /**\n   * 父节点。\n   */\n  get parent(): Entity {\n    return this._parent;\n  }\n\n  set parent(entity: Entity) {\n    if (entity !== this._parent) {\n      const oldParent = this._removeFromParent();\n      const newParent = (this._parent = entity);\n      if (newParent) {\n        newParent._children.push(this);\n        const parentScene = newParent._scene;\n        if (this._scene !== parentScene) {\n          Entity._traverseSetOwnerScene(this, parentScene);\n        }\n\n        if (newParent._isActiveInHierarchy) {\n          !this._isActiveInHierarchy && this._isActive && this._processActive();\n        } else {\n          this._isActiveInHierarchy && this._processInActive();\n        }\n      } else {\n        this._isActiveInHierarchy && this._processInActive();\n        if (oldParent) {\n          Entity._traverseSetOwnerScene(this, null);\n        }\n      }\n      this._setTransformDirty();\n    }\n  }\n\n  /**\n   * 子节点集合。\n   */\n  get children(): Readonly<Entity[]> {\n    return this._children;\n  }\n\n  /**\n   * 子节点数量。\n   */\n  get childCount(): number {\n    return this._children.length;\n  }\n\n  /**\n   * 所属的场景对象。\n   */\n  get scene(): Scene {\n    return this._scene;\n  }\n\n  /**\n   * 所属引擎。\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  /**\n   * 创建一个节点。\n   * @param name - 名字\n   * @param engine - 所属 Engine\n   */\n  constructor(name?: string, engine?: Engine) {\n    super();\n    Entity._entitys.add(this);\n    this._engine = engine || Engine._getDefaultEngine();\n    this.name = name;\n    this.transform = this.addComponent(Transform);\n    this._inverseWorldMatFlag = this.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * 根据组件类型添加组件。\n   * @param type - 组件类型\n   * @param props - 组件属性 //deprecated\n   * @returns\t组件实例\n   */\n  addComponent<T extends Component>(type: new (entity: any, props?: object) => T, props: object = {}): T {\n    ComponentsDependencies._addCheck(this, type);\n    const component = new type(this, props);\n    this._components.push(component);\n    if (this._isActiveInHierarchy) {\n      component._setActive(true);\n    }\n    return component;\n  }\n\n  /**\n   * 根据组件类型获取组件。\n   * @param type - 组件类型\n   * @returns\t组件实例\n   */\n  getComponent<T extends Component>(type: new (entity: Entity, props?: object) => T): T {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        return component;\n      }\n    }\n  }\n\n  /**\n   * 根据组件类型获取组件集合。\n   * @param type - 组件类型\n   * @param results - 组件实例集合\n   * @returns\t组件实例集合\n   */\n  getComponents<T extends Component>(type: new (entity: Entity, props?: object) => T, results: Array<T>): Array<T> {\n    results.length = 0;\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * 添加子节点对象。\n   * @param child - 子节点\n   */\n  addChild(child: Entity): void {\n    child.parent = this;\n  }\n\n  /**\n   * 删除子节点。\n   * @param child - 子节点\n   */\n  removeChild(child: Entity): void {\n    child.parent = null;\n  }\n\n  /**\n   * 根据索引获取子节点。\n   * @param index - 索引\n   * @returns 节点\n   */\n  getChild(index: number): Entity {\n    return this._children[index];\n  }\n\n  /**\n   * 根据名字查找子节点。\n   * @param name - 名字\n   * @returns 节点\n   */\n  findByName(name: string): Entity {\n    const children = this._children;\n    const child = Entity._findChildByName(this, name);\n    if (child) return child;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      const grandson = child.findByName(name);\n      if (grandson) {\n        return grandson;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 根据路径查找节点，使用‘/’符号作为路径分割符。\n   * @param path - 路径\n   * @returns 节点\n   */\n  findByPath(path: string): Entity {\n    const splits = path.split(\"/\");\n    let entity: Entity = this;\n    for (let i = 0, length = splits.length; i < length; ++i) {\n      const split = splits[i];\n      if (split) {\n        entity = Entity._findChildByName(entity, split);\n        if (!entity) {\n          return null;\n        }\n      }\n    }\n    return entity;\n  }\n\n  /**\n   * 创建子节点。\n   * @param name - 名称\n   * @returns 子节点\n   */\n  createChild(name?: string): Entity {\n    const child = new Entity(name, this.engine);\n    child.parent = this;\n    return child;\n  }\n\n  /**\n   * 清空子节点。\n   */\n  clearChildren(): void {\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      child._parent = null;\n      child._isActiveInHierarchy && child._processInActive();\n      Entity._traverseSetOwnerScene(child, null); // must after child._processInActive()\n    }\n    children.length = 0;\n  }\n\n  /**\n   * 克隆。\n   * @returns 克隆的节点\n   */\n  clone(): Entity {\n    const newNode = new Entity(this.name, this._engine);\n\n    newNode._isActive = this._isActive;\n\n    newNode.transform.localMatrix = this.transform.localMatrix;\n\n    const children = this._children;\n    for (let i = 0, len = this._children.length; i < len; i++) {\n      const childNode = children[i];\n      newNode.addChild(childNode.clone());\n    }\n\n    const abilityArray = this._components || [];\n    const len = abilityArray.length;\n    for (let i = 0; i < len; i++) {\n      const ability = abilityArray[i];\n      if (!(ability instanceof Transform)) {\n        const newCom = newNode.addComponent(ability.constructor as any, (ability as any)._props);\n        ability._cloneTo(newCom); //CM: 未来统一走浅拷贝\n      }\n    }\n\n    return newNode;\n  }\n\n  /**\n   * 销毁。\n   */\n  destroy(): void {\n    const abilityArray = this._components;\n    for (let i = abilityArray.length - 1; i >= 0; i--) {\n      abilityArray[i].destroy();\n    }\n    this._components.length = 0;\n\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      children[i].destroy();\n    }\n    this._children.length = 0;\n\n    if (this._parent != null) {\n      const parentChildren = this._parent._children;\n      parentChildren.splice(parentChildren.indexOf(this), 1);\n    }\n    this._parent = null;\n    Entity._entitys.delete(this);\n  }\n\n  /**\n   * @internal\n   */\n  _removeComponent(component: Component): void {\n    ComponentsDependencies._removeCheck(this, component.constructor as any);\n    const components = this._components;\n    components.splice(components.indexOf(component), 1);\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromParent(): Entity {\n    const oldParent = this._parent;\n    if (oldParent != null) {\n      const oldParentChildren = oldParent._children;\n      oldParentChildren.splice(oldParentChildren.indexOf(this), 1);\n      this._parent = null;\n    }\n    return oldParent;\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main inActive entity' active in hierarchy, if the operation is in main inActive entity or it's children script's onDisable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(true);\n  }\n\n  /**\n   * @internal\n   */\n  _processInActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main active entity' inActive in hierarchy, if the operation is in main active entity or it's children script's onEnable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setInActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(false);\n  }\n\n  private _setActiveComponents(isActive: boolean): void {\n    const activeChangedComponents = this._activeChangedComponents;\n    for (let i = 0, length = activeChangedComponents.length; i < length; ++i) {\n      activeChangedComponents[i]._setActive(isActive);\n    }\n    this._engine._componentsManager.putActiveChangedTempList(activeChangedComponents);\n    this._activeChangedComponents = null;\n  }\n\n  private _setActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = true;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      activeChangedComponents.push(components[i]);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child: Entity = children[i];\n      child.isActive && child._setActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setInActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = false;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      activeChangedComponents.push(components[i]);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child: Entity = children[i];\n      child.isActive && child._setInActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setTransformDirty() {\n    if (this.transform) {\n      this.transform._parentChange();\n    } else {\n      for (let i = 0, len = this._children.length; i < len; i++) {\n        this._children[i]._setTransformDirty();\n      }\n    }\n  }\n\n  //--------------------------------------------------------------deprecated----------------------------------------------------------------\n  private _invModelMatrix: Matrix = new Matrix();\n  private _inverseWorldMatFlag: UpdateFlag;\n\n  /**\n   * @deprecated\n   * 请使用 transform.position 代替。\n   */\n  get position(): Vector3 {\n    return this.transform.position;\n  }\n\n  set position(val: Vector3) {\n    this.transform.position = val;\n  }\n\n  /**\n   * @deprecated\n   * 请使用 transform.worldPosition 代替\n   */\n  get worldPosition(): Vector3 {\n    return this.transform.worldPosition;\n  }\n\n  set worldPosition(val: Vector3) {\n    this.transform.worldPosition = val;\n  }\n\n  /**\n   * @deprecated\n   * 请使用 transform.rotationQuaternion 代替\n   */\n  get rotation(): Quaternion {\n    return this.transform.rotationQuaternion;\n  }\n\n  set rotation(val: Quaternion) {\n    this.transform.rotationQuaternion = val;\n  }\n\n  /**\n   * @deprecated\n   * 请使用 transform.scale 代替\n   */\n  get scale(): Vector3 {\n    return this.transform.scale;\n  }\n\n  set scale(val: Vector3) {\n    this.transform.scale = val;\n  }\n\n  /**\n   * @deprecated\n   */\n  getInvModelMatrix(): Matrix {\n    if (this._inverseWorldMatFlag.flag) {\n      Matrix.invert(this.transform.worldMatrix, this._invModelMatrix);\n      this._inverseWorldMatFlag.flag = false;\n    }\n    return this._invModelMatrix;\n  }\n}\n","import { Vector3, Vector4 } from \"@alipay/o3-math\";\nimport { EventDispatcher, Logger, MaskList } from \"./base\";\nimport { Camera } from \"./Camera\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { FeatureManager } from \"./FeatureManager\";\nimport { SceneFeature } from \"./SceneFeature\";\n\n/**\n * 场景。\n */\nexport class Scene extends EventDispatcher {\n  static sceneFeatureManager = new FeatureManager<SceneFeature>();\n\n  /** 场景名字 */\n  name: string;\n  /**\n   * @private\n   * @deprecated\n   * @todo: migrate to camera\n   * 裁剪面，平面方程组。裁剪面以下的片元将被剔除绘制\n   * @example\n   * scene.clipPlanes = [[0,1,0,0]];\n   * */\n  clipPlanes: Vector4[] = [];\n  _activeCameras: Camera[] = [];\n  _isActiveInEngine: boolean = false;\n\n  private _engine: Engine;\n  private _destroyed: boolean = false;\n  private _rootEntities: Entity[] = [];\n\n  /**\n   * 当前的所属 Engine。\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  /**\n   * 根实体的数量。\n   */\n  get rootEntitiesCount(): number {\n    return this._rootEntities.length;\n  }\n\n  /**\n   * 根实体集合。\n   */\n  get rootEntities(): Readonly<Entity[]> {\n    return this._rootEntities;\n  }\n\n  /**\n   * 是否已销毁。\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * @param name - 名称\n   * @param engine - 引擎\n   */\n  constructor(name?: string, engine?: Engine) {\n    super();\n    this.name = name || \"\";\n    this._engine = engine || Engine._getDefaultEngine();\n\n    Scene.sceneFeatureManager.addObject(this);\n  }\n\n  /**\n   * 创建根实体。\n   * @param name - 实体名称\n   * @returns 实体\n   */\n  createRootEntity(name?: string): Entity {\n    const entity = new Entity(name, this._engine);\n    this.addRootEntity(entity);\n    return entity;\n  }\n\n  /**\n   * 添加根实体。\n   * @param entity - 根实体\n   */\n  addRootEntity(entity: Entity): void {\n    const isRoot = entity._isRoot;\n\n    //let entity become root\n    if (!isRoot) {\n      entity._isRoot = true;\n      entity._removeFromParent();\n    }\n\n    //add or remove from scene's rootEntities\n    const oldScene = entity._scene;\n    if (oldScene !== this) {\n      if (oldScene && isRoot) {\n        oldScene._removeEntity(entity);\n      }\n      this._rootEntities.push(entity);\n      Entity._traverseSetOwnerScene(entity, this);\n    } else if (!isRoot) {\n      this._rootEntities.push(entity);\n    }\n\n    //process entity active/inActive\n    if (this._isActiveInEngine) {\n      !entity._isActiveInHierarchy && entity._isActive && entity._processActive();\n    } else {\n      entity._isActiveInHierarchy && entity._processInActive();\n    }\n  }\n\n  /**\n   * 移除根实体。\n   * @param entity - 根实体\n   */\n  removeRootEntity(entity: Entity): void {\n    if (entity._isRoot && entity._scene == this) {\n      this._removeEntity(entity);\n      this._isActiveInEngine && entity._processInActive();\n      Entity._traverseSetOwnerScene(entity, null);\n    }\n  }\n\n  /**\n   * 通过索引获取根实体。\n   * @param index - 索引\n   */\n  getRootEntity(index: number = 0): Entity | null {\n    return this._rootEntities[index];\n  }\n\n  /**\n   * 销毁场景。\n   */\n  destroy(): void {\n    this._isActiveInEngine && (this._engine.sceneManager.activeScene = null);\n    Scene.sceneFeatureManager.callFeatureMethod(this, \"destroy\", [this]);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      this._rootEntities[i].destroy();\n    }\n    this._rootEntities.length = 0;\n    this._activeCameras.length = 0;\n    (Scene.sceneFeatureManager as any)._objects = [];\n    this._destroyed = true;\n  }\n\n  /**\n   * 向当前场景注册一个摄像机对象\n   * @param {CameraComponent} camera 摄像机对象\n   * @private\n   */\n  attachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index === -1) {\n      this._activeCameras.push(camera);\n    } else {\n      Logger.warn(\"Camera already attached.\");\n    }\n  }\n\n  /**\n   * 从当前场景移除一个摄像机对象\n   * @param {CameraComponent} camera 摄像机对象\n   * @private\n   */\n  detachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index !== -1) {\n      this._activeCameras.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(active: boolean): void {\n    this._isActiveInEngine = active;\n    const rootEntities = this._rootEntities;\n    for (let i = rootEntities.length - 1; i >= 0; i--) {\n      const entity = rootEntities[i];\n      if (entity._isActive) {\n        active ? entity._processActive() : entity._processInActive();\n      }\n    }\n  }\n\n  private _removeEntity(entity: Entity): void {\n    const oldRootEntities = this._rootEntities;\n    oldRootEntities.splice(oldRootEntities.indexOf(entity), 1);\n  }\n\n  //-----------------------------------------@deprecated-----------------------------------\n  static registerFeature(Feature: new () => SceneFeature) {\n    Scene.sceneFeatureManager.registerFeature(Feature);\n  }\n\n  findFeature<T extends SceneFeature>(Feature: { new (): T }): T {\n    return Scene.sceneFeatureManager.findFeature(this, Feature) as T;\n  }\n\n  features: SceneFeature[] = [];\n\n  /**\n   * @deprecated\n   * 射线\n   * @param ray\n   */\n  public raycast(ray: { origin: Vector3; direction: Vector3 }, outPos?: Vector3, tag?: MaskList): any {}\n}\n","import { AssetPromise } from \"./asset/AssetPromise\";\nimport { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * 场景管理员。\n */\nexport class SceneManager {\n  _activeScene: Scene;\n\n  /**\n   * 当前激活场景。\n   */\n  get activeScene(): Scene {\n    return this._activeScene;\n  }\n\n  set activeScene(scene: Scene) {\n    const oldScene = this._activeScene;\n    if (oldScene !== scene) {\n      oldScene && oldScene._processActive(false);\n      scene && scene._processActive(true);\n      this._activeScene = scene;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * 加载并激活场景。\n   * @param url - 场景路径\n   * @param destroyOldScene - 是否销毁旧场景信息\n   * @returns 场景请求\n   */\n  loadScene(url: string, destroyOldScene: boolean = true): AssetPromise<Scene> {\n    const scenePromise = this.engine.resourceManager.load<Scene>(url);\n    scenePromise.then((scene: Scene) => {\n      const oldScene: Scene = this._activeScene;\n      this.activeScene = scene;\n      if (oldScene && destroyOldScene) {\n        oldScene.destroy();\n      }\n    });\n    return scenePromise;\n  }\n\n  /**\n   * 合并场景，将源场景合并到目标场景。\n   * @remarks 合并后将使用 destScene 的全局信息,lightingMap 信息会进行合并。\n   * @param sourceScene - 源场景\n   * @param destScene - 目标场景\n   */\n  mergeScenes(sourceScene: Scene, destScene: Scene): void {\n    const oldRootEntities = sourceScene.rootEntities;\n    for (let i: number = 0, n: number = oldRootEntities.length; i < n; i++) {\n      destScene.addRootEntity(oldRootEntities[i]);\n    }\n  }\n}\n","import { Camera } from \"./Camera\";\nimport { DisorderedArray } from \"./DisorderedArray\";\nimport { Component } from \"./Component\";\nimport { RenderableComponent } from \"./RenderableComponent\";\nimport { Script } from \"./Script\";\n\n/**\n * 组件的管理员。\n */\nexport class ComponentsManager {\n  // Script\n  private _onStartScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onLateUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _destoryComponents: Script[] = [];\n\n  // Animation\n  private _onUpdateAnimations: DisorderedArray<Component> = new DisorderedArray();\n\n  // Render\n  private _renderers: DisorderedArray<RenderableComponent> = new DisorderedArray();\n  private _onUpdateRenderers: DisorderedArray<RenderableComponent> = new DisorderedArray();\n\n  // Delay dispose active/inActive Pool\n  private _componentsContainerPool: Component[][] = [];\n\n  addRenderer(renderer: RenderableComponent) {\n    renderer._rendererIndex = this._renderers.length;\n    this._renderers.add(renderer);\n  }\n\n  removeRenderer(renderer: RenderableComponent) {\n    const replaced = this._renderers.deleteByIndex(renderer._rendererIndex);\n    replaced && (replaced._rendererIndex = renderer._rendererIndex);\n    renderer._rendererIndex = -1;\n  }\n\n  addOnStartScript(script: Script) {\n    script._onStartIndex = this._onStartScripts.length;\n    this._onStartScripts.add(script);\n  }\n\n  removeOnStartScript(script: Script): void {\n    const replaced = this._onStartScripts.deleteByIndex(script._onStartIndex);\n    replaced && (replaced._onStartIndex = script._onStartIndex);\n    script._onStartIndex = -1;\n  }\n\n  addOnUpdateScript(script: Script) {\n    script._onUpdateIndex = this._onUpdateScripts.length;\n    this._onUpdateScripts.add(script);\n  }\n\n  removeOnUpdateScript(script: Script): void {\n    const replaced = this._onUpdateScripts.deleteByIndex(script._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = script._onUpdateIndex);\n    script._onUpdateIndex = -1;\n  }\n\n  addOnLateUpdateScript(script: Script): void {\n    script._onLateUpdateIndex = this._onLateUpdateScripts.length;\n    this._onLateUpdateScripts.add(script);\n  }\n\n  removeOnLateUpdateScript(script: Script): void {\n    const replaced = this._onLateUpdateScripts.deleteByIndex(script._onLateUpdateIndex);\n    replaced && (replaced._onLateUpdateIndex = script._onLateUpdateIndex);\n    script._onLateUpdateIndex = -1;\n  }\n\n  addOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    animation._onUpdateIndex = this._onUpdateAnimations.length;\n    this._onUpdateAnimations.add(animation);\n  }\n\n  removeOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    const replaced = this._onUpdateAnimations.deleteByIndex(animation._onUpdateIndex);\n    //@ts-ignore\n    replaced && (replaced._onUpdateIndex = animation._onUpdateIndex);\n    //@ts-ignore\n    animation._onUpdateIndex = -1;\n  }\n\n  addOnUpdateRenderers(renderer: RenderableComponent): void {\n    renderer._onUpdateIndex = this._onUpdateRenderers.length;\n    this._onUpdateRenderers.add(renderer);\n  }\n\n  removeOnUpdateRenderers(renderer: RenderableComponent): void {\n    const replaced = this._onUpdateRenderers.deleteByIndex(renderer._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = renderer._onUpdateIndex);\n    renderer._onUpdateIndex = -1;\n  }\n\n  addDestoryComponent(component): void {\n    this._destoryComponents.push(component);\n  }\n\n  callScriptOnStart(): void {\n    const onStartScripts = this._onStartScripts;\n    if (onStartScripts.length > 0) {\n      const elements = onStartScripts._elements;\n      // onStartScripts's length maybe add if you add some Script with addComponent() in some Script's onStart()\n      for (let i = 0; i < onStartScripts.length; i++) {\n        const script = elements[i];\n        script._started = true;\n        script._onStartIndex = -1;\n        script.onStart();\n      }\n      onStartScripts.length = 0;\n    }\n  }\n\n  callScriptOnUpdate(deltaTime): void {\n    const elements = this._onUpdateScripts._elements;\n    for (let i = this._onUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (element._started) {\n        element.onUpdate(deltaTime);\n      }\n    }\n  }\n\n  callScriptOnLateUpdate(deltaTime): void {\n    const elements = this._onLateUpdateScripts._elements;\n    for (let i = this._onLateUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (element._started) {\n        element.onLateUpdate(deltaTime);\n      }\n    }\n  }\n\n  callAnimationUpdate(deltaTime): void {\n    const elements = this._onUpdateAnimations._elements;\n    for (let i = this._onUpdateAnimations.length - 1; i >= 0; --i) {\n      //@ts-ignore\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRendererOnUpdate(deltaTime: number): void {\n    const elements = this._onUpdateRenderers._elements;\n    for (let i = this._onUpdateRenderers.length - 1; i >= 0; --i) {\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRender(camera: Camera): void {\n    const elements = this._renderers._elements;\n    for (let i = this._renderers.length - 1; i >= 0; --i) {\n      elements[i]._render(camera);\n    }\n  }\n\n  callComponentDestory(): void {\n    const destoryComponents = this._destoryComponents;\n    const length = destoryComponents.length;\n    if (length > 0) {\n      for (let i = length - 1; i >= 0; --i) {\n        destoryComponents[i].onDestroy();\n      }\n      destoryComponents.length = 0;\n    }\n  }\n\n  callCameraOnBeginRender(camera: Camera) {\n    const camComps = camera.entity._components;\n    for (let i = camComps.length - 1; i >= 0; --i) {\n      const camComp = camComps[i];\n      (camComp as any).onBeginRender && (camComp as any).onBeginRender(camera);\n    }\n  }\n\n  callCameraOnEndRender(camera: Camera) {\n    const camComps = camera.entity._components;\n    for (let i = camComps.length - 1; i >= 0; --i) {\n      const camComp = camComps[i];\n      (camComp as any).onBeginRender && (camComp as any).onEndRender(camera);\n    }\n  }\n\n  getActiveChangedTempList(): Component[] {\n    return this._componentsContainerPool.length ? this._componentsContainerPool.pop() : [];\n  }\n\n  putActiveChangedTempList(componentContainer: Component[]): void {\n    componentContainer.length = 0;\n    this._componentsContainerPool.push(componentContainer);\n  }\n}\n","import { Event, EventDispatcher, Logger, Time } from \"./base\";\nimport { ResourceManager } from \"./asset/ResourceManager\";\nimport { Canvas } from \"./Canvas\";\nimport { HardwareRenderer } from \"./HardwareRenderer\";\nimport { EngineFeature } from \"./EngineFeature\";\nimport { FeatureManager } from \"./FeatureManager\";\nimport { Scene } from \"./Scene\";\nimport { SceneManager } from \"./SceneManager\";\nimport { Entity } from \"./Entity\";\nimport { ComponentsManager } from \"./ComponentsManager\";\n\n/** todo: delete */\nconst engineFeatureManager = new FeatureManager<EngineFeature>();\n\n/**\n * 引擎。\n */\nexport class Engine extends EventDispatcher {\n  /**\n   * 当前创建对象所属的默认引擎对象。\n   */\n  static defaultCreateObjectEngine: Engine = null;\n\n  static _lastCreateEngine: Engine = null;\n\n  static _getDefaultEngine(): Engine {\n    return Engine.defaultCreateObjectEngine || Engine._lastCreateEngine;\n  }\n\n  _componentsManager: ComponentsManager = new ComponentsManager();\n  _hardwareRenderer: HardwareRenderer;\n\n  protected _canvas: Canvas;\n  private _resourceManager: ResourceManager = new ResourceManager(this);\n  private _sceneManager: SceneManager = new SceneManager(this);\n  private _vSyncCount: number = 1;\n  private _targetFrameRate: number = 60;\n  private _time: Time = new Time();\n  private _isPaused: boolean = true;\n  private _requestId: number;\n  private _timeoutId: number;\n  private _loopCounter: number = 0;\n  private _targetFrameInterval: number = 1000 / 60;\n  private _destroyed = false;\n\n  private _animate = () => {\n    if (this._vSyncCount) {\n      this._requestId = requestAnimationFrame(this._animate);\n      if (this._loopCounter++ % this._vSyncCount === 0) {\n        this.update();\n        this._loopCounter = 0;\n      }\n    } else {\n      this._timeoutId = window.setTimeout(this._animate, this._targetFrameInterval);\n      this.update();\n    }\n  };\n\n  /**\n   * 渲染画布。\n   */\n  get canvas(): Canvas {\n    return this._canvas;\n  }\n\n  /**\n   * 资源管理器。\n   */\n  get resourceManager(): ResourceManager {\n    return this._resourceManager;\n  }\n\n  /**\n   * 场景管理器。\n   */\n  get sceneManager(): SceneManager {\n    return this._sceneManager;\n  }\n\n  /**\n   * 计时器。\n   */\n  get time(): Time {\n    return this._time;\n  }\n\n  /**\n   * 是否暂停。\n   */\n  get isPaused(): boolean {\n    return this._isPaused;\n  }\n\n  /**\n   * 垂直同步数量,表示执行一帧的垂直消隐数量,0表示关闭垂直同步。\n   */\n  get vSyncCount(): number {\n    return this._vSyncCount;\n  }\n\n  set vSyncCount(value: number) {\n    this._vSyncCount = Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * 目标帧率，vSyncCount = 0（即关闭垂直同步）时生效。\n   * 值越大，目标帧率越高，Number.POSITIVE_INFINIT 表示无穷大目标帧率。\n   */\n  get targetFrameRate(): number {\n    return this._targetFrameRate;\n  }\n\n  set targetFrameRate(value: number) {\n    value = Math.max(0.000001, value);\n    this._targetFrameRate = value;\n    this._targetFrameInterval = 1000 / value;\n  }\n\n  /**\n   * @deprecated\n   * 图形API渲染器。\n   */\n  get renderhardware(): HardwareRenderer {\n    return this._hardwareRenderer;\n  }\n\n  /**\n   * 创建引擎。\n   * @param canvas - 渲染画布\n   * @param hardwareRenderer - 渲染器\n   */\n  constructor(canvas: Canvas, hardwareRenderer: HardwareRenderer) {\n    super();\n    Engine._lastCreateEngine = this;\n    this._hardwareRenderer = hardwareRenderer;\n    this._hardwareRenderer.init(canvas);\n    this._canvas = canvas;\n    // @todo delete\n    engineFeatureManager.addObject(this);\n    this._sceneManager.activeScene = new Scene(\"DefaultScene\", this);\n  }\n\n  /**\n   * 创建实体。\n   * @param name - 名字\n   */\n  createEntity(name?: string): Entity {\n    return new Entity(name, this);\n  }\n\n  /**\n   * 暂停引擎循环。\n   */\n  pause(): void {\n    this._isPaused = true;\n    cancelAnimationFrame(this._requestId);\n    clearTimeout(this._timeoutId);\n  }\n\n  /**\n   * 恢复引擎循环。\n   */\n  resume(): void {\n    if (!this._isPaused) return;\n    this._isPaused = false;\n    requestAnimationFrame(this._animate);\n  }\n\n  /**\n   * 引擎手动更新，如果调用 run() 则一般无需调用该函数。\n   */\n  update(): void {\n    const time = this._time;\n    time.tick();\n    const deltaTime = time.deltaTime;\n    engineFeatureManager.callFeatureMethod(this, \"preTick\", [this, this._sceneManager._activeScene]);\n\n    this._hardwareRenderer.beginFrame();\n\n    const scene = this._sceneManager._activeScene;\n    const componentsManager = this._componentsManager;\n    if (scene) {\n      componentsManager.callScriptOnStart();\n      componentsManager.callScriptOnUpdate(deltaTime);\n      componentsManager.callAnimationUpdate(deltaTime);\n      componentsManager.callScriptOnLateUpdate(deltaTime);\n\n      this._render(scene);\n    }\n\n    this._componentsManager.callComponentDestory();\n    this._hardwareRenderer.endFrame();\n\n    engineFeatureManager.callFeatureMethod(this, \"postTick\", [this, this._sceneManager._activeScene]);\n  }\n\n  /**\n   * 执行引擎循环。\n   */\n  run(): void {\n    // @todo: delete\n    engineFeatureManager.callFeatureMethod(this, \"preLoad\", [this]);\n    this.resume();\n    this.trigger(new Event(\"run\", this));\n  }\n\n  /**\n   * 销毁引擎。\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n    this._destroyed = true;\n    // -- event\n    this.trigger(new Event(\"shutdown\", this));\n    engineFeatureManager.callFeatureMethod(this, \"shutdown\", [this]);\n\n    // -- cancel animation\n    this.pause();\n\n    this._animate = null;\n\n    this._sceneManager._activeScene.destroy();\n    this._sceneManager = null;\n    this._resourceManager.gc();\n    this._resourceManager = null;\n\n    this._canvas = null;\n\n    this.features = [];\n    this._time = null;\n\n    // todo: delete\n    (engineFeatureManager as any)._objects = [];\n  }\n\n  _render(scene: Scene): void {\n    const cameras = scene._activeCameras;\n    const componentsManager = this._componentsManager;\n    const deltaTime = this.time.deltaTime;\n    componentsManager.callRendererOnUpdate(deltaTime);\n    if (cameras.length > 0) {\n      // 针对 priority 进行排序\n      //@ts-ignore\n      cameras.sort((camera1, camera2) => camera1.priority - camera2.priority);\n      for (let i = 0, l = cameras.length; i < l; i++) {\n        const camera = cameras[i];\n        const cameraEntity = camera.entity;\n        if (camera.enabled && cameraEntity.isActiveInHierarchy) {\n          componentsManager.callCameraOnBeginRender(camera);\n          Scene.sceneFeatureManager.callFeatureMethod(scene, \"preRender\", [this, camera]); //TODO:移除\n          camera.render();\n          Scene.sceneFeatureManager.callFeatureMethod(scene, \"postRender\", [this, camera]); //TODO:移除\n          componentsManager.callCameraOnEndRender(camera);\n        }\n      }\n    } else {\n      Logger.debug(\"NO active camera.\");\n    }\n  }\n\n  //-----------------------------------------@deprecated-----------------------------------\n\n  findFeature(Feature) {\n    return engineFeatureManager.findFeature(this, Feature);\n  }\n\n  static registerFeature(Feature: new () => EngineFeature): void {\n    engineFeatureManager.registerFeature(Feature);\n  }\n\n  features: EngineFeature[] = [];\n}\n","/**\n * 系统信息。\n */\nexport class SystemInfo {\n  /**\n   * 设备的像素比。\n   */\n  static get devicePixelRatio(): number {\n    return window.devicePixelRatio;\n  }\n}\n","import { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * 引擎功能特性插件基类\n * @class\n */\nexport class EngineFeature {\n  /**\n   * 引擎主循环运行之前的回调，用来预加载资源\n   * @param {Engine} engine\n   */\n  public preLoad(engine: Engine): void {}\n\n  /**\n   * 场景 Tick 之前的回调\n   * @param {Engine} engine\n   * @param {Scene} currentScene\n   */\n  public preTick(engine: Engine, currentScene: Scene): void {}\n\n  /**\n   * 场景 Tick 完成之后的回调\n   * @param {Engine} engine\n   */\n  public postTick(engine: Engine, currentScene: Scene): void {}\n\n  /**\n   * 引擎关闭的时候调用\n   * @param {Engine} engine\n   */\n  public shutdown(engine: Engine): void {}\n}\n","import { InternalAssetType, EngineObject } from \"../base\";\n\n/**\n * 使用引用计数管理的资源对象基类\n */\nexport class AssetObject extends EngineObject {\n  public type: InternalAssetType | string;\n\n  public name: string;\n  public cacheID: number;\n  public needRecreate: boolean;\n  public glAsset: any;\n}\n","import { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\n\n/**\n * Scene 访问者接口\n */\nexport abstract class SceneVisitor {}\n","import { Camera } from \"./Camera\";\nimport { Scene } from \"./Scene\";\n\n/**\n * 场景的功能特性插件基类\n * @class\n */\nexport abstract class SceneFeature {\n  /**\n   * 场景 Update 之前的回调\n   * @param {Scene} scene\n   */\n  public preUpdate(scene: Scene): void {}\n\n  /**\n   * 场景 Update 之后的回调\n   * @param {Scene} scene\n   */\n  public postUpdate(scene: Scene): void {}\n\n  /**\n   * 场景渲染前的回调\n   * @param scene\n   * @param camera\n   */\n  public preRender(scene: Scene, camera: Camera): void {}\n\n  /**\n   * 场景渲染后的回调\n   * @param scene\n   * @param camera\n   */\n  public postRender(scene: Scene, camera: Camera): void {}\n\n  /**\n   * 场景销毁的时候调用\n   * @param {Scene} scene\n   */\n  public destroy(scene: Scene): void {}\n}\n","import { Component } from \"./Component\";\nimport { Camera } from \"./Camera\";\n\n/**\n * 脚本类，可进行逻辑编写。\n */\nexport class Script extends Component {\n  /** @internal */\n  _started: boolean = false;\n  /** @internal */\n  _onStartIndex: number = -1;\n  /** @internal */\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  _onLateUpdateIndex: number = -1;\n  /** @internal */\n  _onPreRenderIndex: number = -1;\n  /** @internal */\n  _onPostRenderIndex: number = -1;\n\n  /**\n   * 第一次触发可用状态时调用,只调用一次。\n   */\n  onAwake(): void {}\n\n  /**\n   * 触发为可用状态时调用。\n   */\n  onEnable(): void {}\n\n  /**\n   * 第一次执行帧级循环前调用，只调用一次。\n   */\n  onStart(): void {}\n\n  /**\n   * 主更新，逐帧调用。\n   * @param deltaTime - 帧间隔时间\n   */\n  onUpdate(deltaTime: number): void {}\n\n  /**\n   * 延迟更新，逐帧调用。\n   * @param deltaTime - 帧间隔时间\n   */\n  onLateUpdate(deltaTime: number): void {}\n\n  /**\n   * 相机渲染前调用，逐相机调用。\n   * @param camera - 当前渲染相机\n   */\n  onBeginRender(camera: Camera): void {}\n\n  /**\n   * 相机完成渲染后调用，逐相机调用。\n   * @param camera - 当前渲染相机\n   */\n  onEndRender(camera: Camera): void {}\n\n  /**\n   * 触发为禁用状态时调用。\n   */\n  onDisable(): void {}\n\n  /**\n   * 在被销毁帧的最后调用。\n   */\n  onDestroy(): void {}\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onAwake(): void {\n    this.onAwake();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onEnable(): void {\n    const componentsManager = this.engine._componentsManager;\n    const prototype = Script.prototype;\n    if (!this._started) {\n      componentsManager.addOnStartScript(this);\n    }\n    if (this.onUpdate !== prototype.onUpdate) {\n      componentsManager.addOnUpdateScript(this);\n    }\n    if (this.onLateUpdate !== prototype.onLateUpdate) {\n      componentsManager.addOnLateUpdateScript(this);\n    }\n    this.onEnable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDisable(): void {\n    const componentsManager = this.engine._componentsManager;\n    const prototype = Script.prototype;\n    /**\n     * use onStartIndex is more safe,\n     * even is not start, but maybe it still not in the queue,for example write \"entity.isActive = false\" in onWake().\n     */\n    if (this._onStartIndex !== -1) {\n      componentsManager.removeOnStartScript(this);\n    }\n    if (this.onUpdate !== prototype.onUpdate) {\n      componentsManager.removeOnUpdateScript(this);\n    }\n    if (this.onLateUpdate !== prototype.onLateUpdate) {\n      componentsManager.removeOnLateUpdateScript(this);\n    }\n    this.onDisable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDestroy(): void {\n    this.engine._componentsManager.addDestoryComponent(this);\n  }\n}\n","import { Camera } from \"./Camera\";\nimport { Component } from \"./Component\";\nimport { Vector3 } from \"@alipay/o3-math\";\nimport { Entity } from \"./Entity\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * 包围盒。\n */\nexport interface BoundingBox {\n  min: Vector3;\n  max: Vector3;\n}\n\n/**\n * 可渲染的组件。\n */\nexport abstract class RenderableComponent extends Component {\n  /** @internal */\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  _rendererIndex: number = -1;\n\n  /** @internal */\n  protected _overrideUpdate: boolean = false;\n\n  private _transformChangeFlag: UpdateFlag;\n  private _bounds: BoundingBox = { min: new Vector3(), max: new Vector3() };\n\n  /**\n   * 包围体。\n   */\n  get bounds(): BoundingBox {\n    const changeFlag = this._transformChangeFlag;\n    if (changeFlag.flag) {\n      this._updateBounds(this._bounds);\n      changeFlag.flag = false;\n    }\n    return this._bounds;\n  }\n\n  constructor(entity: Entity, props: object = {}) {\n    super(entity, props);\n    const prototype = RenderableComponent.prototype;\n    this._overrideUpdate = this.update !== prototype.update;\n    this._transformChangeFlag = this.entity.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * @inheritdoc\n   */\n  destroy(): void {\n    super.destroy();\n    const flag = this._transformChangeFlag;\n    if (flag) {\n      flag.destroy();\n      this._transformChangeFlag = null;\n    }\n  }\n\n  abstract render(camera: Camera): void;\n  update(deltaTime: number): void {}\n\n  protected _updateBounds(worldBounds: any): void {}\n\n  _onEnable() {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.addOnUpdateRenderers(this);\n    }\n    componentsManager.addRenderer(this);\n  }\n\n  _onDisable() {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.removeOnUpdateRenderers(this);\n    }\n    componentsManager.removeRenderer(this);\n  }\n\n  _render(camera: Camera) {\n    let culled = false;\n\n    // distance cull\n    if (this.cullDistanceSq > 0) {\n      const distanceSq = Vector3.distanceSquared(\n        camera._entity.transform.worldPosition,\n        this.entity.transform.worldPosition\n      );\n      culled = this.cullDistanceSq < distanceSq;\n    }\n\n    if (!culled) {\n      this.render(camera);\n    }\n  }\n}\n","import { ClearMode, MaskList } from \"../base\";\nimport { Camera } from \"../Camera\";\nimport { Vector4 } from \"@alipay/o3-math\";\n\n/** @todo: monorepo circle dependence */\ntype RenderTarget = any;\ntype Material = any;\n\nlet passNum = 0;\n\n/**\n * RednerPass 对象\n */\nclass RenderPass {\n  public name: string;\n  public enabled: boolean;\n  public priority: number;\n  public renderTarget: RenderTarget;\n  public replaceMaterial;\n  public mask: MaskList;\n  public renderOverride: boolean;\n  public clearMode;\n  private _clearParam;\n\n  /**\n   * RenderPass 构造函数\n   * @param name 这个 Pass 的名称\n   * @param priority 优先级，小于0在默认Pass之前，大于0在默认Pass之后\n   * @param renderTarget 指定的 Render Target\n   * @param replaceMaterial 替换模型的默认材质\n   * @param mask 与 Component.renderPassFlag 进行 bit and 操作，对这个 Pass 需要渲染的对象进行筛选\n   * @param clearParam 清除renderTarget的背景颜色\n   */\n  constructor(\n    name = `RENDER_PASS${passNum++}`,\n    priority = 0,\n    renderTarget = null,\n    replaceMaterial = null,\n    mask = null,\n    clearParam = new Vector4(0, 0, 0, 0)\n  ) {\n    this.name = name;\n    this.enabled = true;\n    this.priority = priority;\n    this.renderTarget = renderTarget;\n    this.replaceMaterial = replaceMaterial;\n    this.mask = mask || MaskList.EVERYTHING;\n    this.renderOverride = false; ///< 若 renderOverride 设为了 true，则需要实现 render(camera) 方法\n\n    /**\n     * 画布清除模式，默认为 ClearMode.SOLID_COLOR\n     * @member {number}\n     */\n    this.clearMode = ClearMode.SOLID_COLOR;\n    this._clearParam = clearParam; // PASS use render target's clearParam\n  }\n\n  /**\n   * 画布清除参数，默认使用 RenderTarget 的 clearColor\n   * @type {*}\n   */\n  get clearParam() {\n    return this._clearParam;\n  }\n\n  set clearParam(v) {\n    this._clearParam = v;\n  }\n\n  /**\n   * 用于自定义的渲染过程，若 renderOverride 设为了 true 将被执行到\n   * @param {Camera} camera 相机\n   * @param {RenderQueue} opaqueQueue 不透明物体渲染队列\n   * @param {RenderQueue} transparentQueue 透明物体渲染队列\n   */\n  render(camera: Camera, opaqueQueue, transparentQueue) {}\n\n  /**\n   * Pass 渲染前调用\n   * @param {Camera} camera 相机\n   * @param {RenderQueue} opaqueQueue 不透明物体渲染队列\n   * @param {RenderQueue} transparentQueue 透明物体渲染队列\n   */\n  preRender(camera: Camera, opaqueQueue, transparentQueue) {}\n\n  /**\n   * Pass 渲染后调用\n   * @param {Camera} camera 相机\n   * @param {RenderQueue} opaqueQueue 不透明物体渲染队列\n   * @param {RenderQueue} transparentQueue 透明物体渲染队列\n   */\n  postRender(camera: Camera, opaqueQueue, transparentQueue) {}\n}\n\nexport { RenderPass };\n","import { Camera } from \"../Camera\";\nimport { Matrix, Vector4, Vector3 } from \"@alipay/o3-math\";\n\n/**\n * 渲染上下文。\n */\nexport class RenderContext {\n  private static _renderContext: RenderContext = new RenderContext();\n\n  static _getRenderContext(camera: Camera): RenderContext {\n    const context = RenderContext._renderContext;\n    context.camera = camera;\n    context.viewport = camera.viewport;\n    context.cameraPosition = camera.entity.transform.worldPosition;\n    context.inverseViewMatrix = camera.inverseViewMatrix;\n    context.inverseProjectionMatrix = camera.inverseProjectionMatrix;\n    context.viewMatrix = camera.viewMatrix;\n    context.projectionMatrix = camera.projectionMatrix;\n    Matrix.multiply(context.projectionMatrix, context.viewMatrix, context.viewProjectMatrix);\n    return this._renderContext;\n  }\n\n  camera: Camera;\n  viewMatrix: Matrix;\n  projectionMatrix: Matrix;\n  viewProjectMatrix: Matrix = new Matrix();\n  inverseViewMatrix: Matrix;\n  inverseProjectionMatrix: Matrix;\n  viewport: Vector4;\n  cameraPosition: Vector3;\n}\n","import { Vector3 } from \"@alipay/o3-math\";\nimport { MaskList } from \"../base\";\nimport { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { RenderContext } from \"./RenderContext\";\n\n/** @todo: monorepo circle dependence */\ntype RenderTarget = any;\ntype Material = any;\n\n/**\n * 渲染队列管理。\n * @private\n */\nexport class RenderQueue {\n  private _items;\n\n  constructor() {\n    this._items = [];\n  }\n\n  /**\n   * 需要渲染的对象数组\n   * @member {Object}\n   * @readonly\n   */\n  get items() {\n    return this._items;\n  }\n\n  /**\n   * 情况内部数据\n   */\n  clear() {\n    this._items = [];\n  }\n\n  /**\n   * 把一个 Primitive 对象添加进来\n   */\n  pushPrimitive(component, primitive, mtl) {\n    this._items.push({\n      component,\n      primitive,\n      mtl\n    });\n  }\n\n  /**\n   * 对于透明对象，按照离摄像机由远及近的顺序渲染，有助于减少视觉错误\n   * @param {Vector3} eyePos\n   */\n  sortByDistance(eyePos: Vector3) {\n    const items = this._items;\n\n    if (items.length > 1) {\n      this._items = items.sort(function (item1, item2) {\n        if (item1.component.renderPriority === item2.component.renderPriority) {\n          const pos1 = item1.component.entity.transform.worldPosition;\n          const pos2 = item2.component.entity.transform.worldPosition;\n\n          const dis = Vector3.distanceSquared(pos2, eyePos) - Vector3.distanceSquared(pos1, eyePos);\n          return dis;\n        } else {\n          return item1.component.renderPriority - item2.component.renderPriority;\n        }\n      });\n    } // end of if\n  }\n\n  /**\n   * 对于不透明对象，按照 Technique 排序，可以减少渲染状态切换，提升效率\n   */\n  sortByTechnique() {\n    const items = this._items;\n\n    if (items.length > 1) {\n      this._items = items.sort(function (item1, item2) {\n        if (item1.component.renderPriority === item2.component.renderPriority) {\n          const tech1 = item1.mtl.technique;\n          const tech2 = item2.mtl.technique;\n          if (tech1 && tech2) {\n            return tech1.name.localeCompare(tech2.name);\n          } else {\n            return 0;\n          }\n        } else {\n          return item1.component.renderPriority - item2.component.renderPriority;\n        }\n      });\n    } // end of if\n  }\n\n  /**\n   * 把一个 Sprite 绘制需要的信息传进来\n   * @param {Component} component\n   * @param {object} positionQuad  Sprite四个顶点的位置\n   * @param {object} uvRect        Sprite在texture上的纹理坐标\n   * @param {vec4}   tintColor     颜色\n   * @param {Texture}   texture    纹理信息\n   * @param {String}    renderMode    绘制方式， '2D' 或者 '3D'\n   * @param {Camera}   camera        相机信息\n   */\n  pushSprite(component: Component, positionQuad, uvRect, tintColor, texture, renderMode, camera: Camera) {\n    this._items.push({\n      component,\n      positionQuad,\n      uvRect,\n      tintColor,\n      texture,\n      renderMode,\n      camera\n    });\n  }\n\n  /**\n   * 执行渲染操作\n   * @param {Camera} camera 当前的摄像机\n   * @param {Material} replaceMaterial 替换模型自身的材质\n   * @param {number} mask 渲染过滤使用的mask\n   */\n  render(camera: Camera, replaceMaterial: Material, mask: MaskList) {\n    const rhi = camera.scene.engine._hardwareRenderer;\n    const items = this._items;\n\n    // 如果没有items不需要渲染\n    if (items.length === 0) {\n      return;\n    }\n\n    this.updateMaxJointsNum(this._items, replaceMaterial);\n\n    const context = RenderContext._getRenderContext(camera);\n\n    for (let i = 0, len = items.length; i < len; i++) {\n      const item = items[i];\n      const { component, primitive, mtl } = item;\n\n      //-- filter by mask\n      const renderPassFlag = component.renderPassFlag;\n      if (!(renderPassFlag & mask)) continue;\n\n      //-- draw\n      if (this._isPrimitive(item)) {\n        //-- 如果有缓存的Sprite尚未绘制，则先绘制缓存的Sprite\n        rhi.flushSprite();\n\n        const material = replaceMaterial ? replaceMaterial : mtl;\n        material.preRender?.(item.component, item.primitive);\n\n        material.prepareDrawing(context, item.component, item.primitive, mtl);\n        rhi.drawPrimitive(item.primitive, material);\n\n        material.postRender?.(item.component, item.primitive);\n      } else {\n        rhi.drawSprite(item.positionQuad, item.uvRect, item.tintColor, item.texture, item.renderMode, item.camera);\n      }\n    } // end of for\n\n    rhi.flushSprite();\n  }\n\n  /**\n   * 更新当前 renderQueue 中各个材质的最大骨骼节点数\n   * @param items\n   * @param {Material} replaceMaterial\n   */\n  updateMaxJointsNum(items, replaceMaterial: Material) {\n    for (let i = 0, len = items.length; i < len; i++) {\n      const { component, mtl } = items[i];\n\n      const materialControl = replaceMaterial ? replaceMaterial : mtl;\n      // 仅当 component 为 SkinnedMeshRenderer 时需要计算\n      if (component.jointNodes) {\n        materialControl.maxJointsNum = Math.max(materialControl.maxJointsNum, component.jointNodes.length);\n      }\n    }\n  }\n\n  /**\n   * 判断是否是sprite\n   * @private\n   */\n  _isPrimitive(item) {\n    return !!item.primitive;\n  }\n}\n","import { ClearMode } from \"../base\";\nimport { Vector3 } from \"@alipay/o3-math\";\nimport { Camera } from \"../Camera\";\nimport { RenderPass } from \"./RenderPass\";\n\n/**\n * Sprite 的 RenderPass，在后处理后绘制，不受后处理影响\n * @private\n */\nexport class SeparateSpritePass extends RenderPass {\n  private _spriteItems;\n\n  constructor(name = \"SeparateSprite\", priority = 10) {\n    super(name, priority);\n\n    this.clearMode = ClearMode.DONT_CLEAR;\n    this.renderOverride = true;\n\n    this._spriteItems = [];\n  }\n\n  /**\n   * 给 RenderPipeline 调用，判断是否需要绘制 Sprite\n   */\n  get isUsed() {\n    return this._spriteItems.length > 0;\n  }\n\n  preRender() {\n    this.enabled = this.isUsed;\n  }\n\n  render(camera) {\n    const rhi = camera.renderHardware;\n\n    this._sortByDistance(camera.eyePos);\n    const items = this._spriteItems;\n\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      rhi.drawSprite(item.positionQuad, item.uvRect, item.tintColor, item.texture, item.renderMode, item.camera);\n    }\n\n    items.length = 0;\n  }\n\n  postRender(camera) {\n    if (this.enabled) {\n      // 确保所有缓冲的 Sprites 都绘制到画布中\n      camera.renderHardware.flushSprite();\n    }\n  }\n\n  /**\n   * 对于透明对象，按照离摄像机由远及近的顺序渲染，有助于减少视觉错误\n   * @param {vec3} eyePos\n   */\n  _sortByDistance(eyePos) {\n    if (this._spriteItems.length > 1) {\n      this._spriteItems = this._spriteItems.sort(function (item1, item2) {\n        if (item1.component.renderPriority === item2.component.renderPriority) {\n          const pos1 = item1.component.node.worldPosition;\n          const pos2 = item2.component.node.worldPosition;\n\n          const dis = Vector3.distanceSquared(pos2, eyePos) - Vector3.distanceSquared(pos1, eyePos);\n          return dis;\n        } else {\n          return item1.component.renderPriority - item2.component.renderPriority;\n        }\n      });\n    } // end of if\n  }\n\n  /**\n   * 把一个 Sprite 绘制需要的信息传进来\n   * @param {Component} component\n   * @param {Object} positionQuad  Sprite四个顶点的位置\n   * @param {Object} uvRect        Sprite在texture上的纹理坐标\n   * @param {vec4}   tintColor     颜色\n   * @param {Texture}   texture    纹理信息\n   * @param {String}    renderMode    绘制方式， '2D' 或者 '3D'\n   * @param {Camera}   camera        相机信息\n   */\n  pushSprite(component, positionQuad, uvRect, tintColor, texture, renderMode, camera: Camera) {\n    this._spriteItems.push({\n      component,\n      positionQuad,\n      uvRect,\n      tintColor,\n      texture,\n      renderMode,\n      camera\n    });\n  }\n}\n","import { ClearMode, MaskList, MaterialType } from \"../base\";\nimport { Camera } from \"../Camera\";\nimport { SceneVisitor } from \"../SceneVisitor\";\nimport { Component } from \"../Component\";\nimport { RenderPass } from \"./RenderPass\";\nimport { RenderQueue } from \"./RenderQueue\";\nimport { SeparateSpritePass } from \"./SeparateSpritePass\";\nimport { Vector4 } from \"@alipay/o3-math\";\n\n/** @todo: monorepo circle dependence */\ntype RenderTarget = any;\ntype Material = any;\n\n/**\n * 使用指定的CameraComponent对象，渲染当前场景中的所有可见对象\n * @class\n */\nexport class BasicRenderPipeline extends SceneVisitor {\n  protected _camera: Camera;\n  private _opaqueQueue: RenderQueue;\n  private _transparentQueue: RenderQueue;\n  private _defaultPass: RenderPass;\n  protected _renderPassArray: Array<RenderPass>;\n  private _canvasDepthPass;\n  private _separateSpritePass;\n\n  /**\n   * 构造函数\n   * @param {Camera} camera 摄像机对象\n   */\n  constructor(camera) {\n    super();\n\n    this._camera = camera;\n    this._opaqueQueue = new RenderQueue(); // 不透明对象的渲染队列\n    this._transparentQueue = new RenderQueue(); // 透明对象的渲染队列\n\n    this._renderPassArray = [];\n    this._defaultPass = new RenderPass(\"default\", 0, null, null, 0);\n    this.addRenderPass(this._defaultPass);\n  }\n\n  /**\n   * 默认的 RenderPass\n   */\n  get defaultRenderPass() {\n    return this._defaultPass;\n  }\n\n  /**\n   * 添加一个 Render Pass\n   * @param {string|RenderPass} nameOrPass 这个 Pass 的名称或者 RenderPass 对象，当为名称时需提供以下参数\n   * @param {number} priority 优先级，小于0在默认Pass之前，大于0在默认Pass之后\n   * @param {RenderTarget} renderTarget 指定的 Render Target\n   * @param {Material} replaceMaterial 替换模型的默认材质\n   * @param {MaskList} mask 与 Component.renderPassFlag 进行 bit and 操作，对这个 Pass 需要渲染的对象进行筛选\n   * @param clearParam 清除renderTarget的背景颜色\n   */\n  addRenderPass(\n    nameOrPass: string | RenderPass,\n    priority: number = null,\n    renderTarget: RenderTarget = null,\n    replaceMaterial: Material = null,\n    mask: MaskList = null,\n    clearParam = new Vector4(0, 0, 0, 0)\n  ) {\n    if (typeof nameOrPass === \"string\") {\n      const renderPass = new RenderPass(nameOrPass, priority, renderTarget, replaceMaterial, mask, clearParam);\n      this._renderPassArray.push(renderPass);\n    } else if (nameOrPass instanceof RenderPass) {\n      this._renderPassArray.push(nameOrPass);\n    }\n\n    this._renderPassArray.sort(function (p1, p2) {\n      return p1.priority - p2.priority;\n    });\n  }\n\n  /**\n   * 通过名称或 RenderPass 对象移除 RenderPass\n   * @param {string | RenderPass} nameOrPass RenderPass 名称\n   */\n  removeRenderPass(nameOrPass: string | RenderPass): void {\n    let pass: RenderPass;\n    if (typeof nameOrPass === \"string\") pass = this.getRenderPass(nameOrPass);\n    else if (nameOrPass instanceof RenderPass) pass = nameOrPass;\n    if (pass) {\n      const idx = this._renderPassArray.indexOf(pass);\n      this._renderPassArray.splice(idx, 1);\n    }\n  }\n\n  /**\n   * 通过名称获取 RenderPass\n   * @param {string} name RenderPass 名称\n   */\n  getRenderPass(name: string) {\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      const pass = this._renderPassArray[i];\n      if (pass.name === name) return pass;\n    }\n\n    return null;\n  }\n\n  /**\n   * 不透明对象的渲染队列\n   * @member {RenderQueue}\n   * @readonly\n   */\n  get opaqueQueue(): RenderQueue {\n    return this._opaqueQueue;\n  }\n\n  /**\n   * 透明对象的渲染队列\n   * @member {RenderQueue}\n   * @readonly\n   */\n  get transparentQueue(): RenderQueue {\n    return this._transparentQueue;\n  }\n\n  /**\n   * 释放内部资源\n   */\n  destroy() {}\n\n  /**\n   * 执行场景渲染\n   */\n  render() {\n    const camera = this._camera;\n    const opaqueQueue = this._opaqueQueue;\n    const transparentQueue = this._transparentQueue;\n\n    //-- 清空内部状态\n    opaqueQueue.clear();\n    transparentQueue.clear();\n\n    camera.engine._componentsManager.callRender(camera);\n    //-- 执行渲染队列\n    opaqueQueue.sortByTechnique();\n    transparentQueue.sortByDistance(camera.entity.transform.worldPosition);\n\n    //-- 为sprite提供canvas上的深度信息\n    if (this._canvasDepthPass) this._canvasDepthPass.enabled = false;\n\n    if (this._separateSpritePass && this._separateSpritePass.isUsed) {\n      // 如果默认的rendertarget不是canvas的话，就需要在canvas上再绘制一遍确保有深度信息\n      if (this._defaultPass.renderTarget) {\n        if (!this._canvasDepthPass) {\n          this._canvasDepthPass = new RenderPass(\"CanvasDepthRenderPass\", 0, null, null, 0);\n          this._canvasDepthPass.clearMode = ClearMode.DONT_CLEAR;\n          this.addRenderPass(this._canvasDepthPass);\n        }\n        this._canvasDepthPass.enabled = true;\n      }\n    }\n\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      this._drawRenderPass(this._renderPassArray[i], camera);\n    }\n  }\n\n  private _drawRenderPass(pass: RenderPass, camera: Camera) {\n    pass.preRender(camera, this.opaqueQueue, this.transparentQueue);\n\n    const rhi = camera.scene.engine._hardwareRenderer;\n    const renderTarget = camera.renderTarget || pass.renderTarget;\n    rhi.activeRenderTarget(renderTarget, camera); // keep require rendertarget in case of GC\n\n    if (pass.enabled) {\n      rhi.clearRenderTarget(pass.clearMode, pass.clearParam);\n\n      if (pass.renderOverride) {\n        pass.render(camera, this.opaqueQueue, this.transparentQueue);\n      } else {\n        this.opaqueQueue.render(camera, pass.replaceMaterial, pass.mask);\n        this.transparentQueue.render(camera, pass.replaceMaterial, pass.mask);\n      }\n    }\n\n    rhi.blitRenderTarget(renderTarget);\n    pass.postRender(camera, this.opaqueQueue, this.transparentQueue);\n  }\n\n  /**\n   * 将一个 Primitive 对象添加到渲染队列\n   * @param {Component} component\n   * @param {Primitive} primitive\n   * @param {Material} mtl\n   */\n  pushPrimitive(component: Component, primitive, mtl: Material) {\n    if (mtl.renderType === MaterialType.TRANSPARENT) {\n      this._transparentQueue.pushPrimitive(component, primitive, mtl);\n    } else {\n      this._opaqueQueue.pushPrimitive(component, primitive, mtl);\n    }\n  }\n\n  /**\n   * 将一个 Sprite 绘制信息添加到渲染队列\n   * @param {Component} component\n   * @param {Object} positionQuad  Sprite四个顶点的位置\n   * @param {Object} uvRect        Sprite在texture上的纹理坐标\n   * @param {vec4}   tintColor     颜色\n   * @param {Texture}   texture    纹理信息\n   * @param {String}    renderMode    绘制方式， '2D' 或者 '3D'\n   * @param {Camera}   camera        相机信息\n   */\n  pushSprite(component: Component, positionQuad, uvRect, tintColor, texture, renderMode, camera: Camera) {\n    if ((component as any).separateDraw) {\n      if (!this._separateSpritePass) {\n        this._separateSpritePass = new SeparateSpritePass();\n        this.addRenderPass(this._separateSpritePass);\n      }\n\n      this._separateSpritePass.pushSprite(component, positionQuad, uvRect, tintColor, texture, renderMode, camera);\n      return;\n    }\n\n    this._transparentQueue.pushSprite(component, positionQuad, uvRect, tintColor, texture, renderMode, camera);\n  }\n}\n","import { MathUtil, Matrix, Vector2, Vector3, Vector4 } from \"@alipay/o3-math\";\nimport { ClearMode } from \"./base\";\nimport { Component } from \"./Component\";\nimport { dependencies } from \"./ComponentsDependencies\";\nimport { Entity } from \"./Entity\";\nimport { TextureCubeFace } from \"./texture/enums\";\nimport { RenderTarget } from \"./texture/RenderTarget\";\nimport { Transform } from \"./Transform\";\nimport { UpdateFlag } from \"./UpdateFlag\";\nimport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\n\n/**\n * @todo 数学库改造\n */\ntype Ray = { origin: Vector3; direction: Vector3 };\n\n/**\n * @todo\n */\ntype Sky = {};\n\n//CM：这个类可能需要搬家\nclass MathTemp {\n  static tempMat4 = new Matrix();\n  static tempVec4 = new Vector4();\n  static tempVec3 = new Vector3();\n}\n\n/**\n * 相机的清除标记。\n */\nexport enum ClearFlags {\n  /* 清理深度和天空。*/\n  DepthSky,\n  /* 清理深度和颜色。*/\n  DepthColor,\n  /* 只清除深度。*/\n  Depth,\n  /* 不做任何清除。*/\n  None\n}\n\n/**\n * Camera 组件，作为渲染三位世界的入口。\n */\n@dependencies(Transform)\nexport class Camera extends Component {\n  /**\n   * 渲染优先级，数字越大越先渲染。\n   */\n  priority: number = 0;\n  /**\n   * 渲染遮罩，位操作。\n   * @todo 渲染管线剔除管理实现\n   */\n  cullingMask: number = 0;\n  _renderPipeline: BasicRenderPipeline;\n  private _isOrthographic: boolean = false;\n  private _projectionMatrix: Matrix = new Matrix();\n  private _isProjMatSetting = false;\n  private _viewMatrix: Matrix = new Matrix();\n  private _backgroundColor: Vector4 = new Vector4();\n  private _clearMode: ClearMode = ClearMode.SOLID_COLOR;\n  private _viewport: Vector4 = new Vector4(0, 0, 1, 1);\n  private _nearClipPlane: number = 0.1;\n  private _farClipPlane: number = 100;\n  private _fieldOfView: number = 45;\n  private _orthographicSize: number = 10;\n  private _inverseProjectionMatrix: Matrix = new Matrix();\n  private _inverseViewMatrix: Matrix = new Matrix();\n  /** 投影矩阵脏标记 */\n  private _isProjectionDirty = true;\n  /** 投影矩阵逆矩阵脏标记 */\n  private _isInvProjMatDirty: boolean = true;\n  private _customAspectRatio: number | undefined = undefined;\n  private _lastAspectSize: Vector2 = new Vector2(0, 0);\n  private _invViewProjMat: Matrix = new Matrix();\n\n  private _transform: Transform;\n  private _isViewMatrixDirty: UpdateFlag;\n  /** 投影视图矩阵逆矩阵脏标记 */\n  private _isInvViewProjDirty: UpdateFlag;\n  private _renderTarget: RenderTarget = null;\n\n  /**\n   * 近裁剪平面。\n   */\n  get nearClipPlane(): number {\n    return this._nearClipPlane;\n  }\n\n  set nearClipPlane(value: number) {\n    this._nearClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * 远裁剪平面。\n   */\n  get farClipPlane(): number {\n    return this._farClipPlane;\n  }\n\n  set farClipPlane(value: number) {\n    this._farClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * 视场，单位是角度制，透视投影时生效。\n   */\n  get fieldOfView(): number {\n    return this._fieldOfView;\n  }\n\n  set fieldOfView(value: number) {\n    this._fieldOfView = value;\n    this._projMatChange();\n  }\n\n  /**\n   * 横纵比，默认由视口的宽高比自动计算，如果手动设置会保持手动值，调用resetAspectRatio()可恢复。\n   */\n  get aspectRatio(): number {\n    const canvas = this._entity.engine.canvas;\n    return this._customAspectRatio ?? (canvas.width * this._viewport.z) / (canvas.height * this._viewport.w);\n  }\n\n  set aspectRatio(value: number) {\n    this._customAspectRatio = value;\n    this._projMatChange();\n  }\n\n  /**\n   * 视口，归一化表达，左上角为（0，0）坐标，右下角为（1，1）。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get viewport(): Vector4 {\n    return this._viewport;\n  }\n\n  set viewport(value: Vector4) {\n    if (value !== this._viewport) {\n      value.cloneTo(this._viewport);\n    }\n    this._projMatChange();\n  }\n\n  /**\n   * 是否正交，默认是 false。true 会使用正交投影，false 使用透视投影。\n   */\n  get isOrthographic(): boolean {\n    return this._isOrthographic;\n  }\n\n  set isOrthographic(value: boolean) {\n    this._isOrthographic = value;\n    this._projMatChange();\n  }\n\n  /**\n   * 正交模式下相机的一半尺寸。\n   */\n  get orthographicSize(): number {\n    return this._orthographicSize;\n  }\n\n  set orthographicSize(value: number) {\n    this._orthographicSize = value;\n    this._projMatChange();\n  }\n\n  /**\n   * 背景清除标记。\n   */\n  get clearFlags(): ClearFlags {\n    throw \"not implemented\";\n  }\n\n  /**\n   * @todo 天空盒重构\n   */\n  set clearFlags(value: ClearFlags) {\n    throw \"not implemented\";\n  }\n\n  /**\n   * 清除视口的背景颜色，当 clearFlags 为 DepthColor 时生效。\n   */\n  get backgroundColor(): Vector4 {\n    return this._backgroundColor;\n  }\n\n  set backgroundColor(value: Vector4) {\n    this.setClearMode(this._clearMode, value);\n  }\n\n  /**\n   * 清除视口的背景天空，当 clearFlags 为 DepthSky 时生效。\n   * @todo 渲染管线修改\n   */\n  get backgroundSky(): Sky {\n    throw new Error(\"接口未实现\");\n  }\n\n  /**\n   * 视图矩阵。\n   */\n  get viewMatrix(): Readonly<Matrix> {\n    //CM:相机的视图矩阵一般会移除缩放,避免在shader运算出一些奇怪的问题\n    if (this._isViewMatrixDirty.flag) {\n      this._isViewMatrixDirty.flag = false;\n      Matrix.invert(this._transform.worldMatrix, this._viewMatrix);\n    }\n    return this._viewMatrix;\n  }\n\n  /**\n   * 投影矩阵,默认由相机的相关参数计算计算，如果手动设置会保持手动值，调用resetProjectionMatrix()可恢复。\n   */\n  set projectionMatrix(value: Matrix) {\n    this._projectionMatrix = value;\n    this._isProjMatSetting = true;\n    this._projMatChange();\n  }\n\n  get projectionMatrix(): Matrix {\n    const canvas = this._entity.engine.canvas;\n    if (\n      (!this._isProjectionDirty || this._isProjMatSetting) &&\n      this._lastAspectSize.x === canvas.width &&\n      this._lastAspectSize.y === canvas.height\n    ) {\n      return this._projectionMatrix;\n    }\n    this._isProjectionDirty = false;\n    this._lastAspectSize.x = canvas.width;\n    this._lastAspectSize.y = canvas.height;\n    const aspectRatio = this.aspectRatio;\n    if (!this._isOrthographic) {\n      Matrix.perspective(\n        MathUtil.degreeToRadian(this._fieldOfView),\n        aspectRatio,\n        this._nearClipPlane,\n        this._farClipPlane,\n        this._projectionMatrix\n      );\n    } else {\n      const width = this._orthographicSize * aspectRatio;\n      const height = this._orthographicSize;\n      Matrix.ortho(-width, width, -height, height, this._nearClipPlane, this._farClipPlane, this._projectionMatrix);\n    }\n    return this._projectionMatrix;\n  }\n\n  /**\n   * 是否开启HDR。\n   * @todo 渲染管线修改\n   */\n  get enableHDR(): boolean {\n    throw new Error(\"not implemention\");\n  }\n\n  set enableHDR(value: boolean) {\n    throw new Error(\"not implemention\");\n  }\n\n  /**\n   * 渲染目标，设置后会渲染到渲染目标上，如果为空则渲染到屏幕上。\n   */\n  get renderTarget(): RenderTarget | null {\n    return this._renderTarget;\n  }\n\n  set renderTarget(value: RenderTarget | null) {\n    this._renderTarget = value;\n  }\n\n  /**\n   * 创建 Camera 组件。\n   * @param entity 实体\n   * @param props camera 参数\n   */\n  constructor(entity: Entity, { RenderPipeline }) {\n    super(entity);\n\n    this._transform = this.entity.transform;\n    this._isViewMatrixDirty = this._transform.registerWorldChangeFlag();\n    this._isInvViewProjDirty = this._transform.registerWorldChangeFlag();\n\n    RenderPipeline = RenderPipeline ?? BasicRenderPipeline;\n    this._renderPipeline = new RenderPipeline(this);\n\n    // 默认设置\n    this.setClearMode();\n  }\n\n  /**\n   * 恢复通过 fieldOfView、nearClipPlane 和 farClipPlane 自动计算投影矩阵。\n   */\n  resetProjectionMatrix(): void {\n    this._isProjMatSetting = false;\n    this._projMatChange();\n  }\n\n  /**\n   * 恢复通过视口宽高比自动计算横纵比。\n   */\n  resetAspectRatio(): void {\n    this._customAspectRatio = undefined;\n    this._projMatChange();\n  }\n\n  /**\n   * 将一个点从世界空间变换到视口空间。\n   * @param point - 世界空间中的点\n   * @param out - 视口空间坐标，X 和 Y 为视口空间坐标，Z 为视口深度，近裁剪面为 0，远裁剪面为 1，W 为距离相机的世界单位距离\n   * @returns 视口空间坐标\n   */\n  worldToViewportPoint(point: Vector3, out: Vector4): Vector4 {\n    Matrix.multiply(this.projectionMatrix, this.viewMatrix, MathTemp.tempMat4);\n    MathTemp.tempVec4.setValue(point.x, point.y, point.z, 1.0);\n    Vector4.transform(MathTemp.tempVec4, MathTemp.tempMat4, MathTemp.tempVec4);\n\n    const w = MathTemp.tempVec4.w;\n    const nx = MathTemp.tempVec4.x / w;\n    const ny = MathTemp.tempVec4.y / w;\n    const nz = MathTemp.tempVec4.z / w;\n\n    // 坐标轴转换\n    out.x = (nx + 1.0) * 0.5;\n    out.y = (1.0 - ny) * 0.5;\n    out.z = nz;\n    out.w = w;\n    return out;\n  }\n\n  /**\n   * 将一个点从视口空间变换到世界空间。\n   * @param point - X 和 Y 为视口空间坐标，Z 为视口深度，近裁剪面为 0，远裁剪面为 1\n   * @param out - 世界空间中的点\n   * @returns 世界空间中的点\n   */\n  viewportToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    const invViewProjMat = this.invViewProjMat;\n    return this._innerViewportToWorldPoint(point, invViewProjMat, out);\n  }\n\n  /**\n   * 通过视口空间点的坐标获取射线，生成射线的起点在相机的近裁面并穿过点的 X 和 Y 坐标。\n   * @param point 视口空间中的点\n   * @param out - 射线\n   * @returns 射线\n   */\n  viewportPointToRay(point: Vector2, out: Ray): Ray {\n    const clipPoint = MathTemp.tempVec3;\n    // 使用近裁面的交点作为 origin\n    clipPoint.setValue(point.x, point.y, 0);\n    const origin = this.viewportToWorldPoint(clipPoint, out.origin);\n    // 使用远裁面的交点作为 origin\n    clipPoint.z = 1.0;\n    const farPoint: Vector3 = this._innerViewportToWorldPoint(clipPoint, this._invViewProjMat, clipPoint);\n    Vector3.subtract(farPoint, origin, out.direction);\n    out.direction.normalize();\n\n    return out;\n  }\n\n  /**\n   * 将一个点的X和Y坐标从屏幕空间变换到视口空间\n   * @param point - 屏幕空间点\n   * @param out - 视口空间点\n   * @returns 射线\n   */\n  screenToViewportPoint<T extends Vector2 | Vector3>(point: Vector3 | Vector2, out: T): T {\n    const viewport = this.viewport;\n    out.x = (point.x - viewport.x) / viewport.z;\n    out.y = (point.y - viewport.y) / viewport.w;\n    return out;\n  }\n\n  /**\n   * 将一个点的X和Y坐标从视口空间变换到屏幕空间。\n   * @param point - 视口空间的点\n   * @param out - 屏幕空间的点\n   * @returns 射线\n   */\n  viewportToScreenPoint<T extends Vector2 | Vector3 | Vector4>(point: T, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (viewport.x + point.x * viewport.z) * canvas.width;\n    out.y = (viewport.y + point.y * viewport.w) * canvas.height;\n    return out;\n  }\n\n  /**\n   * 手动调用相机的渲染。\n   * @param cubeFaces - 立方体的渲染面集合,如果设置了renderTarget并且renderTarget.isCube=true时生效\n   */\n  render(cubeFaces?: TextureCubeFace): void {\n    this._renderPipeline.render();\n  }\n\n  /**\n   * @innernal\n   */\n  _onActive() {\n    this.entity.scene.attachRenderCamera(this);\n  }\n\n  /**\n   * @innernal\n   */\n  _onInActive() {\n    this.entity.scene.detachRenderCamera(this);\n  }\n\n  /**\n   * @innernal\n   */\n  _onDestroy() {\n    this._renderPipeline?.destroy();\n    this._isInvViewProjDirty.destroy();\n    this._isViewMatrixDirty.destroy();\n  }\n\n  private _projMatChange() {\n    this._isProjectionDirty = true;\n    this._isInvProjMatDirty = true;\n    this._isInvViewProjDirty.flag = true;\n  }\n\n  private _innerViewportToWorldPoint(point: Vector3, invViewProjMat: Matrix, out: Vector3): Vector3 {\n    // depth 是归一化的深度，0 是 nearPlane，1 是 farClipPlane\n    const depth = point.z * 2 - 1;\n    // 变换到裁剪空间矩阵\n    const clipPoint = MathTemp.tempVec4;\n    clipPoint.setValue(point.x * 2 - 1, 1 - point.y * 2, depth, 1);\n    Vector4.transform(clipPoint, invViewProjMat, clipPoint);\n    const invW = 1.0 / clipPoint.w;\n    out.x = clipPoint.x * invW;\n    out.y = clipPoint.y * invW;\n    out.z = clipPoint.z * invW;\n    return out;\n  }\n\n  /**\n   * @private\n   * 视图投影矩阵逆矩阵\n   */\n  get invViewProjMat(): Matrix {\n    if (this._isInvViewProjDirty.flag) {\n      this._isInvViewProjDirty.flag = false;\n      Matrix.multiply(this.inverseViewMatrix, this.inverseProjectionMatrix, this._invViewProjMat);\n    }\n    return this._invViewProjMat;\n  }\n\n  /**\n   * @private\n   * 投影矩阵逆矩阵。\n   */\n  get inverseProjectionMatrix(): Readonly<Matrix> {\n    if (this._isInvProjMatDirty) {\n      this._isInvProjMatDirty = false;\n      Matrix.invert(this.projectionMatrix, this._inverseProjectionMatrix);\n    }\n    return this._inverseProjectionMatrix;\n  }\n\n  //-------------------------------------------------deprecated---------------------------------------------------\n\n  /**\n   * @deprecated\n   * 视图矩阵逆矩阵。\n   */\n  get inverseViewMatrix(): Readonly<Matrix> {\n    this._transform.worldMatrix.cloneTo(this._inverseViewMatrix);\n    return this._inverseViewMatrix;\n  }\n\n  /**\n   * @deprecated\n   * @todo 涉及渲染管线修改 rhi.clearRenderTarget 方法\n   * @param clearMode\n   * @param backgroundColor\n   */\n  setClearMode(\n    clearMode: ClearMode = ClearMode.SOLID_COLOR,\n    backgroundColor: Vector4 = new Vector4(0.25, 0.25, 0.25, 1)\n  ): void {\n    this._clearMode = clearMode;\n    this._backgroundColor = backgroundColor;\n    this._renderPipeline.defaultRenderPass.clearParam = backgroundColor;\n    this._renderPipeline.defaultRenderPass.clearMode = clearMode;\n  }\n}\n","import { AssetPromise } from \"./AssetPromise\";\n\nconst mimeType = {\n  json: \"json\",\n  gltf: \"json\",\n  mtl: \"json\",\n  prefab: \"json\",\n  txt: \"text\",\n  bin: \"arraybuffer\",\n  png: \"image\",\n  webp: \"image\",\n  jpg: \"image\"\n};\n\nconst defaultRetryCount = 4;\nconst defaultTimeout = 15000;\nconst defaultInterval = 500;\n\nexport type RequestConfig = {\n  type?: XMLHttpRequestResponseType | \"image\";\n  retryCount?: number;\n  retryInterval?: number;\n  timeout?: number;\n} & RequestInit;\n\n/**\n * web端 请求\n * @param url 链接\n * @param config 加载配置\n */\nexport function request<T>(url: string, config: RequestConfig = {}): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const retryCount = config.retryCount ?? defaultRetryCount;\n    const retryInterval = config.retryInterval ?? defaultInterval;\n    config.timeout = config.timeout ?? defaultTimeout;\n    config.type = config.type ?? getMimeTypeFromUrl(url);\n    const realRequest = config.type === \"image\" ? requestImage : requestRes;\n    let lastError: Error;\n    const executor = new MultiExecutor(\n      () => {\n        return realRequest<T>(url, config)\n          .onProgress(setProgress)\n          .then((res) => {\n            resolve(res);\n            executor.stop();\n          })\n          .catch((err) => (lastError = err));\n      },\n      retryCount,\n      retryInterval\n    );\n    executor.start(() => {\n      reject(lastError);\n    });\n  });\n}\n\nfunction requestImage<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject) => {\n    const { timeout } = config;\n    const img = new Image();\n    const onerror = () => {\n      reject(new Error(`request ${url} fail`));\n    };\n    img.onerror = onerror;\n\n    img.onabort = onerror;\n\n    const timeoutId = setTimeout(() => {\n      reject(new Error(`request ${url} timeout`));\n    }, timeout);\n\n    img.onload = ((timeoutId) => {\n      return () => {\n        //@ts-ignore\n        resolve(img);\n        clearTimeout(timeoutId);\n      };\n    })(timeoutId);\n\n    img.crossOrigin = \"anonymous\";\n\n    img.src = url;\n  });\n}\n\nfunction requestRes<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = config.timeout;\n    config.method = config.method ?? \"get\";\n    xhr.onload = () => {\n      if (xhr.status < 200 || xhr.status >= 300) {\n        reject(new Error(`request failed from: ${url}`));\n        return;\n      }\n      const result = xhr.response ?? xhr.responseText;\n      resolve(result);\n    };\n    xhr.onerror = () => {\n      reject(new Error(`request failed from: ${url}`));\n    };\n    xhr.ontimeout = () => {\n      reject(new Error(`request timeout from: ${url}`));\n    };\n    xhr.onprogress = (e) => {\n      setProgress(e.loaded / e.total);\n    };\n    xhr.open(config.method, url, true);\n    xhr.withCredentials = config.credentials === \"include\";\n    //@ts-ignore\n    xhr.responseType = config.type;\n    const headers = config.headers;\n    if (headers) {\n      Object.keys(headers).forEach((name) => {\n        xhr.setRequestHeader(name, headers[name]);\n      });\n    }\n    xhr.send(config.body);\n  });\n}\n\nfunction getMimeTypeFromUrl(url: string) {\n  const extname = url.substring(url.lastIndexOf(\".\") + 1);\n  return mimeType[extname];\n}\n\nexport class MultiExecutor {\n  private _timeoutId: number = -100;\n  private _currentCount = 0;\n  constructor(\n    private execFunc: (count?: number) => Promise<any>,\n    private totalCount: number,\n    private interval: number\n  ) {\n    this.exec = this.exec.bind(this);\n  }\n\n  private done: Function;\n  start(done?: Function): void {\n    this.done = done;\n    this.exec();\n  }\n\n  stop(): void {\n    clearTimeout(this._timeoutId);\n  }\n\n  private exec(): void {\n    if (this._currentCount >= this.totalCount) {\n      this.done && this.done();\n      return;\n    }\n    this._currentCount++;\n    this.execFunc(this._currentCount).then(() => {\n      //@ts-ignore\n      this._timeoutId = setTimeout(this.exec, this.interval);\n    });\n  }\n}\n","import { LoadItem } from \"./LoadItem\";\nimport { AssetPromise } from \"./AssetPromise\";\nimport { RequestConfig, request } from \"./request\";\nimport { ResourceManager } from \"./ResourceManager\";\n/**\n * loader 抽象类。\n */\nexport abstract class Loader<T> {\n  request: <U>(url: string, config: RequestConfig) => AssetPromise<U> = request;\n  abstract load(item: LoadItem, resouceManager: ResourceManager): AssetPromise<T>;\n  constructor(public readonly useCache: boolean) {}\n}\n","/**\n * 资产类型。\n */\nexport enum AssetType {\n  /**\n   * 文本。\n   * @remarks 在资源管理器中不会根据 url 缓存。\n   */\n  Text = 0,\n  /**\n   * JSON。\n   * @remarks 在资源管理器中不会根据 url 缓存。\n   */\n  JSON = 1,\n  /**\n   * 缓冲。\n   * @remarks 在资源管理器中不会根据 url 缓存。\n   */\n  Buffer = 2,\n  /** 2D纹理。*/\n  Texture2D = 3,\n  /** 立方纹理。*/\n  TextureCube = 4,\n  /** 材质。*/\n  Material = 5,\n  /** 网格。*/\n  Mesh = 6,\n  /** 动画文件。*/\n  AnimationClip = 7,\n  /** 预设。*/\n  Perfab = 8, // 先走 GLTFLoader\n  /** 压缩纹理。*/\n  KTX = 9,\n  /** 立方压缩纹理。*/\n  KTXCube = 10\n  /** @todo 场景。*/\n  // Scene = 9\n}\n","import { Engine } from \"../Engine\";\nimport { AssetObject } from \"./AssetObject\";\n\n/**\n * 资产的基类，具有引用计数能力。\n */\nexport abstract class ReferenceObject extends AssetObject {\n  /** 是否忽略垃圾回收的检查,如果为 true ,将不受 ResourceManager.gc() 影响。*/\n  isGCIgnored: boolean = false;\n\n  protected _engine: Engine;\n  protected _gcPriority: number = 0;\n\n  private _referenceCount: number = 0;\n  private _destroyed: boolean = false;\n\n  /** @internal */\n  get gcPriority(): number {\n    return this._gcPriority;\n  }\n\n  /**\n   * 被有效引用计数。\n   */\n  get referenceCount(): number {\n    return this._referenceCount;\n  }\n\n  /**\n   * 是否已销毁。\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  protected constructor(engine?: Engine) {\n    super();\n    const resEngine = engine ?? Engine._getDefaultEngine();\n    if (!resEngine) throw \"asset must belone to an engine.\";\n    this._engine = resEngine;\n    resEngine.resourceManager._addReferenceObject(this.instanceId, this);\n  }\n\n  /**\n   * 销毁。\n   * @param force - 是否强制销毁,如果为 fasle 则 referenceCount = 0 可释放成功\n   * @returns 是否释放成功\n   */\n  destroy(force: boolean = false): boolean {\n    if (this._destroyed) return true;\n    if (!force && this._referenceCount !== 0) return false;\n\n    this.onDestroy();\n\n    this._engine.resourceManager._deleteAsset(this);\n    this._engine.resourceManager._deleteReferenceObject(this.instanceId);\n    this._destroyed = true;\n    this._engine = null;\n    return true;\n  }\n\n  /**\n   * 当资源真正销毁时调。交由子类重写\n   */\n  protected abstract onDestroy(): void;\n\n  /**\n   * @internal\n   */\n  _addToAssetManager(path: string): void {\n    this._engine.resourceManager._addAsset(path, this);\n  }\n\n  /**\n   * @private\n   */\n  _addReference(referenceCount: number): void {\n    this._referenceCount += referenceCount;\n  }\n}\n","import { Matrix, Vector3 } from \"@alipay/o3-math\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { LightFeature } from \"./LightFeature\";\n\nconst _tempVec3 = new Vector3(0, 1, 0);\n\n/**\n * 灯光基类\n */\nexport abstract class Light extends Component {\n  protected _viewMat: Matrix;\n  protected _modelMat: Matrix;\n  protected name: string;\n\n  /**\n   * 将灯光参数绑定到指定的材质对象上\n   * @param {Material} mtl 材质对象\n   * @param {string} uniformName 材质对象\n   * @private\n   */\n  abstract bindMaterialValues(mtl, uniformName: string);\n\n  /**\n   * 生成 Technique 所需的 uniform 定义\n   * @example\n   * const name = `u_pointLights[0]`;\n   * const lgtUniforms = APointLight.getUniformDefine(name)\n   * @param {string} uniformName\n   */\n  static getUniformDefine(uniformName: string) {\n    return {};\n  }\n\n  /**\n   * @constructor\n   * @param {Entity} entity 节点对象\n   */\n  constructor(entity: Entity, props?: any) {\n    super(entity, props);\n    entity.addEventListener(\"removedFromScene\", this._onDisable.bind(this));\n  }\n\n  /** 在对象Enable的时候，挂载到当前的Scene\n   * @private\n   */\n  _onEnable() {\n    this.scene.findFeature(LightFeature).attachRenderLight(this);\n  }\n\n  /** 在对象Disable的时候，从当前的Scene移除\n   * @private\n   */\n  _onDisable() {\n    this.scene.findFeature(LightFeature).detachRenderLight(this);\n  }\n\n  /**\n   * View 矩阵\n   * @member {Matrix}\n   * @readonly\n   */\n  get viewMatrix() {\n    if (!this._viewMat) this._viewMat = new Matrix();\n    Matrix.invert(this.inverseViewMatrix, this._viewMat);\n    return this._viewMat;\n  }\n\n  /**\n   * View 矩阵的逆矩阵\n   * @member {Matrix}\n   * @readonly\n   */\n  get inverseViewMatrix() {\n    if (!this._modelMat) this._modelMat = new Matrix();\n    Matrix.rotateAxisAngle(this.entity.transform.worldMatrix, _tempVec3, Math.PI, this._modelMat);\n\n    return this._modelMat;\n  }\n}\n","import { Vector3 } from \"@alipay/o3-math\";\nimport { Light } from \"./Light\";\nimport { DataType } from \"../base/Constant\";\n\n/**\n * 环境光创建类\n * @extends Light\n */\nexport class AmbientLight extends Light {\n  private _lightColor: Vector3;\n  public color: Vector3;\n  public intensity: number;\n\n  /**\n   * 生成 Technique 所需的 uniform 定义\n   * @param {string} uniformName\n   */\n  static getUniformDefine(uniformName: string) {\n    return {\n      [uniformName + \".color\"]: {\n        name: uniformName + \".color\",\n        type: DataType.FLOAT_VEC3\n      },\n      [uniformName + \".lightColor\"]: {\n        name: uniformName + \".lightColor\",\n        type: DataType.FLOAT_VEC3\n      },\n      [uniformName + \".intensity\"]: {\n        name: uniformName + \".intensity\",\n        type: DataType.FLOAT\n      }\n    };\n  }\n\n  /**\n   * @constructor\n   * @param {Entity} entity 节点对象\n   * @param {Object} props 参数对象\n   * @param {string} [props.name = ambientLight] props.name 名称\n   * @param {Vector3} [props.color = vec3.fromValues(1, 1, 1)] 颜色\n   * @param {number} [props.intensity = 1] 光照强度\n   */\n  constructor(entity, props) {\n    super(entity);\n    this.name = props.name || \"ambientLight\";\n\n    /**\n     * 颜色\n     * @member {Vector3}\n     */\n    this.color = props.color || new Vector3(1, 1, 1);\n\n    /**\n     * 光照强度\n     * @member {number}\n     */\n    this.intensity = props.intensity || 1.0;\n\n    this._lightColor = new Vector3();\n  }\n\n  /** 获取环境光最终颜色\n   * @return {Vector3} 颜色\n   * @readonly\n   */\n  get lightColor() {\n    Vector3.scale(this.color, this.intensity, this._lightColor);\n    return this._lightColor;\n  }\n\n  /**\n   * 将灯光参数值提交到材质对象\n   */\n  bindMaterialValues(mtl, uniformName) {\n    mtl.setValue(uniformName + \".color\", this.color);\n    mtl.setValue(uniformName + \".lightColor\", this.lightColor);\n    mtl.setValue(uniformName + \".intensity\", this.intensity);\n  }\n}\n","import { Vector3 } from \"@alipay/o3-math\";\nimport { DataType } from \"../base/Constant\";\n\nimport { Light } from \"./Light\";\n\n/**\n * 方向光创建类\n * @extends Light\n */\nexport class DirectLight extends Light {\n  private _forward: Vector3 = new Vector3();\n  private _lightColor: Vector3;\n  private _reverseDirection: Vector3;\n  public color: Vector3;\n  public intensity: number;\n\n  /**\n   * @constructor\n   * @param {Entity} entity 节点对象\n   * @param {Object} props 参数对象\n   * @param {string} [props.name = directLight] 名称\n   * @param {Vector3} [ props.color = vec3.fromValues(1, 1, 1)]颜色，默认 vec3.fromValues(1, 1, 1)\n   * @param {number} [props.intensity = 1] 光照强度\n   * @param {Vector3} [props.direction] 光照方向，默认节点forward方向\n   */\n  constructor(entity, props) {\n    super(entity);\n    this.name = props.name || \"directLight\";\n\n    /**\n     * 颜色\n     * @member {Vector3}\n     */\n    this.color = props.color || new Vector3(1, 1, 1);\n\n    /**\n     * 光照强度\n     * @member {number}\n     */\n    this.intensity = props.intensity || 1.0;\n\n    this._lightColor = new Vector3();\n    this._reverseDirection = new Vector3();\n  }\n\n  /** 获取方向光方向\n   * @return {Vector3} 方向向量\n   * @readonly\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /** 获取方向光最终颜色\n   * @return {Vector3} 颜色\n   * @readonly\n   */\n  get lightColor(): Vector3 {\n    Vector3.scale(this.color, this.intensity, this._lightColor);\n    return this._lightColor;\n  }\n\n  /** 方向光方向的反方向\n   * @return {Vector3} 方向向量\n   * @readonly\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._reverseDirection);\n    return this._reverseDirection;\n  }\n\n  /**\n   * 生成 Technique 所需的 uniform 定义\n   * @param {string} uniformName\n   */\n  static getUniformDefine(uniformName) {\n    /**\n     *   struct DirectLight {\n     *    vec3 color;\n     *    float intensity;\n     *    vec3 direction;\n     *    };\n     */\n    const uniforms = {};\n\n    uniforms[uniformName + \".color\"] = {\n      name: uniformName + \".color\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".lightColor\"] = {\n      name: uniformName + \".lightColor\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".intensity\"] = {\n      name: uniformName + \".intensity\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".direction\"] = {\n      name: uniformName + \".direction\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    return uniforms;\n  }\n\n  /**\n   * 将灯光参数值提交到材质对象\n   */\n  bindMaterialValues(mtl, uniformName) {\n    mtl.setValue(uniformName + \".color\", this.color);\n    mtl.setValue(uniformName + \".lightColor\", this.lightColor);\n    mtl.setValue(uniformName + \".intensity\", this.intensity);\n    mtl.setValue(uniformName + \".direction\", this.direction);\n  }\n}\n","import { DataType } from \"../base/Constant\";\nimport { Light } from \"./Light\";\nimport { Vector3, Matrix3x3 } from \"@alipay/o3-math\";\n\nconst cacheMat3 = new Matrix3x3();\n\n/**\n * 环境光源\n */\nexport class EnvironmentMapLight extends Light {\n  public diffuseMap;\n  public specularMap;\n  public diffuse: Vector3;\n  public specular: Vector3;\n  public diffuseIntensity;\n  public specularIntensity;\n\n  /**\n   * 生成 Technique 所需的 uniform 定义\n   * @param {string} uniformName\n   */\n  static getUniformDefine(uniformName) {\n    const uniforms = {};\n\n    uniforms[\"u_env_diffuseSampler\"] = {\n      name: \"u_env_diffuseSampler\",\n      type: DataType.SAMPLER_CUBE\n    };\n\n    uniforms[\"u_env_specularSampler\"] = {\n      name: \"u_env_specularSampler\",\n      type: DataType.SAMPLER_CUBE\n    };\n\n    uniforms[uniformName + \".diffuse\"] = {\n      name: uniformName + \".diffuse\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".specular\"] = {\n      name: uniformName + \".specular\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".mipMapLevel\"] = {\n      name: uniformName + \".mipMapLevel\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".transformMatrix\"] = {\n      name: uniformName + \".transformMatrix\",\n      type: DataType.FLOAT_MAT3\n    };\n\n    uniforms[uniformName + \".diffuseIntensity\"] = {\n      name: uniformName + \".diffuseIntensity\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".specularIntensity\"] = {\n      name: uniformName + \".specularIntensity\",\n      type: DataType.FLOAT\n    };\n\n    return uniforms;\n  }\n\n  /**\n   * 环境光源\n   * @param {Entity} entity 节点对象\n   * @param {Object} props 包含以下参数\n   * @param {TextureCubeMap} [props.diffuseMap=undefined] 环境光贴图\n   * @param {TextureCubeMap} [props.specularMap=undefined] 高光贴图\n   * @param {Vector3} [props.diffuse=new Vector3(0.5, 0.5, 0.5)] 单色环境光，当环境光贴图不存在时使用\n   * @param {Vector3} [props.specular=new Vector3(0.5, 0.5, 0.5)] 单色高光，当高光贴图不存在时使用\n   * @param {Number} [props.diffuseIntensity=1] 环境光强度\n   * @param {Number} [props.specularIntensity=1] 高光强度\n   */\n  constructor(entity, props) {\n    super(entity);\n\n    const { name, diffuseMap, specularMap, diffuse, specular, diffuseIntensity, specularIntensity } = props;\n    this.name = name;\n\n    /**\n     * 环境光贴图\n     * @member {TextureCubeMap}\n     */\n    this.diffuseMap = diffuseMap;\n\n    /**\n     * 高光贴图\n     * @member {TextureCubeMap}\n     */\n    this.specularMap = specularMap;\n\n    /**\n     * 单色环境光\n     * @member {Vector3}\n     */\n    this.diffuse = diffuse || new Vector3(0.3, 0.3, 0.3);\n\n    /**\n     * 单色高光\n     * @member {Vector3}\n     */\n    this.specular = specular || new Vector3(0.5, 0.5, 0.5);\n\n    /**\n     * 环境光强度\n     * @member {Number}\n     */\n    this.diffuseIntensity = diffuseIntensity === undefined ? 1 : diffuseIntensity;\n\n    /**\n     * 高光强度\n     * @member {Number}\n     */\n    this.specularIntensity = specularIntensity === undefined ? 1 : specularIntensity;\n  }\n\n  /**\n   * 是否使用diffuse贴图\n   * @private\n   * @returns {Boolean}\n   */\n  get useDiffuseMap() {\n    return !!this.diffuseMap;\n  }\n\n  /**\n   * 是否使用Specular贴图\n   * @private\n   * @returns {Boolean}\n   */\n  get useSpecularMap() {\n    return !!this.specularMap;\n  }\n\n  /**\n   * 将灯光参数绑定到指定的材质对象上\n   */\n  bindMaterialValues(mtl, uniformName) {\n    mtl.setValue(uniformName + \".diffuseIntensity\", this.diffuseIntensity);\n    mtl.setValue(uniformName + \".specularIntensity\", this.specularIntensity);\n\n    if (this.useDiffuseMap) {\n      mtl.setValue(\"u_env_diffuseSampler\", this.diffuseMap);\n    } else {\n      mtl.setValue(uniformName + \".diffuse\", this.diffuse);\n    }\n\n    if (this.useSpecularMap) {\n      mtl.setValue(\"u_env_specularSampler\", this.specularMap);\n      mtl.setValue(uniformName + \".mipMapLevel\", this.specularMap.mipmapCount);\n    } else {\n      mtl.setValue(uniformName + \".specular\", this.specular);\n    }\n\n    // 支持旋转\n    const transformMatrix = this.entity.transform.worldMatrix;\n    cacheMat3.setValueByMatrix(transformMatrix);\n    mtl.setValue(uniformName + \".transformMatrix\", cacheMat3);\n  }\n}\n","import { Vector3 } from \"@alipay/o3-math\";\nimport { DataType } from \"../base/Constant\";\nimport { Light } from \"./Light\";\n\n/**\n * 点光源创建类\n * @extends Light\n */\nexport class PointLight extends Light {\n  public color: Vector3;\n  public intensity: number;\n  public distance: number;\n  public decay: number;\n  private _lightColor: Vector3;\n  /**\n   * @constructor\n   * @param {Entity} entity 节点对象\n   * @param {Object} props 参数对象\n   * @param {string} [props.name = pointLight] 名称\n   * @param {Vector3} [props.color = vec3.fromValues(1, 1, 1)] 颜色\n   * @param {number} [props.intensity=1] 光照强度\n   * @param {number} [props.distance=0] 辐射距离\n   * @param {number} [props.decay=0] 衰减系数\n   */\n  constructor(entity, props) {\n    super(entity, props);\n    this.name = props.name || \"pointLight\";\n\n    /**\n     * 颜色\n     * @member {Vector3}\n     */\n    this.color = props.color || new Vector3(1, 1, 1);\n\n    /**\n     * 光照强度\n     * @member {number}\n     */\n    this.intensity = props.intensity || 1.0;\n\n    /**\n     * 辐射距离\n     *  @member {number}\n     */\n    this.distance = props.distance !== undefined ? props.distance : 0;\n\n    /**\n     * 衰减系数\n     * @member {number}\n     */\n    this.decay = props.decay !== undefined ? props.decay : 0;\n\n    this._lightColor = new Vector3();\n  }\n\n  /** 获取点光源位置\n   * @return {Vector3} 位置坐标\n   * @readonly\n   */\n  get position(): Vector3 {\n    return this.entity.worldPosition;\n  }\n\n  /** 获取点光源最终颜色\n   * @return {Vector3} 光源最终颜色\n   * @readonly\n   */\n  get lightColor(): Vector3 {\n    Vector3.scale(this.color, this.intensity, this._lightColor);\n    return this._lightColor;\n  }\n\n  /**\n   * 生成 Technique 所需的 uniform 定义\n   * @param {string} uniformName\n   */\n  static getUniformDefine(uniformName) {\n    /**\n      struct PointLight {\n        vec3 position;\n        vec3 color;\n        float intensity;\n        float distance;\n        float decay;\n      };\n     */\n    const uniforms = {};\n\n    uniforms[uniformName + \".position\"] = {\n      name: uniformName + \".position\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".color\"] = {\n      name: uniformName + \".color\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".lightColor\"] = {\n      name: uniformName + \".lightColor\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".intensity\"] = {\n      name: uniformName + \".intensity\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".distance\"] = {\n      name: uniformName + \".distance\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".decay\"] = {\n      name: uniformName + \".decay\",\n      type: DataType.FLOAT\n    };\n\n    return uniforms;\n  }\n\n  /**\n   * 将灯光参数值提交到材质对象\n   */\n  bindMaterialValues(mtl, uniformName) {\n    mtl.setValue(uniformName + \".position\", this.position);\n    mtl.setValue(uniformName + \".color\", this.color);\n    mtl.setValue(uniformName + \".lightColor\", this.lightColor);\n    mtl.setValue(uniformName + \".intensity\", this.intensity);\n    mtl.setValue(uniformName + \".distance\", this.distance);\n    mtl.setValue(uniformName + \".decay\", this.decay);\n  }\n}\n","import { Vector3 } from \"@alipay/o3-math\";\nimport { DataType } from \"../base/Constant\";\nimport { Light } from \"./Light\";\n\n/**\n * 聚光灯创建类\n * @extends Light\n */\nexport class SpotLight extends Light {\n  private _forward: Vector3 = new Vector3();\n  private _lightColor: Vector3;\n  private _inverseDirection: Vector3;\n  public color: Vector3;\n  public penumbra: number;\n  public distance: number;\n  public intensity: number;\n  public decay: number;\n  public angle: number;\n  /**\n   * @constructor\n   * @param {Entity} entity 节点对象\n   * @param {Object} props 参数对象\n   * @param {string} [props.name = spotLight] 名称\n   * @param {Vector3} [props.color = new Vector3(1, 1, 1)] 颜色\n   * @param {number} [props.intensity = 1] 光照强度\n   * @param {number} [props.distance = 0] 辐射距离\n   * @param {number} [props.decay = 0] 衰减系数\n   * @param {number} [props.angle = Math.PI / 6] 散射角度\n   * @param {number} [props.penumbra = 0] 半影衰减系数 ( 0 - 1 )\n   */\n  constructor(entity, props) {\n    super(entity);\n    this.name = props.name || \"spotLight\";\n\n    /**\n     * 颜色\n     * @member {Vector3}\n     */\n    this.color = props.color || new Vector3(1, 1, 1);\n\n    /**\n     * 光照强度\n     * @member {number}\n     */\n    this.intensity = props.intensity || 1.0;\n\n    /**\n     * 辐射距离\n     * @member {number}\n     */\n    this.distance = props.distance || 0;\n\n    /**\n     * 衰减系数\n     * @member {number}\n     */\n    this.decay = props.decay || 0;\n\n    /**\n     * 半影衰减系数\n     * @member {number}\n     */\n    this.penumbra = props.penumbra || 0;\n\n    /**\n     * 散射角(弧度)\n     * @member {number}\n     */\n    this.angle = props.angle || Math.PI / 6;\n\n    this._lightColor = new Vector3();\n    this._inverseDirection = new Vector3();\n  }\n\n  /** 获取聚光灯位置\n   * @return {Vector3} 位置坐标\n   * @readonly\n   */\n  get position(): Vector3 {\n    return this.entity.worldPosition;\n  }\n\n  /** 获取聚光灯方向\n   * @return {Vector3} 方向向量\n   * @readonly\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /** 获取聚光灯方向的反方向\n   * @return {Vector3} 方向向量\n   * @readonly\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._inverseDirection);\n    return this._inverseDirection;\n  }\n\n  /** 最终光照颜色\n   * @return {Vector3} 最终光照颜色\n   * @readonly\n   */\n  get lightColor(): Vector3 {\n    Vector3.scale(this.color, this.intensity, this._lightColor);\n    return this._lightColor;\n  }\n\n  /**\n   * 生成 Technique 所需的 uniform 定义\n   * @param {string} uniformName\n   */\n  static getUniformDefine(uniformName) {\n    /**\n      struct SpotLight {\n        vec3 position;\n        vec3 direction;\n        vec3 color;\n        float intensity;\n        float distance;\n        float decay;\n        float angle;\n        float penumbra;\n      };\n     */\n    const uniforms = {};\n\n    uniforms[uniformName + \".position\"] = {\n      name: uniformName + \".position\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".direction\"] = {\n      name: uniformName + \".direction\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".color\"] = {\n      name: uniformName + \".color\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".lightColor\"] = {\n      name: uniformName + \".lightColor\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".intensity\"] = {\n      name: uniformName + \".intensity\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".distance\"] = {\n      name: uniformName + \".distance\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".decay\"] = {\n      name: uniformName + \".decay\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".angle\"] = {\n      name: uniformName + \".angle\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".penumbra\"] = {\n      name: uniformName + \".penumbra\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".coneCos\"] = {\n      name: uniformName + \".coneCos\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".penumbraCos\"] = {\n      name: uniformName + \".penumbraCos\",\n      type: DataType.FLOAT\n    };\n\n    return uniforms;\n  }\n\n  /**\n   * 将灯光参数值提交到材质对象\n   */\n  bindMaterialValues(mtl, uniformName) {\n    mtl.setValue(uniformName + \".position\", this.position);\n    mtl.setValue(uniformName + \".direction\", this.direction);\n    mtl.setValue(uniformName + \".color\", this.color);\n    mtl.setValue(uniformName + \".lightColor\", this.lightColor);\n    mtl.setValue(uniformName + \".intensity\", this.intensity);\n    mtl.setValue(uniformName + \".distance\", this.distance);\n    mtl.setValue(uniformName + \".decay\", this.decay);\n    mtl.setValue(uniformName + \".angle\", this.angle);\n    mtl.setValue(uniformName + \".penumbra\", this.penumbra);\n    mtl.setValue(uniformName + \".coneCos\", Math.cos(this.angle));\n    mtl.setValue(uniformName + \".penumbraCos\", Math.cos(this.angle * (1 - this.penumbra)));\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { SceneFeature } from \"../SceneFeature\";\nimport { AmbientLight } from \"./AmbientLight\";\nimport { DirectLight } from \"./DirectLight\";\nimport { EnvironmentMapLight } from \"./EnvironmentMapLight\";\nimport { Light } from \"./Light\";\nimport { PointLight } from \"./PointLight\";\nimport { SpotLight } from \"./SpotLight\";\n\n/**\n * 判断场景中是否有灯光\n * @returns {boolean}\n * @private\n */\nexport function hasLight() {\n  return this.findFeature(LightFeature).visibleLights.length > 0;\n}\n\n/**\n * Scene Feature：在场景中添加灯光特性\n * @extends SceneFeature\n * @private\n */\nexport class LightFeature extends SceneFeature {\n  public visibleLights: Light[];\n\n  /**\n   * 获取光源种类的相应数量\n   * */\n  get lightSortAmount(): {\n    ambientLightCount: number;\n    directLightCount: number;\n    pointLightCount: number;\n    spotLightCount: number;\n    envMapLightCount: number;\n    useDiffuseEnv: boolean;\n    useSpecularEnv: boolean;\n  } {\n    let ambientLightCount = 0;\n    let directLightCount = 0;\n    let pointLightCount = 0;\n    let spotLightCount = 0;\n    let envMapLightCount = 0;\n    let useDiffuseEnv = false;\n    let useSpecularEnv = false;\n\n    let lights = this.visibleLights;\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const light = lights[i];\n      if (light instanceof AmbientLight) {\n        ambientLightCount++;\n      } else if (light instanceof DirectLight) {\n        directLightCount++;\n      } else if (light instanceof PointLight) {\n        pointLightCount++;\n      } else if (light instanceof SpotLight) {\n        spotLightCount++;\n      } else if (light instanceof EnvironmentMapLight) {\n        envMapLightCount++;\n        useDiffuseEnv = light.useDiffuseMap;\n        useSpecularEnv = light.useSpecularMap;\n      }\n    }\n    return {\n      ambientLightCount,\n      directLightCount,\n      pointLightCount,\n      spotLightCount,\n      envMapLightCount,\n      useDiffuseEnv,\n      useSpecularEnv\n    };\n  }\n\n  constructor() {\n    super();\n    this.visibleLights = [];\n  }\n\n  /**\n   * 向当前场景注册一个灯光对象\n   * @param {Light} light 灯光对象\n   * @private\n   */\n  attachRenderLight(light: Light) {\n    const index = this.visibleLights.indexOf(light);\n    if (index == -1) {\n      this.visibleLights.push(light);\n    } else {\n      Logger.warn(\"Light already attached.\");\n    }\n  }\n\n  /**\n   * 从当前场景移除一个灯光对象\n   * @param {Light} light 灯光对象\n   * @private\n   */\n  detachRenderLight(light: Light) {\n    const index = this.visibleLights.indexOf(light);\n    if (index != -1) {\n      this.visibleLights.splice(index, 1);\n    }\n  }\n\n  /**\n   * 将灯光数据绑定到指定的材质中（指定 Uniform 的值）\n   * @param {Material} mtl 材质对象\n   * @private\n   */\n  bindMaterialValues(mtl) {\n    /**\n     * ambientLight 和 envMapLight 在 scene 中只用最后一个\n     * */\n    let ambientLightCount = 0;\n    let directLightCount = 0;\n    let pointLightCount = 0;\n    let spotLightCount = 0;\n    let envMapLightCount = 0;\n\n    let lights = this.visibleLights;\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const light = lights[i];\n      if (light instanceof AmbientLight) {\n        light.bindMaterialValues(mtl, `u_ambientLight`);\n        ambientLightCount++;\n      } else if (light instanceof DirectLight) {\n        light.bindMaterialValues(mtl, `u_directLights[${directLightCount++}]`);\n      } else if (light instanceof PointLight) {\n        light.bindMaterialValues(mtl, `u_pointLights[${pointLightCount++}]`);\n      } else if (light instanceof SpotLight) {\n        light.bindMaterialValues(mtl, `u_spotLights[${spotLightCount++}]`);\n      } else if (light instanceof EnvironmentMapLight) {\n        light.bindMaterialValues(mtl, `u_envMapLight`);\n        envMapLightCount++;\n      }\n    }\n  }\n\n  /**\n   * 生成 Technique 所需的全部 uniform 定义\n   */\n  getUniformDefine() {\n    let uniforms = {};\n    let ambientLightCount = 0;\n    let directLightCount = 0;\n    let pointLightCount = 0;\n    let spotLightCount = 0;\n    let envMapLightCount = 0;\n\n    let lights = this.visibleLights;\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const light = lights[i];\n      if (light instanceof AmbientLight && !ambientLightCount++) {\n        uniforms = { ...uniforms, ...AmbientLight.getUniformDefine(`u_ambientLight`) };\n      } else if (light instanceof DirectLight) {\n        uniforms = { ...uniforms, ...DirectLight.getUniformDefine(`u_directLights[${directLightCount++}]`) };\n      } else if (light instanceof PointLight) {\n        uniforms = { ...uniforms, ...PointLight.getUniformDefine(`u_pointLights[${pointLightCount++}]`) };\n      } else if (light instanceof SpotLight) {\n        uniforms = { ...uniforms, ...SpotLight.getUniformDefine(`u_spotLights[${spotLightCount++}]`) };\n      } else if (light instanceof EnvironmentMapLight && !envMapLightCount++) {\n        uniforms = { ...uniforms, ...EnvironmentMapLight.getUniformDefine(`u_envMapLight`) };\n      }\n    }\n    return uniforms;\n  }\n}\n","import { Vector3, Vector4, Matrix } from \"@alipay/o3-math\";\n\n/**\n * 一个点到一个平面的距离\n * @param {Vector4} plane - 平面方程\n * @param {Vector3} pt - 点的位置矢量\n * @private\n */\nexport function pointDistanceToPlane(plane: Vector4, pt: Vector3) {\n  return plane.x * pt.x + plane.y * pt.y + plane.z * pt.z + plane.w;\n}\n\n/**\n * 从列主序矩阵获取最大轴向的 scale\n * @param {Matrix} modelMatrix - Local to World矩阵\n * */\nexport function getMaxScaleByModelMatrix(modelMatrix: Matrix): number {\n  let m = modelMatrix.elements;\n  let scaleXSq = m[0] * m[0] + m[1] * m[1] + m[2] * m[2];\n  let scaleYSq = m[4] * m[4] + m[5] * m[5] + m[6] * m[6];\n  let scaleZSq = m[8] * m[8] + m[9] * m[9] + m[10] * m[10];\n  return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n}\n","import { Vector3, Vector4 } from \"@alipay/o3-math\";\nimport { pointDistanceToPlane } from \"./util\";\nimport { IntersectInfo } from \"../base/Constant\";\n\n/**\n * 轴对齐的包围盒(Axis Aligned Bound Box)\n * */\nexport class AABB {\n  public min: Vector3 = new Vector3();\n  public max: Vector3 = new Vector3();\n\n  /**\n   * AABB 的 min/max 基于世界坐标系，且不能通过 modelMatrix 缓存计算\n   * @param {Vector3} minWorld - 世界坐标系的最小坐标\n   * @param {Vector3} maxWorld - 世界坐标系的最大坐标\n   * */\n  constructor(minWorld: Vector3, maxWorld: Vector3) {\n    this.update(minWorld, maxWorld);\n  }\n\n  /**\n   * 更新 AABB\n   * @param {Vector3} minWorld - 世界坐标系的最小坐标\n   * @param {Vector3} maxWorld - 世界坐标系的最大坐标\n   * */\n  update(minWorld: Vector3, maxWorld: Vector3) {\n    minWorld.cloneTo(this.min);\n    maxWorld.cloneTo(this.max);\n  }\n\n  /**\n   * 使用中心点和 Size 的方式来计算 AABB 包围盒\n   * @param {Vector3} center - 包围盒的中心点\n   * @param {Vector3} size - 包围盒的3个轴向的大小\n   */\n  setFromCenterAndSize(center: Vector3, size: Vector3) {\n    let halfSize = new Vector3();\n    Vector3.scale(size, 0.5, halfSize);\n\n    Vector3.subtract(center, halfSize, this.min);\n    Vector3.add(center, halfSize, this.max);\n  }\n\n  /**\n   * 获取与视锥体的 具体相交状态\n   * @param { Vector4[] } frustumPlanes - Oasis 视锥体的6个平面方程\n   * @return {IntersectInfo} 返回相交状态\n   * */\n  intersectsFrustum(frustumPlanes: Vector4[]): IntersectInfo {\n    const { min, max } = this;\n    const p1: Vector3 = new Vector3();\n    const p2: Vector3 = new Vector3();\n\n    for (let i = 0; i < 6; i++) {\n      const plane: Vector4 = frustumPlanes[i];\n      p1.x = plane.x > 0 ? min.x : max.x;\n      p2.x = plane.x > 0 ? max.x : min.x;\n      p1.y = plane.y > 0 ? min.y : max.y;\n      p2.y = plane.y > 0 ? max.y : min.y;\n      p1.z = plane.z > 0 ? min.z : max.z;\n      p2.z = plane.z > 0 ? max.z : min.z;\n\n      const d1 = pointDistanceToPlane(plane, p1);\n      const d2 = pointDistanceToPlane(plane, p2);\n\n      // 视锥体外\n      if (d1 < 0 && d2 < 0) {\n        return IntersectInfo.EXCLUDE;\n      }\n      // 相交视锥体\n      if (d1 < 0 || d2 < 0) {\n        return IntersectInfo.INTERSECT;\n      }\n    }\n\n    return IntersectInfo.INCLUDE;\n  }\n\n  /**\n   * 是否在视锥体内部（包含或者交叉）\n   * @param { Vector4[] } frustumPlanes -  Oasis 视锥体的6个平面方程\n   * @return {boolean}\n   * */\n  isInFrustum(frustumPlanes: Vector4[]): boolean {\n    const min = this.min;\n    const max = this.max;\n    const p: Vector3 = new Vector3();\n\n    for (let i = 0; i < 6; i++) {\n      const plane: Vector4 = frustumPlanes[i];\n      p.x = plane.x > 0 ? max.x : min.x;\n      p.y = plane.y > 0 ? max.y : min.y;\n      p.z = plane.z > 0 ? max.z : min.z;\n\n      if (pointDistanceToPlane(plane, p) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","import { Vector3, Vector4, Matrix } from \"@alipay/o3-math\";\n\nimport { pointDistanceToPlane } from \"./util\";\nimport { IntersectInfo } from \"../base/Constant\";\n\n/**\n * 方向包围盒(Oriented Bounding Box)\n * */\nexport class OBB {\n  private static _tempVec3: Vector3 = new Vector3();\n\n  /** 本地坐标系 */\n  public min: Vector3 = new Vector3();\n  public max: Vector3 = new Vector3();\n  public corners: Vector3[] = [];\n  /** 世界坐标系 */\n  public minWorld: Vector3 = new Vector3();\n  public maxWorld: Vector3 = new Vector3();\n  public cornersWorld: Vector3[] = [];\n\n  /**\n   * 初始化 OBB, 之后可以通过 modelMatrix 缓存计算\n   * @param {Vector3} minLocal - 本地坐标系的最小坐标\n   * @param {Vector3} maxLocal - 本地坐标系的最大坐标\n   * @param {Matrix} modelMatrix - Local to World矩阵\n   * */\n  constructor(minLocal: Vector3, maxLocal: Vector3, modelMatrix: Matrix) {\n    minLocal.cloneTo(this.min);\n    maxLocal.cloneTo(this.max);\n\n    this.corners = this.getCornersFromMinMax(minLocal, maxLocal);\n\n    // world\n    this.updateByModelMatrix(modelMatrix);\n  }\n\n  /**\n   * 根据 min/max ,取得八个顶点的位置\n   * @param {Vector3} min - 最小坐标\n   * @param {Vector3} max - 最大坐标\n   */\n  getCornersFromMinMax(min: Vector3, max: Vector3) {\n    const minX = min.x,\n      minY = min.y,\n      minZ = min.z,\n      maxX = max.x,\n      maxY = max.y,\n      maxZ = max.z;\n    const corners = [\n      new Vector3(minX, minY, minZ),\n      new Vector3(maxX, maxY, maxZ),\n      new Vector3(maxX, minY, minZ),\n      new Vector3(minX, maxY, minZ),\n      new Vector3(minX, minY, maxZ),\n      new Vector3(maxX, maxY, minZ),\n      new Vector3(minX, maxY, maxZ),\n      new Vector3(maxX, minY, maxZ)\n    ];\n    return corners;\n  }\n\n  /**\n   * 通过模型矩阵，和缓存的本地坐标系 OBB，获取新的世界坐标系 OBB\n   * @param {Matrix} modelMatrix - Local to World矩阵\n   * */\n  updateByModelMatrix(modelMatrix: Matrix) {\n    const min = this.minWorld;\n    const max = this.maxWorld;\n    min.setValue(Infinity, Infinity, Infinity);\n    max.setValue(-Infinity, -Infinity, -Infinity);\n\n    for (let i = 0; i < 8; ++i) {\n      const corner: Vector3 = this.corners[i];\n      const cornerWorld: Vector3 = OBB._tempVec3;\n\n      Vector3.transformCoordinate(corner, modelMatrix, cornerWorld);\n      Vector3.min(min, cornerWorld, min);\n      Vector3.max(max, cornerWorld, max);\n\n      this.cornersWorld[i] = new Vector3();\n      cornerWorld.cloneTo(this.cornersWorld[i]);\n    }\n  }\n\n  /**\n   * 获取与视锥体的 具体相交状态\n   * @param { Vector4[] } frustumPlanes - Oasis 视锥体的6个平面方程\n   * @return {IntersectInfo} 返回相交状态\n   * */\n  intersectsFrustum(frustumPlanes: Vector4[]): IntersectInfo {\n    const cornersWorld = this.cornersWorld;\n\n    for (let i = 0; i < 6; i++) {\n      const plane = frustumPlanes[i];\n      let isInPlane = false;\n      for (let j = 0; j < 8; j++) {\n        if (pointDistanceToPlane(plane, cornersWorld[j]) > 0) {\n          isInPlane = true;\n        } else if (isInPlane) {\n          return IntersectInfo.INTERSECT;\n        }\n      }\n      if (!isInPlane) {\n        return IntersectInfo.EXCLUDE;\n      }\n    }\n\n    return IntersectInfo.INCLUDE;\n  }\n\n  /**\n   * 是否在视锥体内部（包含或者交叉）\n   * @param { Vector4[] } frustumPlanes - Oasis 视锥体的6个平面方程\n   * @return {boolean}\n   * */\n  isInFrustum(frustumPlanes: Vector4[]): boolean {\n    const cornersWorld = this.cornersWorld;\n\n    for (let i = 0; i < 6; i++) {\n      const plane = frustumPlanes[i];\n      let isInPlane = false;\n      for (let j = 0; j < 8; j++) {\n        if (pointDistanceToPlane(plane, cornersWorld[j]) > 0) {\n          isInPlane = true;\n          break;\n        }\n      }\n      if (!isInPlane) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","import { Vector3, Vector4, Matrix } from \"@alipay/o3-math\";\n\nimport { pointDistanceToPlane, getMaxScaleByModelMatrix } from \"./util\";\nimport { IntersectInfo } from \"../base/Constant\";\n\n/**\n * 包围球\n * */\nexport class BoundingSphere {\n  /** 本地坐标系 */\n  public center: Vector3 = new Vector3();\n  public radius: number = 0;\n  /** 世界坐标系 */\n  public centerWorld: Vector3 = new Vector3();\n  public radiusWorld: number = 0;\n\n  /**\n   * 初始化包围球, 之后可以通过 modelMatrix 缓存计算\n   * @param {Vector3} minLocal - 本地坐标系的最小坐标\n   * @param {Vector3} maxLocal - 本地坐标系的最大坐标\n   * @param {Matrix} modelMatrix - Local to World矩阵\n   * */\n  constructor(minLocal: Vector3, maxLocal: Vector3, modelMatrix: Matrix) {\n    // 先计算local\n    let distance = Vector3.distance(minLocal, maxLocal);\n    this.radius = distance * 0.5;\n\n    Vector3.add(minLocal, maxLocal, this.center);\n    this.center.scale(0.5);\n\n    // 计算world\n    this.updateByModelMatrix(modelMatrix);\n  }\n\n  /**\n   * 通过模型矩阵，和缓存的本地坐标系包围球，获取新的世界坐标系包围球\n   * @param {Matrix} modelMatrix - Local to World矩阵\n   * */\n  updateByModelMatrix(modelMatrix: Matrix) {\n    Vector3.transformCoordinate(this.center, modelMatrix, this.centerWorld);\n    this.radiusWorld = this.radius * getMaxScaleByModelMatrix(modelMatrix);\n  }\n\n  /**\n   * 获取与视锥体的 具体相交状态\n   * @param { Vector4[] } frustumPlanes - Oasis 视锥体的6个平面方程\n   * @return {IntersectInfo} 返回相交状态\n   * */\n  intersectsFrustum(frustumPlanes: Vector4[]): IntersectInfo {\n    for (let i = 0; i < 6; i++) {\n      const distance = pointDistanceToPlane(frustumPlanes[i], this.centerWorld);\n      if (distance < -this.radiusWorld) {\n        return IntersectInfo.EXCLUDE;\n      }\n      if (distance < this.radiusWorld) {\n        return IntersectInfo.INTERSECT;\n      }\n    }\n\n    return IntersectInfo.INCLUDE;\n  }\n\n  /**\n   * 是否在视锥体内部（包含或者交叉）\n   * @param { Vector4[] } frustumPlanes - Oasis 视锥体的6个平面方程\n   * @return {boolean}\n   * */\n  isInFrustum(frustumPlanes: Vector4[]): boolean {\n    for (let i = 0; i < 6; i++) {\n      const distance = pointDistanceToPlane(frustumPlanes[i], this.centerWorld);\n      if (distance < -this.radiusWorld) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","import { Vector3 } from \"@alipay/o3-math\";\nimport { ReferenceObject } from \"../asset/ReferenceObject\";\nimport { Primitive } from \"../primitive/Primitive\";\nimport { BoundingBox } from \"../RenderableComponent\";\n\n/**\n * Mesh Asset Object\n */\nexport class Mesh extends ReferenceObject {\n  public primitives: Primitive[];\n  public weights: number[];\n  public readonly bounds: BoundingBox = { min: new Vector3(), max: new Vector3() };\n\n  /**\n   * 构造函数\n   * @param {string} name 名称\n   */\n  constructor(name?: string) {\n    super();\n    this.primitives = [];\n    this._gcPriority = 1000;\n  }\n\n  updatePrimitiveWeightsIndices(weightsIndices: number[]) {\n    // this.primitives.forEach((primitive) => {\n    //   primitive.updateWeightsIndices(weightsIndices);\n    // });\n  }\n\n  onDestroy() {\n    const primitives = this.primitives;\n    for (let i = 0, len = primitives.length; i < len; i++) {\n      primitives[i].destroy();\n    }\n  }\n}\n","import { Matrix } from \"@alipay/o3-math\";\nimport { AssetObject } from \"../asset/AssetObject\";\n\nlet skinID = 0;\n\n/**\n * mesh skin data, equal glTF skins define\n * @class\n */\nexport class Skin extends AssetObject {\n  public inverseBindMatrices: Matrix[];\n  public joints: string[];\n  public skeleton: string;\n  /**\n   * 构造函数\n   * @param {string} name 名称\n   */\n  constructor(name) {\n    super();\n\n    this.inverseBindMatrices = []; // inverse bind matrix array, element type: gl-matrix.mat4\n    this.joints = []; // joints name array, element type: string\n    this.skeleton = \"none\"; // root bone name\n  }\n}\n","import { Mesh } from \"./Mesh\";\nimport { RenderableComponent } from \"../RenderableComponent\";\nimport { Material } from \"../material/Material\";\nimport { Entity } from \"../Entity\";\nimport { Camera } from \"../Camera\";\nimport { Logger } from \"../base/Logger\";\nimport { Vector3 } from \"@alipay/o3-math\";\n\n/**\n * 负责渲染一个Mesh对象的组件\n * @extends RenderableComponent\n */\nexport class MeshRenderer extends RenderableComponent {\n  private _mesh: Mesh;\n  private _instanceMaterials: Material[];\n  private _sharedMaterials: Material[];\n\n  /**\n   * @constructor\n   * @param {Entity} entity 所属的Node对象\n   * @param props\n   */\n  constructor(entity: Entity, props: { mesh?: Mesh } = {}) {\n    super(entity, props);\n\n    this._mesh = null; // Mesh Asset Object\n\n    this._instanceMaterials = []; // 这个组件独有的材质，用来单独控制材质参数\n    this._sharedMaterials = []; // Primitive默认材质，默认使用\n\n    this.mesh = props.mesh;\n  }\n\n  /**\n   * 当前绑定的 Mesh 对象\n   */\n  get mesh() {\n    return this._mesh;\n  }\n\n  /**\n   * 指定需要渲染的Mesh对象；多个MeshRenderer对象可以引用同一个Mesh对象\n   * @param {Mesh} mesh Mesh 对象\n   */\n  set mesh(mesh: Mesh) {\n    if (this._mesh) {\n      this._mesh._addReference(-1);\n    }\n    mesh._addReference(1);\n    this._mesh = mesh;\n    const primitives = mesh.primitives;\n    this._sharedMaterials = [];\n    this._instanceMaterials = [];\n    for (const primitive of primitives) {\n      primitive.material._addReference(1);\n      this._sharedMaterials.push(primitive.material);\n    } // end of for\n  }\n\n  /**\n   * 指定一个Primitive所使用的材质（替代Primitive的默认材质）\n   * @param {number} primitiveIndex Primitive 的名称\n   * @param {Material} mtl 材质对象\n   */\n  setMaterial(primitiveIndex: number, mtl: Material) {\n    if (this._instanceMaterials[primitiveIndex]) {\n      this._instanceMaterials[primitiveIndex]._addReference(-1);\n    }\n    mtl._addReference(1);\n    this._instanceMaterials[primitiveIndex] = mtl;\n  }\n\n  /**\n   * 取得这个组件独有的材质对象\n   * @param {number} primitiveIndex 索引值\n   * @return {Material}\n   */\n  getInstanceMaterial(primitiveIndex: number): Material {\n    return this._instanceMaterials[primitiveIndex];\n  }\n\n  /**\n   * 取得共享的Primitive的材质对象\n   * @param {number} primitiveIndex 索引值\n   * @return {Material}\n   */\n  getSharedMaterial(primitiveIndex: number): Material {\n    return this._sharedMaterials[primitiveIndex];\n  }\n\n  /**\n   * 执行渲染\n   * @param {CameraComponent} camera\n   */\n  render(camera: Camera) {\n    const mesh = this._mesh;\n    if (!mesh) {\n      return;\n    }\n\n    const renderPipeline = camera._renderPipeline;\n    const primitives = mesh.primitives;\n\n    //-- render every primitive\n    for (let i = 0, len = primitives.length; i < len; i++) {\n      const primitive = primitives[i];\n      const mtl = this._instanceMaterials[i] || this._sharedMaterials[i];\n      if (mtl) {\n        renderPipeline.pushPrimitive(this, primitive, mtl);\n      } else {\n        Logger.error(\"Primitive has no material: \" + primitive.name);\n      }\n    } // end of for\n  }\n\n  /**\n   * 释放资源\n   */\n  destroy() {\n    super.destroy();\n\n    //-- release mesh\n    this._mesh = null;\n\n    //-- materials\n    this._instanceMaterials = [];\n    this._sharedMaterials = [];\n\n    // 删除引用计数\n    for (let i = 0; i < this._instanceMaterials.length; i++) {\n      this._instanceMaterials[i]._addReference(-1);\n    }\n\n    // 删除引用计数\n    for (let i = 0; i < this._sharedMaterials.length; i++) {\n      this._sharedMaterials[i]._addReference(-1);\n    }\n\n    if (this._mesh) {\n      this._mesh._addReference(-1);\n    }\n    // TODO: primitive reference decrease\n    // const primitives = this._mesh.primitives;\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: any): void {\n    const localBounds: any = this.mesh.bounds;\n    const worldMatrix: any = this._entity.transform.worldMatrix;\n    Vector3.transformCoordinate(localBounds.min, worldMatrix, worldBounds.min); //TODO:简单模式，有漏洞，待AABB重构\n    Vector3.transformCoordinate(localBounds.max, worldMatrix, worldBounds.max);\n  }\n}\n","/**\n * 渲染缓冲颜色格式枚举。\n */\nexport enum RenderBufferColorFormat {\n  /** RGB格式，每通道8 bits。*/\n  R8G8B8,\n  /** RGBA格式，每通道8 bits。*/\n  R8G8B8A8,\n  /** RGBA格式,每通道4 bits*/\n  R4G4B4A4,\n  /** RGBA格式,R通道5 bits，G通道5 bits，B通道5 bits， A通道1 bit。*/\n  R5G5B5A1,\n  /** RGB格式,R通道5 bits，G通道6 bits，B通道5 bits。*/\n  R5G6B5,\n  /** 透明格式，8 bits。*/\n  Alpha8,\n  /** RGBA格式,每通道16 bits。*/\n  R16G16B16A16,\n  /** RGBA格式，每个通道32 bits。*/\n  R32G32B32A32\n}\n","/**\n * 渲染缓冲深度格式枚举。\n */\nexport enum RenderBufferDepthFormat {\n  /** 深度缓冲，自动选择精度 */\n  Depth = 0,\n  /** 深度模版缓冲，自动选择精度 */\n  DepthStencil = 1,\n  /** 模板缓冲 */\n  Stencil = 2,\n\n  /** 强制16位深度缓冲 */\n  Depth16 = 3,\n  /** 强制24位深度缓冲 */\n  Depth24 = 4,\n  /** 强制32位深度缓冲 */\n  Depth32 = 5,\n  /** 强制24位深度缓冲+8位模版缓冲 */\n  Depth24Stencil8 = 6,\n  /** 强制32位深度缓冲+8位模版缓冲 */\n  Depth32Stencil8 = 7\n}\n","/**\n * 立方体纹理面。\n */\nexport enum TextureCubeFace {\n  /** X轴正方向。 */\n  PositiveX = 0,\n  /** X轴负方向。 */\n  NegativeX = 1,\n  /** Y轴正方向。 */\n  PositiveY = 2,\n  /** Y轴负方向。 */\n  NegativeY = 3,\n  /** Z轴正方向。 */\n  PositiveZ = 4,\n  /** Z轴负方向。 */\n  NegativeZ = 5\n}\n","/**\n * 纹理的过滤模式。\n */\nexport enum TextureFilterMode {\n  /** 点过滤。*/\n  Point = 0,\n  /** 双线性过滤。*/\n  Bilinear = 1,\n  /** 三线性过滤。*/\n  Trilinear = 2\n}\n","/**\n * 纹理格式枚举。\n */\nexport enum TextureFormat {\n  /** RGB格式，每通道8 bits。*/\n  R8G8B8,\n  /** RGBA格式，每通道8 bits。*/\n  R8G8B8A8,\n  /** RGBA格式,每通道4 bits*/\n  R4G4B4A4,\n  /** RGBA格式,R通道5 bits，G通道5 bits，B通道5 bits， A通道1 bit。*/\n  R5G5B5A1,\n  /** RGB格式,R通道5 bits，G通道6 bits，B通道5 bits。*/\n  R5G6B5,\n  /** 透明格式，8 bits。*/\n  Alpha8,\n  /** RGBA格式，每个通道32 bits。*/\n  R32G32B32A32,\n  /** RGB压缩格式的压缩格式。*/\n  DXT1,\n  /** RGBA压缩格式的压缩格式。*/\n  DXT5,\n  /** RGB压缩格式，4 bits每像素。*/\n  ETC1_RGB,\n  /** RGB压缩格式，4 bits每像素。*/\n  ETC2_RGB,\n  /** RGBA压缩格式，5 bits每像素,RGB 4 bit,Alpha 1 bit。*/\n  ETC2_RGBA5,\n  /** RGB压缩格式，8 bits每像素。*/\n  ETC2_RGBA8,\n  /** RGB压缩格式，2 bits每像素。*/\n  PVRTC_RGB2,\n  /** RGBA压缩格式，2 bits每像素。*/\n  PVRTC_RGBA2,\n  /** RGB压缩格式，4 bits每像素。*/\n  PVRTC_RGB4,\n  /** RGBA压缩格式，4 bits每像素。*/\n  PVRTC_RGBA4,\n  /** RGB(A)压缩格式，128 bits 每4x4像素块。*/\n  ASTC_4x4,\n  /** RGB(A)压缩格式，128 bits 每5x5像素块。*/\n  ASTC_5x5,\n  /** RGB(A)压缩格式，128 bits 每6x6像素块。*/\n  ASTC_6x6,\n  /** RGB(A)压缩格式，128 bits 每8x8像素块。*/\n  ASTC_8x8,\n  /** RGB(A)压缩格式，128 bits 每10x10像素块。*/\n  ASTC_10x10,\n  /** RGB(A)压缩格式，128 bits 每12x12像素块。*/\n  ASTC_12x12\n}\n","/**\n * 纹理的循环模式。\n */\nexport enum TextureWrapMode {\n  /** 截取模式，超过纹理边界使用边缘像素的颜色。 */\n  Clamp = 0,\n  /** 重复模式，超过纹理边界会循环平铺。*/\n  Repeat = 1,\n  /** 镜像重复模式，超过纹理边界会镜像循环平铺。*/\n  Mirror = 2\n}\n","import { DataType, UniformSemantic } from \"../base/Constant\";\n\nexport interface RenderTargetConfig {\n  width?: number;\n  height?: number;\n  clearColor?;\n  enableDepthTexture?: boolean;\n  isCube?: boolean;\n  /** WebGL2 时，可以开启硬件层的 MSAA */\n  samples?: number;\n  isMulti?: boolean;\n  /** color Buffer 输出是否要 float 浮点类型 */\n  colorBufferFloat?: boolean;\n}\n\nexport type Rect = { x: number; y: number; width: number; height: number };\n\nexport type TechniqueStates = {\n  enable?: GLenum[];\n  disable?: GLenum[];\n  functions?: {\n    [key: string]: any;\n  };\n};\n\nexport interface Attributes {\n  [key: string]: {\n    name: string;\n    semantic: string;\n    type: DataType;\n  };\n}\n\nexport interface Uniforms {\n  [key: string]: {\n    name: string;\n    semantic?: UniformSemantic | string;\n    type: DataType;\n  };\n}\n\nexport interface TextureFormatDetail {\n  internalFormat: GLint;\n  baseFormat?: GLenum;\n  dataType?: GLenum;\n  isCompressed: boolean;\n  attachment?: GLenum;\n}\n\n/**\n * @deprecated\n */\nexport enum GLCompressedTextureInternalFormat {\n  // astc\n  RGBA_ASTC_4X4_KHR = 0x93b0,\n  RGBA_ASTC_5X4_KHR = 0x93b1,\n  RGBA_ASTC_5X5_KHR = 0x93b2,\n  RGBA_ASTC_6X5_KHR = 0x93b3,\n  RGBA_ASTC_6X6_KHR = 0x93b4,\n  RGBA_ASTC_8X5_KHR = 0x93b5,\n  RGBA_ASTC_8X6_KHR = 0x93b6,\n  RGBA_ASTC_8X8_KHR = 0x93b7,\n  RGBA_ASTC_10X5_KHR = 0x93b8,\n  RGBA_ASTC_10X6_KHR = 0x93b9,\n  RGBA_ASTC_10X8_KHR = 0x93ba,\n  RGBA_ASTC_10X10_KHR = 0x93bb,\n  RGBA_ASTC_12X10_KHR = 0x93bc,\n  RGBA_ASTC_12X12_KHR = 0x93bd,\n  SRGB8_ALPHA8_ASTC_4X4_KHR = 0x93d0,\n  SRGB8_ALPHA8_ASTC_5X4_KHR = 0x93d1,\n  SRGB8_ALPHA8_ASTC_5X5_KHR = 0x93d2,\n  SRGB8_ALPHA8_ASTC_6X5_KHR = 0x93d3,\n  SRGB8_ALPHA8_ASTC_6X6_KHR = 0x93d4,\n  SRGB8_ALPHA8_ASTC_8X5_KHR = 0x93d5,\n  SRGB8_ALPHA8_ASTC_8X6_KHR = 0x93d6,\n  SRGB8_ALPHA8_ASTC_8X8_KHR = 0x93d7,\n  SRGB8_ALPHA8_ASTC_10X5_KHR = 0x93d8,\n  SRGB8_ALPHA8_ASTC_10X6_KHR = 0x93d9,\n  SRGB8_ALPHA8_ASTC_10X8_KHR = 0x93da,\n  SRGB8_ALPHA8_ASTC_10X10_KHR = 0x93db,\n  SRGB8_ALPHA8_ASTC_12X10_KHR = 0x93dc,\n  SRGB8_ALPHA8_ASTC_12X12_KHR = 0x93dd,\n\n  // etc1\n  RGB_ETC1_WEBGL = 0x8d64,\n\n  // etc2\n  R11_EAC = 0x9270,\n  SIGNED_R11_EAC = 0x9271,\n  RG11_EAC = 0x9272,\n  SIGNED_RG11_EAC = 0x9273,\n  RGB8_ETC2 = 0x9274,\n  SRGB8_ETC2 = 0x9275,\n  RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\n  SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\n  RGBA8_ETC2_EAC = 0x9278,\n  SRGB8_ALPHA8_ETC2_EAC = 0x9279,\n\n  // pvrtc\n  RGB_PVRTC_4BPPV1_IMG = 0x8c00,\n  RGB_PVRTC_2BPPV1_IMG = 0x8c01,\n  RGBA_PVRTC_4BPPV1_IMG = 0x8c02,\n  RGBA_PVRTC_2BPPV1_IMG = 0x8c03,\n\n  // s3tc\n  RGB_S3TC_DXT1_EXT = 0x83f0,\n  RGBA_S3TC_DXT1_EXT = 0x83f1,\n  RGBA_S3TC_DXT3_EXT = 0x83f2,\n  RGBA_S3TC_DXT5_EXT = 0x83f3\n}\n","import { ReferenceObject } from \"../asset/ReferenceObject\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { GLCompressedTextureInternalFormat, TextureFormatDetail } from \"../material/type\";\nimport {\n  RenderBufferColorFormat,\n  RenderBufferDepthFormat,\n  TextureCubeFace,\n  TextureFilterMode,\n  TextureFormat,\n  TextureWrapMode\n} from \"./enums\";\n/**\n * 纹理的基类，包含了纹理相关类的一些公共功能。\n */\n\nexport abstract class Texture extends ReferenceObject {\n  /** @internal */\n  static _readFrameBuffer: WebGLFramebuffer = null;\n\n  /** @internal */\n  static _isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * @internal\n   * 根据 TextureFormat 获取具体信息。\n   */\n  static _getFormatDetail(\n    format: TextureFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case TextureFormat.R8G8B8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB8 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R8G8B8A8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA8 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R4G4B4A4:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA4 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_4_4_4_4,\n          isCompressed: false\n        };\n      case TextureFormat.R5G5B5A1:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB5_A1 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_5_5_5_1,\n          isCompressed: false\n        };\n      case TextureFormat.R5G6B5:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB565 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_SHORT_5_6_5,\n          isCompressed: false\n        };\n      case TextureFormat.Alpha8:\n        return {\n          internalFormat: gl.ALPHA,\n          baseFormat: gl.ALPHA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R32G32B32A32:\n        return {\n          internalFormat: gl.RGBA32F,\n          baseFormat: gl.RGBA,\n          dataType: gl.FLOAT,\n          isCompressed: false\n        };\n      case TextureFormat.DXT1:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT,\n          isCompressed: true\n        };\n      case TextureFormat.DXT5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT,\n          isCompressed: true\n        };\n      case TextureFormat.ETC1_RGB:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGB:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB8_ETC2,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGBA5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGBA8:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA8_ETC2_EAC,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGB2:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_PVRTC_2BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGBA2:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGB4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGBA4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_PVRTC_4BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_4x4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_5x5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_5X5_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_6x6:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_6X6_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_8x8:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_8X8_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_10x10:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_10X10_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_12x12:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR,\n          isCompressed: true\n        };\n      default:\n        throw new Error(`this TextureFormat is not supported in Oasis Engine: ${format}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getRenderBufferColorFormatDetail(\n    format: RenderBufferColorFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case RenderBufferColorFormat.R8G8B8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB8 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R8G8B8A8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA8 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R4G4B4A4:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA4 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_4_4_4_4,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R5G5B5A1:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB5_A1 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_5_5_5_1,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R5G6B5:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB565 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_SHORT_5_6_5,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.Alpha8:\n        return {\n          internalFormat: gl.ALPHA,\n          baseFormat: gl.ALPHA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R16G16B16A16:\n        return {\n          internalFormat: gl.RGBA16F,\n          baseFormat: gl.RGBA,\n          dataType: gl.HALF_FLOAT,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R32G32B32A32:\n        return {\n          internalFormat: gl.RGBA32F,\n          baseFormat: gl.RGBA,\n          dataType: gl.FLOAT,\n          isCompressed: false\n        };\n      default:\n        throw new Error(`this RenderBufferColorFormat is not supported in Oasis Engine: ${format}`);\n    }\n  }\n\n  /**\n   * @internal\n   * In WebGL 1, internalformat must be the same as baseFormat when call texImage2D\n   */\n  static _getRenderBufferDepthFormatDetail(\n    format: RenderBufferDepthFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case RenderBufferDepthFormat.Depth:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT32F : gl.DEPTH_COMPONENT16,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: isWebGL2 ? gl.FLOAT : gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.DepthStencil:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Stencil:\n        return {\n          internalFormat: gl.STENCIL_INDEX8,\n          baseFormat: gl.STENCIL_ATTACHMENT,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false,\n          attachment: gl.STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth16:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT16 : gl.DEPTH_COMPONENT16,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth24:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT24,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth32:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT32F,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.FLOAT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth24Stencil8:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth32Stencil8:\n        return {\n          internalFormat: gl.DEPTH32F_STENCIL8,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.FLOAT_32_UNSIGNED_INT_24_8_REV,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      default:\n        throw new Error(`this RenderBufferDepthFormat is not supported in Oasis Engine: ${format}`);\n    }\n  }\n\n  /**\n   * @internal\n   * 检测是否支持相应纹理格式。\n   */\n  static _supportTextureFormat(format: TextureFormat, rhi): boolean {\n    let isSupported = true;\n\n    switch (format) {\n      case TextureFormat.R32G32B32A32:\n        {\n          if (!rhi.canIUse(GLCapabilityType.textureFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n    }\n\n    return isSupported;\n  }\n\n  /**\n   * @internal\n   */\n  static _supportRenderBufferColorFormat(format: RenderBufferColorFormat, rhi): boolean {\n    let isSupported = true;\n\n    switch (format) {\n      case RenderBufferColorFormat.R32G32B32A32:\n        {\n          if (!rhi.canIUse(GLCapabilityType.colorBufferFloat) || !rhi.canIUse(GLCapabilityType.textureFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n      case RenderBufferColorFormat.R16G16B16A16:\n        {\n          if (!rhi.canIUse(GLCapabilityType.colorBufferHalfFloat) || !rhi.canIUse(GLCapabilityType.textureHalfFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n    }\n\n    return isSupported;\n  }\n\n  /**\n   * @internal\n   */\n  static _supportRenderBufferDepthFormat(format: RenderBufferDepthFormat, rhi, isTexture: boolean): boolean {\n    const isWebGL2: boolean = rhi.isWebGL2;\n    let isSupported = true;\n\n    if (isTexture && !rhi.canIUse(GLCapabilityType.depthTexture)) {\n      return false;\n    }\n\n    switch (format) {\n      case RenderBufferDepthFormat.Stencil:\n        {\n          isSupported = false;\n        }\n        break;\n      case RenderBufferDepthFormat.Depth24:\n      case RenderBufferDepthFormat.Depth32:\n      case RenderBufferDepthFormat.Depth32Stencil8:\n        {\n          if (!isWebGL2) {\n            isSupported = false;\n          }\n        }\n        break;\n    }\n\n    return isSupported;\n  }\n\n  public _glTexture: WebGLTexture;\n\n  /** @internal */\n  public _formatDetail: TextureFormatDetail;\n\n  protected _width: number;\n  protected _height: number;\n\n  /** @internal */\n  protected _rhi;\n  /** @internal */\n  protected _target: GLenum;\n  /** @internal */\n  protected _mipmap: boolean;\n  /** @internal */\n  protected _mipmapCount: number;\n\n  private _wrapModeU: TextureWrapMode;\n  private _wrapModeV: TextureWrapMode;\n  private _filterMode: TextureFilterMode;\n  private _anisoLevel: number = 1;\n\n  /**\n   * 纹理宽。\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * 纹理高。\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * 纹理坐标 U 的循环模式。\n   */\n  get wrapModeU(): TextureWrapMode {\n    return this._wrapModeU;\n  }\n\n  set wrapModeU(value: TextureWrapMode) {\n    if (value === this._wrapModeU) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    this._wrapModeU = value;\n\n    this._bind();\n    this._setWrapMode(value, gl.TEXTURE_WRAP_S);\n    this._unbind();\n  }\n\n  /**\n   * 纹理坐标 V 的循环模式。\n   */\n  get wrapModeV(): TextureWrapMode {\n    return this._wrapModeV;\n  }\n\n  set wrapModeV(value: TextureWrapMode) {\n    if (value === this._wrapModeV) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    this._wrapModeV = value;\n\n    this._bind();\n    this._setWrapMode(value, gl.TEXTURE_WRAP_T);\n    this._unbind();\n  }\n\n  /**\n   * 多级纹理的数量。\n   */\n  get mipmapCount(): number {\n    return this._mipmapCount;\n  }\n\n  /**\n   * 纹理的过滤模式。\n   */\n  get filterMode(): TextureFilterMode {\n    return this._filterMode;\n  }\n\n  set filterMode(value: TextureFilterMode) {\n    if (value === this._filterMode) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    this._filterMode = value;\n\n    this._bind();\n    switch (value) {\n      case TextureFilterMode.Point:\n        gl.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, this._mipmap ? gl.NEAREST_MIPMAP_NEAREST : gl.NEAREST);\n        break;\n      case TextureFilterMode.Bilinear:\n        gl.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, this._mipmap ? gl.LINEAR_MIPMAP_NEAREST : gl.LINEAR);\n        break;\n      case TextureFilterMode.Trilinear:\n        gl.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, this._mipmap ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);\n        break;\n    }\n    this._unbind();\n  }\n\n  /**\n   * 各向异性过滤等级。\n   */\n  get anisoLevel(): number {\n    return this._anisoLevel;\n  }\n\n  set anisoLevel(value: number) {\n    const max = this._rhi.capability.maxAnisoLevel;\n\n    if (value > max) {\n      Logger.warn(`anisoLevel:${value}, exceeds the limit and is automatically downgraded to:${max}`);\n      value = max;\n    }\n\n    if (value < 1) {\n      Logger.warn(`anisoLevel:${value}, must be greater than 0, and is automatically downgraded to 1`);\n      value = 1;\n    }\n\n    if (value === this._anisoLevel) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext & EXT_texture_filter_anisotropic = this._rhi.gl;\n\n    this._anisoLevel = value;\n\n    this._bind();\n    gl.texParameterf(this._target, gl.TEXTURE_MAX_ANISOTROPY_EXT, value);\n    this._unbind();\n  }\n\n  /**\n   * 根据第0级数据生成多级纹理。\n   */\n  public generateMipmaps(): void {\n    if (!this._mipmap) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    this._bind();\n    gl.generateMipmap(this._target);\n    this._unbind();\n  }\n\n  onDestroy() {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    gl.deleteTexture(this._glTexture);\n    this._glTexture = null;\n    this._formatDetail = null;\n    // TODO: delete\n    this._rhi = null;\n  }\n\n  /** @internal */\n  public _bind(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    gl.bindTexture(this._target, this._glTexture);\n  }\n\n  /** @internal */\n  public _unbind(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    gl.bindTexture(this._target, null);\n  }\n\n  /**\n   * @internal\n   * 根据指定区域获得像素颜色缓冲。\n   * @param face - 如果是立方体纹理，可以选择读取第几个面\n   * @param x - 区域起始X坐标\n   * @param y - 区域起始Y坐标\n   * @param width - 区域宽\n   * @param height - 区域高\n   * @param out - 颜色数据缓冲\n   */\n  protected _getPixelBuffer(\n    face: TextureCubeFace | null,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    if (!Texture._readFrameBuffer) {\n      Texture._readFrameBuffer = gl.createFramebuffer();\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, Texture._readFrameBuffer);\n\n    if (face != null) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n        this._glTexture,\n        0\n      );\n    } else {\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._glTexture, 0);\n    }\n    gl.readPixels(x, y, width, height, baseFormat, dataType, out);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  /**\n   * @internal\n   * 预开辟 mipmap 显存\n   */\n  protected _initMipmap(isCube: boolean): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2 = this._rhi.isWebGL2;\n    let { internalFormat, baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n\n    if (isWebGL2) {\n      gl.texStorage2D(this._target, this._mipmapCount, internalFormat, this._width, this._height);\n    } else {\n      // In WebGL 1, internalformat must be the same as baseFormat\n      if (baseFormat !== internalFormat) {\n        internalFormat = baseFormat;\n      }\n\n      if (!isCube) {\n        for (let i = 0; i < this._mipmapCount; i++) {\n          const width = Math.max(1, this._width >> i);\n          const height = Math.max(1, this._height >> i);\n\n          gl.texImage2D(this._target, i, internalFormat, width, height, 0, baseFormat, dataType, null);\n        }\n      } else {\n        for (let i = 0; i < this._mipmapCount; i++) {\n          const size = Math.max(1, this._width >> i);\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            gl.texImage2D(\n              gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\n              i,\n              internalFormat,\n              size,\n              size,\n              0,\n              baseFormat,\n              dataType,\n              null\n            );\n          }\n        }\n      }\n    }\n\n    this._unbind();\n  }\n\n  /**\n   * @internal\n   * 获取相应size的最大mip级别,rounding down\n   * http://download.nvidia.com/developer/Papers/2005/NP2_Mipmapping/NP2_Mipmap_Creation.pdf\n   */\n  protected _getMaxMiplevel(size: number): number {\n    return Math.floor(Math.log2(size));\n  }\n\n  /**\n   * @internal\n   */\n  protected _getMipmapCount(): number {\n    return this._mipmap ? Math.floor(Math.log2(Math.max(this._width, this._height))) + 1 : 1;\n  }\n\n  /**\n   * @internal\n   */\n  private _setWrapMode(value: TextureWrapMode, pname: GLenum): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n\n    if (\n      !isWebGL2 &&\n      value !== TextureWrapMode.Clamp &&\n      (!Texture._isPowerOf2(this._width) || !Texture._isPowerOf2(this._height))\n    ) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for REPEAT or MIRRORED_REPEAT in WebGL1,and has automatically downgraded to CLAMP_TO_EDGE\"\n      );\n      value = TextureWrapMode.Clamp;\n    }\n\n    switch (value) {\n      case TextureWrapMode.Clamp:\n        gl.texParameteri(this._target, pname, gl.CLAMP_TO_EDGE);\n        break;\n      case TextureWrapMode.Repeat:\n        gl.texParameteri(this._target, pname, gl.REPEAT);\n        break;\n      case TextureWrapMode.Mirror:\n        gl.texParameteri(this._target, pname, gl.MIRRORED_REPEAT);\n        break;\n    }\n  }\n\n  // TODO: delete\n  constructor(engine?: Engine) {\n    super(engine);\n\n    this._gcPriority = 900;\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { TextureFilterMode, TextureFormat, TextureWrapMode } from \"./enums\";\nimport { Texture } from \"./Texture\";\n\n/**\n * 2D纹理。\n */\nexport class Texture2D extends Texture {\n  private _format: TextureFormat;\n  /** 向下兼容 WebGL1.0。 */\n  private _compressedMipFilled: number = 0;\n\n  /**\n   * 纹理的格式。\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * 构建一个2D纹理。\n   * @param width - 宽\n   * @param height - 高\n   * @param format - 格式，默认值 `TextureFormat.R8G8B8A8`\n   * @param mipmap - 是否使用多级纹理\n   * @param engine - 可选引擎\n   */\n  constructor(\n    width: number,\n    height: number,\n    format: TextureFormat = TextureFormat.R8G8B8A8,\n    mipmap: boolean = true,\n    engine?: Engine\n  ) {\n    super();\n    engine = engine || Engine._getDefaultEngine();\n    const rhi = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n    const isWebGL2: boolean = rhi.isWebGL2;\n\n    if (!Texture._supportTextureFormat(format, rhi)) {\n      throw new Error(`Texture format is not supported:${TextureFormat[format]}`);\n    }\n\n    if (mipmap && !isWebGL2 && (!Texture._isPowerOf2(width) || !Texture._isPowerOf2(height))) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n      mipmap = false;\n    }\n\n    const formatDetail = Texture._getFormatDetail(format, gl, isWebGL2);\n\n    this._glTexture = gl.createTexture();\n    this._formatDetail = formatDetail;\n    this._rhi = rhi;\n    this._target = gl.TEXTURE_2D;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    (formatDetail.isCompressed && !isWebGL2) || this._initMipmap(false);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Repeat;\n  }\n\n  /**\n   * 通过颜色缓冲数据、指定区域和纹理层级设置像素，同样适用于压缩格式。\n   * 如果为WebGL1.0平台且纹理格式为压缩格式，第一次上传必须填满纹理。\n   * @param pixelBuffer - 颜色缓冲数据\n   * @param mipLevel - 纹理层级\n   * @param x - 数据起始X坐标\n   * @param y - 数据起始Y坐标\n   * @param width - 数据宽度。如果为空的话 width 为 mipLevel 对应的宽度减去 x , mipLevel 对应的宽度为 Math.max(1, this.width >> mipLevel)\n   * @param height - 数据高度。如果为空的话 height 为 mipLevel 对应的高度减去 y , mipLevel 对应的高度为 Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x?: number,\n    y?: number,\n    width?: number,\n    height?: number\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const { internalFormat, baseFormat, dataType, isCompressed } = this._formatDetail;\n    const mipWidth = Math.max(1, this._width >> mipLevel);\n    const mipHeight = Math.max(1, this._height >> mipLevel);\n\n    x = x || 0;\n    y = y || 0;\n    width = width || mipWidth - x;\n    height = height || mipHeight - y;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isCompressed) {\n      const mipBit = 1 << mipLevel;\n      if (isWebGL2 || this._compressedMipFilled & mipBit) {\n        gl.compressedTexSubImage2D(this._target, mipLevel, x, y, width, height, internalFormat, colorBuffer);\n      } else {\n        gl.compressedTexImage2D(this._target, mipLevel, internalFormat, width, height, 0, colorBuffer);\n        this._compressedMipFilled |= mipBit;\n      }\n    } else {\n      gl.texSubImage2D(this._target, mipLevel, x, y, width, height, baseFormat, dataType, colorBuffer);\n    }\n\n    this._unbind();\n  }\n\n  /**\n   * 通过图源、指定区域和纹理层级设置像素。\n   * @param imageSource - 纹理源\n   * @param mipLevel - 多级纹理层级\n   * @param flipY - 是否翻转Y轴\n   * @param premultiplyAlpha - 是否预乘透明通道\n   * @param x - 区域起始X坐标\n   * @param y - 区域起始Y坐标\n   */\n  setImageSource(\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x?: number,\n    y?: number\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);\n    gl.texSubImage2D(this._target, mipLevel, x || 0, y || 0, baseFormat, dataType, imageSource);\n    this._unbind();\n  }\n\n  /**\n   * 根据指定区域获得像素颜色缓冲。\n   * @param x - 区域起始X坐标\n   * @param y - 区域起始Y坐标\n   * @param width - 区域宽\n   * @param height - 区域高\n   * @param out - 颜色数据缓冲\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, out: ArrayBufferView): void {\n    if (this._formatDetail.isCompressed) {\n      throw new Error(\"Unable to read compressed texture\");\n    }\n    super._getPixelBuffer(null, x, y, width, height, out);\n  }\n}\n","import { Matrix } from \"@alipay/o3-math\";\nimport { Entity } from \"../Entity\";\nimport { TextureFormat, TextureFilterMode } from \"../texture/enums\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { Mesh } from \"./Mesh\";\nimport { MeshRenderer } from \"./MeshRenderer\";\nimport { Skin } from \"./Skin\";\n\n/**\n * 负责渲染一个 Skinned Mesh 的组件\n * @extends MeshRenderer\n */\nexport class SkinnedMeshRenderer extends MeshRenderer {\n  private _hasInitJoints: boolean = false;\n\n  public matrixPalette: Float32Array;\n  public jointNodes: Entity[];\n  public jointTexture: Texture2D;\n\n  private _mat: Matrix;\n  private _weights: number[];\n  private weightsIndices: number[] = [];\n  private _skin: Skin;\n  /** 当超过设备最大骨骼数时，自动使用骨骼纹理技术，该技术能提高骨骼上限，但是性能会下降 */\n  private _useJointTexture: boolean = false;\n\n  /**\n   * constructor\n   * @param entity\n   * @param props\n   */\n  constructor(entity: Entity, props: { mesh?: Mesh; skin?: Skin; weights?: number[]; rootNodes?: Entity[] } = {}) {\n    super(entity, props);\n    this._mat = new Matrix();\n    this._weights = null;\n    this._skin = null;\n\n    this.skin = props.skin;\n    this.setWeights(props.mesh?.weights);\n  }\n\n  /**\n   * set morph target weights\n   * @param {Number|Vec} weights 权重参数\n   */\n  setWeights(weights: number[]) {\n    this._weights = weights;\n    if (!weights) {\n      return;\n    }\n    const len = weights.length;\n    for (let i = 0; i < len; i++) {\n      this.weightsIndices[i] = i;\n    }\n\n    const weightsIndices = this.weightsIndices;\n\n    // 冒泡排序，对 weights 进行大小排序，weightsIndices 根据 weights 顺序而调换顺序\n    for (let i = 0; i < len - 1; i++) {\n      for (let j = i + 1; j < len; j++) {\n        if (weights[j] > weights[i]) {\n          let t = weights[i];\n          weights[i] = weights[j];\n          weights[j] = t;\n          t = weightsIndices[i];\n          weightsIndices[i] = weightsIndices[j];\n          weightsIndices[j] = t;\n        }\n      }\n    }\n    this.mesh.updatePrimitiveWeightsIndices(weightsIndices);\n  }\n\n  /**\n   * 当前绑定的 Skin 对象\n   */\n  get skin() {\n    return this._skin;\n  }\n\n  /**\n   * 绑定 Skin 对象\n   */\n  set skin(skin) {\n    this._skin = skin;\n    // this._started = false; // force onStart callback\n  }\n\n  get weights() {\n    return this._weights;\n  }\n\n  _initJoints() {\n    if (!this._skin) return;\n    const skin = this._skin;\n    //-- init\n\n    const joints = skin.joints;\n    const jointNodes = [];\n    for (let i = joints.length - 1; i >= 0; i--) {\n      jointNodes[i] = this.findByNodeName(this.entity, joints[i]);\n    } // end of for\n    this.matrixPalette = new Float32Array(jointNodes.length * 16);\n    this.jointNodes = jointNodes;\n\n    /** 是否使用骨骼纹理 */\n    const rhi = this.entity.engine._hardwareRenderer;\n    if (!rhi) return;\n    const maxAttribUniformVec4 = rhi.renderStates.getParameter(rhi.gl.MAX_VERTEX_UNIFORM_VECTORS);\n    const maxJoints = Math.floor((maxAttribUniformVec4 - 20) / 4);\n    if (joints.length > maxJoints && rhi.canIUseMoreJoints) {\n      this._useJointTexture = true;\n    }\n  }\n\n  private findByNodeName(entity: Entity, nodeName: string) {\n    if (!entity) return null;\n\n    const n = entity.findByName(nodeName);\n\n    if (n) return n;\n\n    return this.findByNodeName(entity.parent, nodeName);\n  }\n\n  /**\n   * 在SceneGraph的树形结构中中向上查找\n   * @param {SceneNode} entity\n   * @param {string} nodeName\n   * @private\n   */\n  _findParent(entity: Entity, nodeName: string) {\n    if (entity) {\n      const parent = entity.parent;\n      if (!parent) return null;\n      if (parent.name === nodeName) return parent;\n\n      const brother = parent.findByName(nodeName);\n      if (brother) return brother;\n\n      return this._findParent(parent, nodeName);\n    }\n    return null;\n  }\n\n  /**\n   * TODO 渲染之前\n   * update matrix palette\n   * @private\n   */\n  update() {\n    if (!this._hasInitJoints) {\n      this._initJoints();\n      this._hasInitJoints = true;\n    }\n    if (this._skin) {\n      const joints = this.jointNodes;\n      const ibms = this._skin.inverseBindMatrices;\n      const matrixPalette = this.matrixPalette;\n      const worldToLocal = this.entity.getInvModelMatrix();\n\n      const mat = this._mat;\n      for (let i = joints.length - 1; i >= 0; i--) {\n        mat.identity();\n        if (joints[i]) {\n          Matrix.multiply(joints[i].transform.worldMatrix, ibms[i], mat);\n        } else {\n          ibms[i].cloneTo(mat);\n        }\n        Matrix.multiply(worldToLocal, mat, mat);\n        matrixPalette.set(mat.elements, i * 16);\n      } // end of for\n      if (this._useJointTexture) {\n        this.createJointTexture();\n      }\n    }\n  }\n\n  /**\n   * 生成骨骼纹理，将 matrixPalette 存储到 u_jointSampler 中\n   * 格式：(4 * RGBA) * jointCont\n   * */\n  createJointTexture() {\n    if (!this.jointTexture) {\n      const rhi = this.entity.engine._hardwareRenderer;\n      if (!rhi) return;\n      this.jointTexture = new Texture2D(4, this.jointNodes.length, TextureFormat.R32G32B32A32, false);\n      this.jointTexture.filterMode = TextureFilterMode.Point;\n    }\n    this.jointTexture.setPixelBuffer(this.matrixPalette);\n  }\n}\n","import { Vector3 } from \"@alipay/o3-math\";\nimport { RenderableComponent } from \"../RenderableComponent\";\n\n/**\n * 离散 LOD 层级渲染控制：根据对象占用屏幕高度的百分比，切换不同的 Renderer\n */\nexport class LODGroup extends RenderableComponent {\n  private _lods;\n  /**\n   * 构造函数\n   * @param {Entity} entity 对象所在节点\n   * @param {Object} props  配置参数\n   */\n  constructor(entity, props) {\n    super(entity, props);\n    this._lods = [];\n  }\n\n  /**\n   * 添加一个 LOD 层级\n   * @param {number} distance 对象距离Camera的距离\n   * @param {Component} rendererAbility 当前 LOD 层级激活时的 Renderer 组件对象，可以是 MeshRenderer 或者 SkinnedMeshRenderer 等\n   */\n  addLod(distance, rendererAbility) {\n    // 关闭原因的 Render，由 ALODGroup 接手\n    rendererAbility.enabled = false;\n\n    this._lods.push({\n      distance,\n      rendererAbility\n    });\n\n    this._lods.sort((a, b) => b.distance - a.distance);\n  }\n\n  /**\n   * 计算当前的激活的LOD层级，并调用它的渲染\n   */\n  render(camera) {\n    if (this._lods.length <= 0) return;\n\n    const dist = Vector3.distance(camera.eyePos, this.entity.worldPosition);\n\n    const lods = this._lods;\n    let activeLevel = 0;\n    for (let i = lods.length - 1; i >= 0; i--) {\n      const lod = lods[i];\n      if (dist < lod.distance) {\n        activeLevel = i;\n        break;\n      }\n    } // end of for\n\n    const lod = lods[activeLevel];\n    lod.rendererAbility.render(camera);\n  }\n}\n","/**\n * 缓冲的用途。\n */\nexport enum BufferUsage {\n  /** 缓冲区的内容修改一次，使用多次。*/\n  Static,\n  /** 缓冲区的内容经常被修改，使用多次。*/\n  Dynamic,\n  /** 缓冲区的内容修改一次，使用几次。*/\n  Stream\n}\n","/**\n * 顶点元素格式。\n */\nexport enum VertexElementFormat {\n  /** 32-bit 浮点数。*/\n  Single,\n  /** 二维 32-bit 浮点数。*/\n  Vector2,\n  /** 三维 32-bit 浮点数。*/\n  Vector3,\n  /** 四维 32-bit 浮点数。*/\n  Vector4,\n  /** 四维 8-bit 整型,范围是 [-128,127]。*/\n  Byte4,\n  /** 四维 8-bit 无符号整型，范围是 [0,255]。*/\n  UByte4,\n  /** 四维 8-bit 归一化整型，范围是 [-1,1]。*/\n  NormalizedByte4,\n  /** 四维 8-bit 归一化无符号整型，范围是 [0,1]。*/\n  NormalizedUByte4,\n  /** 二维 16-bit 整型，范围是 [-32768, 32767]。*/\n  Short2,\n  /** 二维 16-bit 无符号整型，范围是 [0, 65535]。*/\n  UShort2,\n  /** 二维 16-bit 归一化整型，范围是 [-1, 1]。*/\n  NormalizedShort2,\n  /** 二维 16-bit 归一化无符号整型，范围是 [0, 1]。*/\n  NormalizedUShort2,\n  /** 四维 16-bit 整型，范围是 [-32768, 32767]。*/\n  Short4,\n  /** 四维 16-bit 无符号整型，范围是 [0, 65535]。*/\n  UShort4,\n  /** 四维 16-bit 归一化整型，范围是 [-1, 1]。*/\n  NormalizedShort4,\n  /** 四维 16-bit 归一化无符号整型，范围是 [0, 1]。*/\n  NormalizedUShort4\n}\n","/**\n * 索引格式。\n */\nexport enum IndexFormat {\n  /** 8 位。*/\n  UInt8,\n  /** 16 位。*/\n  UInt16,\n  /** 32 位。*/\n  UInt32\n}\n","import { BufferUsage } from \"./enums/BufferUsage\";\nimport { VertexElementFormat } from \"./enums/VertexElementFormat\";\nimport { DataType } from \"../base/Constant\";\nimport { IndexFormat } from \"./enums/IndexFormat\";\n\nexport interface ElementInfo {\n  size: number;\n  type: DataType;\n}\n\nexport class BufferUtil {\n  /**\n   * @internal\n   */\n  static _getGLBufferUsage(gl: WebGLRenderingContext, bufferUsage: BufferUsage): number {\n    switch (bufferUsage) {\n      case BufferUsage.Static:\n        return gl.STATIC_DRAW;\n      case BufferUsage.Dynamic:\n        return gl.DYNAMIC_DRAW;\n      case BufferUsage.Stream:\n        return gl.STREAM_DRAW;\n    }\n  }\n\n  static _getGLIndexType(indexFormat: IndexFormat): DataType {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return DataType.UNSIGNED_BYTE;\n      case IndexFormat.UInt16:\n        return DataType.UNSIGNED_SHORT;\n      case IndexFormat.UInt32:\n        return DataType.UNSIGNED_INT;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getElementInfo(format: VertexElementFormat): ElementInfo {\n    let size: number;\n    let type: DataType;\n    switch (format) {\n      case VertexElementFormat.Single:\n        size = 1;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector2:\n        size = 2;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector3:\n        size = 3;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector4:\n        size = 4;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Byte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        break;\n      case VertexElementFormat.Short2:\n        size = 2;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.Short4:\n        size = 4;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.UShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      default:\n        break;\n    }\n    return { size, type };\n  }\n}\n","/**\n * 绘制基元拓扑。\n */\nexport enum PrimitiveTopology {\n  /** 绘制一系列点。*/\n  Points = 0,\n  /** 绘制一系列单独线段，每两个点作为一条线段的端点。*/\n  Lines = 1,\n  /** 绘制一系列线段，上一点连接下一点，并且最后一点与第一个点相连。*/\n  LineLoop = 2,\n  /** 绘制一系列线段，上一点连接下一点。*/\n  LineStrip = 3,\n  /** 绘制一系列三角形, 每三个点绘制一个三角形。*/\n  Triangles = 4,\n  /** 绘制一个三角带。*/\n  TriangleStrip = 5,\n  /** 绘制一个三角扇。*/\n  TriangleFan = 6\n}\n","import { IndexFormat } from \"./enums/IndexFormat\";\nimport { IndexBuffer } from \"./IndexBuffer\";\n\n/**\n * 索引缓冲绑定。\n */\nexport class IndexBufferBinding {\n  /** @internal */\n  _buffer: IndexBuffer;\n  /** @internal */\n  _format: IndexFormat;\n\n  /**\n   * 索引缓冲。\n   */\n  get buffer(): IndexBuffer {\n    return this._buffer;\n  }\n\n  /**\n   * 索引格式。\n   */\n  get format(): IndexFormat {\n    return this._format;\n  }\n\n  /**\n   * 创建索引缓冲绑定。\n   * @param buffer - 索引缓冲\n   * @param format - 索引格式\n   */\n  constructor(buffer: IndexBuffer, format: IndexFormat) {\n    this._buffer = buffer;\n    this._format = format;\n  }\n}\n","import { AssetObject } from \"../asset/AssetObject\";\nimport { BoundingSphere } from \"../bounding-info/BoudingSphere\";\nimport { OBB } from \"../bounding-info/OBB\";\nimport { BufferUtil } from \"../graphic/BufferUtil\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { PrimitiveTopology } from \"../graphic/enums/PrimitiveTopology\";\nimport { IndexBuffer } from \"../graphic/IndexBuffer\";\nimport { IndexBufferBinding } from \"../graphic/IndexBufferBinding\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\n\n// TODO Destroy VAO and Buffer，ref to rhi refactor\n/**\n * primitive(triangles, lines) data, vbo+indices, equal glTF meshes.primitives define\n * @private\n */\nexport class Primitive extends AssetObject {\n  private static _primitiveID: number = 0;\n\n  /** 绘制模式。*/\n  primitiveTopology: PrimitiveTopology = PrimitiveTopology.Triangles;\n  /** 绘制偏移。*/\n  drawOffset: number = 0;\n  /** 绘制数量。*/\n  drawCount: number = 0;\n  /** 实例数量，0 表示关闭实例渲染。*/\n  instanceCount: number = 0;\n\n  _vertexElementMap: object = {};\n\n  _glIndexType: number;\n\n  private _vertexBufferBindings: VertexBufferBinding[] = [];\n  private _indexBufferBinding: IndexBufferBinding;\n  private _vertexElements: VertexElement[] = [];\n\n  /**\n   * 顶点缓冲绑定信息集合。\n   */\n  get vertexBufferBindings(): Readonly<VertexBufferBinding[]> {\n    return this._vertexBufferBindings;\n  }\n\n  /**\n   * 顶点元素集合。\n   */\n  get vertexElements(): Readonly<VertexElement[]> {\n    return this._vertexElements;\n  }\n\n  /**\n   * 索引缓冲绑定信息。\n   */\n  get indexBufferBinding(): IndexBufferBinding {\n    return this._indexBufferBinding;\n  }\n\n  readonly id: number;\n  material = null;\n  materialIndex: number;\n  targets: any[] = [];\n  boundingBox: OBB = null;\n  boundingSphere: BoundingSphere = null;\n  isInFrustum: boolean = true;\n\n  get attributes() {\n    return this._vertexElementMap;\n  }\n\n  constructor(name?: string) {\n    super();\n    this.id = Primitive._primitiveID++;\n    this.name = name;\n  }\n\n  /**\n   * 设置顶点缓冲绑定信息。\n   * @param bufferBindings - 缓冲绑定集合\n   * @param firstIndex - 第一个绑定索引\n   */\n  setVertexBufferBindings(bufferBindings: VertexBufferBinding | VertexBufferBinding[], firstIndex: number = 0): void {\n    const bindings = this._vertexBufferBindings;\n    const multiBindings = <VertexBufferBinding[]>bufferBindings;\n    const isArray = multiBindings.length !== undefined;\n    if (isArray) {\n      const count = multiBindings.length;\n      const needLength = firstIndex + count;\n      bindings.length < needLength && (bindings.length = needLength);\n      for (let i = 0; i < count; i++) {\n        this._vertexBufferBindings[firstIndex + i] = multiBindings[i];\n      }\n    } else {\n      const singleBinding = <VertexBufferBinding>bufferBindings;\n      const needLength = firstIndex + 1;\n      bindings.length < needLength && (bindings.length = needLength);\n      this._vertexBufferBindings[firstIndex] = singleBinding;\n    }\n  }\n\n  /**\n   * 设置索引缓冲绑定。\n   * @param buffer - 索引缓冲\n   * @param format - 索引缓冲格式\n   */\n  setIndexBufferBinding(buffer: IndexBuffer, format: IndexFormat): void {\n    const binding = this._indexBufferBinding;\n    if (binding) {\n      binding._buffer = buffer;\n      binding._format = format;\n    } else {\n      this._indexBufferBinding = new IndexBufferBinding(buffer, format);\n    }\n    this._glIndexType = BufferUtil._getGLIndexType(format);\n  }\n\n  /**\n   * 添加顶点元素集合。\n   * @param elements\n   */\n  addVertexElements(elements: VertexElement | VertexElement[]): void {\n    const isArray = (<VertexElement[]>elements).length !== undefined;\n    if (isArray) {\n      const addElements = <VertexElement[]>elements;\n      for (let i = 0, n = addElements.length; i < n; i++) {\n        this._addVertexElement(addElements[i]);\n      }\n    } else {\n      this._addVertexElement(<VertexElement>elements);\n    }\n  }\n\n  removeVertexElements(vertexElements: VertexElement | VertexElement[]): void {}\n\n  // updateWeightsIndices(indices: number[]) {\n  //   if (this.targets.length !== indices.length || indices.length === 0) {\n  //     return;\n  //   }\n  //   for (let i = 0; i < indices.length; i++) {\n  //     const currentIndex = indices[i];\n  //     Object.keys(this.targets[i]).forEach((key: string) => {\n  //       const semantic = this.targets[i][key].name;\n  //       const index = this.targets[currentIndex][key].vertexBufferIndex;\n  //       // this.updateAttribBufferIndex(semantic, index);\n  //     });\n  //   }\n  // }\n\n  // updateAttribBufferIndex(semantic: string, index: number) {\n  //   this.vertexAttributes[semantic].vertexBufferIndex = index;\n  // }\n\n  destroy() {\n    //TODO:这里销毁不应该直接销毁Buffer，按照以前的机制这里暂时这样处理。\n    const vertexBufferBindings = this._vertexBufferBindings;\n    if (vertexBufferBindings) {\n      for (let i = 0, n = vertexBufferBindings.length; i < n; i++) {\n        const vertexBufferBinding = vertexBufferBindings[i];\n        if (vertexBufferBinding) {\n          vertexBufferBinding.buffer.destroy();\n        }\n      }\n      this._vertexBufferBindings = null;\n    }\n\n    const indexBufferBinding = this._indexBufferBinding;\n    if (indexBufferBinding) {\n      indexBufferBinding.buffer.destroy();\n      this._indexBufferBinding = null;\n    }\n\n    this._vertexElements = null;\n    this._vertexElementMap = null;\n\n    if (this.glAsset) {\n      this.glAsset.finalize();\n      this.glAsset = null;\n    }\n  }\n\n  private _addVertexElement(element: VertexElement): void {\n    const { semantic } = element;\n    if (this._vertexElementMap[semantic]) {\n      throw \"the same semantic already exists.\";\n    }\n    this._vertexElementMap[semantic] = element;\n    this._vertexElements.push(element);\n  }\n}\n","import { Matrix, Matrix3x3 } from \"@alipay/o3-math\";\nimport { ReferenceObject } from \"../asset/ReferenceObject\";\nimport { MaterialType, UniformSemantic } from \"../base/Constant\";\nimport { Util } from \"../base/Util\";\nimport { Engine } from \"../Engine\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Texture } from \"../texture/Texture\";\nimport { RenderTechnique } from \"./RenderTechnique\";\n\n/**\n * 材质对象：RenderTechniqe + 实例化参数，对应 glTF 中的 material 对象\n * @class\n */\nexport class Material extends ReferenceObject {\n  /**\n   * 名称\n   * @member {string}\n   */\n  name: string;\n  /**\n   * 材质类型：透明 or 不透明\n   * @member {MaterialType}\n   */\n  renderType: MaterialType;\n  /**\n   * 是否受到全局雾效影响\n   * @member {boolean}\n   */\n  useFog: boolean;\n  /**\n   * 最大骨骼关节数\n   * @member {number}\n   */\n  maxJointsNum: number;\n\n  protected _technique: RenderTechnique;\n  protected _values;\n\n  /**\n   * 构造函数\n   * @param {string} name 名称\n   */\n  constructor(name: string, engine?: Engine) {\n    super(engine);\n    this.name = name;\n\n    this.renderType = MaterialType.OPAQUE;\n\n    this.useFog = true;\n\n    this.maxJointsNum = 0;\n\n    //--\n    this._technique = null;\n    this._values = {};\n\n    this._gcPriority = 1000;\n  }\n\n  /** 创建一个本材质对象的深拷贝对象\n   * @param {string} name - 复制的材质名字\n   * @param {boolean} cloneTexture - 是否复制纹理，默认 false,共用纹理\n   * // todo: texture.clone()\n   * */\n  clone(name: string = this.name, cloneTexture: boolean = false) {\n    const newMtl = new (this.constructor as any)(name);\n\n    newMtl.renderType = this.renderType;\n    newMtl.useFog = this.useFog;\n\n    for (const name in this._values) {\n      if (this._values.hasOwnProperty(name)) {\n        const val = this._values[name];\n        if (val instanceof Texture) {\n          newMtl.setValue(name, val);\n        } else {\n          newMtl.setValue(name, Util.clone(val));\n        }\n      }\n    } // end of for\n\n    return newMtl;\n  }\n\n  /**\n   * 是否透明\n   * @member {boolean}\n   */\n  get transparent(): boolean {\n    return this.renderType === MaterialType.TRANSPARENT;\n  }\n\n  set transparent(val: boolean) {\n    this.renderType = val ? MaterialType.TRANSPARENT : MaterialType.OPAQUE;\n  }\n\n  /**\n   * 获取所引用的RenderTechnique对象\n   * @member {RenderTechnique}\n   */\n  get technique(): RenderTechnique {\n    return this._technique;\n  }\n\n  /**\n   * 设置所引用的RenderTechnique对象\n   */\n  set technique(tech: RenderTechnique) {\n    this._technique = tech;\n\n    //-- 重新加载材质参数\n    this._values = {};\n  }\n\n  /**\n   * 设定材质参数值\n   * 当 texture 发生 无 <-> 有 变化时，需要重新编译\n   * TODO: 重构成不需要重新编译 technique 的机制\n   * @param {string} name 参数名称\n   * @param {*} value 参数值\n   */\n  setValue(name: string, value) {\n    const oriValue = this.getValue(name);\n    const oriIsTexture = oriValue instanceof Texture;\n    const curIsTexture = value instanceof Texture;\n    if (oriIsTexture) {\n      (<Texture>oriValue)._addReference(-1);\n    }\n    if (curIsTexture) {\n      (<Texture>value)._addReference(1);\n    }\n\n    if ((this as any)._generateTechnique && oriIsTexture !== curIsTexture) {\n      this._technique = null;\n    }\n    if (value != null) {\n      this._values[name] = value;\n    } else {\n      this.delValue(name);\n    }\n  }\n\n  /**\n   * 删除材质参数值\n   * @param {string} name\n   * */\n  delValue(name: string) {\n    delete this._values[name];\n  }\n\n  /**\n   * 取得某个参数的当前值\n   * @param {string} name 参数名称\n   * @return {*} 参数的当前值\n   */\n  getValue(name: string): any {\n    return this._values[name];\n  }\n\n  /**\n   * 开始渲染指定对象\n   * @param {CameraComponent} camera 当前摄像机\n   * @param {Component} component 当前渲染的对象\n   * @param {Primitive} primitive 几何对象\n   * @param {Material} originalMaterial 物体本来的材质，用于renderPass使用replaceMaterial时的识别\n   * @private\n   */\n  prepareDrawing(context, component, primitive, originalMaterial?: Material) {\n    const camera = context.camera;\n    // 设置Unifroms\n    const uniforms = this._technique.uniforms;\n    for (const name in uniforms) {\n      const uniform = uniforms[name];\n      this._updateValueBySemantic(uniform, context, component);\n    }\n\n    const scene = camera.scene;\n    if (scene.hasFogFeature) {\n      scene.bindFogToMaterial(this);\n    }\n\n    this._technique.compile(camera, component, primitive, this);\n  }\n\n  /** 编译前钩子，在编译前可以自定义替换tech的shader,customMacros等配置\n   * @param {RenderTechnique} tech - technique\n   * @example\n   *  tech.fragmentShader=tech.fragmentShader.replace(**,**);\n   *  tech.fragmentPrecision='highp'\n   * */\n  preCompile(tech: RenderTechnique) {}\n\n  /**\n   * 编译后钩子\n   * */\n  postCompile(tech: RenderTechnique) {}\n\n  /**\n   * 材质渲染前钩子\n   * @param {Component} component\n   * @param {Primitive} primitive\n   * */\n  preRender(component, primitive) {}\n\n  /**\n   * 材质渲染后钩子\n   * */\n  postRender(component, primitive) {}\n\n  /**\n   * 按照Uniform的Semantic，自动更新部分参数值\n   * @param {object} uniform\n   * @param {CameraComponent} camera\n   * @param {Component} component\n   * @private\n   */\n  _updateValueBySemantic(uniform, context: RenderContext, component) {\n    const values = this._values;\n\n    switch (uniform.semantic) {\n      // Transforms from the node's coordinate system to its parent's.\n      case UniformSemantic.LOCAL: {\n        values[uniform.name] = component._entity.transform.localMatrix;\n        break;\n      }\n      // Transforms from model to world coordinates\n      case UniformSemantic.MODEL:\n        values[uniform.name] = component._entity.transform.worldMatrix;\n        break;\n      // Transforms from world to view coordinates\n      case UniformSemantic.VIEW:\n        values[uniform.name] = context.viewMatrix;\n        break;\n      //Transforms from view to clip\n      case UniformSemantic.PROJECTION:\n        values[uniform.name] = context.projectionMatrix;\n        break;\n      // Combined MODEL and VIEW.\n      case UniformSemantic.MODELVIEW: {\n        const view = context.viewMatrix;\n        const model = component._entity.transform.worldMatrix;\n        let modelView = values[uniform.name];\n        if (!modelView) modelView = new Matrix();\n        Matrix.multiply(view, model, modelView);\n        values[uniform.name] = modelView;\n        break;\n      }\n      // Combined VIEW and PROJECTION.\n      case UniformSemantic.VIEWPROJECTION: {\n        const viewProj = context.viewProjectMatrix;\n        values[uniform.name] = viewProj;\n        break;\n      }\n      // Combined MODEL, VIEW, and PROJECTION\n      case UniformSemantic.MODELVIEWPROJECTION: {\n        const viewProj = context.viewProjectMatrix;\n        const model = component._entity.transform.worldMatrix;\n        let MVP = values[uniform.name];\n        if (!MVP) MVP = new Matrix();\n        Matrix.multiply(viewProj, model, MVP);\n        values[uniform.name] = MVP;\n        break;\n      }\n      // Inverse of MODEL\n      case UniformSemantic.MODELINVERSE:\n        values[uniform.name] = component.invModelMatrixs;\n        break;\n      // Inverse of VIEW\n      case UniformSemantic.VIEWINVERSE:\n        values[uniform.name] = context.inverseViewMatrix;\n        break;\n      // Inverse of PROJECTION\n      case UniformSemantic.PROJECTIONINVERSE:\n        values[uniform.name] = context.inverseProjectionMatrix;\n        break;\n      // Inverse of MODELVIEW\n      case UniformSemantic.MODELVIEWINVERSE: {\n        const view = context.viewMatrix;\n        const model = component._entity.transform.worldMatrix;\n        let invMV = values[uniform.name];\n        if (!invMV) invMV = new Matrix();\n        Matrix.multiply(view, model, invMV);\n        Matrix.invert(invMV, invMV);\n        values[uniform.name] = invMV;\n        break;\n      }\n      // Inverse of MODELVIEWPROJECTION\n      case UniformSemantic.MODELVIEWPROJECTIONINVERSE: {\n        const viewProj = context.viewProjectMatrix;\n        const model = component._entity.transform.worldMatrix;\n        let invMVP = values[uniform.name];\n        if (!invMVP) invMVP = new Matrix();\n        Matrix.multiply(viewProj, model, invMVP);\n        Matrix.invert(invMVP, invMVP);\n        values[uniform.name] = invMVP;\n        break;\n      }\n      // The inverse-transpose of MODEL without the translation\n      case UniformSemantic.MODELINVERSETRANSPOSE: {\n        let modelIT = values[uniform.name];\n        if (!modelIT) modelIT = new Matrix3x3();\n        Matrix3x3.normalMatrix(component._entity.transform.worldMatrix, modelIT);\n        values[uniform.name] = modelIT;\n        break;\n      }\n      // The inverse-transpose of MODELVIEW without the translation.\n      case UniformSemantic.MODELVIEWINVERSETRANSPOSE: {\n        let modelViewIT = values[uniform.name];\n        if (!modelViewIT) modelViewIT = new Matrix();\n        Matrix.multiply(context.viewMatrix, component._entity.transform.worldMatrix, modelViewIT);\n        Matrix.invert(modelViewIT, modelViewIT);\n        Matrix.transpose(modelViewIT, modelViewIT);\n        values[uniform.name] = modelViewIT;\n        break;\n      }\n      // The viewport's x, y, width, and height properties stored in the x, y, z, and w components, respectively.\n      case UniformSemantic.VIEWPORT:\n        values[uniform.name] = context.viewport;\n        break;\n      // Transforms mesh coordinates for a particular joint for skinning and animation.\n      case UniformSemantic.JOINTMATRIX:\n        values[uniform.name] = component.matrixPalette;\n        break;\n      case UniformSemantic.JOINTTEXTURE:\n        values[uniform.name] = component.jointTexture;\n        break;\n      case UniformSemantic.JOINTCOUNT:\n        values[uniform.name] = component.jointNodes?.length;\n        break;\n      case UniformSemantic.MORPHWEIGHTS:\n        values[uniform.name] = component.weights;\n        break;\n\n      // Camera 的世界坐标位置\n      case UniformSemantic.EYEPOS:\n        values[uniform.name] = context.cameraPosition;\n        break;\n      // 页面启动之后的总时长，单位：秒\n      case UniformSemantic.TIME:\n        values[uniform.name] = component.engine.time.timeSinceStartup * 0.001;\n        break;\n    } // end of switch\n  }\n\n  onDestroy() {\n    // TODO: 待材质重构\n    const values = Object.values(this._values);\n    for (let i = 0, len = values.length; i < len; i++) {\n      const value = values[i];\n      if (value instanceof Texture) {\n        value._addReference(-1);\n      }\n    }\n\n    // this._technique._finalize();\n    this._technique = null;\n  }\n}\n","import { Material } from \"./Material\";\n\n/**\n * 管理多个 Technique, 根据渲染的需要自动切换内部的 Technique 对象\n * @remarks 典型应用：Shadow Mapping 算法中，场景使用一个统一的 replace material 渲染深度贴图\n */\nexport class ComplexMaterial extends Material {\n  private _techniquePool;\n\n  /**\n   * 构造函数\n   * @param {string} name 名称\n   */\n  constructor(name) {\n    super(name);\n\n    this._techniquePool = {}; // technique pool: [key]->value\n  }\n\n  /**\n   * 在绘制之前，准备好内部的 Technique 对象\n   */\n  prepareDrawing(context, component, primitive) {\n    const camera = context.camera;\n    const tech = this._requireTechnique(camera, component, primitive);\n\n    if (tech) {\n      this._technique = tech;\n      super.prepareDrawing(context, component, primitive);\n    }\n  }\n\n  /**\n   * 清空所有Technique。\n   */\n  clearTechniques() {\n    this._techniquePool = {};\n  }\n\n  /**\n   * 根据当前对象的渲染需求，取得一个可用的 Technique\n   */\n  _requireTechnique(camera, component, primitive) {\n    const key = this._getTechniqueKey(camera, component, primitive);\n    let tech = this._techniquePool[key];\n    if (!tech) {\n      tech = this._generateTechnique(camera, component, primitive);\n      this._techniquePool[key] = tech;\n    }\n\n    return tech;\n  }\n\n  /**\n   * 由派生类去实现，针对某个特定的对象，生成一个新的它所需要的 Technique 对象\n   */\n  _generateTechnique(camera, component, primitive) {}\n\n  /**\n   * 按照当前对象是否为 skin、骨骼个数，生成一个 Technique 的索引字符串\n   */\n  _getTechniqueKey(camera, component, primitive) {\n    const isSkin = component.skin != null;\n    const jontCount = isSkin ? component.skin.joints.length : 0;\n\n    let key = isSkin ? \"skin_\" : \"static_\";\n    if (isSkin) {\n      key += \"jont\" + jontCount;\n    }\n\n    return key;\n  }\n}\n","import pbr_common_frag_define from \"./common_frag_define.glsl\";\nimport pbr_util_frag_define from \"./util_frag_define.glsl\";\n\n/** IBL define */\nimport pbr_envmap_light_frag_define from \"./envmap_light_frag_define.glsl\";\n\n/** prop & texture */\nimport pbr_base_frag_define from \"./base_frag_define.glsl\";\nimport pbr_texture_frag_define from \"./texture_frag_define.glsl\";\n\n/** runtime context */\nimport pbr_runtime_frag_define from \"./runtime_frag_define.glsl\";\n\n// todo: generalize\nimport pbr_normal_frag_define from \"./normal_frag_define.glsl\";\n\n// todo: BxDF\nimport pbr_brdf_cook_torrance_frag_define from \"./brdf_cook_torrance_frag_define.glsl\";\n\n/** direct + IBL */\nimport pbr_direct_irradiance_frag_define from \"./direct_irradiance_frag_define.glsl\";\nimport pbr_ibl_specular_frag_define from \"./ibl_specular_frag_define.glsl\";\nimport pbr_ibl_diffuse_frag_define from \"./ibl_diffuse_frag_define.glsl\";\n\nimport pbr_begin_frag from \"./begin_frag.glsl\";\nimport pbr_direct_irradiance_frag from \"./direct_irradiance_frag.glsl\";\nimport pbr_ibl_diffuse_frag from \"./ibl_diffuse_frag.glsl\";\nimport pbr_ibl_specular_frag from \"./ibl_specular_frag.glsl\";\nimport pbr_end_frag from \"./end_frag.glsl\";\n\nexport default {\n  pbr_common_frag_define,\n  pbr_util_frag_define,\n\n  pbr_envmap_light_frag_define,\n\n  pbr_base_frag_define,\n  pbr_texture_frag_define,\n\n  pbr_runtime_frag_define,\n\n  pbr_normal_frag_define,\n\n  pbr_brdf_cook_torrance_frag_define,\n\n  pbr_direct_irradiance_frag_define,\n  pbr_ibl_specular_frag_define,\n  pbr_ibl_diffuse_frag_define,\n\n  pbr_begin_frag,\n  pbr_direct_irradiance_frag,\n  pbr_ibl_diffuse_frag,\n  pbr_ibl_specular_frag,\n  pbr_end_frag\n};\n","import common from \"./common.glsl\";\nimport common_vert from \"./common_vert.glsl\";\nimport common_frag from \"./common_frag.glsl\";\n\nimport color_share from \"./color_share.glsl\";\nimport normal_share from \"./normal_share.glsl\";\nimport uv_share from \"./uv_share.glsl\";\nimport worldpos_share from \"./worldpos_share.glsl\";\nimport shadow_share from \"./shadow_share.glsl\";\nimport fog_share from \"./fog_share.glsl\";\n\nimport begin_normal_vert from \"./begin_normal_vert.glsl\";\nimport begin_position_vert from \"./begin_position_vert.glsl\";\n\nimport morph_target_vert from \"./morph_target_vert.glsl\";\n\nimport position_vert from \"./position_vert.glsl\";\nimport color_vert from \"./color_vert.glsl\";\nimport normal_vert from \"./normal_vert.glsl\";\nimport skinning_vert from \"./skinning_vert.glsl\";\nimport uv_vert from \"./uv_vert.glsl\";\nimport worldpos_vert from \"./worldpos_vert.glsl\";\nimport shadow_vert from \"./shadow_vert.glsl\";\nimport morph_vert from \"./morph_vert.glsl\";\nimport fog_vert from \"./fog_vert.glsl\";\n\nimport ambient_light_frag from \"./ambient_light_frag.glsl\";\nimport direct_light_frag from \"./direct_light_frag.glsl\";\nimport point_light_frag from \"./point_light_frag.glsl\";\nimport spot_light_frag from \"./spot_light_frag.glsl\";\nimport mobile_material_frag from \"./mobile_material_frag.glsl\";\nimport fog_frag from \"./fog_frag.glsl\";\n\nimport begin_mobile_frag from \"./begin_mobile_frag.glsl\";\nimport begin_normal_frag from \"./begin_normal_frag.glsl\";\nimport begin_viewdir_frag from \"./begin_viewdir_frag.glsl\";\n\nimport mobile_blinnphong_frag from \"./mobile_blinnphong_frag.glsl\";\nimport mobile_lambert_frag from \"./mobile_lambert_frag.glsl\";\n\nimport noise_common from \"./noise_common.glsl\";\nimport noise_cellular_2D from \"./noise_cellular_2D.glsl\";\nimport noise_cellular_2x2 from \"./noise_cellular_2x2.glsl\";\nimport noise_cellular_2x2x2 from \"./noise_cellular_2x2x2.glsl\";\nimport noise_cellular_3D from \"./noise_cellular_3D.glsl\";\nimport noise_cellular from \"./noise_cellular.glsl\";\nimport noise_perlin_2D from \"./noise_perlin_2D.glsl\";\nimport noise_perlin_3D from \"./noise_perlin_3D.glsl\";\nimport noise_perlin_4D from \"./noise_perlin_4D.glsl\";\nimport noise_perlin from \"./noise_perlin.glsl\";\nimport noise_psrd_2D from \"./noise_psrd_2D.glsl\";\nimport noise_simplex_2D from \"./noise_simplex_2D.glsl\";\nimport noise_simplex_3D_grad from \"./noise_simplex_3D_grad.glsl\";\nimport noise_simplex_3D from \"./noise_simplex_3D.glsl\";\nimport noise_simplex_4D from \"./noise_simplex_4D.glsl\";\nimport noise_simplex from \"./noise_simplex.glsl\";\n\nimport perturbation_share from \"./perturbation_share.glsl\";\nimport perturbation_frag from \"./perturbation_frag.glsl\";\nimport refraction_share from \"./refraction_share.glsl\";\nimport refraction_frag from \"./refraction_frag.glsl\";\n\nimport clipPlane_vert_define from \"./clipPlane_vert_define.glsl\";\nimport clipPlane_vert from \"./clipPlane_vert.glsl\";\nimport clipPlane_frag_define from \"./clipPlane_frag_define.glsl\";\nimport clipPlane_frag from \"./clipPlane_frag.glsl\";\n\nimport gamma_frag from \"./gamma_frag.glsl\";\n\nimport PBRShaderLib from \"./pbr\";\nimport oit_frag from \"./oit/oit_frag.glsl\";\nimport oit_frag_define from \"./oit/oit_frag_define.glsl\";\n\nexport const ShaderLib = {\n  common,\n  common_vert,\n  common_frag,\n\n  color_share,\n  normal_share,\n  uv_share,\n  worldpos_share,\n  shadow_share,\n  fog_share,\n\n  begin_normal_vert,\n  begin_position_vert,\n\n  morph_target_vert,\n\n  position_vert,\n  color_vert,\n  normal_vert,\n  skinning_vert,\n  uv_vert,\n  worldpos_vert,\n  shadow_vert,\n  morph_vert,\n  fog_vert,\n\n  ambient_light_frag,\n  direct_light_frag,\n  point_light_frag,\n  spot_light_frag,\n  mobile_material_frag,\n  fog_frag,\n\n  begin_mobile_frag,\n  begin_normal_frag,\n  begin_viewdir_frag,\n\n  mobile_blinnphong_frag,\n  mobile_lambert_frag,\n\n  noise_common,\n  noise_cellular_2D,\n  noise_cellular_2x2,\n  noise_cellular_2x2x2,\n  noise_cellular_3D,\n  noise_cellular,\n  noise_perlin_2D,\n  noise_perlin_3D,\n  noise_perlin_4D,\n  noise_perlin,\n  noise_psrd_2D,\n  noise_simplex_2D,\n  noise_simplex_3D_grad,\n  noise_simplex_3D,\n  noise_simplex_4D,\n  noise_simplex,\n\n  perturbation_share,\n  perturbation_frag,\n  refraction_share,\n  refraction_frag,\n\n  clipPlane_vert_define,\n  clipPlane_vert,\n  clipPlane_frag_define,\n  clipPlane_frag,\n\n  gamma_frag,\n\n  oit_frag,\n  oit_frag_define,\n\n  ...PBRShaderLib\n};\n\nexport function InjectShaderSlices(obj) {\n  Object.assign(ShaderLib, obj);\n}\n","import { ShaderLib, InjectShaderSlices } from \"./ShaderLib\";\nimport { Logger } from \"../base/Logger\";\n\nclass ShaderFactory {\n  /**\n   * GLSL 版本\n   * @param {string} version - \"100\" | \"300 es\"\n   * */\n  static parseVersion(version: string = \"100\") {\n    return `#version ${version}\\n`;\n  }\n\n  static parsePrecision(vertP: string, fragP: string, compileVert?: boolean) {\n    const downgrade = \"mediump\";\n\n    return `\n        #ifdef GL_FRAGMENT_PRECISION_HIGH\n          precision ${compileVert ? vertP : fragP} float;\n          precision ${compileVert ? vertP : fragP} int;\n\n          #define O3_VERTEX_PRECISION ${vertP}\n          #define O3_FRAGMENT_PRECISION ${fragP}\n        #else\n          precision ${downgrade} float;\n          precision ${downgrade} int;\n\n          #define O3_VERTEX_PRECISION ${downgrade}\n          #define O3_FRAGMENT_PRECISION ${downgrade}\n        #endif\n      `;\n  }\n\n  static parseShaderName(name) {\n    return `#define O3_SHADER_NAME ${name}\\n`;\n  }\n\n  static parseAttributeMacros(macros) {\n    return (\n      \"#define O3_ATTRIBUTE_MACROS_START\\n\" +\n      macros.map((m) => `#define ${m}\\n`).join(\"\") +\n      \"#define O3_ATTRIBUTE_MACROS_END\\n\"\n    );\n  }\n\n  static parseCustomMacros(macros) {\n    return (\n      \"#define O3_CUSTOM_MACROS_START\\n\" +\n      macros.map((m) => `#define ${m}\\n`).join(\"\") +\n      \"#define O3_CUSTOM_MACROS_END\\n\"\n    );\n  }\n\n  static parseShader(src) {\n    return ShaderFactory.parseIncludes(src);\n  }\n\n  static parseIncludes(src) {\n    const regex = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n    function replace(match, slice) {\n      var replace = ShaderLib[slice];\n\n      if (replace === undefined) {\n        Logger.error(`Shader slice \"${match.trim()}\" not founded.`);\n        return \"\";\n      }\n\n      return ShaderFactory.parseIncludes(replace);\n    }\n\n    return src.replace(regex, replace);\n  }\n\n  static InjectShaderSlices(slices) {\n    InjectShaderSlices(slices);\n  }\n\n  /**\n   * 相应版本的 extension\n   * @param {string[]} extensions - such as [\"GL_EXT_shader_texture_lod\"]\n   * */\n  static parseExtension(extensions: string[]) {\n    return (\n      `#define O3_EXTENSION_START\\n` +\n      extensions.map((e) => `#extension ${e} : enable\\n`).join(\"\") +\n      `#define O3_EXTENSION_END\\n`\n    );\n  }\n\n  /**\n   * 切换低版本 GLSL 到 GLSL 300 es\n   * @param {string} shader - code\n   * @param {boolean} isFrag - 是否为片元着色器。\n   * */\n  static convertTo300(shader: string, isFrag?: boolean) {\n    const isGLSL300 = shader.includes(\"#version 300 es\");\n\n    // 如果本来就是新版本着色器，则无需转换。\n    if (isGLSL300) return shader;\n\n    /** 替换版本 */\n    shader = shader.replace(/#version 100/, \"#version 300 es\");\n    /** 修饰符替换 */\n    shader = shader.replace(/\\battribute\\b/g, \"in\");\n    shader = shader.replace(/\\bvarying\\b/g, isFrag ? \"in\" : \"out\");\n\n    /** 内置变量替换 */\n    shader = shader.replace(/\\btexture(2D|Cube)\\s*\\(/g, \"texture(\");\n    shader = shader.replace(/\\btexture(2D|Cube)LodEXT\\s*\\(/g, \"textureLod(\");\n    if (isFrag) {\n      const isMRT = /\\bgl_FragData\\[.+?\\]/g.test(shader);\n      if (isMRT) {\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"gl_FragData[0]\");\n        const result = shader.match(/\\bgl_FragData\\[.+?\\]/g);\n        shader = this.replaceMRTShader(shader, result);\n      } else {\n        shader = shader.replace(/void\\s+?main\\s*\\(/g, `out vec4 glFragColor;\\nvoid main(`);\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"glFragColor\");\n      }\n    }\n\n    return shader;\n  }\n\n  /**\n   * 返回相应 shaderCode 中的 draw buffer 长度\n   * @param shader - shader code\n   */\n  static getMaxDrawBuffers(shader: string): number {\n    const mrtIndexSet = new Set();\n    const result = shader.match(/\\bgl_FragData\\[.+?\\]/g) || [];\n\n    for (let i = 0; i < result.length; i++) {\n      const res = result[i].match(/\\bgl_FragData\\[(.+?)\\]/);\n      mrtIndexSet.add(res[1]);\n    }\n\n    return mrtIndexSet.size;\n  }\n\n  /**\n   * 1. 兼容 gl_FragColor 和 gl_FragData 同时存在的报错\n   * */\n  static compatible(fragmentShader: string) {\n    const hasFragData = /\\bgl_FragData\\[.+?\\]/g.test(fragmentShader);\n    if (hasFragData) {\n      fragmentShader = fragmentShader.replace(/\\bgl_FragColor\\b/g, \"gl_FragData[0]\");\n    }\n    return fragmentShader;\n  }\n\n  private static replaceMRTShader(shader: string, result: string[]): string {\n    let declaration = \"\";\n    const mrtIndexSet = new Set();\n\n    for (let i = 0; i < result.length; i++) {\n      const res = result[i].match(/\\bgl_FragData\\[(.+?)\\]/);\n      mrtIndexSet.add(res[1]);\n    }\n\n    mrtIndexSet.forEach((index) => {\n      declaration += `layout(location=${index}) out vec4 fragOutColor${index};\\n`;\n    });\n    declaration += `void main(`;\n\n    shader = shader.replace(/\\bgl_FragData\\[(.+?)\\]/g, \"fragOutColor$1\");\n\n    shader = shader.replace(/void\\s+?main\\s*\\(/g, declaration);\n    return shader;\n  }\n}\n\nexport { ShaderFactory };\n","/**\n * 定义 VertexBuffer 或 IndexBuffer 在 SetData 时如何刷新。\n */\nexport enum SetDataOptions {\n  /** 可覆盖部分 GPU 正在使用的数据，并保证正确的渲染效果。*/\n  None,\n  /** 完全丢弃之前的缓冲，返回一块新的缓冲块并不影响之前使用缓冲的渲染。*/\n  Discard\n  ///** 需要保证不会覆盖 GPU 正在使用的数据，setData 后可立即返回并不中断渲染。*/\n  //NoOverwrite\n}\n","import { Engine } from \"../Engine\";\nimport { HardwareRenderer } from \"../HardwareRenderer\";\nimport { BufferUsage } from \"./enums/BufferUsage\";\nimport { IndexFormat } from \"./enums/IndexFormat\";\nimport { BufferUtil } from \"./BufferUtil\";\nimport { SetDataOptions } from \"./enums/SetDataOptions\";\n\n/**\n * 索引缓冲。\n */\nexport class IndexBuffer {\n  _nativeBuffer: WebGLBuffer;\n  _glBufferUsage: number;\n\n  private _hardwareRenderer: HardwareRenderer;\n  private _engine: Engine;\n  private _bufferUsage: BufferUsage;\n  private _byteLength: number;\n\n  /**\n   * 引擎。\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  /**\n   * 长度,以字节为单位。\n   */\n  get byteLength(): number {\n    return this._byteLength;\n  }\n\n  /**\n   * 索引缓冲用途。\n   */\n  get bufferUsage(): BufferUsage {\n    return this._bufferUsage;\n  }\n\n  /**\n   * 创建索引缓冲。\n   * @param engine - 引擎\n   * @param byteLength - 长度，字节为单位\n   * @param bufferUsage - 索引缓冲用途\n   */\n  constructor(engine: Engine, byteLength: number, bufferUsage?: BufferUsage);\n\n  /**\n   * 创建索引缓冲。\n   * @param engine - 引擎\n   * @param data - 所以缓冲数据\n   * @param bufferUsage - 索引缓冲用途\n   */\n  constructor(engine: Engine, data: ArrayBuffer | ArrayBufferView, bufferUsage?: BufferUsage);\n\n  constructor(\n    engine: Engine,\n    byteLengthOrData: number | ArrayBuffer | ArrayBufferView,\n    bufferUsage: BufferUsage = BufferUsage.Static\n  ) {\n    this._engine = engine;\n    this._bufferUsage = bufferUsage;\n\n    const hardwareRenderer = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = hardwareRenderer.gl;\n    const glBufferUsage = BufferUtil._getGLBufferUsage(gl, bufferUsage);\n\n    this._nativeBuffer = gl.createBuffer();\n    this._hardwareRenderer = hardwareRenderer;\n    this._glBufferUsage = glBufferUsage;\n\n    this.bind();\n    if (typeof byteLengthOrData === \"number\") {\n      this._byteLength = byteLengthOrData;\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, byteLengthOrData, glBufferUsage);\n    } else {\n      this._byteLength = byteLengthOrData.byteLength;\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, byteLengthOrData, glBufferUsage);\n    }\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n  }\n\n  /**\n   * 绑定。\n   */\n  bind(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._nativeBuffer);\n  }\n\n  /**\n   * 设置索引数据。\n   * @param data - 索引数据\n   */\n  setData(data: ArrayBuffer | ArrayBufferView): void;\n\n  /**\n   * 设置索引数据。\n   * @param data - 索引数据\n   * @param bufferByteOffset - 缓冲偏移，以字节为单位\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * 设置索引数据。\n   * @param data - 索引数据\n   * @param bufferByteOffset - 缓冲偏移，以字节为单位\n   * @param dataOffset - 数据偏移\n   * @param dataLength - 数据长度\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength: number): void;\n\n  /**\n   * 设置索引数据。\n   * @param data - 索引数据\n   * @param bufferByteOffset - 缓冲偏移，以字节为单位\n   * @param dataOffset - 数据偏移\n   * @param dataLength - 数据长度\n   * @param options - 操作选项\n   */\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number,\n    dataOffset: number,\n    dataLength: number,\n    options: SetDataOptions\n  ): void;\n\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number = 0,\n    dataOffset: number = 0,\n    dataLength?: number,\n    options: SetDataOptions = SetDataOptions.None\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n    this.bind();\n\n    if (options === SetDataOptions.Discard) {\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._byteLength, this._glBufferUsage);\n    }\n\n    const byteSize = (<Uint8Array>data).BYTES_PER_ELEMENT || 1; //TypeArray is BYTES_PER_ELEMENT , unTypeArray is 1\n    const dataByteLength = byteSize * dataLength;\n    if (dataOffset !== 0 || dataByteLength < data.byteLength) {\n      const isArrayBufferView = (<ArrayBufferView>data).byteOffset !== undefined;\n      if (isWebGL2 && isArrayBufferView) {\n        gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, bufferByteOffset, <ArrayBufferView>data, dataOffset, dataLength);\n      } else {\n        const subData = new Uint8Array(\n          isArrayBufferView ? (<ArrayBufferView>data).buffer : <ArrayBuffer>data,\n          dataOffset * byteSize,\n          dataByteLength\n        );\n        gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, bufferByteOffset, subData);\n      }\n    } else {\n      gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, bufferByteOffset, data);\n    }\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n  }\n\n  /**\n   * 获取索引数据。\n   * @param data - 索引输出数据\n   */\n  getData(data: ArrayBufferView): void;\n\n  /**\n   * 获取索引数据。\n   * @param data - 索引输出数据\n   * @param bufferByteOffset - 缓冲读取偏移\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * 获取索引数据。\n   * @param data - 索引输出数据\n   * @param bufferByteOffset - 缓冲读取偏移\n   * @param dataOffset - 输出偏移\n   * @param dataLength - 输出长度\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength: number): void;\n\n  getData(data: ArrayBufferView, bufferByteOffset: number = 0, dataOffset: number = 0, dataLength?: number): void {\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n\n    if (isWebGL2) {\n      const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n      this.bind();\n      gl.getBufferSubData(gl.ELEMENT_ARRAY_BUFFER, bufferByteOffset, data, dataOffset, dataLength);\n    } else {\n      throw \"IndexBuffer is write-only on WebGL1.0 platforms.\";\n    }\n  }\n\n  /**\n   * 销毁。\n   */\n  destroy(): void {\n    if (this._nativeBuffer) {\n      const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n      gl.deleteBuffer(this._nativeBuffer);\n      this._nativeBuffer = null;\n      this._engine = null;\n      this._hardwareRenderer = null;\n    }\n  }\n\n  /**\n   * @deprecated\n   */\n  resize(byteLength: number) {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n\n    this.bind();\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, byteLength, this._glBufferUsage);\n    this._byteLength = byteLength;\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { HardwareRenderer } from \"../HardwareRenderer\";\nimport { BufferUtil } from \"./BufferUtil\";\nimport { BufferUsage } from \"./enums/BufferUsage\";\nimport { SetDataOptions } from \"./enums/SetDataOptions\";\n\n/**\n * 顶点缓冲。\n */\nexport class VertexBuffer {\n  _glBufferUsage: number;\n  _nativeBuffer: WebGLBuffer;\n\n  private _hardwareRenderer: HardwareRenderer;\n  private _engine: Engine;\n  private _byteLength: number;\n  private _bufferUsage: BufferUsage;\n\n  /**\n   * 引擎。\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  /**\n   * 长度,以字节为单位。\n   */\n  get byteLength(): number {\n    return this._byteLength;\n  }\n\n  /**\n   * 顶点缓冲用途\n   */\n  get bufferUsage(): BufferUsage {\n    return this._bufferUsage;\n  }\n\n  /**\n   * 创建顶点缓冲。\n   * @param engine - 引擎\n   * @param byteLength - 长度，字节为单位\n   * @param bufferUsage - 顶点缓冲用途\n   */\n  constructor(engine: Engine, byteLength: number, bufferUsage?: BufferUsage);\n\n  /**\n   * 创建顶点缓冲。\n   * @param engine - 引擎\n   * @param data - 数据\n   * @param bufferUsage - 顶点缓冲用途\n   */\n  constructor(engine: Engine, data: ArrayBuffer | ArrayBufferView, bufferUsage?: BufferUsage);\n\n  constructor(\n    engine: Engine,\n    byteLengthOrData: number | ArrayBuffer | ArrayBufferView,\n    bufferUsage: BufferUsage = BufferUsage.Static\n  ) {\n    this._engine = engine;\n    this._bufferUsage = bufferUsage;\n\n    const hardwareRenderer = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = hardwareRenderer.gl;\n    const glBufferUsage = BufferUtil._getGLBufferUsage(gl, bufferUsage);\n\n    this._nativeBuffer = gl.createBuffer();\n    this._hardwareRenderer = hardwareRenderer;\n    this._glBufferUsage = glBufferUsage;\n\n    this.bind();\n    if (typeof byteLengthOrData === \"number\") {\n      this._byteLength = byteLengthOrData;\n      gl.bufferData(gl.ARRAY_BUFFER, byteLengthOrData, glBufferUsage);\n    } else {\n      this._byteLength = byteLengthOrData.byteLength;\n      gl.bufferData(gl.ARRAY_BUFFER, byteLengthOrData, glBufferUsage);\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  }\n\n  /**\n   * 绑定。\n   */\n  bind(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._nativeBuffer);\n  }\n\n  /**\n   * 设置顶点数据。\n   * @param data - 顶点数据\n   */\n  setData(data: ArrayBuffer | ArrayBufferView): void;\n\n  /**\n   * 设置顶点数据。\n   * @param data - 顶点数据\n   * @param bufferByteOffset - 缓冲偏移，以字节为单位\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * 设置顶点数据。\n   * @param data - 顶点数据\n   * @param bufferByteOffset - 缓冲偏移，以字节为单位\n   * @param dataOffset - 数据偏移\n   * @param dataLength - 数据长度\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength: number): void;\n\n  /**\n   * 设置顶点数据。\n   * @param data - 顶点数据\n   * @param bufferByteOffset - 缓冲偏移，以字节为单位\n   * @param dataOffset - 数据偏移\n   * @param dataLength - 数据长度\n   * @param options - 操作选项\n   */\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number,\n    dataOffset: number,\n    dataLength: number,\n    options: SetDataOptions\n  ): void;\n\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number = 0,\n    dataOffset: number = 0,\n    dataLength?: number,\n    options: SetDataOptions = SetDataOptions.None\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n    this.bind();\n\n    if (options === SetDataOptions.Discard) {\n      gl.bufferData(gl.ARRAY_BUFFER, this._byteLength, this._glBufferUsage);\n    }\n\n    const byteSize = (<Uint8Array>data).BYTES_PER_ELEMENT || 1; //TypeArray is BYTES_PER_ELEMENT , unTypeArray is 1\n    const dataByteLength = byteSize * dataLength;\n    if (dataOffset !== 0 || dataByteLength < data.byteLength) {\n      const isArrayBufferView = (<ArrayBufferView>data).byteOffset !== undefined;\n      if (isWebGL2 && isArrayBufferView) {\n        gl.bufferSubData(gl.ARRAY_BUFFER, bufferByteOffset, <ArrayBufferView>data, dataOffset, dataLength);\n      } else {\n        const subData = new Uint8Array(\n          isArrayBufferView ? (<ArrayBufferView>data).buffer : <ArrayBuffer>data,\n          dataOffset * byteSize,\n          dataByteLength\n        );\n        gl.bufferSubData(gl.ARRAY_BUFFER, bufferByteOffset, subData);\n      }\n    } else {\n      gl.bufferSubData(gl.ARRAY_BUFFER, bufferByteOffset, data);\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  }\n\n  /**\n   * 获取顶点数据。\n   * @param data - 顶点输出数据\n   */\n  getData(data: ArrayBufferView): void;\n\n  /**\n   * 获取顶点数据。\n   * @param data - 顶点输出数据\n   * @param bufferByteOffset - 缓冲读取偏移，以字节为单位\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * 获取顶点数据。\n   * @param data - 顶点输出数据\n   * @param bufferByteOffset - 缓冲读取偏移，以字节为单位\n   * @param dataOffset - 输出偏移\n   * @param dataLength - 输出长度\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength: number): void;\n\n  getData(data: ArrayBufferView, bufferByteOffset: number = 0, dataOffset: number = 0, dataLength?: number): void {\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n\n    if (isWebGL2) {\n      const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n      this.bind();\n      gl.getBufferSubData(gl.ARRAY_BUFFER, bufferByteOffset, data, dataOffset, dataLength);\n    } else {\n      throw \"IndexBuffer is write-only on WebGL1.0 platforms.\";\n    }\n  }\n\n  /**\n   * 销毁。\n   */\n  destroy(): void {\n    if (this._nativeBuffer) {\n      const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n      gl.deleteBuffer(this._nativeBuffer);\n      this._nativeBuffer = null;\n      this._engine = null;\n      this._hardwareRenderer = null;\n    }\n  }\n\n  /**\n   * @deprecated\n   */\n  resize(dataLength: number) {\n    this.bind();\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bufferData(gl.ARRAY_BUFFER, dataLength, this._glBufferUsage);\n    this._byteLength = dataLength;\n  }\n}\n","import { VertexBuffer } from \"./VertexBuffer\";\n\n/**\n * 顶点缓冲绑定。\n */\nexport class VertexBufferBinding {\n  /** @internal */\n  _buffer: VertexBuffer;\n  /** @internal */\n  _stride: number;\n\n  /**\n   * 顶点缓冲。\n   */\n  get buffer(): VertexBuffer {\n    return this._buffer;\n  }\n\n  /**\n   * 顶点跨度。\n   */\n  get stride(): number {\n    return this._stride;\n  }\n\n  /**\n   * 创建顶点缓冲绑定。\n   * @param buffer - 顶点缓冲\n   * @param stride - 顶点跨度\n   */\n  constructor(buffer: VertexBuffer, stride: number) {\n    this._buffer = buffer;\n    this._stride = stride;\n  }\n}\n","import { VertexElementFormat } from \"./enums/VertexElementFormat\";\nimport { ElementInfo, BufferUtil } from \"./BufferUtil\";\n\n/**\n * 顶点元素。\n */\nexport class VertexElement {\n  public readonly normalized = false;\n\n  _glElementInfo: ElementInfo;\n\n  private _semantic: string;\n  private _offset: number;\n  private _format: VertexElementFormat;\n  private _vertexBufferIndex: number;\n  private _instanceDivisor: number;\n\n  /**\n   * 顶点输入签名。\n   */\n  get semantic(): string {\n    return this._semantic;\n  }\n\n  /**\n   * 顶点的偏移，以字节为单位。\n   */\n  get offset(): number {\n    return this._offset;\n  }\n\n  /**\n   * 顶点元素格式。\n   */\n  get format(): VertexElementFormat {\n    return this._format;\n  }\n\n  /**\n   * 顶点缓冲索引。\n   */\n  get vertexBufferIndex(): number {\n    return this._vertexBufferIndex;\n  }\n\n  /**\n   * 实例除数，0表示不开启实例，大于1表示开启。\n   */\n  get instanceDivisor(): number {\n    return this._instanceDivisor;\n  }\n\n  /**\n   * 构造顶点元素。\n   * @param semantic - 顶点着色器输入签名。\n   * @param offset - 顶点的偏移，以字节为单位\n   * @param format - 顶点元素格式\n   * @param vertexBufferIndex - 顶点缓冲索引\n   * @param instanceDivisor - 实例除数，0表示不开启实例，大于1表示开启\n   */\n  constructor(\n    semantic: string,\n    offset: number,\n    format: VertexElementFormat,\n    vertexBufferIndex: number,\n    instanceDivisor: number = 0\n  ) {\n    this._semantic = semantic;\n    this._offset = offset;\n    this._format = format;\n    this._vertexBufferIndex = vertexBufferIndex;\n    this._glElementInfo = BufferUtil._getElementInfo(this.format);\n    this._instanceDivisor = Math.floor(instanceDivisor);\n  }\n\n  /**\n   * @deprecated\n   */\n  get elementInfo(): ElementInfo {\n    return this._glElementInfo;\n  }\n}\n","import { Material } from \"./Material\";\nimport { TechniqueStates, Attributes, Uniforms } from \"./type\";\nimport { AssetObject } from \"../asset/AssetObject\";\nimport { UniformSemantic, DataType } from \"../base/Constant\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { ShaderFactory } from \"../shaderlib/ShaderFactory\";\nimport { Primitive } from \"../primitive/Primitive\";\nimport { VertexElement, VertexElementFormat } from \"../graphic\";\n\n/**\n * 渲染单个对象所需的控制对象，作为 Material 的模块使用。对应 glTF 里面的 technique 对象\n * @class\n */\nexport class RenderTechnique extends AssetObject {\n  // 是否可用\n  public isValid: boolean = false;\n  // Unifrom记录数组\n  private _uniforms: Uniforms = RenderTechnique.commonUniforms;\n  // Attribute记录对象\n  private _attributes: Attributes = RenderTechnique.commonAttributes;\n  /**\n   * 渲染状态控制对象\n   * {\n   *  enable:[],\n   *  disable:[],\n   *  functions:{\n   *    \"func_name\":[]\n   *  }\n   * }\n   *\n   * function name: \"blendColor\", \"blendEquationSeparate\", \"blendFuncSeparate\",\n   * \"colorMask\", \"cullFace\", \"depthFunc\", \"depthMask\", \"depthRange\", \"frontFace\",\n   * \"lineWidth\", \"polygonOffset\", and \"scissor\"\n   * @member {object}\n   */\n  public states: TechniqueStates = null;\n  /**\n   * Vertex Shader 代码\n   * @member {string}\n   */\n  public vertexShader: string = \"\";\n  /**\n   * Fragment Shader 代码\n   * @member {string}\n   */\n  public fragmentShader: string = \"\";\n\n  /**\n   * GLSL 原始版本\n   * 若 autoConvert = true, WebGL 2 时着色器为旧版本，则升级到 300 版本\n   * @member {String} - \"100\" | \"300 es\"\n   */\n  public version = \"100\";\n\n  /** 自动转换 GLSL 版本 */\n  public autoConvert = true;\n\n  /**\n   * Vertex Shader 的精度\n   * @member {String}\n   */\n  public vertexPrecision = \"highp\";\n  /**\n   * Fragment Shader 的精度\n   * @member {String}\n   */\n  public fragmentPrecision = \"mediump\";\n  /**\n   * 自定义宏\n   * @member {Array}\n   */\n  public customMacros = [];\n\n  /**\n   * WebGL 1.0 时着色器中使用的拓展\n   * @member {Array}\n   */\n  public shaderExtension100 = [\"GL_EXT_shader_texture_lod\", \"GL_OES_standard_derivatives\", \"GL_EXT_draw_buffers\"];\n\n  /**\n   * WebGL 2.0 时着色器中使用的拓展\n   * @member {Array}\n   */\n  public shaderExtension300 = [];\n\n  public _needCompile = true;\n\n  private _recreateHeader: boolean;\n  private _vsHeader: string;\n  private _vsCode: string;\n  private _fsHeader: string;\n  private _fsCode: string;\n  private _fogMacro: string;\n  public attribLocSet: any;\n\n  /**\n   * 构造函数\n   * @param {string} name 名称\n   */\n  constructor(public name: string) {\n    super();\n  }\n\n  get attributes() {\n    return this._attributes;\n  }\n\n  set attributes(v) {\n    this._attributes = Object.assign({}, RenderTechnique.commonAttributes, v);\n  }\n\n  get uniforms() {\n    return this._uniforms;\n  }\n\n  set uniforms(v) {\n    this._uniforms = Object.assign({}, RenderTechnique.commonUniforms, v);\n  }\n\n  compile(camera: Camera, component, primitive: Primitive, material: Material) {\n    this.parseFog(camera);\n\n    if (this._needCompile) {\n      const rhi = camera.engine._hardwareRenderer;\n      const isWebGL2 = rhi?.isWebGL2;\n\n      material.preCompile?.(this);\n\n      const attribMacros = this.getAttributeDefines(camera, component, primitive, material);\n\n      if (this._recreateHeader) {\n        // reset configs\n        this.attributes = this.attributes;\n        this.uniforms = this.uniforms;\n      }\n\n      if (!this._vsHeader || this._recreateHeader)\n        this._vsHeader =\n          ShaderFactory.parseVersion(this.version) +\n          ShaderFactory.parseShaderName((this.name || \"VOID\").toUpperCase() + \"_VERT\") +\n          \"\\n\" +\n          ShaderFactory.parsePrecision(this.vertexPrecision, this.fragmentPrecision, true) +\n          \"\\n\" +\n          ShaderFactory.parseAttributeMacros(attribMacros) +\n          \"\\n\" +\n          ShaderFactory.parseCustomMacros(this.customMacros) +\n          \"\\n\";\n\n      if (!this._vsCode) this._vsCode = ShaderFactory.parseShader(this.vertexShader);\n\n      this.vertexShader = this._vsHeader + this._vsCode;\n\n      if (!this._fsHeader || this._recreateHeader)\n        this._fsHeader =\n          ShaderFactory.parseVersion(this.version) +\n          ShaderFactory.parseShaderName((this.name || \"VOID\").toUpperCase() + \"_FRAG\") +\n          \"\\n\" +\n          ShaderFactory.parseExtension(isWebGL2 ? this.shaderExtension300 : this.shaderExtension100) +\n          ShaderFactory.parsePrecision(this.vertexPrecision, this.fragmentPrecision) +\n          \"\\n\" +\n          ShaderFactory.parseAttributeMacros(attribMacros) +\n          \"\\n\" +\n          ShaderFactory.parseCustomMacros(this.customMacros) +\n          \"\\n\";\n\n      if (!this._fsCode) this._fsCode = ShaderFactory.parseShader(this.fragmentShader);\n\n      this.fragmentShader = this._fsHeader + this._fsCode;\n\n      /**\n       * 若 autoConvert = true,  WebGL 2 时着色器为旧版本，则升级到 300 版本\n       * 若 WebGL1,兼容 gl_FragColor 和 gl_FragData 同时存在的报错\n       * */\n      if (this.autoConvert && isWebGL2 && this.version !== \"300 es\") {\n        const maxDrawBuffers = rhi.capability.maxDrawBuffers;\n        const shaderMaxDrawBuffers = ShaderFactory.getMaxDrawBuffers(this.fragmentShader);\n\n        if (shaderMaxDrawBuffers <= maxDrawBuffers) {\n          this.vertexShader = ShaderFactory.convertTo300(this.vertexShader);\n          this.fragmentShader = ShaderFactory.convertTo300(this.fragmentShader, true);\n        }\n      } else if (!isWebGL2 && this.version !== \"300es\") {\n        this.fragmentShader = ShaderFactory.compatible(this.fragmentShader);\n      }\n\n      this._needCompile = false;\n      this._recreateHeader = false;\n\n      material.postCompile?.(this);\n    }\n  }\n\n  getAttributeDefines(camera: Camera, component, primitive: Primitive, material) {\n    const rhi = camera.scene.engine._hardwareRenderer;\n    const gl = rhi.gl;\n    const _macros = [];\n    if (!primitive) return _macros;\n\n    const attribNames = Object.keys(primitive._vertexElementMap);\n\n    if (attribNames.indexOf(\"TEXCOORD_0\") > -1) _macros.push(\"O3_HAS_UV\");\n    if (attribNames.indexOf(\"NORMAL\") > -1) _macros.push(\"O3_HAS_NORMAL\");\n    if (attribNames.indexOf(\"TANGENT\") > -1) _macros.push(\"O3_HAS_TANGENT\");\n    if (attribNames.indexOf(\"JOINTS_0\") > -1) {\n      _macros.push(\"O3_HAS_SKIN\");\n      if (component.jointNodes?.length) {\n        const maxAttribUniformVec4 = rhi.renderStates.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        const maxJoints = Math.floor((maxAttribUniformVec4 - 20) / 4);\n        const joints = component.jointNodes.length;\n\n        if (joints > maxJoints) {\n          /** 是否使用骨骼纹理 */\n          if (rhi.canIUseMoreJoints) {\n            _macros.push(\"O3_USE_JOINT_TEXTURE\");\n          } else {\n            Logger.error(\n              `component's joints count(${joints}) greater than device's MAX_VERTEX_UNIFORM_VECTORS number ${maxAttribUniformVec4}, suggest joint count less than ${maxJoints}.`,\n              component\n            );\n          }\n        } else if (material.maxJointsNum > 0) {\n          // 使用最大关节数，保证所有 SkinnedMeshRenderer 都可以共用材质\n          _macros.push(`O3_JOINTS_NUM ${material.maxJointsNum}`);\n        }\n      }\n    }\n    if (attribNames.indexOf(\"COLOR_0\") > -1) {\n      _macros.push(\"O3_HAS_VERTEXCOLOR\");\n      if ((<VertexElement>primitive._vertexElementMap[\"COLOR_0\"]).format === VertexElementFormat.Vector4)\n        _macros.push(\"O3_HAS_VERTEXALPHA\");\n    }\n\n    // if (component.weights) {\n    //   const maxAttribs = rhi.renderStates.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    //   if (attribNames.length > maxAttribs) {\n    //     Logger.warn(`too many morph targets, beyond the MAX_VERTEX_ATTRIBS limit ${maxAttribs}`);\n    //   }\n    //   const targetNum = component.weights.length;\n    //   _macros.push(\"O3_HAS_MORPH\");\n    //   _macros.push(`O3_MORPH_NUM ${targetNum}`);\n\n    //   if (attribNames.indexOf(\"POSITION_0\") > -1) _macros.push(\"O3_MORPH_POSITION\");\n    //   if (attribNames.indexOf(\"NORMAL_0\") > -1) _macros.push(\"O3_MORPH_NORMAL\");\n    //   if (attribNames.indexOf(\"TANGENT_0\") > -1) _macros.push(\"O3_MORPH_TANGENT\");\n\n    //   this._attributes = Object.assign(this.attributes, this.createMorphConfig(primitive, targetNum));\n    //   this._uniforms.u_morphWeights = {\n    //     name: \"u_morphWeights\",\n    //     semantic: UniformSemantic.MORPHWEIGHTS,\n    //     type: DataType.FLOAT\n    //   };\n    //   // }\n    // }\n\n    const scene = camera.scene as any;\n    if (scene.hasFogFeature) {\n      _macros.push(...scene.getFogMacro());\n    }\n\n    return _macros;\n  }\n\n  parseFog(camera) {\n    const scene = camera.scene;\n    if (scene.hasFogFeature) {\n      const fogMacro = scene.getFogMacro();\n      if (this._fogMacro !== fogMacro) {\n        this._needCompile = true;\n        this._recreateHeader = true;\n        this._fogMacro = fogMacro;\n      }\n    }\n  }\n\n  createMorphConfig(primitive: Primitive, targetNum: number) {\n    const attributes = Object.keys(primitive._vertexElementMap);\n    const morphConfig = {};\n    for (let i = 0; i < targetNum; i++) {\n      if (attributes.indexOf(`POSITION_${i}`) > -1)\n        morphConfig[`a_position${i}`] = {\n          name: `a_position${i}`,\n          semantic: `POSITION_${i}`,\n          type: DataType.FLOAT_VEC3\n        };\n\n      if (attributes.indexOf(`NORMAL_${i}`) > -1)\n        morphConfig[`a_normal${i}`] = {\n          name: `a_normal${i}`,\n          semantic: `NORMAL_${i}`,\n          type: DataType.FLOAT_VEC3\n        };\n\n      if (attributes.indexOf(`TANGENT_${i}`) > -1)\n        morphConfig[`a_tangent${i}`] = {\n          name: `a_tangent${i}`,\n          semantic: `TANGENT_${i}`,\n          type: DataType.FLOAT_VEC3\n        };\n    }\n\n    return morphConfig;\n  }\n\n  static commonAttributes = {\n    a_position: {\n      name: \"a_position\",\n      semantic: \"POSITION\",\n      type: DataType.FLOAT_VEC3\n    },\n    a_uv: {\n      name: \"a_uv\",\n      semantic: \"TEXCOORD_0\",\n      type: DataType.FLOAT_VEC2\n    },\n    a_normal: {\n      name: \"a_noraml\",\n      semantic: \"NORMAL\",\n      type: DataType.FLOAT_VEC3\n    },\n    a_tangent: {\n      name: \"a_tangent\",\n      semantic: \"TANGENT\",\n      type: DataType.FLOAT_VEC4\n    },\n    a_color: {\n      name: \"a_color\",\n      semantic: \"COLOR_0\",\n      type: DataType.FLOAT_VEC4\n    },\n    a_joint: {\n      name: \"a_joint\",\n      semantic: \"JOINTS_0\",\n      type: DataType.FLOAT_VEC4\n    },\n    a_weight: {\n      name: \"a_weight\",\n      semantic: \"WEIGHTS_0\",\n      type: DataType.FLOAT_VEC4\n    }\n  };\n\n  static commonUniforms = {\n    u_localMat: {\n      name: \"u_localMat\",\n      semantic: UniformSemantic.LOCAL,\n      type: DataType.FLOAT_MAT4\n    },\n    u_modelMat: {\n      name: \"u_modelMat\",\n      semantic: UniformSemantic.MODEL,\n      type: DataType.FLOAT_MAT4\n    },\n    u_viewMat: {\n      name: \"u_viewMat\",\n      semantic: UniformSemantic.VIEW,\n      type: DataType.FLOAT_MAT4\n    },\n    u_projMat: {\n      name: \"u_projMat\",\n      semantic: UniformSemantic.PROJECTION,\n      type: DataType.FLOAT_MAT4\n    },\n    u_MVMat: {\n      name: \"u_MVMat\",\n      semantic: UniformSemantic.MODELVIEW,\n      type: DataType.FLOAT_MAT4\n    },\n    u_MVPMat: {\n      name: \"u_MVPMat\",\n      semantic: UniformSemantic.MODELVIEWPROJECTION,\n      type: DataType.FLOAT_MAT4\n    },\n    u_normalMat: {\n      name: \"u_normalMat\",\n      semantic: UniformSemantic.MODELINVERSETRANSPOSE,\n      type: DataType.FLOAT_MAT3\n    },\n    u_cameraPos: {\n      name: \"u_cameraPos\",\n      type: DataType.FLOAT_VEC3,\n      semantic: UniformSemantic.EYEPOS\n    },\n    u_time: {\n      name: \"u_time\",\n      type: DataType.FLOAT,\n      semantic: UniformSemantic.TIME\n    },\n    u_jointMatrix: {\n      name: \"u_jointMatrix\",\n      semantic: UniformSemantic.JOINTMATRIX,\n      type: DataType.FLOAT_MAT4_ARRAY\n    },\n    u_jointSampler: {\n      name: \"u_jointSampler\",\n      semantic: UniformSemantic.JOINTTEXTURE,\n      type: DataType.SAMPLER_2D\n    },\n    u_jointCount: {\n      name: \"u_jointCount\",\n      semantic: UniformSemantic.JOINTCOUNT,\n      type: DataType.FLOAT\n    },\n    u_fogColor: {\n      name: \"u_fogColor\",\n      type: DataType.FLOAT_VEC3\n    },\n    u_fogDensity: {\n      name: \"u_fogDensity\",\n      type: DataType.FLOAT\n    },\n    u_fogNear: {\n      name: \"u_fogNear\",\n      type: DataType.FLOAT\n    },\n    u_fogFar: {\n      name: \"u_fogFar\",\n      type: DataType.FLOAT\n    }\n  };\n}\n","import { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { TextureCubeFace, TextureFilterMode, TextureFormat, TextureWrapMode } from \"./enums\";\nimport { Texture } from \"./Texture\";\n\n/**\n * 立方体纹理。\n * @todo 日后调整为TextureCube命名\n */\nexport class TextureCubeMap extends Texture {\n  private _format: TextureFormat;\n  /** 向下兼容 WebGL1.0 */\n  private _compressedFaceFilled: number[] = [0, 0, 0, 0, 0, 0];\n\n  /**\n   * 纹理的格式。\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * 创建立方体纹理。\n   * @param size - 尺寸\n   * @param format - 格式，默认 TextureFormat.R8G8B8A8\n   * @param mipmap - 是否使用多级纹理\n   * @param engine - 可选引擎\n   */\n  constructor(size: number, format: TextureFormat = TextureFormat.R8G8B8A8, mipmap: boolean = true, engine?: Engine) {\n    super();\n    engine = engine || Engine._getDefaultEngine();\n    const rhi = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n    const isWebGL2: boolean = rhi.isWebGL2;\n\n    if (!Texture._supportTextureFormat(format, rhi)) {\n      throw new Error(`Texture format is not supported:${TextureFormat[format]}`);\n    }\n\n    if (mipmap && !isWebGL2 && !Texture._isPowerOf2(size)) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n      mipmap = false;\n    }\n\n    const formatDetail = Texture._getFormatDetail(format, gl, isWebGL2);\n\n    this._glTexture = gl.createTexture();\n    this._formatDetail = formatDetail;\n    this._rhi = rhi;\n    this._target = gl.TEXTURE_CUBE_MAP;\n    this._mipmap = mipmap;\n    this._width = size;\n    this._height = size;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    (formatDetail.isCompressed && !isWebGL2) || this._initMipmap(true);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * 通过指定立方体面、像素缓冲数据、区域和纹理层级设置像素，同样适用于压缩格式。\n   * 压缩纹理在 WebGL1 时必须先填满纹理，才能写子区域\n   * @param face - 立方体面\n   * @param colorBuffer - 颜色缓冲\n   * @param mipLevel - 多级纹理层级\n   * @param x - 区域起始X坐标\n   * @param y - 区域起始Y坐标\n   * @param width - 区域宽。如果为空的话 width 为 mipLevel 对应的宽度减去 x , mipLevel 对应的宽度为 Math.max(1, this.width >> mipLevel)\n   * @param height - 区域高。如果为空的话 height 为 mipLevel 对应的高度减去 y , mipLevel 对应的高度为 Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    face: TextureCubeFace,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x?: number,\n    y?: number,\n    width?: number,\n    height?: number\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const { internalFormat, baseFormat, dataType, isCompressed } = this._formatDetail;\n    const mipSize = Math.max(1, this._width >> mipLevel);\n\n    x = x || 0;\n    y = y || 0;\n    width = width || mipSize - x;\n    height = height || mipSize - y;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isCompressed) {\n      const mipBit = 1 << mipLevel;\n      if (isWebGL2 || this._compressedFaceFilled[face] & mipBit) {\n        gl.compressedTexSubImage2D(\n          gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n          mipLevel,\n          x,\n          y,\n          width,\n          height,\n          internalFormat,\n          colorBuffer\n        );\n      } else {\n        gl.compressedTexImage2D(\n          gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n          mipLevel,\n          internalFormat,\n          width,\n          height,\n          0,\n          colorBuffer\n        );\n        this._compressedFaceFilled[face] |= mipBit;\n      }\n    } else {\n      gl.texSubImage2D(\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n        mipLevel,\n        x,\n        y,\n        width,\n        height,\n        baseFormat,\n        dataType,\n        colorBuffer\n      );\n    }\n\n    this._unbind();\n  }\n\n  /**\n   * 通过指定立方体面、图源、区域和纹理层级设置像素。\n   * @param face - 立方体面\n   * @param imageSource - 纹理源\n   * @param mipLevel - 多级纹理层级\n   * @param flipY - 是否翻转Y轴\n   * @param premultipltAlpha - 是否预乘透明通道\n   * @param x - 区域起始X坐标\n   * @param y - 区域起始Y坐标\n   */\n  setImageSource(\n    face: TextureCubeFace,\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x?: number,\n    y?: number\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);\n    gl.texSubImage2D(\n      gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n      mipLevel,\n      x || 0,\n      y || 0,\n      baseFormat,\n      dataType,\n      imageSource\n    );\n    this._unbind();\n  }\n\n  /**\n   * 根据立方体面和指定区域获得像素颜色缓冲。\n   * @param face - 可以选择读取第几个面\n   * @param x - 区域起始X坐标\n   * @param y - 区域起始Y坐标\n   * @param width - 区域宽\n   * @param height - 区域高\n   * @param out - 颜色数据缓冲\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void {\n    if (this._formatDetail.isCompressed) {\n      throw new Error(\"Unable to read compressed texture\");\n    }\n    super._getPixelBuffer(face, x, y, width, height, out);\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { RenderBufferDepthFormat, TextureFilterMode, TextureWrapMode } from \"./enums\";\nimport { Texture } from \"./Texture\";\n\n/**\n * 类应用于渲染深度纹理。\n */\nexport class RenderDepthTexture extends Texture {\n  /** @internal */\n  public _isCube: boolean = false;\n\n  private _format: RenderBufferDepthFormat;\n  private _autoMipmap: boolean = false;\n\n  /**\n   * 格式。\n   */\n  get format(): RenderBufferDepthFormat {\n    return this._format;\n  }\n\n  /**\n   * 是否自动生成多级纹理。\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoMipmap;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoMipmap = value;\n  }\n\n  /**\n   * 构造渲染深度纹理。\n   * @param width - 宽\n   * @param height - 高\n   * @param format - 格式。默认 RenderBufferDepthFormat.Depth,深度纹理,自动选择精度\n   * @param mipmap - 是否使用多级纹理\n   * @param isCube - 是否为立方体模式\n   * @param engine - 可选引擎\n   */\n  constructor(\n    width: number,\n    height: number,\n    format: RenderBufferDepthFormat = RenderBufferDepthFormat.Depth,\n    mipmap: boolean = false,\n    isCube: boolean = false,\n    engine?: Engine\n  ) {\n    super();\n    engine = engine || Engine._getDefaultEngine();\n    const rhi = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n    const isWebGL2: boolean = rhi.isWebGL2;\n\n    if (!Texture._supportRenderBufferDepthFormat(format, rhi, true)) {\n      throw new Error(`RenderBufferDepthFormat is not supported:${RenderBufferDepthFormat[format]}`);\n    }\n\n    if (isCube && width !== height) {\n      throw new Error(\"The cube texture must have the same width and height\");\n    }\n    if (mipmap && !isWebGL2 && (!Texture._isPowerOf2(width) || !Texture._isPowerOf2(height))) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n      mipmap = false;\n    }\n\n    this._glTexture = gl.createTexture();\n    this._formatDetail = Texture._getRenderBufferDepthFormatDetail(format, gl, isWebGL2);\n    this._isCube = isCube;\n    this._rhi = rhi;\n    this._target = isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._initMipmap(isCube);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n}\n","import { AssetObject } from \"../asset/AssetObject\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { RenderBufferDepthFormat, TextureCubeFace } from \"./enums\";\nimport { RenderColorTexture } from \"./RenderColorTexture\";\nimport { RenderDepthTexture } from \"./RenderDepthTexture\";\nimport { Texture } from \"./Texture\";\n\n/**\n * 用于离屏幕渲染的渲染目标。\n */\nexport class RenderTarget extends AssetObject {\n  public _frameBuffer: WebGLFramebuffer;\n  public _MSAAFrameBuffer: WebGLFramebuffer | null;\n\n  private _rhi;\n  private _width: number;\n  private _height: number;\n  private _antiAliasing: number;\n  private _colorTextures: RenderColorTexture[];\n  private _depthTexture: RenderDepthTexture | null;\n  private _depthRenderBuffer: WebGLRenderbuffer | null;\n  private _MSAAColorRenderBuffers: WebGLRenderbuffer[] = [];\n  private _MSAADepthRenderBuffer: WebGLRenderbuffer | null;\n  private _oriDrawBuffers: GLenum[];\n  private _blitDrawBuffers: GLenum[] | null;\n\n  /** 渲染目标宽。 */\n  get width(): number {\n    return this._width;\n  }\n\n  /** 渲染目标高。 */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * 颜色纹理数量。\n   */\n  get colorTextureCount(): number {\n    return this._colorTextures.length;\n  }\n\n  /**\n   * 深度纹理。\n   */\n  get depthTexture(): RenderDepthTexture | null {\n    return this._depthTexture;\n  }\n\n  /**\n   * 抗锯齿级别。\n   * 如果设置的抗锯齿级别大于硬件支持的最大级别，将使用硬件的最大级别。\n   */\n  get antiAliasing(): number {\n    return this._antiAliasing;\n  }\n\n  /**\n   * 通过颜色纹理和深度格式创建渲染目标，使用内部深度缓冲，无法获取深度纹理。\n   * @param width - 宽\n   * @param height - 高\n   * @param colorTexture - 颜色纹理\n   * @param depthFormat - 深度格式,默认 RenderBufferDepthFormat.Depth,自动选择精度\n   * @param antiAliasing - 抗锯齿级别,默认 1\n   * @param engine - 可选引擎\n   */\n  constructor(\n    width: number,\n    height: number,\n    colorTexture: RenderColorTexture,\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number,\n    engine?: Engine\n  );\n\n  /**\n   * 通过颜色纹理和深度纹理创建渲染目标。不传颜色纹理时，只生成深度纹理\n   * @param width - 宽\n   * @param height - 高\n   * @param colorTexture - 颜色纹理\n   * @param depthTexture - 深度纹理\n   * @param antiAliasing - 抗锯齿级别,默认 1\n   * @param engine - 可选引擎\n   */\n  constructor(\n    width: number,\n    height: number,\n    colorTexture: RenderColorTexture | null,\n    depthTexture: RenderDepthTexture,\n    antiAliasing?: number,\n    engine?: Engine\n  );\n\n  /**\n   * 通过颜色纹理数组和深度格式创建渲染目标，使用内部深度缓冲，无法获取深度纹理。\n   * @param width - 宽\n   * @param height - 高\n   * @param colorTextures - 颜色纹理数组\n   * @param depthFormat - 深度格式,默认 RenderBufferDepthFormat.Depth,自动选择精度\n   * @param antiAliasing - 抗锯齿级别,默认 1\n   * @param engine - 可选引擎\n   */\n  constructor(\n    width: number,\n    height: number,\n    colorTextures: RenderColorTexture[],\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number,\n    engine?: Engine\n  );\n\n  /**\n   * 通过颜色纹理数组和深度纹理创建渲染目标。\n   * @param width - 宽\n   * @param height - 高\n   * @param colorTextures - 颜色纹理数组\n   * @param depthTexture - 深度纹理\n   * @param antiAliasing - 抗锯齿级别,默认 1\n   * @param engine - 可选引擎\n   */\n  constructor(\n    width: number,\n    height: number,\n    colorTextures: RenderColorTexture[],\n    depthTexture: RenderDepthTexture,\n    antiAliasing?: number,\n    engine?: Engine\n  );\n\n  /**\n   * @internal\n   */\n  constructor(\n    width: number,\n    height: number,\n    renderTexture: RenderColorTexture | Array<RenderColorTexture> | null,\n    depth: RenderDepthTexture | RenderBufferDepthFormat | null = RenderBufferDepthFormat.Depth,\n    antiAliasing: number = 1,\n    engine?: Engine\n  ) {\n    super();\n    engine = engine || Engine._getDefaultEngine();\n    const rhi = engine._hardwareRenderer;\n\n    /** todo\n     * MRT + Cube + [,MSAA]\n     * MRT + MSAA\n     */\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n\n    if (!(depth instanceof RenderDepthTexture) && !Texture._supportRenderBufferDepthFormat(depth, rhi, false)) {\n      throw new Error(`RenderBufferDepthFormat is not supported:${RenderBufferDepthFormat[depth]}`);\n    }\n\n    if ((renderTexture as RenderColorTexture[])?.length > 1 && !rhi.canIUse(GLCapabilityType.drawBuffers)) {\n      throw new Error(\"MRT is not supported\");\n    }\n\n    // handle this._colorTextures\n    if (renderTexture) {\n      this._colorTextures = renderTexture instanceof Array ? renderTexture.slice() : [renderTexture];\n    } else {\n      this._colorTextures = [];\n    }\n\n    if (this._colorTextures.some((v: RenderColorTexture) => v.width !== width || v.height !== height)) {\n      throw new Error(\"RenderColorTexture's size must as same as RenderTarget\");\n    }\n\n    if (depth instanceof RenderDepthTexture && (depth.width !== width || depth.height !== height)) {\n      throw new Error(\"RenderDepthTexture's size must as same as RenderTarget\");\n    }\n\n    // todo: necessary to support MRT + Cube + [,MSAA] ?\n    if (this._colorTextures.length > 1 && this._colorTextures.some((v: RenderColorTexture) => v._isCube)) {\n      throw new Error(\"MRT+Cube+[,MSAA] is not supported\");\n    }\n\n    const maxAntiAliasing = rhi.capability.maxAntiAliasing;\n    if (antiAliasing > maxAntiAliasing) {\n      Logger.warn(`MSAA antiAliasing exceeds the limit and is automatically downgraded to:${maxAntiAliasing}`);\n      antiAliasing = maxAntiAliasing;\n    }\n\n    this._rhi = rhi;\n    this._width = width;\n    this._height = height;\n    this._frameBuffer = gl.createFramebuffer();\n    this._antiAliasing = antiAliasing;\n\n    if (depth instanceof RenderDepthTexture) {\n      this._depthTexture = depth;\n    }\n\n    // 绑定主 FBO\n    this._bindMainFBO(depth);\n\n    // 绑定 MSAA FBO\n    if (antiAliasing > 1) {\n      this._MSAAFrameBuffer = gl.createFramebuffer();\n      this._bindMSAAFBO(depth);\n    }\n  }\n\n  /**\n   * 通过索引获取颜色纹理。\n   * @param index\n   */\n  public getColorTexture(index: number = 0): RenderColorTexture | null {\n    return this._colorTextures[index];\n  }\n\n  /**\n   * 销毁。\n   */\n  public destroy(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    gl.deleteFramebuffer(this._frameBuffer);\n    this._depthRenderBuffer && gl.deleteRenderbuffer(this._depthRenderBuffer);\n    this._MSAAFrameBuffer && gl.deleteFramebuffer(this._MSAAFrameBuffer);\n    this._MSAADepthRenderBuffer && gl.deleteRenderbuffer(this._MSAADepthRenderBuffer);\n\n    for (let i = 0; i < this._colorTextures.length; i++) {\n      this._colorTextures[i].destroy();\n    }\n\n    for (let i = 0; i < this._MSAAColorRenderBuffers.length; i++) {\n      gl.deleteRenderbuffer(this._MSAAColorRenderBuffers[i]);\n    }\n\n    this._depthTexture && this._depthTexture.destroy();\n\n    this._frameBuffer = null;\n    this._colorTextures.length = 0;\n    this._depthTexture = null;\n    this._depthRenderBuffer = null;\n    this._MSAAFrameBuffer = null;\n    this._MSAAColorRenderBuffers.length = 0;\n    this._MSAADepthRenderBuffer = null;\n  }\n\n  /**\n   * 激活 RenderTarget 对象\n   * 如果开启 MSAA,则激活 MSAA FBO,后续进行 this._blitRenderTarget() 进行交换 FBO\n   * 如果未开启 MSAA,则激活主 FBO\n   */\n  public _activeRenderTarget(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    if (this._MSAAFrameBuffer) {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._MSAAFrameBuffer);\n    } else {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n    }\n  }\n\n  /**\n   * 设置渲染到立方体纹理的哪个面\n   * @param faceIndex - 立方体纹理面\n   */\n  public _setRenderTargetFace(faceIndex: TextureCubeFace): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const colorTexture = this._colorTextures[0];\n    const depthTexture = this._depthTexture;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n\n    // 绑定颜色纹理\n    if (colorTexture?._isCube) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\n        colorTexture._glTexture,\n        0\n      );\n    }\n\n    // 绑定深度纹理\n    if (depthTexture?._isCube) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        depthTexture._formatDetail.attachment,\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\n        depthTexture._glTexture,\n        0\n      );\n    }\n\n    // 还原当前激活的 FBO\n    this._activeRenderTarget();\n  }\n\n  /**\n   * Blit FBO.\n   */\n  public _blitRenderTarget(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const mask = gl.COLOR_BUFFER_BIT | (this._depthTexture ? gl.DEPTH_BUFFER_BIT : 0);\n    const colorTextureLength = this._colorTextures.length;\n\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this._MSAAFrameBuffer);\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this._frameBuffer);\n\n    for (let textureIndex = 0; textureIndex < colorTextureLength; textureIndex++) {\n      const attachment = gl.COLOR_ATTACHMENT0 + textureIndex;\n\n      this._blitDrawBuffers[textureIndex] = attachment;\n\n      gl.readBuffer(attachment);\n      gl.drawBuffers(this._blitDrawBuffers);\n      gl.blitFramebuffer(0, 0, this._width, this._height, 0, 0, this._width, this._height, mask, gl.NEAREST);\n\n      this._blitDrawBuffers[textureIndex] = gl.NONE;\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  /**\n   * 绑定主 FBO\n   */\n  private _bindMainFBO(renderDepth: RenderDepthTexture | RenderBufferDepthFormat | null): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const colorTextureLength = this._colorTextures.length;\n    const drawBuffers = new Array(colorTextureLength);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n\n    /** color render buffer */\n    for (let i = 0; i < colorTextureLength; i++) {\n      const colorTexture = this._colorTextures[i];\n      const attachment = gl.COLOR_ATTACHMENT0 + i;\n\n      drawBuffers[i] = attachment;\n\n      // 立方体纹理请调用 _setRenderTargetFace()\n      if (!colorTexture._isCube) {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, colorTexture._glTexture, 0);\n      }\n    }\n\n    if (colorTextureLength > 1) {\n      gl.drawBuffers(drawBuffers);\n    }\n    this._oriDrawBuffers = drawBuffers;\n\n    /** depth render buffer */\n    if (renderDepth !== null) {\n      if (renderDepth instanceof RenderDepthTexture) {\n        // 立方体纹理请调用 _setRenderTargetFace()\n        if (!renderDepth._isCube) {\n          gl.framebufferTexture2D(\n            gl.FRAMEBUFFER,\n            renderDepth._formatDetail.attachment,\n            gl.TEXTURE_2D,\n            renderDepth._glTexture,\n            0\n          );\n        }\n      } else if (this._antiAliasing <= 1) {\n        const { internalFormat, attachment } = Texture._getRenderBufferDepthFormatDetail(renderDepth, gl, isWebGL2);\n        const depthRenderBuffer = gl.createRenderbuffer();\n\n        this._depthRenderBuffer = depthRenderBuffer;\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, this._width, this._height);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, depthRenderBuffer);\n      }\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  }\n\n  /**\n   * 绑定 MSAA FBO\n   */\n  private _bindMSAAFBO(renderDepth: RenderDepthTexture | RenderBufferDepthFormat | null): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const MSAADepthRenderBuffer = gl.createRenderbuffer();\n    const colorTextureLength = this._colorTextures.length;\n\n    this._blitDrawBuffers = new Array(colorTextureLength);\n    this._MSAADepthRenderBuffer = MSAADepthRenderBuffer;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._MSAAFrameBuffer);\n\n    // prepare MRT+MSAA color RBOs\n    for (let i = 0; i < colorTextureLength; i++) {\n      const MSAAColorRenderBuffer = gl.createRenderbuffer();\n\n      this._MSAAColorRenderBuffers[i] = MSAAColorRenderBuffer;\n      this._blitDrawBuffers[i] = gl.NONE;\n\n      gl.bindRenderbuffer(gl.RENDERBUFFER, MSAAColorRenderBuffer);\n      gl.renderbufferStorageMultisample(\n        gl.RENDERBUFFER,\n        this._antiAliasing,\n        this._colorTextures[i]._formatDetail.internalFormat,\n        this._width,\n        this._height\n      );\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, MSAAColorRenderBuffer);\n    }\n    gl.drawBuffers(this._oriDrawBuffers);\n\n    // prepare MSAA depth RBO\n    if (renderDepth !== null) {\n      const { internalFormat, attachment } =\n        renderDepth instanceof RenderDepthTexture\n          ? renderDepth._formatDetail\n          : Texture._getRenderBufferDepthFormatDetail(renderDepth, gl, isWebGL2);\n\n      gl.bindRenderbuffer(gl.RENDERBUFFER, MSAADepthRenderBuffer);\n      gl.renderbufferStorageMultisample(gl.RENDERBUFFER, this._antiAliasing, internalFormat, this._width, this._height);\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, MSAADepthRenderBuffer);\n    }\n\n    this._checkFrameBuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  }\n\n  /**\n   * 检查 FBO\n   */\n  private _checkFrameBuffer(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n    switch (e) {\n      case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n        throw new Error(\n          \"The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete\"\n        );\n      case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n        throw new Error(\"There is no attachment\");\n      case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n        throw new Error(\" Height and width of the attachment are not the same.\");\n      case gl.FRAMEBUFFER_UNSUPPORTED:\n        throw new Error(\n          \"The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer\"\n        );\n    }\n\n    if (isWebGL2 && e === gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE) {\n      throw new Error(\n        \"The values of gl.RENDERBUFFER_SAMPLES are different among attached renderbuffers, or are non-zero if the attached images are a mix of renderbuffers and textures.\"\n      );\n    }\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { RenderBufferColorFormat, TextureCubeFace, TextureFilterMode, TextureWrapMode } from \"./enums\";\nimport { Texture } from \"./Texture\";\n\n/**\n * 类应用于渲染颜色纹理。\n */\nexport class RenderColorTexture extends Texture {\n  /** @internal */\n  public _isCube: boolean = false;\n\n  private _format: RenderBufferColorFormat;\n  private _autoMipmap: boolean = false;\n\n  /**\n   * 格式。\n   */\n  get format(): RenderBufferColorFormat {\n    return this._format;\n  }\n\n  /**\n   * 是否自动生成多级纹理。\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoMipmap;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoMipmap = value;\n  }\n\n  /**\n   * 构造渲染纹理。\n   * @param width - 宽\n   * @param height - 高\n   * @param format - 格式，默认 RenderBufferColorFormat.R8G8B8A8\n   * @param mipmap - 是否使用多级纹理\n   * @param isCube - 是否为立方体模式\n   * @param engine - 可选引擎\n   */\n  constructor(\n    width: number,\n    height: number,\n    format: RenderBufferColorFormat = RenderBufferColorFormat.R8G8B8A8,\n    mipmap: boolean = false,\n    isCube: boolean = false,\n    engine?: Engine\n  ) {\n    super(engine);\n    engine = engine || Engine._getDefaultEngine();\n    const rhi = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n    const isWebGL2: boolean = rhi.isWebGL2;\n\n    if (!Texture._supportRenderBufferColorFormat(format, rhi)) {\n      throw new Error(`RenderBufferColorFormat is not supported:${RenderBufferColorFormat[format]}`);\n    }\n\n    if (isCube && width !== height) {\n      throw new Error(\"The cube texture must have the same width and height\");\n    }\n    if (mipmap && !isWebGL2 && (!Texture._isPowerOf2(width) || !Texture._isPowerOf2(height))) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n      mipmap = false;\n    }\n\n    this._glTexture = gl.createTexture();\n    this._formatDetail = Texture._getRenderBufferColorFormatDetail(format, gl, isWebGL2);\n    this._isCube = isCube;\n    this._rhi = rhi;\n    this._target = isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._initMipmap(isCube);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * 根据立方体面和指定区域获得颜色像素缓冲。\n   * @param face - 如果是立方体纹理，可以选择读取第几个面;立方体纹理读取面，isCube=true时生效\n   * @param x - 区域起始X坐标\n   * @param y - 区域起始Y坐标\n   * @param width - 区域宽\n   * @param height - 区域高\n   * @param out - 颜色像素缓冲\n   */\n  public getPixelBuffer(\n    face: TextureCubeFace | null,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void {\n    super._getPixelBuffer(face, x, y, width, height, out);\n  }\n}\n","import { Matrix, Quaternion, Vector3, Vector4 } from \"@alipay/o3-math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { Entity } from \"../Entity\";\nimport { RenderableComponent } from \"../RenderableComponent\";\nimport { Texture2D } from \"../texture/Texture2D\";\n\ninterface IUvRect {\n  u: number;\n  v: number;\n  width: number;\n  height: number;\n}\n\ninterface IRect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\ninterface IPositionQuad {\n  leftTop: Vector3;\n  leftBottom: Vector3;\n  rightTop: Vector3;\n  rightBottom: Vector3;\n}\n\n/**\n * Sprite渲染管理器\n * @class\n */\nexport class SpriteRenderer extends RenderableComponent {\n  private static _tempVec40: Vector4 = new Vector4();\n  private static _tempVec41: Vector4 = new Vector4();\n  private static _tempVec42: Vector4 = new Vector4();\n  private static _tempVec43: Vector4 = new Vector4();\n\n  private _uvRect: IUvRect;\n  private _worldSize: number[] = [];\n  private _positionQuad: IPositionQuad;\n  private _rotationAngle: number;\n  private _anchor: number[];\n  protected _texture: Texture2D;\n  protected _rect: IRect;\n  private _worldSizeFactor: number;\n\n  /**\n   * 渲染方式，2D或3D，默认是2D。TODO: 3D\n   */\n  renderMode: string = \"2D\";\n  /**\n   * 调节色，控制 Sprite 颜色变化\n   */\n  public tintColor: Vector4 = new Vector4(1, 1, 1, 1);\n  public transformMatrix: Matrix;\n\n  /**\n   * 构造函数\n   * @param {Entity} entity\n   * @param {Sprite} sprite\n   */\n  constructor(entity: Entity, sprite) {\n    super(entity);\n\n    const { texture, rect, anchor, worldSizeFactor } = sprite;\n    this._worldSizeFactor = worldSizeFactor || 100;\n    this.setTexture(texture);\n    this.setRect(rect);\n    this.setAnchor(anchor);\n    this.setUvRect();\n    this.setWorldSize();\n\n    if (sprite.tintColor) {\n      this.tintColor = sprite.tintColor;\n    }\n\n    // //-- Ability属性\n    // this.renderable = true;\n\n    //--\n    this._positionQuad = {\n      leftTop: new Vector3(),\n      leftBottom: new Vector3(),\n      rightTop: new Vector3(),\n      rightBottom: new Vector3()\n    };\n\n    this._rotationAngle = 0;\n  }\n\n  set texture(v) {\n    this.setTexture(v);\n    this.setRect();\n    this.setUvRect();\n    this.setWorldSize();\n  }\n\n  get texture() {\n    return this._texture;\n  }\n\n  set anchor(v) {\n    this._anchor = v || [0.5, 0.5];\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  set rect(v) {\n    this.setRect(v);\n    this.setUvRect();\n    this.setWorldSize();\n  }\n\n  get rect() {\n    return this._rect;\n  }\n\n  protected setTexture(texture) {\n    // TODO：临时兼容Resource\n    if (texture && texture.asset) {\n      texture = texture.asset;\n    }\n\n    this._texture = texture;\n  }\n\n  /**\n   * 旋转角度\n   * @member {Vector4}\n   */\n  get rotationAngle() {\n    return this._rotationAngle;\n  }\n\n  set rotationAngle(v) {\n    this._rotationAngle = v;\n  }\n\n  protected setRect(rect?) {\n    let rectObject;\n    try {\n      if (rect) {\n        rectObject = JSON.parse(rect);\n      }\n    } catch (error) {\n      Logger.warn(\"Rect is not valid JSON format\");\n    }\n\n    this._rect = rect || {\n      x: 0,\n      y: 0,\n      width: this._texture?.width ?? 0,\n      height: this._texture?.height ?? 0\n    };\n  }\n\n  protected setAnchor(anchor) {\n    this._anchor = anchor || [0.5, 0.5];\n  }\n\n  protected setWorldSize() {\n    const { _worldSizeFactor } = this;\n    this._worldSize = [this._rect.width / _worldSizeFactor, this._rect.height / _worldSizeFactor];\n  }\n\n  protected setUvRect() {\n    let w, h;\n\n    if (this._texture) {\n      w = this._texture.width;\n      h = this._texture.height;\n    } else {\n      w = this._rect.width;\n      h = this._rect.height;\n    }\n    this._uvRect = {\n      u: this._rect.x / w,\n      v: this._rect.y / h,\n      width: this._rect.width / w,\n      height: this._rect.height / h\n    };\n  }\n\n  /**\n   * 更新位置，将数据对象加入渲染队列\n   * @param {Camera} camera\n   */\n  render(camera: Camera) {\n    this._updatePositionQuad(camera);\n    this._transformByMatrix();\n    camera._renderPipeline.pushSprite(\n      this,\n      this._positionQuad,\n      this._uvRect,\n      this.tintColor,\n      this.texture,\n      this.renderMode,\n      camera\n    );\n  }\n\n  _transformByMatrix() {\n    if (!this.transformMatrix) return;\n    const matrix = this.transformMatrix;\n\n    let temp: Vector3 = this._positionQuad.leftTop;\n    const leftTop: Vector4 = SpriteRenderer._tempVec40;\n    leftTop.setValue(temp.x, temp.y, temp.z, 1);\n\n    temp = this._positionQuad.leftBottom;\n    const leftBottom: Vector4 = SpriteRenderer._tempVec41;\n    leftBottom.setValue(temp.x, temp.y, temp.z, 1);\n\n    temp = this._positionQuad.rightTop;\n    const rightTop: Vector4 = SpriteRenderer._tempVec42;\n    rightTop.setValue(temp.x, temp.y, temp.z, 1);\n\n    temp = this._positionQuad.rightBottom;\n    const rightBottom: Vector4 = SpriteRenderer._tempVec43;\n    rightBottom.setValue(temp.x, temp.y, temp.z, 1);\n\n    Vector4.transform(leftTop, matrix, leftTop);\n    Vector4.transform(leftBottom, matrix, leftBottom);\n    Vector4.transform(rightTop, matrix, rightTop);\n    Vector4.transform(rightBottom, matrix, rightBottom);\n\n    this._positionQuad.leftTop.setValue(leftTop.x, leftTop.y, leftTop.z);\n    this._positionQuad.leftBottom.setValue(leftBottom.x, leftBottom.y, leftBottom.z);\n    this._positionQuad.rightTop.setValue(rightTop.x, rightTop.y, rightTop.z);\n    this._positionQuad.rightBottom.setValue(rightBottom.x, rightBottom.y, rightBottom.z);\n  }\n\n  /**\n   * 更新顶点位置\n   * @param {Camera} camera\n   * @private\n   */\n  _updatePositionQuad(camera: Camera) {\n    if (this.renderMode === \"2D\") {\n      const m = camera.viewMatrix.elements;\n      const vx = new Vector3(m[0], m[4], m[8]);\n      const vy = new Vector3(m[1], m[5], m[9]);\n      //-- center pos\n      const c: Vector3 = this.entity.worldPosition.clone();\n      const s = this._worldSize;\n      const ns = this.entity.scale;\n\n      vx.scale(s[0] * ns.x);\n      vy.scale(s[1] * ns.y);\n\n      if (this._rotationAngle !== 0) {\n        const vz = new Vector3(m[2], m[6], m[10]);\n\n        const rotation: Quaternion = new Quaternion();\n        Quaternion.rotationAxisAngle(vz, this._rotationAngle, rotation);\n\n        Vector3.transformByQuat(vx, rotation, vx);\n        Vector3.transformByQuat(vy, rotation, vy);\n      }\n\n      const cx: Vector3 = new Vector3();\n      const cy: Vector3 = new Vector3();\n      Vector3.scale(vx, (this.anchor[0] - 0.5) * 2, cx);\n      Vector3.scale(vy, (this.anchor[1] - 0.5) * 2, cy);\n\n      c.subtract(cx).add(cy);\n\n      //-- quad pos\n      const leftTop: Vector3 = this._positionQuad.leftTop;\n      Vector3.subtract(c, vx, leftTop);\n      leftTop.add(vy);\n\n      const leftBottom: Vector3 = this._positionQuad.leftBottom;\n      Vector3.subtract(c, vx, leftBottom);\n      leftBottom.subtract(vy);\n\n      const rightBottom: Vector3 = this._positionQuad.rightBottom;\n      Vector3.add(c, vx, rightBottom);\n      rightBottom.subtract(vy);\n\n      const rightTop: Vector3 = this._positionQuad.rightTop;\n      Vector3.add(c, vx, rightTop);\n      rightTop.add(vy);\n    } else {\n      // TODO: 3D\n    }\n  }\n}\n","/**\n * 动画循环播放模式\n * @readonly\n */\nexport enum WrapMode {\n  /** 只播放一次 */\n  ONCE = 0,\n  /** 循环播放 */\n  LOOP = 1\n  // FOREVER: 2,\n  // PINGPONG: 3\n}\n\n/**\n * 动画事件类型\n * @readonly\n */\nexport enum AnimationEvent {\n  /** 播放模式为 WrapMode.ONCE，结束后触发 */\n  FINISHED = 0,\n  /** 播放模式为 WrapMode.LOOP，每次循环结束后触发 */\n  LOOP_END = 1,\n  /** 动画播放到距离开始的某个时间点后，触发的事件 */\n  FRAME_EVENT = 2\n}\n\n/**\n * 动画插值方式\n * @readonly\n */\nexport enum InterpolationType {\n  /** 线性插值 */\n  LINEAR = 0,\n  /** 三次贝塞尔曲线插值 */\n  CUBICSPLINE = 1,\n  /** 步进插值 */\n  STEP = 2\n}\n","import { InterpolationType } from \"./AnimationConst\";\nimport { IChannel, ISample, List, Value } from \"./types\";\nimport { AssetObject } from \"../asset/AssetObject\";\n\nexport enum TagetType {\n  position = 0,\n  rotation = 1,\n  scale = 2,\n  other = 3\n}\n\n/**\n * Data for an animation, set of Samples and Channels\n * @extends AssetObject\n */\nexport class AnimationClip extends AssetObject {\n  private static _tagetTypeMap: Object = {\n    position: TagetType.position,\n    rotation: TagetType.rotation,\n    scale: TagetType.scale\n  };\n\n  public duration: number;\n\n  public durationIndex: number;\n\n  public samplers: ISample[];\n\n  public channels: IChannel[];\n  /**\n   * @constructor\n   * @param {string} name\n   */\n  constructor(public readonly name: string) {\n    super();\n\n    /** @member {Array} */\n    this.samplers = [];\n\n    /** @member {Array} */\n    this.channels = [];\n  }\n\n  /**\n   * 添加一个 sampler\n   * @param {Float32Array} _input\n   * @param {Float32Array} _output\n   * @param {number} _outputSize\n   * @param {constant} _interpolation\n   */\n  public addSampler(\n    _input: List,\n    _output: List,\n    _outputSize: number,\n    _interpolation: InterpolationType = InterpolationType.LINEAR\n  ) {\n    // FIXME - adapt old error animation export file\n    if (_interpolation === InterpolationType.CUBICSPLINE) {\n      if (_outputSize <= 4) {\n        _interpolation = InterpolationType.LINEAR;\n      } else {\n        _outputSize /= 3;\n      }\n    }\n\n    // sampler object, defines an curve\n    const sampler = {\n      input: _input,\n      output: _output,\n      outputSize: _outputSize,\n      interpolation: _interpolation\n    };\n    this.samplers.push(sampler);\n  }\n\n  /**\n   * 添加 channel\n   * @param {number} samplerIndex\n   * @param {string} targetID, Entity name\n   * @param {string} targetPath, Transform property name: position, rotation, scale\n   */\n  public addChannel(samplerIndex: number, targetID: string, targetPath: string) {\n    const bindSampler = this.samplers[samplerIndex];\n\n    let tagetType: TagetType = AnimationClip._tagetTypeMap[targetPath];\n    // channel object, bind a Sample to an Object property\n    const channel = {\n      sampler: bindSampler,\n      target: {\n        id: targetID,\n        path: targetPath,\n        pathType: tagetType ?? TagetType.other\n      }\n    };\n\n    this.channels.push(channel);\n  }\n\n  /**\n   * 取得 channel 的总数\n   * @return {number} number of channels\n   */\n  public getChannelCount(): number {\n    return this.channels.length;\n  }\n\n  /**\n   * 取得 channel 的作用的 object\n   * @return channel objects\n   * @param {number} channelIndex\n   */\n  public getChannelObject(channelIndex: number) {\n    return this.channels[channelIndex];\n  }\n\n  /**\n   * 取得 channel 的 frame count\n   * @return channel frame count\n   * @param {number} channelIndex\n   */\n  public getFrameCount(channelIndex: number): number {\n    const sampler = this.channels[channelIndex].sampler;\n    return sampler.input.length;\n  }\n\n  /**\n   * 取得 channel 的 frame time\n   * @return channel frame time\n   * @param {number} channelIndex\n   * @param {number} frameIndex\n   */\n  public getFrameTime(channelIndex: number, frameIndex: number): number {\n    const sampler = this.channels[channelIndex].sampler;\n    return sampler.input[frameIndex];\n  }\n\n  /**\n   * 取得 channel 的时间长度\n   * @return channel time length\n   * @param {number} channelIndex\n   */\n  public getChannelTimeLength(channelIndex: number): number {\n    const sampler = this.channels[channelIndex].sampler;\n    const frameCount = sampler.input.length;\n    return sampler.input[frameCount - 1];\n  }\n\n  /**\n   * 取得 channel 的值\n   * @return channel value\n   * @param {number} channelIndex\n   */\n  public createChannelValue(channelIndex: number): number | Float32Array | number[] {\n    const sampler = this.channels[channelIndex].sampler;\n\n    return new Float32Array(sampler.outputSize);\n  }\n\n  /**\n   * @private\n   * @param {Value} outValue\n   * @param {number} channelIndex\n   * @param {number} frameIndex\n   * @param {number} nextFrameIndex\n   * @param {number} alpha\n   */\n  public evaluate(\n    outValue: Value,\n    channelIndex: number,\n    frameIndex: number,\n    nextFrameIndex: number,\n    alpha: number\n  ): Value {\n    const channel = this.channels[channelIndex];\n    const output = channel.sampler.output;\n    const outputSize = channel.sampler.outputSize;\n\n    switch (channel.sampler.interpolation) {\n      case InterpolationType.CUBICSPLINE:\n        this.evaluateCubicSpline(outValue, output, outputSize, frameIndex, nextFrameIndex, alpha);\n        break;\n      case InterpolationType.LINEAR:\n        this.evaluateLinear(outValue, output, outputSize, frameIndex, nextFrameIndex, alpha);\n        break;\n    }\n\n    return outValue;\n  }\n\n  public evaluateCubicSpline(\n    outValue: Value,\n    output: List,\n    outputSize: number,\n    frameIndex: number,\n    nextFrameIndex: number,\n    alpha: number\n  ) {\n    const squared = alpha * alpha;\n    const cubed = alpha * squared;\n    const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    const part2 = -2.0 * cubed + 3.0 * squared;\n    const part3 = cubed - 2.0 * squared + alpha;\n    const part4 = cubed - squared;\n\n    for (let i = outputSize; i >= 0; i--) {\n      const t1 = output[frameIndex * outputSize * 3 + i];\n      const v1 = output[frameIndex * outputSize * 3 + outputSize + i];\n      const t2 = output[frameIndex * outputSize * 3 + outputSize * 2 + i];\n      const v2 = output[nextFrameIndex * outputSize * 3 + outputSize + i];\n\n      outValue[i] = v1 * part1 + v2 * part2 + t1 * part3 + t2 * part4;\n    }\n  }\n\n  public evaluateLinear(\n    outValue: Value,\n    output: List,\n    outputSize: number,\n    frameIndex: number,\n    nextFrameIndex: number,\n    alpha: number\n  ) {\n    switch (outputSize) {\n      case 1:\n        outValue[0] = output[frameIndex] * (1 - alpha) + output[nextFrameIndex] * alpha;\n        break;\n      case 4:\n        // const start = new Quaternion(\n        //   output[frameIndex * outputSize],\n        //   output[frameIndex * outputSize + 1],\n        //   output[frameIndex * outputSize + 2],\n        //   output[frameIndex * outputSize + 3]\n        // );\n        // const end = new Quaternion(\n        //   output[nextFrameIndex * outputSize],\n        //   output[nextFrameIndex * outputSize + 1],\n        //   output[nextFrameIndex * outputSize + 2],\n        //   output[nextFrameIndex * outputSize + 3]\n        // );\n        // Quaternion.slerp(start, end, alpha, <Quaternion>outValue);\n        this._quaSlerp(outValue, output, frameIndex * outputSize, output, nextFrameIndex * outputSize, alpha);\n        break;\n      default:\n        for (let i = outputSize; i >= 0; i--) {\n          outValue[i] =\n            output[frameIndex * outputSize + i] * (1 - alpha) + output[nextFrameIndex * outputSize + i] * alpha;\n        }\n        break;\n    } // end of switch\n  }\n\n  private _quaSlerp(out, a, aIndex, b, bIndex, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0 + aIndex],\n      ay = a[1 + aIndex],\n      az = a[2 + aIndex],\n      aw = a[3 + aIndex];\n    let bx = b[0 + bIndex],\n      by = b[1 + bIndex],\n      bz = b[2 + bIndex],\n      bw = b[3 + bIndex];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n      // standard case (slerp)\n      omega = Math.acos(cosom);\n      sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n  }\n}\n","import { Event } from \"../base/Event\";\nimport { EventDispatcher } from \"../base/EventDispatcher\";\nimport { Logger } from \"../base/Logger\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { SkinnedMeshRenderer } from \"../mesh/SkinnedMeshRenderer\";\nimport { AnimationClip } from \"./AnimationClip\";\nimport { AnimationEvent, WrapMode } from \"./AnimationConst\";\nimport { AnimationOptions, IChannelState, IChannelTarget } from \"./types\";\n\n/**\n * AnimationClip playback\n * @extends EventDispatcher\n * @see class AnimationClip\n * @private\n */\nexport class AnimationLayer extends EventDispatcher {\n  /**\n   * @return is playing˝\n   */\n  get isPlaying(): boolean {\n    return this._animClip && this._isPlaying;\n  }\n\n  public layerWeight: number;\n\n  public mixTagetLayer: AnimationLayer;\n\n  public isFading: number;\n\n  public fadeDeltaTime: number;\n\n  public crossFadeDuration: number;\n\n  public fadeDuration: number;\n\n  public crossFadeDeltaTime: number;\n\n  public isMixLayer: boolean;\n\n  public hasMixLayer: boolean;\n\n  public mixEntity: Entity;\n\n  private _activedEvents: Event[];\n\n  private _animClip: AnimationClip;\n\n  private _isPlaying: boolean;\n\n  private _wrapMode: WrapMode;\n\n  private _channelStates: IChannelState[];\n\n  private _animClipLength: number;\n\n  private _frameEvents: any[];\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this.layerWeight = 1.0;\n\n    this._activedEvents = [];\n  }\n\n  /**\n   * @param {AnimationClip} nextAnimClip, anim clip to playback next\n   * @param {Entity} rootEntity\n   * @return can mix with current AnimationClip\n   */\n  public canMix(nextAnimClip: AnimationClip, rootEntity: Entity): boolean {\n    if (!this._animClip || !this._isPlaying || this.isMixLayer || this.isFading) {\n      return false;\n    }\n\n    if (this._animClip.getChannelCount() !== nextAnimClip.getChannelCount()) {\n      return false;\n    }\n\n    const count = this._animClip.getChannelCount();\n    for (let i = count - 1; i >= 0; i--) {\n      const curChannel = this._animClip.getChannelObject(i);\n      const curTargetObject = this._findChannelTarget(rootEntity, curChannel.target);\n\n      const nextChannel = nextAnimClip.getChannelObject(i);\n      const nextTargetObject = this._findChannelTarget(rootEntity, nextChannel.target);\n\n      if (curTargetObject !== nextTargetObject) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * mix animClip with target animationLayer\n   * @param {AnimationClip} animClip, anim clip to mix\n   * @param {AnimationLayer} targetLayer, target animationLayer\n   * @param {Entity} rootEntity, root node of skeleton animation\n   * @param {Entity} mixNode, mix bone node\n   * @param {AnimationOptions} options, animation events options\n   */\n  public mix(\n    animClip: AnimationClip,\n    targetLayer: AnimationLayer,\n    rootEntity: Entity,\n    mixEntity: Entity,\n    options: { wrapMode?: WrapMode } = {}\n  ) {\n    this._isPlaying = targetLayer.isPlaying;\n    this._animClip = animClip;\n    this._wrapMode = typeof options.wrapMode !== \"undefined\" ? options.wrapMode : targetLayer._wrapMode;\n\n    this._addEvents(options);\n\n    this._channelStates = [];\n    this._animClipLength = 0;\n\n    // -- create new state object\n    if (this._isPlaying) {\n      const targetChannelStates = targetLayer._channelStates;\n      const count = this._animClip.getChannelCount();\n      for (let i = count - 1; i >= 0; i--) {\n        const channel = this._animClip.getChannelObject(i);\n        const targetObject = this._findChannelTarget(mixEntity, channel.target);\n        this._channelStates[i] = {\n          frameTime: 0.0,\n          currentFrame: 0,\n          currentValue: this._animClip.createChannelValue(i),\n          mixWeight: targetObject ? 1 : 0\n        };\n\n        targetChannelStates[i].mixWeight =\n          targetChannelStates[i].mixWeight === undefined ? 1 : targetChannelStates[i].mixWeight;\n        if (targetChannelStates[i].mixWeight === 1) {\n          targetChannelStates[i].mixWeight = targetObject ? 0 : 1;\n        }\n\n        const channelTimeLength = this._animClip.getChannelTimeLength(i);\n        this._animClipLength = this._animClipLength > channelTimeLength ? this._animClipLength : channelTimeLength;\n      } // end of for\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public removeMixWeight() {\n    const count = this._channelStates.length;\n    for (let i = count - 1; i >= 0; i--) {\n      if (this._channelStates[i].mixWeight === 1) {\n        this.mixTagetLayer._channelStates[i].mixWeight = 1;\n      }\n    }\n  }\n\n  /**\n   * play specify anim clip\n   * @param {AnimationClip} animClip, anim clip to playback\n   * @param {Entity} rootEntity, root node of Skeleton Animation\n   * @param {AnimationOptions} options\n   */\n  public play(\n    animClip: AnimationClip,\n    rootEntity: Entity,\n    options: AnimationOptions = { wrapMode: WrapMode.LOOP }\n  ): false | IChannelTarget[] {\n    this._isPlaying = !!animClip;\n    this._animClip = animClip;\n    this._wrapMode = typeof options.wrapMode !== \"undefined\" ? options.wrapMode : WrapMode.LOOP;\n\n    this._addEvents(options);\n\n    this._channelStates = [];\n    this._animClipLength = 0;\n\n    // -- create new state object\n    if (this._isPlaying) {\n      const count = this._animClip.getChannelCount();\n      const channelTargets: IChannelTarget[] = [];\n      for (let i = count - 1; i >= 0; i--) {\n        const channel = this._animClip.getChannelObject(i);\n        const targetObject = this._findChannelTarget(rootEntity, channel.target);\n        if (!targetObject) {\n          Logger.warn(\"Can not find channel target:\" + channel.target.id);\n        }\n        this._channelStates[i] = {\n          frameTime: 0.0,\n          currentFrame: 0,\n          currentValue: this._animClip.createChannelValue(i)\n        };\n\n        channelTargets[i] = {\n          targetObject,\n          path: channel.target.path,\n          pathType: channel.target.pathType,\n          outputSize: channel.sampler.outputSize\n        };\n\n        const channelTimeLength = this._animClip.getChannelTimeLength(i);\n        this._animClipLength = this._animClipLength > channelTimeLength ? this._animClipLength : channelTimeLength;\n      } // end of for\n\n      return channelTargets;\n    }\n\n    return false;\n  }\n\n  /**\n   * stop play anim clip\n   * @param {boolean} rightnow stop it immediately, or it will stop at the end of the clip\n   */\n  public stop(rightnow: boolean) {\n    if (!this._animClip || !this._isPlaying) {\n      return;\n    }\n\n    if (rightnow) {\n      this._isPlaying = false;\n    } else {\n      this._wrapMode = WrapMode.ONCE;\n    }\n  }\n\n  /**\n   * update animation states only\n   * @param {number} deltaTime\n   */\n  public updateState(deltaTime: number) {\n    if (!this._animClip || !this._isPlaying) {\n      return;\n    }\n\n    // 更新Animation Layer 的权重\n    if (this.isFading) {\n      this.fadeDeltaTime += deltaTime;\n      this.layerWeight = 1.0 - this.fadeDeltaTime / this.fadeDuration;\n      if (this.layerWeight <= 0) {\n        this._isPlaying = false;\n      }\n    } else if (this.crossFadeDuration) {\n      this.crossFadeDeltaTime += deltaTime;\n      this.layerWeight = this.crossFadeDeltaTime / this.crossFadeDuration;\n      if (this.layerWeight >= 1.0) {\n        this.layerWeight = 1.0;\n        delete this.crossFadeDuration;\n      }\n    }\n\n    deltaTime = deltaTime / 1000;\n    this._activeEvents(deltaTime);\n\n    // -- update channelStates\n    const count = this._animClip.getChannelCount();\n    let playingCount = 0;\n    for (let i = count - 1; i >= 0; i--) {\n      if (this._updateChannelState(deltaTime, i)) {\n        playingCount++;\n      }\n    }\n\n    if (playingCount === 0) {\n      this._isPlaying = false;\n\n      if (this.isMixLayer) {\n        this.removeMixWeight();\n      }\n    }\n  }\n\n  /**\n   * @return channel layer weight\n   * @param {number} channelIndex\n   */\n  public getChannelLayerWeight(channelIndex: number): number {\n    if ((this.hasMixLayer || this.isMixLayer) && channelIndex < this._channelStates.length) {\n      const mixWeight = this._channelStates[channelIndex].mixWeight;\n      const layerWeight = this.isMixLayer ? this.mixTagetLayer.layerWeight : this.layerWeight;\n      return mixWeight * layerWeight;\n    }\n    return this.layerWeight;\n  }\n\n  /**\n   * @return channel value\n   * @param {number} channelIndex\n   */\n  public getChannelValue(channelIndex: number) {\n    return this._channelStates[channelIndex].currentValue;\n  }\n\n  /**\n   * 触发动画事件\n   */\n  public triggerEvents() {\n    this._activedEvents &&\n      this._activedEvents.forEach((event) => {\n        this.trigger(event);\n      });\n\n    this._activedEvents.length = 0;\n  }\n\n  /**\n   * 跳转到某一帧\n   * @param {number} frameTime\n   */\n  public jumpToFrame(frameTime: number) {\n    const count = this._animClip.getChannelCount();\n    for (let i = count - 1; i >= 0; i--) {\n      // 1. - clear pre frameTime\n      const channelState = this._channelStates[i];\n      channelState.frameTime = 0;\n\n      // 2. - update new frameTime\n      this._updateChannelState(frameTime, i);\n    }\n  }\n\n  /**\n   * update state and value of channel\n   * @param {float} deltaTime\n   * @param {number} channelIndex\n   * @private\n   */\n  public _updateChannelState(deltaTime, channelIndex) {\n    const animClip = this._animClip;\n    const channelState = this._channelStates[channelIndex];\n    const animClipLength = animClip.getChannelTimeLength(channelIndex);\n\n    channelState.frameTime += deltaTime;\n    if (channelState.frameTime > animClipLength) {\n      switch (this._wrapMode) {\n        case WrapMode.ONCE:\n          channelState.frameTime = animClipLength;\n          break;\n        case WrapMode.LOOP:\n          channelState.frameTime = channelState.frameTime % this._animClipLength;\n          break;\n        default:\n          Logger.error(\"Unknown Anim wrap Mode: \" + this._wrapMode);\n      }\n    } // end of if\n\n    if (channelState.mixWeight && channelState.mixWeight === 0) {\n      return true;\n    }\n\n    const frameTime = Math.min(channelState.frameTime, animClipLength);\n    const lerpState = this._getKeyAndAlpha(animClip.getChannelObject(channelIndex), frameTime);\n    channelState.currentValue = animClip.evaluate(\n      channelState.currentValue,\n      channelIndex,\n      lerpState.currentKey,\n      lerpState.nextKey,\n      lerpState.alpha\n    );\n\n    if (this._wrapMode === WrapMode.ONCE && channelState.frameTime >= animClipLength) {\n      return false;\n    }\n    return true;\n  }\n  // -- private ----------------------------------------------------------\n  /**\n   * @param {Object} add animation events\n   * @private\n   */\n  private _addEvents(options: any) {\n    this.removeAllEventListeners();\n\n    this._frameEvents = [];\n    if (options.events) {\n      let frameEventIndex = 0;\n      for (let i = options.events.length - 1; i >= 0; i--) {\n        const event = options.events[i];\n        let eventType = event.type;\n        if (event.type === AnimationEvent.FRAME_EVENT) {\n          eventType = \"frameEvent\" + frameEventIndex;\n          frameEventIndex++;\n          this._frameEvents.push({\n            eventType,\n            triggerTime: event.triggerTime,\n            triggered: false\n          });\n        }\n        this.addEventListener(eventType, (e) => {\n          event.callback();\n        });\n      } // end of for\n    } // end of if\n  }\n\n  /**\n   * 激活动画事件\n   * @param {number} deltaTime\n   * @private\n   */\n  private _activeEvents(deltaTime: number) {\n    // 触发Frame Event\n    const index = this._animClip.durationIndex;\n\n    if (this._frameEvents.length > 0 && this._channelStates.length > 0) {\n      const curFrameTime = this._channelStates[index].frameTime + deltaTime;\n      for (let i = this._frameEvents.length - 1; i >= 0; i--) {\n        const frameEvent = this._frameEvents[i];\n        if (!frameEvent.triggered && curFrameTime > frameEvent.triggerTime) {\n          this._activedEvents.push(new Event(frameEvent.eventType, this));\n          frameEvent.triggered = true;\n        }\n      }\n    }\n\n    if (this._channelStates.length > 0 && this._channelStates[index].frameTime + deltaTime >= this._animClip.duration) {\n      if (this._wrapMode === WrapMode.LOOP) {\n        // 重置Frame Event状态\n        if (this._frameEvents.length > 0) {\n          for (let i = this._frameEvents.length - 1; i >= 0; i--) {\n            this._frameEvents[i].triggered = false;\n          }\n        }\n        // 激活Loop End Event\n        if (this.hasEvent(AnimationEvent.LOOP_END)) {\n          this._activedEvents.push(new Event(AnimationEvent.LOOP_END, this));\n        }\n      } else if (this.hasEvent(AnimationEvent.FINISHED)) {\n        // 激活Finish Event\n        this._activedEvents.push(new Event(AnimationEvent.FINISHED, this));\n      }\n    }\n  }\n\n  /**\n   * update state of channel\n   * @param {Entity} rootNode\n   * @param {object} target\n   * @private\n   */\n  private _findChannelTarget(rootNode: Entity, target: any): Entity | Component {\n    const targetID = target.id;\n    let targetSceneObject: Entity = null;\n    if (rootNode.name === targetID) {\n      targetSceneObject = rootNode;\n    } else {\n      targetSceneObject = rootNode.findByName(targetID);\n    }\n\n    if (target.path === \"weights\") {\n      return targetSceneObject.getComponent(SkinnedMeshRenderer);\n    } else {\n      return targetSceneObject;\n    }\n  }\n\n  /**\n   * @return current and next key id, current alpha\n   * @param {number} channel\n   * @param {float} time\n   * @private\n   */\n  private _getKeyAndAlpha(channel, time: number) {\n    let keyTime = 0;\n    let currentKey = 0;\n    let nextKey = 0;\n\n    const timeKeys = channel.sampler.input;\n    const numKeys = timeKeys.length;\n    for (let i = numKeys - 1; i >= 0; i--) {\n      if (time > timeKeys[i]) {\n        keyTime = time - timeKeys[i];\n        currentKey = i;\n        break;\n      }\n    }\n\n    nextKey = currentKey + 1;\n    if (nextKey >= numKeys) {\n      switch (this._wrapMode) {\n        case WrapMode.ONCE:\n          nextKey = numKeys - 1;\n          break;\n        case WrapMode.LOOP:\n          nextKey = 0;\n          break;\n      }\n    }\n\n    const keyLength = timeKeys[nextKey] - timeKeys[currentKey];\n    const alpha = nextKey === currentKey || keyLength < 0.00001 ? 1 : keyTime / keyLength;\n\n    return {\n      currentKey,\n      nextKey,\n      alpha\n    };\n  }\n}\n","import { Quaternion, Vector3 } from \"@alipay/o3-math\";\nimport { AnimationClip, TagetType } from \"./AnimationClip\";\nimport { AnimationLayer } from \"./AnimationLayer\";\nimport { AnimationOptions, IChannelTarget } from \"./types\";\nimport { Component } from \"../Component\";\nimport { Logger } from \"../base/Logger\";\nimport { Entity } from \"../Entity\";\nimport { SkinnedMeshRenderer } from \"../mesh/SkinnedMeshRenderer\";\n/**\n * 播放动画片段，动画片段所引用的对象必须是此组件的 Entity 及其子物体\n */\nexport class Animation extends Component {\n  /**\n   * 缩放播放速度\n   * @member {number}\n   */\n  get timeScale(): number {\n    return this._timeScale;\n  }\n  /**\n   * 设置播放速度\n   */\n  set timeScale(val: number) {\n    if (val > 0) {\n      this._timeScale = val;\n    }\n  }\n\n  /**\n   * @param {Float32Array | number} outValue\n   * @param {number} startValue\n   * @param {number} endValue\n   * @param {number} outputSize\n   * @param {number} alpha\n   * @private\n   */\n  public static lerp(\n    outValue: number | Float32Array,\n    startValue: number | Float32Array,\n    endValue: number | Float32Array,\n    alpha: number,\n    outputSize: number\n  ): number | Float32Array {\n    switch (outputSize) {\n      case 1:\n        outValue = <number>startValue * (1 - alpha) + <number>endValue * alpha;\n        break;\n      case 4:\n        const start = new Quaternion(...(startValue as Float32Array));\n        const end = new Quaternion(...(endValue as Float32Array));\n        const quat = new Quaternion();\n        Quaternion.slerp(start, end, alpha, quat);\n        outValue[0] = quat.x;\n        outValue[1] = quat.y;\n        outValue[2] = quat.z;\n        outValue[3] = quat.w;\n        break;\n      default:\n        for (let i = outputSize; i >= 0; i--) {\n          outValue[i] = startValue[i] * (1 - alpha) + endValue[i] * alpha;\n        }\n        break;\n    } // end of switch\n\n    return outValue;\n  }\n\n  /** @internal */\n  _onUpdateIndex: number = -1;\n\n  private _animSet;\n\n  private _animLayers: AnimationLayer[];\n\n  private _timeScale: number;\n\n  private _channelTargets: IChannelTarget[] | false;\n  /**\n   * @constructor\n   * @param {Entity} entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._animSet = {}; // name : AnimationClip\n    this._animLayers = [new AnimationLayer()];\n    this._timeScale = 1.0;\n  }\n\n  /**\n   * 动画更新计算\n   * @param {number} deltaTime\n   * @private\n   */\n  public update(deltaTime: number) {\n    if (!this.isPlaying()) {\n      return;\n    }\n\n    deltaTime = deltaTime * this._timeScale;\n\n    // update state\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      const animLayer = this._animLayers[i];\n      animLayer.updateState(deltaTime);\n    }\n\n    // update value\n    this._updateValues();\n\n    // trigger events and destroy no use layer\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      const animLayer = this._animLayers[i];\n      animLayer.triggerEvents();\n      if (!animLayer.isPlaying && (animLayer.isFading || animLayer.isMixLayer)) {\n        this._animLayers.splice(i, 1);\n        this._removeRefMixLayers(animLayer);\n      }\n    }\n  }\n\n  /**\n   * 加载一个animClip\n   * @param {AnimationClip} animClip 动画片段对象\n   * @param {string} name 动画片段名称\n   */\n  public addAnimationClip(animClip: AnimationClip, name: string) {\n    this._animSet[name] = animClip;\n  }\n\n  /**\n   * 移除一个animClip\n   * @param {string} name 动画片段的名称\n   */\n  public removeAnimationClip(name: string) {\n    const animClip = this._animSet[name];\n    if (animClip) {\n      delete this._animSet[name];\n    }\n  }\n\n  /**\n   * 取得指定的 AnimationClip 的时间长度\n   * @param {string} name 动画片段的名称\n   * @return {number}\n   */\n  public getAnimationClipLength(name: string): number {\n    const animClip = this._animSet[name];\n    if (animClip) {\n      return animClip.getChannelTimeLength(0);\n    } else {\n      return 0.0;\n    }\n  }\n\n  /**\n   * 取得指定的 AnimationClip\n   * @param {string} name 动画片段的名称\n   * @return {number}\n   */\n  public getAnimationClip(name: string): AnimationClip {\n    return this._animSet[name] || null;\n  }\n\n  /**\n   * 是否正在播放\n   * @return {boolean}\n   */\n  public isPlaying(): boolean {\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (this._animLayers[i].isPlaying) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * 动画事件参数\n   * @typedef {Object} AnimationEventOpt\n   * @param {AnimationEvent} type 动画事件类型\n   * @param {function} callback 回调\n   * @param {float} triggerTime 触发时间，只有type === AnimationEvent.FRAME_EVENT 时配置\n   */\n\n  /**\n   * 配置动画播放的参数\n   * @typedef {Object} AnimationOptions\n   * @param {WrapMode} wrapMode 动画播放方式，LOOP：循环，ONCE：仅一次\n   * @param {AnimationEventOpt[]} events 动画事件\n   */\n\n  /**\n   * 播放动画\n   * @param {String} name 动画片段的名称\n   * @param {AnimationOptions} options 动画参数\n   */\n  public playAnimationClip(name: string, options?: AnimationOptions) {\n    const animClip = this._animSet[name];\n    if (!animClip) {\n      Logger.error(\"can not find anim clip: \" + name);\n      return;\n    }\n\n    let animLayer: AnimationLayer = null;\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (!this._animLayers[i].isFading && !this._animLayers[i].isMixLayer) {\n        animLayer = this._animLayers[i];\n        break;\n      }\n    }\n\n    if (!animLayer) {\n      animLayer = new AnimationLayer();\n      this._animLayers.push(animLayer);\n    }\n    this._removeRefMixLayers(animLayer);\n    this._channelTargets = animLayer.play(animClip, this.entity, options);\n  }\n\n  /**\n   * 动画混合过渡，因为动画混合过渡是一个比较消耗性能的操作，这里使用单独的接口crossFade\n   * @param {string} name 动画片段的名称\n   * @param {number} crossFadeDuration 动画切换需要的毫秒数\n   * @param {AnimationOptions} options 动画参数\n   */\n  public crossFade(name: string, crossFadeDuration: number, options: AnimationOptions) {\n    const animClip = this._animSet[name];\n    if (!animClip) {\n      Logger.error(\"can not find anim clip: \" + name);\n      return;\n    }\n\n    if (!crossFadeDuration || crossFadeDuration < 0) {\n      Logger.error(\"crossFadeDuration can not less than 0!\");\n      return;\n    }\n\n    // 寻找可以进行混合的目标\n    let targetAnimLayer = null;\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (this._animLayers[i].canMix(animClip, this.entity)) {\n        targetAnimLayer = this._animLayers[i];\n        break;\n      }\n    }\n\n    if (targetAnimLayer) {\n      // 先清除还未结束的crossFading动作\n      for (let i = this._animLayers.length - 1; i >= 0; i--) {\n        if (this._animLayers[i].isFading) {\n          this._animLayers.splice(i, 1);\n        }\n      }\n\n      targetAnimLayer.isFading = true;\n      targetAnimLayer.fadeDuration = crossFadeDuration;\n      targetAnimLayer.fadeDeltaTime = 0;\n\n      const animLayer = new AnimationLayer();\n      animLayer.crossFadeDuration = crossFadeDuration;\n      animLayer.crossFadeDeltaTime = 0;\n      animLayer.play(animClip, this.entity, options);\n      this._animLayers.push(animLayer);\n    } else {\n      this.playAnimationClip(name, options);\n    }\n  }\n\n  /**\n   * 动画混合切换，因为动画混合是一个比较消耗性能的操作，这里使用单独的接口mix\n   * @param {string} name 混合动画片段的名称\n   * @param {string} mixBoneName 混合动画对名为mixBoneName的骨骼以及附属在其上的子骨骼生效\n   * @param {AnimationOptions} options 动画参数\n   */\n  public mix(name: string, mixBoneName: string, options: AnimationOptions) {\n    const animClip = this._animSet[name];\n    if (!animClip) {\n      Logger.error(\"can not find anim clip: \" + name);\n      return;\n    }\n\n    const mixNode = this.entity.findByName(mixBoneName);\n    if (!mixNode) {\n      Logger.error(\"can not find mix bone!\");\n      return;\n    }\n\n    // 寻找可以进行混合的目标\n    let targetAnimLayer = null;\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (this._animLayers[i].canMix(animClip, this.entity)) {\n        targetAnimLayer = this._animLayers[i];\n        break;\n      }\n    }\n\n    if (targetAnimLayer) {\n      this._removeRefMixLayers(null, mixNode);\n\n      targetAnimLayer.hasMixLayer = true;\n\n      const animLayer = new AnimationLayer();\n      animLayer.isMixLayer = true;\n      animLayer.mixTagetLayer = targetAnimLayer;\n      animLayer.mixEntity = mixNode;\n      animLayer.mix(animClip, targetAnimLayer, this.entity, mixNode, options);\n      this._animLayers.push(animLayer);\n    }\n  }\n\n  /**\n   * 停止播放\n   * @param {boolean} rightnow, stop it immediately, or it will stop at the end of the clip\n   */\n  public stop(rightnow: boolean) {\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (this._animLayers[i].isFading) {\n        this._animLayers.splice(i, 1);\n      } else {\n        this._animLayers[i].stop(rightnow);\n      }\n    }\n  }\n\n  /**\n   * 跳转到动画的某一帧，立刻生效\n   * @param {float} frameTime\n   */\n  public jumpToFrame(frameTime: number) {\n    frameTime = frameTime / 1000;\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      this._animLayers[i].jumpToFrame(frameTime);\n    }\n\n    this._updateValues();\n  }\n\n  // -- private ----------------------------------------------------------\n  /**\n   * 移除和mixTargetLayer关联的混合动画\n   * @param {AnimationLayer} mixTargetLayer\n   * @private\n   */\n  public _removeRefMixLayers(targetLayer: AnimationLayer, mixNode?) {\n    if (targetLayer && targetLayer.hasMixLayer) {\n      for (let i = this._animLayers.length - 1; i >= 0; i--) {\n        const animLayer = this._animLayers[i];\n        if (animLayer.isMixLayer && animLayer.mixTagetLayer === targetLayer) {\n          animLayer.removeMixWeight();\n          this._animLayers.splice(i, 1);\n        }\n      }\n    }\n\n    if (mixNode) {\n      for (let i = this._animLayers.length - 1; i >= 0; i--) {\n        const animLayer = this._animLayers[i];\n        if (\n          animLayer.isMixLayer &&\n          (animLayer.mixEntity === mixNode ||\n            animLayer.mixEntity.findByName(mixNode) ||\n            mixNode.findByName(animLayer.mixEntity))\n        ) {\n          animLayer.removeMixWeight();\n          this._animLayers.splice(i, 1);\n        }\n      }\n    }\n  }\n\n  /**\n   * update animation value\n   * @private\n   */\n  public _updateValues() {\n    if (this._animLayers.length === 0 || !this._channelTargets) {\n      return;\n    }\n\n    for (let i = this._channelTargets.length - 1; i >= 0; i--) {\n      const channelTarget = this._channelTargets[i];\n      const val = this._getChannelValue(i, channelTarget.outputSize);\n      const targetObject = channelTarget.targetObject;\n      const path = channelTarget.path;\n\n      if (path === \"weights\") {\n        // SkinnedMeshRenderer\n        (targetObject as SkinnedMeshRenderer).setWeights(val as any);\n      } else {\n        const v = val as Float32Array;\n        //CM: 临时优化 val 应该为Vector3/Quaternion类型，避免转换开销\n        //CM: 未来Animation统一所有动画系统后 非常用pathType为other，继续走反射\n        //CM: 由于pathType种类比较少，未来可以通过预分类避免switch开销，比如骨骼动画就三种类型\n        const transform = (<Entity>targetObject).transform;\n        switch (channelTarget.pathType) {\n          case TagetType.position:\n            const position: Vector3 = transform.position;\n            position.setValue(v[0], v[1], v[2]);\n            transform.position = position;\n            break;\n          case TagetType.rotation:\n            const rotation: Quaternion = transform.rotationQuaternion;\n            rotation.setValue(v[0], v[1], v[2], v[3]);\n            transform.rotationQuaternion = rotation;\n            break;\n          case TagetType.scale:\n            const scale: Vector3 = transform.scale;\n            scale.setValue(v[0], v[1], v[2]);\n            transform.scale = scale;\n            break;\n          default:\n            targetObject[path] = val;\n        }\n      }\n    } // end of for\n  }\n\n  /**\n   * @return channel value\n   * @param {number} channelIndex\n   * @param {number} outputSize\n   * @private\n   */\n  public _getChannelValue(channelIndex: number, outputSize: number): number | boolean | Float32Array {\n    const weights = [];\n    const values = [];\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      const weight = this._animLayers[i].getChannelLayerWeight(channelIndex);\n      if (weight > 0) {\n        weights.push(weight);\n        values.push(this._animLayers[i].getChannelValue(channelIndex));\n      }\n    }\n\n    if (values.length === 1) {\n      // 一个值生效，直接返回结果\n      return values[0];\n    } else if (values.length === 2) {\n      // 两个值生效，插值返回\n      return Animation.lerp(values[0], values[0], values[1], weights[1], outputSize);\n    }\n\n    // 其他情况，是暂时处理不了的\n    Logger.error(\"Can not get channel value!\");\n    return false;\n  }\n\n  /**\n   * 被激活时调用\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    this.engine._componentsManager.addOnUpdateAnimations(this);\n  }\n\n  /**\n   * entity inActiveInHierarchy时 或 组件销毁前调用\n   * @override\n   * @internal\n   */\n  _onDisable(): void {\n    this.engine._componentsManager.removeOnUpdateAnimations(this);\n  }\n\n  /**\n   * @todo 临时方案，未来组件应该统一使用浅拷贝\n   * @override\n   * @internal\n   */\n  _cloneTo(destComponent: Component): void {\n    for (let aniClip in this._animSet) {\n      (<Animation>destComponent)._animSet[aniClip] = this._animSet[aniClip];\n    }\n  }\n}\n","import { Vector4 } from \"@alipay/o3-math\";\nimport { DataType } from \"../base/Constant\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { Material } from \"../material/Material\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport { TechniqueStates } from \"../material/type\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport VertexShader from \"./shader/Vertex.glsl\";\n\n/**\n * 材质的通用参数管理，其他常用材质的基类\n * @class\n */\nexport abstract class CommonMaterial extends Material {\n  private _ambientLightCount: number;\n  public renderStates: TechniqueStates = {\n    enable: [],\n    disable: [],\n    functions: {}\n  };\n\n  protected abstract _generateTechnique();\n\n  constructor(name: string) {\n    super(name);\n\n    this.emission = new Vector4(0, 0, 0, 1);\n\n    this.ambient = new Vector4(0, 0, 0, 1);\n\n    /**\n     * Technique 渲染状态控制\n     * @member {object}\n     */\n    this.renderStates = {};\n  }\n\n  /**\n   * 自发光属性\n   * @member {Vector4|Texture2D}\n   */\n  get emission(): Vector4 {\n    return this.getValue(\"u_emission\");\n  }\n\n  set emission(val: Vector4) {\n    this.setValue(\"u_emission\", val);\n  }\n\n  /**\n   * 环境光反射属性\n   * @member {vec4|Texture2D}\n   */\n  get ambient(): Vector4 {\n    return this.getValue(\"u_ambient\");\n  }\n\n  set ambient(val: Vector4) {\n    this.setValue(\"u_ambient\", val);\n  }\n\n  prepareDrawing(context, component, primitive) {\n    const camera = context.camera;\n    const lightMgr = camera.scene.findFeature(LightFeature);\n\n    /** 光源 uniform values */\n    lightMgr.bindMaterialValues(this);\n\n    const { ambientLightCount } = lightMgr.lightSortAmount;\n\n    if (!this._technique || this._ambientLightCount !== ambientLightCount) {\n      this._ambientLightCount = ambientLightCount;\n      this._generateTechnique();\n      this.bindLightUniformDefine(camera);\n    }\n    super.prepareDrawing(context, component, primitive);\n  }\n\n  /**\n   * 绑定灯光相关 Uniform Define\n   * */\n  bindLightUniformDefine(camera) {\n    const lightMgr = camera.scene.findFeature(LightFeature);\n    this._technique.uniforms = {\n      ...lightMgr.getUniformDefine(),\n      ...this._technique.uniforms\n    };\n  }\n\n  /**\n   * 生成内部的 Technique 对象\n   * @private\n   */\n  _internalGenerate(name, fragmentShader) {\n    const customMacros = this._generateMacros();\n    const uniforms = this._generateFragmentUniform();\n\n    //--\n    const tech = new RenderTechnique(name);\n    tech.isValid = true;\n    tech.uniforms = uniforms;\n    tech.attributes = {};\n    tech.states = this.renderStates;\n    tech.customMacros = customMacros;\n    tech.vertexShader = VertexShader;\n    tech.fragmentShader = fragmentShader;\n\n    //-- set default values\n    this._technique = tech;\n  }\n\n  _generateMacros() {\n    const macros = [];\n\n    if (this.emission instanceof Texture2D) macros.push(\"O3_EMISSION_TEXTURE\");\n\n    if (this.ambient instanceof Texture2D) macros.push(\"O3_AMBIENT_TEXTURE\");\n\n    if (this._ambientLightCount) {\n      macros.push(\"O3_HAS_AMBIENT_LIGHT\");\n    }\n    return macros;\n  }\n\n  /**\n   * 根据自身的参数类型，生成相应的 Fragment Shader 所需的 Uniform 定义\n   * @private\n   */\n  _generateFragmentUniform() {\n    const fragmentUniform = {\n      u_emission: {\n        name: \"u_emission\",\n        type: DataType.FLOAT_VEC4\n      },\n      u_ambient: {\n        name: \"u_ambient\",\n        type: DataType.FLOAT_VEC4\n      }\n    };\n\n    if (this.emission instanceof Texture2D) {\n      fragmentUniform.u_emission.type = DataType.SAMPLER_2D;\n    }\n    if (this.ambient instanceof Texture2D) {\n      fragmentUniform.u_ambient.type = DataType.SAMPLER_2D;\n    }\n\n    return fragmentUniform;\n  }\n}\n","import { CommonMaterial } from \"./CommonMaterial\";\nimport ConstantShader from \"./shader/Constant.glsl\";\n\n/**\n * 显示固定颜色（不计算光照）的材质\n * color = <emission> + <ambient> * al\n */\nexport class ConstantMaterial extends CommonMaterial {\n  /**\n   * 生成内部所使用的 Technique 对象\n   * @private\n   */\n  _generateTechnique() {\n    this._internalGenerate(\"ConstantMaterial\", ConstantShader);\n  }\n}\n","import { Vector4 } from \"@alipay/o3-math\";\nimport { DataType } from \"../base/Constant\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { CommonMaterial } from \"./CommonMaterial\";\nimport LambertShader from \"./shader/Lambert.glsl\";\n\n/**\n * 实现 Lambert 光照模型的材质\n * color = <emission> + <ambient> * al + <diffuse> * max(N * L, 0)\n */\nexport class LambertMaterial extends CommonMaterial {\n  private _directLightCount;\n\n  /**\n   * Lambert 光照模型材质\n   * @param {String} name 名称\n   */\n  constructor(name) {\n    super(name);\n\n    this._directLightCount = 0;\n\n    this.diffuse = new Vector4(1, 1, 1, 1);\n  }\n\n  /**\n   * 环境光反射颜色\n   * @member {Vector4|Texture2D}\n   */\n  get diffuse() {\n    return this.getValue(\"u_diffuse\");\n  }\n\n  set diffuse(val) {\n    this.setValue(\"u_diffuse\", val);\n  }\n\n  /**\n   * 生成内部的 Technique 对象\n   * @private\n   */\n  _generateTechnique() {\n    this._internalGenerate(\"LambertMaterial\", LambertShader);\n  }\n\n  /**\n   * 重写基类方法，添加方向光计算\n   * @private\n   */\n  prepareDrawing(context, component, primitive) {\n    const camera = context.camera;\n    const scene = camera.scene;\n    const lightMgr = scene.findFeature(LightFeature);\n    const { directLightCount } = lightMgr.lightSortAmount;\n\n    if (this._technique === null || this._directLightCount != directLightCount) {\n      this._directLightCount = directLightCount;\n      this._generateTechnique();\n      this.bindLightUniformDefine(camera);\n    }\n\n    super.prepareDrawing(context, component, primitive);\n  }\n\n  /**\n   * 添加方向光相关的 uniform 定义\n   * @private\n   */\n  _generateFragmentUniform() {\n    let uniforms: any = {};\n\n    if (this.diffuse instanceof Texture2D) {\n      uniforms.u_diffuse = {\n        name: \"u_diffuse\",\n        type: DataType.SAMPLER_2D\n      };\n    } else {\n      uniforms.u_diffuse = {\n        name: \"u_diffuse\",\n        type: DataType.FLOAT_VEC4\n      };\n    }\n\n    const baseUniforms = super._generateFragmentUniform();\n    return Object.assign(baseUniforms, uniforms);\n  }\n\n  /**\n   * 根据方向光的个数，添加相应的宏定义\n   * @private\n   */\n  _generateMacros() {\n    const macros = super._generateMacros();\n\n    macros.push(\"O3_NEED_WORLDPOS\");\n\n    if (this._directLightCount > 0) macros.push(`O3_DIRECT_LIGHT_COUNT ${this._directLightCount}`);\n\n    if (this.diffuse instanceof Texture2D) macros.push(\"O3_DIFFUSE_TEXTURE\");\n\n    return macros;\n  }\n}\n","import { Vector4 } from \"@alipay/o3-math\";\nimport { DataType } from \"../base/Constant\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { CommonMaterial } from \"./CommonMaterial\";\nimport BlinnPhongShader from \"./shader/BlinnPhong.glsl\";\n\n/**\n * 实现 Blinn 光照模型的材质\n * https://dl.acm.org/citation.cfm?id=563893\n * color = <emission> + <ambient> * al + <diffuse> * max(N * L, 0) + <specular> * max(H * N, 0)^<shininess>\n */\nexport class BlinnPhongMaterial extends CommonMaterial {\n  private _directLightCount;\n  private _spotLightCount;\n  private _pointLightCount;\n\n  /**\n   * 实现 Blinn 光照模型的材质\n   * @param {String} name 名称\n   */\n  constructor(name) {\n    super(name);\n\n    this._directLightCount = 0;\n    this._pointLightCount = 0;\n    this._spotLightCount = 0;\n\n    this.diffuse = new Vector4(1, 1, 1, 1);\n\n    this.specular = new Vector4(1, 1, 1, 1);\n\n    this.shininess = 16.0;\n  }\n\n  /**\n   * 环境光反射颜色\n   * @member {Vector4|Texture2D}\n   */\n  get diffuse() {\n    return this.getValue(\"u_diffuse\");\n  }\n\n  set diffuse(val) {\n    this.setValue(\"u_diffuse\", val);\n  }\n\n  /**\n   * 高光反射颜色\n   * @member {Vector4|Texture2D}\n   */\n  get specular() {\n    return this.getValue(\"u_specular\");\n  }\n\n  set specular(val) {\n    this.setValue(\"u_specular\", val);\n  }\n\n  /**\n   * 高光系数，值越大高光效果越聚拢\n   * @member {float}\n   */\n  get shininess() {\n    return this.getValue(\"u_shininess\");\n  }\n\n  set shininess(val) {\n    this.setValue(\"u_shininess\", val);\n  }\n\n  /**\n   * 生成内部的 Technique 对象\n   * @private\n   */\n  _generateTechnique() {\n    this._internalGenerate(\"BlinnPhongMaterial\", BlinnPhongShader);\n  }\n\n  /**\n   * 获取宏\n   * @private\n   */\n  _generateMacros() {\n    const macros = super._generateMacros();\n\n    macros.push(\"O3_NEED_WORLDPOS\");\n\n    if (this.diffuse instanceof Texture2D) macros.push(\"O3_DIFFUSE_TEXTURE\");\n    if (this.specular instanceof Texture2D) macros.push(\"O3_SPECULAR_TEXTURE\");\n    if (this._directLightCount > 0) macros.push(`O3_DIRECT_LIGHT_COUNT ${this._directLightCount}`);\n    if (this._pointLightCount > 0) macros.push(`O3_POINT_LIGHT_COUNT ${this._pointLightCount}`);\n    if (this._spotLightCount > 0) macros.push(`O3_SPOT_LIGHT_COUNT ${this._spotLightCount}`);\n\n    return macros;\n  }\n\n  /**\n   * 重写基类方法，添加方向光计算\n   * @private\n   */\n  prepareDrawing(context, component, primitive) {\n    const camera = context.camera;\n    const scene = camera.scene;\n    const lightMgr = scene.findFeature(LightFeature);\n    const { directLightCount, pointLightCount, spotLightCount } = lightMgr.lightSortAmount;\n\n    if (\n      this._technique === null ||\n      this._directLightCount != directLightCount ||\n      this._pointLightCount != pointLightCount ||\n      this._spotLightCount != spotLightCount\n    ) {\n      this._directLightCount = directLightCount;\n      this._pointLightCount = pointLightCount;\n      this._spotLightCount = spotLightCount;\n\n      this._generateTechnique();\n      this.bindLightUniformDefine(camera);\n    }\n\n    super.prepareDrawing(context, component, primitive);\n  }\n\n  /**\n   * 添加方向光相关的 uniform 定义\n   * @private\n   */\n  _generateFragmentUniform() {\n    let uniforms: any = {};\n\n    if (this.diffuse instanceof Texture2D) {\n      uniforms.u_diffuse = {\n        name: \"u_diffuse\",\n        type: DataType.SAMPLER_2D\n      };\n    } else {\n      uniforms.u_diffuse = {\n        name: \"u_diffuse\",\n        type: DataType.FLOAT_VEC4\n      };\n    }\n\n    if (this.specular instanceof Texture2D) {\n      uniforms.u_specular = {\n        name: \"u_specular\",\n        type: DataType.SAMPLER_2D\n      };\n    } else {\n      uniforms.u_specular = {\n        name: \"u_specular\",\n        type: DataType.FLOAT_VEC4\n      };\n    }\n\n    uniforms.u_shininess = {\n      name: \"u_shininess\",\n      type: DataType.FLOAT\n    };\n\n    const baseUniforms = super._generateFragmentUniform();\n    return Object.assign(baseUniforms, uniforms);\n  }\n}\n","import { DataType, RenderState } from \"../base/Constant\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { CommonMaterial } from \"./CommonMaterial\";\nimport FRAG_SHADER from \"./shader/Texture.glsl\";\n\n/**\n * 无光照贴图材质\n */\nexport class TextureMaterial extends CommonMaterial {\n  static TECH_NAME = \"Texture\";\n  static DISABLE_SHARE = true;\n\n  /**\n   * 构造函数\n   * @param {string} name 名称\n   */\n  constructor(name) {\n    super(name || \"TextureMaterial\");\n  }\n\n  _generateTechnique() {\n    this._internalGenerate(\"Texture\", FRAG_SHADER);\n  }\n\n  /**\n   * 设定材质参数值\n   * @param {string} name 参数名称\n   * @param {*} value 参数值\n   */\n  setValue(name, value) {\n    if (name === \"doubleSided\") {\n      this._setDoubleSidedDisplay(value);\n    }\n\n    super.setValue(name, value);\n  }\n\n  /**\n   * 纹理贴图\n   * @member {Texture2D}\n   */\n  set texture(v) {\n    this.setValue(\"u_diffuse\", v);\n  }\n  get texture() {\n    return this.getValue(\"u_diffuse\");\n  }\n\n  /**\n   * 是否双面显示\n   * @member {boolean}\n   */\n  set doubleSided(v) {\n    this.setValue(\"doubleSided\", v);\n  }\n  get doubleSided() {\n    return this.getValue(\"doubleSided\");\n  }\n\n  /**\n   * 添加 uniform 定义\n   * @private\n   */\n  _generateFragmentUniform() {\n    const uniforms: any = {};\n\n    if (this.texture instanceof Texture2D) {\n      uniforms.u_diffuse = {\n        name: \"u_diffuse\",\n        paramName: \"_MainTex\",\n        type: DataType.SAMPLER_2D\n      };\n    }\n    return {\n      ...super._generateFragmentUniform(),\n      ...uniforms\n    };\n  }\n\n  _generateMacros() {\n    const macros = super._generateMacros();\n\n    if (this.texture instanceof Texture2D) macros.push(\"O3_DIFFUSE_TEXTURE\");\n\n    return macros;\n  }\n\n  /**\n   * 设置材质是否双面显示\n   * @private\n   */\n  _setDoubleSidedDisplay(value) {\n    this._technique.states.disable = [];\n\n    if (value) {\n      this._technique.states.disable.push(RenderState.CULL_FACE);\n    }\n  }\n}\n","import { BlendFunc, DataType, MaterialType, RenderState } from \"../base/Constant\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { CommonMaterial } from \"./CommonMaterial\";\nimport FRAG_SHADER from \"./shader/Texture.glsl\";\n\n/**\n * 支持透明的无光照贴图材质\n */\nexport class TransparentMaterial extends CommonMaterial {\n  static TECH_NAME = \"Transparent\";\n  static DISABLE_SHARE = true;\n\n  /**\n   * 构造函数\n   * @param {string} name 名称\n   */\n  constructor(name) {\n    super(name || \"TransparentMaterial\");\n  }\n\n  _generateTechnique() {\n    this.renderStates = {\n      enable: [RenderState.BLEND],\n      disable: [RenderState.CULL_FACE],\n      functions: {\n        blendFunc: [BlendFunc.SRC_ALPHA, BlendFunc.ONE_MINUS_SRC_ALPHA],\n        depthMask: [false]\n      }\n    };\n    this.renderType = MaterialType.TRANSPARENT;\n\n    this._internalGenerate(\"Transparent\", FRAG_SHADER);\n  }\n\n  /**\n   * 纹理贴图\n   * @member {Texture2D}\n   */\n  set texture(v) {\n    this.setValue(\"u_diffuse\", v);\n  }\n\n  get texture() {\n    return this.getValue(\"u_diffuse\");\n  }\n\n  /**\n   * 添加 uniform 定义\n   * @private\n   */\n  _generateFragmentUniform() {\n    const uniforms: any = {};\n    if (this.texture instanceof Texture2D) {\n      uniforms.u_diffuse = {\n        name: \"u_diffuse\",\n        paramName: \"_MainTex\",\n        type: DataType.SAMPLER_2D\n      };\n    }\n    return {\n      ...super._generateFragmentUniform(),\n      ...uniforms\n    };\n  }\n\n  _generateMacros() {\n    const macros = super._generateMacros();\n\n    if (this.texture instanceof Texture2D) macros.push(\"O3_DIFFUSE_TEXTURE\");\n\n    return macros;\n  }\n}\n","import { BlendFunc, DataType, RenderState, UniformSemantic } from \"../base/Constant\";\nimport { Material } from \"../material/Material\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport { TechniqueStates } from \"../material/type\";\nimport { DisableConfig, EnableConfig, FunctionConfig } from \"./type\";\n\nexport class ShaderMaterial extends Material {\n  // Vertex Shader 代码\n  public vertexShader: string = \"\";\n  // Fragment Shader 代码\n  public fragmentShader: string = \"\";\n  // 是否可用\n  public isValid: boolean = true;\n  // Attribute记录对象\n  public attributes = {};\n  // Unifrom记录数组\n  private _uniforms = ShaderMaterial.commonUniforms;\n  // 渲染状态控制对象\n  private _renderStates: TechniqueStates = {\n    enable: [],\n    disable: [],\n    functions: {}\n  };\n  // 渲染状态控制对象中的 enable 配置项\n  private _enableConfig: EnableConfig = [];\n  // 渲染状态控制对象中的 disable 配置项\n  private _disableConfig: DisableConfig = [];\n  // 渲染状态控制对象中的 function 配置项\n  private _functionsConfig: FunctionConfig = {\n    blendFunc: [BlendFunc.SRC_ALPHA, BlendFunc.ONE_MINUS_SRC_ALPHA]\n  };\n\n  constructor(name) {\n    super(name);\n  }\n\n  // 开始渲染指定对象\n  prepareDrawing(context, component, primitive) {\n    const camera = context.camera;\n    if (!this._technique) {\n      const tech = this._generateTechnique(camera, component, primitive);\n      this._technique = tech;\n    }\n    super.prepareDrawing(context, component, primitive);\n  }\n\n  // 更新technique\n  updateTechnique() {\n    this._technique = null;\n  }\n\n  // 生成内部的 Technique 对象\n  _generateTechnique(camera, component, primitive) {\n    const tech = new RenderTechnique(\"ShaderMaterial\");\n\n    tech.isValid = this.isValid;\n    tech.uniforms = this.uniforms;\n    tech.attributes = this.attributes;\n    tech.states = this.renderStates;\n    tech.vertexShader = this.vertexShader;\n    tech.fragmentShader = this.fragmentShader;\n    return tech;\n  }\n\n  addState(key: string, state: Array<any>) {\n    this.renderStates[key] = union(this.renderStates[key], state);\n  }\n\n  removeState(key: string, state: any) {\n    this.renderStates[key] = this.renderStates[key].filter((value) => value !== state);\n  }\n\n  get renderStates() {\n    return this._renderStates;\n  }\n\n  set renderStates(value) {\n    const { enable = [], disable = [], functions = {} } = value;\n    // 为了防止冲突，把预置的几个属性放在_enableConfig里面，此处需过滤掉\n    const enableState = enable.filter((value) => ShaderMaterial.commonEnable.indexOf(value) < 0);\n    const disableState = disable.filter((value) => ShaderMaterial.commonDisable.indexOf(value) < 0);\n    this._renderStates.enable = union(enableState, this._enableConfig);\n    this._renderStates.disable = union(disableState, this._disableConfig);\n    this._renderStates.functions = Object.assign({}, functions, this._functionsConfig);\n  }\n\n  get uniforms() {\n    return this._uniforms;\n  }\n\n  set uniforms(value) {\n    this._uniforms = Object.assign({}, ShaderMaterial.commonUniforms, value);\n  }\n\n  // 是否开启片元的颜色融合计算\n  set blend(value: boolean) {\n    if (value) {\n      this._enableConfig = union(this._enableConfig, [RenderState.BLEND]);\n    } else {\n      this._enableConfig = this._enableConfig.filter((state) => state !== RenderState.BLEND);\n      this.removeState(\"enable\", RenderState.BLEND);\n    }\n    this.renderStates = this._renderStates;\n  }\n\n  // 混合源因子\n  set blendSrcFactor(value: string) {\n    this._functionsConfig.blendFunc[0] = value;\n    this.renderStates = this._renderStates;\n  }\n\n  // 混合目标因子\n  set blendDstFactor(value: string) {\n    this._functionsConfig.blendFunc[1] = value;\n    this.renderStates = this._renderStates;\n  }\n\n  // 是否双面显示\n  set doubleSide(value: boolean) {\n    if (value) {\n      this._disableConfig = union(this._disableConfig, [RenderState.CULL_FACE]);\n    } else {\n      this._disableConfig = this._disableConfig.filter((state) => state !== RenderState.CULL_FACE);\n      this.removeState(\"disable\", RenderState.CULL_FACE);\n    }\n    this.renderStates = this._renderStates;\n  }\n\n  // 是否开启深度测试\n  set depthTest(value: boolean) {\n    if (!value) {\n      this._disableConfig = union(this._disableConfig, [RenderState.DEPTH_TEST]);\n    } else {\n      this._disableConfig = this._disableConfig.filter((state) => state !== RenderState.DEPTH_TEST);\n      this.removeState(\"disable\", RenderState.DEPTH_TEST);\n    }\n    this.renderStates = this._renderStates;\n  }\n\n  static commonUniforms = {\n    matModelViewProjection: {\n      name: \"matModelViewProjection\",\n      semantic: UniformSemantic.MODELVIEWPROJECTION,\n      type: DataType.FLOAT_MAT4\n    },\n    matModelView: {\n      name: \"matModelView\",\n      semantic: UniformSemantic.MODELVIEW,\n      type: DataType.FLOAT_MAT4\n    }\n  };\n\n  static commonEnable = [RenderState.BLEND];\n  static commonDisable = [RenderState.CULL_FACE, RenderState.DEPTH_TEST];\n}\n\nexport function union(arr1: Array<any>, arr2: Array<any>): Array<any> {\n  return arr1.concat(arr2.filter((v) => !(arr1.indexOf(v) > -1)));\n}\n","/**\n * 绘制组，描述了绘制范围。\n */\nexport class DrawGroup {\n  /** 偏移。 */\n  offset: number = 0;\n  /** 数量。 */\n  count: number = 0;\n}\n","import { AssetObject } from \"../asset/AssetObject\";\nimport { DrawGroup } from \"../graphic/DrawGroup\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { PrimitiveTopology } from \"../graphic/enums/PrimitiveTopology\";\nimport { IndexBuffer } from \"../graphic/IndexBuffer\";\nimport { IndexBufferBinding } from \"../graphic/IndexBufferBinding\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Primitive } from \"../primitive/Primitive\";\nimport { BoundingBox } from \"../RenderableComponent\";\n\n/**\n * 缓冲几何体。\n */\nexport class BufferGeometry extends AssetObject {\n  private static _geometryCount = 0;\n\n  _primitive: Primitive;\n\n  private _bounds: BoundingBox;\n  private _drawGroups: DrawGroup[] = [];\n\n  /**\n   * 顶点缓冲绑定信息集合。\n   */\n  get vertexBufferBindings(): Readonly<VertexBufferBinding[]> {\n    return this._primitive.vertexBufferBindings;\n  }\n\n  /**\n   * 顶点元素集合。\n   */\n  get vertexElements(): Readonly<VertexElement[]> {\n    return this._primitive.vertexElements;\n  }\n\n  /**\n   * 索引缓冲绑定信息。\n   */\n  get indexBufferBinding(): IndexBufferBinding {\n    return this._primitive.indexBufferBinding;\n  }\n\n  /**\n   * 实例数量,0 表示关闭。\n   */\n  get instancedCount(): number {\n    return this._primitive.instanceCount;\n  }\n\n  set instancedCount(count: number) {\n    this._primitive.instanceCount = count;\n  }\n\n  /**\n   * 绘制基元拓扑模式。\n   */\n  set primitiveTopology(topology: PrimitiveTopology) {\n    this._primitive.primitiveTopology = topology;\n  }\n\n  get primitiveTopology(): PrimitiveTopology {\n    return this._primitive.primitiveTopology;\n  }\n\n  /**\n   * 绘制组集合。\n   */\n  get drawGroups(): Readonly<DrawGroup[]> {\n    return this._drawGroups;\n  }\n\n  /**\n   * 第一个绘制组。\n   */\n  get drawGroup(): DrawGroup | null {\n    return this._drawGroups[0] || null;\n  }\n\n  /**\n   * 绘制组数量。\n   */\n  get drawGroupCount(): number {\n    return this._drawGroups.length;\n  }\n\n  /**\n   * 包围体。\n   */\n  get bounds(): any {\n    return this._bounds;\n  }\n\n  set bounds(value: any) {\n    this._bounds = value;\n  }\n\n  /**\n   * 创建几何体缓冲。\n   * @param name - 名称\n   */\n  constructor(name?: string) {\n    super();\n    name = name || \"BufferGeometry\" + BufferGeometry._geometryCount++;\n\n    this._primitive = new Primitive();\n    this._drawGroups.push(new DrawGroup());\n  }\n\n  /**\n   * 设置顶点缓冲。\n   * @param vertexBufferBinding - 顶点缓冲绑定\n   */\n  setVertexBufferBindings(vertexBufferBinding: VertexBufferBinding): void;\n\n  /**\n   * 设置顶点缓冲。\n   * @param vertexBufferBinding - 顶点缓冲绑定\n   * @param index - 顶点缓冲索引\n   */\n  setVertexBufferBindings(vertexBufferBinding: VertexBufferBinding, index: number): void;\n\n  /**\n   * 设置顶点缓冲。\n   * @param vertexBufferBindings - 顶点缓冲绑定\n   */\n  setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[]): void;\n\n  /**\n   * 设置顶点缓冲。\n   * @param vertexBufferBindings - 顶点缓冲绑定\n   * @param firstIndex - 第一个顶点缓冲索引\n   */\n  setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[], firstIndex: number): void;\n\n  setVertexBufferBindings(\n    vertexBufferBindings: VertexBufferBinding | VertexBufferBinding[],\n    firstIndex: number = 0\n  ): void {\n    this._primitive.setVertexBufferBindings(vertexBufferBindings, firstIndex);\n  }\n\n  /**\n   * 设置索引缓冲。\n   * @param buffer - 索引缓冲\n   * @param format - 索引缓冲格式\n   */\n  setIndexBufferBinding(buffer: IndexBuffer, format: IndexFormat): void {\n    this._primitive.setIndexBufferBinding(buffer, format);\n  }\n\n  /**\n   * 添加顶点元素集合。\n   * @param elements - 顶点元素集合。\n   */\n  addVertexElements(elements: VertexElement | VertexElement[]): void {\n    this._primitive.addVertexElements(elements);\n  }\n\n  /**\n   * 添加绘制组。\n   * @param offset - 偏移\n   * @param count - 数量\n   */\n  addDrawGroup(offset: number, count: number): DrawGroup {\n    const drawGroup = new DrawGroup();\n    drawGroup.offset = offset;\n    drawGroup.count = count;\n    this._drawGroups.push(drawGroup);\n    return drawGroup;\n  }\n\n  /**\n   * 移除绘制组。\n   * @param drawGroup -绘制组。\n   */\n  removeDrawGroup(drawGroup: DrawGroup): void {\n    const drawGroups = this._drawGroups;\n    const index = drawGroups.indexOf(drawGroup);\n    if (index !== -1) {\n      drawGroups.splice(index, 1);\n    }\n  }\n\n  /**\n   * 清空绘制组。\n   */\n  clearDrawGroup(): void {\n    this._drawGroups.length = 0;\n  }\n\n  /**\n   * 释放内部资源对象。\n   */\n  destroy(): void {\n    if (this._primitive) {\n      this._primitive.destroy();\n      this._primitive = null;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _render(): void {}\n}\n","import { Event } from \"../base/Event\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { Material } from \"../material/Material\";\nimport { RenderableComponent } from \"../RenderableComponent\";\nimport { BufferGeometry } from \"./BufferGeometry\";\nimport { Entity } from \"../Entity\";\nimport { Vector3 } from \"@alipay/o3-math\";\n\n/**\n * 几何体渲染类\n */\nexport class GeometryRenderer extends RenderableComponent {\n  protected _geometry: BufferGeometry;\n\n  protected _material: Material;\n\n  /**\n   * @constructor\n   * @param {Entity} entity\n   * @param props\n   */\n  constructor(entity: Entity, props: any = {}) {\n    super(entity, props);\n    this._geometry = props.geometry;\n    this._material = props.material;\n  }\n\n  /**\n   * 当前绑定的 geometry 对象\n   * @returns {BufferGeometry} 几何体对象\n   */\n  get geometry(): BufferGeometry {\n    return this._geometry;\n  }\n\n  /**\n   * 指定需要渲染的几何体对象；多个 GeometryRenderer 对象可以引用同一个几何体对象\n   * @param {BufferGeometry} geometry 几何体对象\n   */\n  set geometry(geometry: BufferGeometry) {\n    this._geometry = geometry;\n    if (geometry && geometry._primitive && geometry._primitive.material) {\n      this._material = geometry._primitive.material;\n    }\n\n    this.trigger(new Event(\"geometryChange\"));\n  }\n\n  /**\n   * 设置一个材质（替代默认材质）\n   * @param {Material} mtl 材质对象\n   */\n  setMaterial(mtl: Material) {\n    this._material = mtl;\n  }\n\n  set material(mtl: Material) {\n    this._material = mtl;\n  }\n\n  get material(): Material {\n    return this._material;\n  }\n\n  /**\n   * 获取材质对象\n   * @return {Material}\n   */\n  getMaterial(): Material {\n    return this._material;\n  }\n\n  /**\n   * 执行渲染\n   * @param {CameraComponent} camera\n   * @private\n   */\n  render(camera: Camera) {\n    const geometry = this._geometry;\n    if (!geometry) {\n      return;\n    }\n    geometry._render();\n\n    const primitive = geometry._primitive;\n    if (primitive && this._material) {\n      const drawGroup = geometry.drawGroups[0];\n      primitive.drawOffset = drawGroup.offset;\n      primitive.drawCount = drawGroup.count;\n\n      camera._renderPipeline.pushPrimitive(this, primitive, this._material);\n    } else {\n      Logger.error(\"primitive or  material is null\");\n    }\n  }\n\n  /**\n   * 释放资源\n   * @private\n   */\n  destroy() {\n    super.destroy();\n\n    //-- release mesh\n    this._geometry = null;\n\n    //-- materials\n    this._material = null;\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: any): void {\n    const localBounds: any = this._geometry.bounds;\n    if (localBounds) {\n      const worldMatrix: any = this._entity.transform.worldMatrix;\n      Vector3.transformCoordinate(localBounds.min, worldMatrix, worldBounds.min); //TODO:简单模式，有漏洞，待AABB重构\n      Vector3.transformCoordinate(localBounds.max, worldMatrix, worldBounds.max);\n    } else {\n      worldBounds.min.setValue(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n      worldBounds.max.setValue(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n    }\n  }\n}\n","import { Vector3 } from \"@alipay/o3-math\";\nimport { Engine } from \"../Engine\";\nimport { BufferGeometry } from \"../geometry/BufferGeometry\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { IndexBuffer } from \"../graphic/IndexBuffer\";\nimport { VertexBuffer } from \"../graphic/VertexBuffer\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\n\n/**\n * 基本形状几何体。\n */\nexport class GeometryShape extends BufferGeometry {\n  /**\n   * @internal\n   */\n  _initialize(engine: Engine, vertices: Float32Array, indices: Uint16Array) {\n    engine = engine || Engine._getDefaultEngine();\n\n    const vertexStride = 32;\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"NORMAL\", 12, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 24, VertexElementFormat.Vector2, 0)\n    ];\n\n    this._initBuffer(engine, vertices, indices, vertexStride, vertexElements);\n  }\n\n  _initBuffer(\n    engine: Engine,\n    vertices: Float32Array,\n    indices: Uint16Array,\n    vertexStride: number,\n    vertexElements: VertexElement[]\n  ) {\n    const vertexBuffer = new VertexBuffer(engine, vertices, BufferUsage.Static);\n    const indexBuffer = new IndexBuffer(engine, indices, BufferUsage.Static);\n\n    this.setVertexBufferBindings(new VertexBufferBinding(vertexBuffer, vertexStride));\n    this.setIndexBufferBinding(indexBuffer, IndexFormat.UInt16);\n    this.addVertexElements(vertexElements);\n    this.drawGroup.count = indices.length;\n\n    this._computeBounds(vertices);\n  }\n\n  private _computeBounds(vertices: ArrayBuffer | Float32Array): void {\n    const vertexElement = this._primitive._vertexElementMap[\"POSITION\"];\n    const bufferIndex = vertexElement.vertexBufferIndex;\n    const vertexBufferBinding = this._primitive.vertexBufferBindings[bufferIndex];\n    const stride = vertexBufferBinding.stride;\n    const offset = vertexElement.offset;\n    const vertexCount = vertexBufferBinding.buffer.byteLength / stride;\n    let arrayBuffer: ArrayBuffer = vertices;\n    if (!(arrayBuffer instanceof ArrayBuffer)) {\n      arrayBuffer = (<Float32Array>arrayBuffer).buffer;\n    }\n    const dataView = new DataView(arrayBuffer);\n\n    let min = new Vector3(Infinity, Infinity, Infinity);\n    let max = new Vector3(-Infinity, -Infinity, -Infinity);\n    for (let i = 0; i < vertexCount; i++) {\n      const base = offset + stride * i;\n      const position = new Vector3(\n        dataView.getFloat32(base, true),\n        dataView.getFloat32(base + 4, true),\n        dataView.getFloat32(base + 8, true)\n      );\n      Vector3.min(min, position, min);\n      Vector3.max(max, position, max);\n    }\n\n    let bounds = this.bounds;\n    if (bounds) {\n      min.cloneTo(bounds.min);\n      max.cloneTo(bounds.max);\n    } else {\n      bounds = { min: min, max: max };\n      this.bounds = bounds;\n    }\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { GeometryShape } from \"./GeometryShape\";\nimport { FrontFace } from \"../base\";\n\n/**\n * 长方体\n */\nexport class CuboidGeometry extends GeometryShape {\n  /**\n   * 创建长方体。\n   * @param width - 宽\n   * @param height - 高\n   * @param depth - 深\n   * @param engine - 引擎\n   */\n  constructor(width: number = 1, height: number = 1, depth: number = 1, engine?: Engine) {\n    super();\n\n    const halfWidth: number = width / 2;\n    const halfHeight: number = height / 2;\n    const halfDepth: number = depth / 2;\n\n    // prettier-ignore\n    const vertices: Float32Array = new Float32Array([\n    \t// up\n    \t-halfWidth, halfHeight, -halfDepth, 0, 1, 0, 0, 0, halfWidth, halfHeight, -halfDepth, 0, 1, 0, 1, 0, halfWidth, halfHeight, halfDepth, 0, 1, 0, 1, 1, -halfWidth, halfHeight, halfDepth, 0, 1, 0, 0, 1,\n    \t// down\n    \t-halfWidth, -halfHeight, -halfDepth, 0, -1, 0, 0, 1, halfWidth, -halfHeight, -halfDepth, 0, -1, 0, 1, 1, halfWidth, -halfHeight, halfDepth, 0, -1, 0, 1, 0, -halfWidth, -halfHeight, halfDepth, 0, -1, 0, 0, 0,\n    \t// left\n    \t-halfWidth, halfHeight, -halfDepth, -1, 0, 0, 0, 0, -halfWidth, halfHeight, halfDepth, -1, 0, 0, 1, 0, -halfWidth, -halfHeight, halfDepth, -1, 0, 0, 1, 1, -halfWidth, -halfHeight, -halfDepth, -1, 0, 0, 0, 1,\n    \t// right\n    \thalfWidth, halfHeight, -halfDepth, 1, 0, 0, 1, 0, halfWidth, halfHeight, halfDepth, 1, 0, 0, 0, 0, halfWidth, -halfHeight, halfDepth, 1, 0, 0, 0, 1, halfWidth, -halfHeight, -halfDepth, 1, 0, 0, 1, 1,\n    \t// fornt\n    \t-halfWidth, halfHeight, halfDepth, 0, 0, 1, 0, 0, halfWidth, halfHeight, halfDepth, 0, 0, 1, 1, 0, halfWidth, -halfHeight, halfDepth, 0, 0, 1, 1, 1, -halfWidth, -halfHeight, halfDepth, 0, 0, 1, 0, 1,\n    \t// back\n    \t-halfWidth, halfHeight, -halfDepth, 0, 0, -1, 1, 0, halfWidth, halfHeight, -halfDepth, 0, 0, -1, 0, 0, halfWidth, -halfHeight, -halfDepth, 0, 0, -1, 0, 1, -halfWidth, -halfHeight, -halfDepth, 0, 0, -1, 1, 1]);\n\n    // prettier-ignore\n    const indices: Uint16Array = new Uint16Array([\n    \t// up\n    \t0, 2, 1, 2, 0, 3,\n    \t// donw\n    \t4, 6, 7, 6, 4, 5,\n    \t// left\n    \t8, 10, 9, 10, 8, 11,\n    \t// right\n    \t12, 14, 15, 14, 12, 13,\n    \t// fornt\n    \t16, 18, 17, 18, 16, 19,\n    \t// back\n    \t20, 22, 23, 22, 20, 21]);\n    this._initialize(engine, vertices, indices);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { BufferGeometry } from \"../geometry\";\nimport { GeometryShape } from \"./GeometryShape\";\n\n/**\n * SphereGeometry 球体创建类\n * @extends BufferGeometry\n */\nexport class SphereGeometry extends GeometryShape {\n  private _parameters;\n  private _thetaEnd;\n\n  /**\n   * @constructor\n   * @param {number} radius 半径\n   * @param {number} horizontalSegments 水平分段数\n   * @param {number} verticalSegments 垂直分段数\n   * @param {number} alphaStart 水平开始角度\n   * @param {number} alphaRange 水平角度范围\n   * @param {number} thetaStart 垂直开始角度\n   * @param {number} thetaRange 垂直角度范围\n   */\n  constructor(\n    radius?: number,\n    horizontalSegments?: number,\n    verticalSegments?: number,\n    alphaStart?: number,\n    alphaRange?: number,\n    thetaStart?: number,\n    thetaRange?: number,\n    engine?: Engine\n  ) {\n    super();\n    this._parameters = {\n      radius: radius || 1,\n      horizontalSegments: Math.max(3, Math.floor(horizontalSegments) || 8),\n      verticalSegments: Math.max(2, Math.floor(verticalSegments) || 6),\n      alphaStart: alphaStart || 0,\n      alphaRange: alphaRange || Math.PI * 2,\n      thetaStart: thetaStart || 0,\n      thetaRange: thetaRange || Math.PI\n    };\n    this._thetaEnd = this._parameters.thetaStart + this._parameters.thetaRange;\n    this.initialize(engine);\n  }\n\n  /**\n   * 构造球体数据\n   * @private\n   */\n  initialize(engine: Engine) {\n    const { verticalSegments, horizontalSegments } = this._parameters;\n    // 生成经纬线上的几何体顶点的数据\n    let index = 0;\n    const grid = [];\n    const vertices: Float32Array = new Float32Array((verticalSegments + 1) * (horizontalSegments + 1) * 8);\n    const indices = [];\n    // const positions = [];\n    for (let iy = 0; iy <= verticalSegments; iy++) {\n      const verticesRow = [];\n      const v = iy / verticalSegments;\n      for (let ix = 0; ix <= horizontalSegments; ix++) {\n        const u = ix / horizontalSegments;\n        let posX =\n          -this._parameters.radius *\n          Math.cos(this._parameters.alphaStart + u * this._parameters.alphaRange) *\n          Math.sin(this._parameters.thetaStart + v * this._parameters.thetaRange);\n        let posY = this._parameters.radius * Math.cos(this._parameters.thetaStart + v * this._parameters.thetaRange);\n        let posZ =\n          this._parameters.radius *\n          Math.sin(this._parameters.alphaStart + u * this._parameters.alphaRange) *\n          Math.sin(this._parameters.thetaStart + v * this._parameters.thetaRange);\n        posX = Math.abs(posX) < 1e-6 ? 0 : posX;\n        posY = Math.abs(posY) < 1e-6 ? 0 : posY;\n        posZ = Math.abs(posZ) < 1e-6 ? 0 : posZ;\n\n        const offset = index * 8;\n        // POSITION\n        vertices[offset] = posX;\n        vertices[offset + 1] = posY;\n        vertices[offset + 2] = posZ;\n        // NORMAL\n        vertices[offset + 3] = posX;\n        vertices[offset + 4] = posY;\n        vertices[offset + 5] = posZ;\n        // TEXCOORD_0\n        vertices[offset + 6] = u;\n        vertices[offset + 7] = 1 - v;\n\n        verticesRow.push(index++);\n      }\n      grid.push(verticesRow);\n    }\n\n    // 生成所有三角形顶点序号\n    for (let iy = 0; iy < verticalSegments; iy++) {\n      for (let ix = 0; ix < horizontalSegments; ix++) {\n        const a = grid[iy][ix + 1];\n        const b = grid[iy][ix];\n        const c = grid[iy + 1][ix];\n        const d = grid[iy + 1][ix + 1];\n\n        if (iy !== 0 || this._parameters.thetaStart > 0) indices.push(a, b, d);\n        if (iy !== verticalSegments - 1 || this._thetaEnd < Math.PI) indices.push(b, c, d);\n      }\n    }\n\n    this._initialize(engine, vertices, Uint16Array.from(indices));\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { GeometryShape } from \"./GeometryShape\";\n\n/**\n * CubeGeometry 平面创建类\n * @extends BufferGeometry\n */\nexport class PlaneGeometry extends GeometryShape {\n  private _parameters;\n  private halfWidth;\n  private halfHeight;\n\n  /**\n   * @constructor\n   * @param {number} width 宽\n   * @param {number} height 高\n   * @param {number} horizontalSegments 水平分段数\n   * @param {number} verticalSegments 垂直分段数\n   */\n  constructor(\n    width?: number,\n    height?: number,\n    horizontalSegments?: number,\n    verticalSegments?: number,\n    engine?: Engine\n  ) {\n    super();\n    this._parameters = {\n      width: width || 1,\n      height: height || 1,\n      horizontalSegments: Math.floor(horizontalSegments) || 1,\n      verticalSegments: Math.floor(verticalSegments) || 1\n    };\n\n    this.halfWidth = this._parameters.width / 2;\n    this.halfHeight = this._parameters.height / 2;\n    this.initialize(engine);\n  }\n\n  initialize(engine: Engine) {\n    const { verticalSegments, horizontalSegments } = this._parameters;\n    // 生成经纬线上的几何体顶点的数据\n    let index = 0;\n    let offset = 0;\n    const grid = [];\n    const vertices: Float32Array = new Float32Array((verticalSegments + 1) * (horizontalSegments + 1) * 8);\n    const indices: Uint16Array = new Uint16Array(verticalSegments * horizontalSegments * 6);\n\n    for (let iy = 0; iy <= verticalSegments; iy++) {\n      const verticesRow = [];\n      const v = iy / verticalSegments;\n      for (let ix = 0; ix <= horizontalSegments; ix++) {\n        const u = ix / horizontalSegments;\n        const posX = u * this._parameters.width - this.halfWidth;\n        const posY = v * this._parameters.height - this.halfHeight;\n\n        // POSITION\n        vertices[offset++] = posX;\n        vertices[offset++] = posY;\n        vertices[offset++] = 0;\n        // NORMAL\n        vertices[offset++] = 0;\n        vertices[offset++] = 0;\n        vertices[offset++] = 1;\n        // TEXCOORD_0\n        vertices[offset++] = u;\n        vertices[offset++] = 1 - v;\n\n        verticesRow.push(index++);\n      }\n      grid.push(verticesRow);\n    }\n\n    // 生成所有三角形顶点序号\n    index = 0;\n    for (let iy = 0; iy < verticalSegments; iy++) {\n      for (let ix = 0; ix < horizontalSegments; ix++) {\n        const a = grid[iy][ix + 1];\n        const b = grid[iy][ix];\n        const c = grid[iy + 1][ix];\n        const d = grid[iy + 1][ix + 1];\n\n        indices[index++] = a;\n        indices[index++] = c;\n        indices[index++] = b;\n        indices[index++] = a;\n        indices[index++] = d;\n        indices[index++] = c;\n      }\n    }\n\n    this._initialize(engine, vertices, indices);\n  }\n}\n","import { Vector3 } from \"@alipay/o3-math\";\nimport { FrontFace } from \"../base/Constant\";\nimport { GeometryShape } from \"./GeometryShape\";\nimport { Engine } from \"../Engine\";\n\n/**\n * SphereGeometry 球体创建类\n * @extends BufferGeometry\n */\nexport class CylinderGeometry extends GeometryShape {\n  public FrontFace;\n  public index;\n  public indexArray;\n  public halfHeight;\n  private _parameters;\n  private _vertices;\n  private _indices;\n\n  /**\n   * @constructor\n   * @param {number} radiusTop 顶部圆柱的半径。 默认值为1。\n   * @param {number} radiusBottom 底部圆柱的半径。 默认值为1。\n   * @param {number} 高度 圆柱的高度。 默认值为1。\n   * @param {number} radialSegments 圆柱体圆周周围的分割面数。 默认值为8\n   * @param {number} heightSegments 沿圆柱高度的面的行数。 默认值为1。\n   * @param {boolean} openEnded 一个布尔值，指示圆柱的末端是打开还是加盖。 默认值为false，表示上限。\n   * @param {number} thetaStart 第一段的起始角度，默认= 0（三点钟位置）。\n   * @param {number} thetaLength 圆形扇区的中心角，通常称为theta。 默认值为2 * Pi，这样可以获得完整的柱面。\n   */\n  constructor(\n    radiusTop?: number,\n    radiusBottom?: number,\n    height?: number,\n    radialSegments?: number,\n    heightSegments?: number,\n    openEnded?: boolean,\n    thetaStart?: number,\n    thetaLength?: number,\n    frontFace?: FrontFace,\n    engine?: Engine\n  ) {\n    super();\n    this.FrontFace = frontFace || FrontFace.CCW;\n    this._parameters = {\n      radiusTop: radiusTop || 1,\n      radiusBottom: radiusBottom || 1,\n      height: height || 1,\n      radialSegments: radialSegments || 8,\n      heightSegments: heightSegments || 1,\n      openEnded: openEnded || false,\n      thetaStart: thetaStart || 0,\n      thetaLength: thetaLength || 2 * Math.PI\n    };\n\n    this._vertices = [];\n    this._indices = [];\n\n    this.index = 0;\n    this.indexArray = [];\n    this.halfHeight = this._parameters.height / 2;\n\n    this.generateTorso();\n\n    if (this._parameters.openEnded === false) {\n      if (this._parameters.radiusTop > 0) this.generateCap(true);\n      if (this._parameters.radiusBottom > 0) this.generateCap(false);\n    }\n\n    this._initialize(engine, Float32Array.from(this._vertices), Uint16Array.from(this._indices));\n  }\n\n  generateTorso() {\n    const { radialSegments, heightSegments, radiusBottom, radiusTop, height } = this._parameters;\n    let x, y;\n    const normal: Vector3 = new Vector3();\n    const slope = (radiusBottom - radiusTop) / height;\n    for (y = 0; y <= heightSegments; y++) {\n      const indexRow = [];\n      const v = y / heightSegments;\n      const radius = v * (radiusBottom - radiusTop) + radiusTop;\n      for (x = 0; x <= radialSegments; x++) {\n        const u = x / radialSegments;\n        const theta = u * this._parameters.thetaLength + this._parameters.thetaStart;\n        const sinTheta = Math.sin(theta);\n        const cosTheta = Math.cos(theta);\n\n        // vertex\n        const vertX = radius * sinTheta;\n        const vertY = -v * height + this.halfHeight;\n        const vertZ = radius * cosTheta;\n        this._vertices.push(vertX, vertY, vertZ);\n\n        // normal\n        normal.setValue(sinTheta, slope, cosTheta);\n        normal.normalize();\n        this._vertices.push(normal.x, normal.y, normal.z);\n\n        // uv\n        if (this.FrontFace === FrontFace.CCW) {\n          this._vertices.push(u, v);\n        } else {\n          this._vertices.push(1 - u, v);\n        }\n\n        indexRow.push(this.index++);\n      }\n\n      this.indexArray.push(indexRow);\n    }\n\n    for (x = 0; x < radialSegments; x++) {\n      for (y = 0; y < heightSegments; y++) {\n        var a = this.indexArray[y][x];\n        var b = this.indexArray[y + 1][x];\n        var c = this.indexArray[y + 1][x + 1];\n        var d = this.indexArray[y][x + 1];\n\n        // faces\n        this._indices.push(a, b, d);\n        this._indices.push(b, c, d);\n      }\n    }\n  }\n\n  generateCap(isTop) {\n    const { radialSegments } = this._parameters;\n    let x;\n    const radius = isTop === true ? this._parameters.radiusTop : this._parameters.radiusBottom;\n    const sign = isTop === true ? 1 : -1;\n    const centerIndexStart = this.index;\n\n    for (x = 1; x <= radialSegments; x++) {\n      // vertex\n      this._vertices.push(0, this.halfHeight * sign, 0);\n\n      // normal\n      this._vertices.push(0, sign, 0);\n\n      // uv\n      this._vertices.push(0.5, 0.5);\n\n      // increase index\n      this.index++;\n    }\n    const centerIndexEnd = this.index;\n\n    for (x = 0; x <= radialSegments; x++) {\n      const u = x / radialSegments;\n      const theta = u * this._parameters.thetaLength + this._parameters.thetaStart;\n      const cosTheta = Math.cos(theta);\n      const sinTheta = Math.sin(theta);\n\n      // vertex\n      const vertexX = radius * sinTheta;\n      const vertexY = this.halfHeight * sign;\n      const vertexZ = radius * cosTheta;\n      this._vertices.push(vertexX, vertexY, vertexZ);\n\n      // normal\n      this._vertices.push(0, sign, 0);\n\n      // uv\n      const uvX = cosTheta * 0.5 + 0.5;\n      const uvY = sinTheta * 0.5 * sign + 0.5;\n      this._vertices.push(uvX, uvY);\n\n      // increase index\n      this.index++;\n    }\n\n    for (x = 0; x < radialSegments; x++) {\n      var c = centerIndexStart + x;\n      var i = centerIndexEnd + x;\n      if (isTop === true) {\n        // face top\n        this._indices.push(i, i + 1, c);\n      } else {\n        // face bottom\n        this._indices.push(i + 1, i, c);\n      }\n    }\n  }\n}\n","import { GeometryShape } from \"./GeometryShape\";\nimport { Engine } from \"../Engine\";\nimport { PrimitiveTopology } from \"../graphic/enums/PrimitiveTopology\";\n\ninterface CircleGeometryOptions {\n  radius?: number;\n  segments?: number;\n  thetaStart?: number;\n  thetaLength?: number;\n}\nexport class CircleGeometry extends GeometryShape {\n  /**\n   * 顶点\n   */\n  private radius: number = 1;\n  private segments: number = 16;\n  private thetaStart: number = 0;\n  private thetaLength: number = Math.PI * 2;\n\n  /**\n   * constructor\n   * @param radius 半径\n   */\n  constructor(options: CircleGeometryOptions = {}, engine?: Engine) {\n    super();\n\n    this.primitiveTopology = PrimitiveTopology.Triangles;\n    this.radius = options.radius || this.radius;\n    this.segments = options.segments || this.segments;\n    this.thetaStart = options.thetaStart || this.thetaStart;\n    this.thetaLength = options.thetaLength || this.thetaLength;\n    const { segments, radius } = this;\n\n    // init with center point\n    const vertices: Float32Array = new Float32Array((segments + 2) * 8);\n    // POSITION NORMAL TEXCOORD_0\n    vertices.set([0, 0, 0, 0, 0, 1, 0.5, 0.5]);\n\n    let index = 8;\n    for (let s = 0; s <= segments; s++) {\n      let segment = this.thetaStart + (s / segments) * this.thetaLength;\n      const x = radius * Math.cos(segment);\n      const y = radius * Math.sin(segment);\n\n      // POSITION\n      vertices[index++] = x;\n      vertices[index++] = y;\n      vertices[index++] = 0;\n      // NORMAL\n      vertices[index++] = 0;\n      vertices[index++] = 0;\n      vertices[index++] = 1;\n      // TEXCOORD_0\n      vertices[index++] = (x / radius + 1) * 0.5;\n      vertices[index++] = (y / radius + 1) * 0.5;\n    }\n\n    const indices: Uint16Array = new Uint16Array(segments * 3);\n    index = 0;\n    for (let i = 1; i <= segments; i++) {\n      indices[index++] = i;\n      indices[index++] = i + 1;\n      indices[index++] = 0;\n    }\n\n    this._initialize(engine, vertices, indices);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { GeometryShape } from \"./GeometryShape\";\nimport { PrimitiveTopology } from \"../graphic/enums/PrimitiveTopology\";\n\n/**\n * 覆盖整个屏幕的一个矩形\n * @private\n */\nexport class ScreenQuadGeometry extends GeometryShape {\n  constructor(engine?: Engine) {\n    super();\n    this.primitiveTopology = PrimitiveTopology.TriangleFan;\n\n    const vertices: Float32Array = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\n\n    const indices: Uint16Array = new Uint16Array([0, 1, 2, 3]);\n\n    this._initialize(engine, vertices, indices);\n    this._primitive.drawCount = indices.length; //TODO:临时添加,待底层结构调整删除\n  }\n\n  _initialize(engine: Engine, vertices: Float32Array, indices: Uint16Array) {\n    engine = engine || Engine._getDefaultEngine();\n\n    const vertexStride = 20;\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0)\n    ];\n    this._initBuffer(engine, vertices, indices, vertexStride, vertexElements);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { GeometryShape } from \"./GeometryShape\";\n\nexport class TorusGeometry extends GeometryShape {\n  constructor(\n    private parameters: {\n      radius?: number;\n      tube?: number;\n      radialSegments?: number;\n      tubularSegments?: number;\n      arc?: number;\n    } = {},\n    engine?: Engine\n  ) {\n    super();\n\n    this.type = \"TorusBufferGeometry\";\n\n    const radius = this.parameters.radius || 1;\n    const tube = this.parameters.tube || 0.4;\n    const radialSegments = Math.floor(this.parameters.radialSegments) || 8;\n    const tubularSegments = Math.floor(this.parameters.tubularSegments) || 6;\n    const arc = this.parameters.arc || Math.PI * 2;\n\n    // buffers\n    const vertices: Float32Array = new Float32Array((radialSegments + 1) * (tubularSegments + 1) * 3);\n    const indices: Uint16Array = new Uint16Array(radialSegments * tubularSegments * 6);\n\n    // generate vertices, normals and uvs\n    let index = 0;\n    for (let j = 0; j <= radialSegments; j++) {\n      for (let i = 0; i <= tubularSegments; i++) {\n        const u = (i / tubularSegments) * arc;\n        const v = (j / radialSegments) * Math.PI * 2;\n\n        // POSITION\n        vertices[index++] = (radius + tube * Math.cos(v)) * Math.cos(u);\n        vertices[index++] = (radius + tube * Math.cos(v)) * Math.sin(u);\n        vertices[index++] = tube * Math.sin(v);\n      }\n    }\n\n    // generate indices\n    index = 0;\n    for (let j = 1; j <= radialSegments; j++) {\n      for (let i = 1; i <= tubularSegments; i++) {\n        // indices\n        const a = (tubularSegments + 1) * j + i - 1;\n        const b = (tubularSegments + 1) * (j - 1) + i - 1;\n        const c = (tubularSegments + 1) * (j - 1) + i;\n        const d = (tubularSegments + 1) * j + i;\n\n        // faces\n        indices[index++] = a;\n        indices[index++] = b;\n        indices[index++] = d;\n        indices[index++] = b;\n        indices[index++] = c;\n        indices[index++] = d;\n      }\n    }\n    this._initialize(engine, vertices, indices);\n  }\n\n  _initialize(engine: Engine, vertices: Float32Array, indices: Uint16Array) {\n    engine = engine || Engine._getDefaultEngine();\n\n    const vertexStride = 12;\n    const vertexElements = [new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0)];\n\n    this._initBuffer(engine, vertices, indices, vertexStride, vertexElements);\n  }\n}\n","import { Entity } from \"../Entity\";\nimport { GeometryRenderer } from \"../geometry/GeometryRenderer\";\nimport { BlinnPhongMaterial } from \"../mobile-material/BlinnPhongMaterial\";\nimport { CuboidGeometry } from \"./Cuboid\";\nimport { CylinderGeometry } from \"./Cylinder\";\nimport { PlaneGeometry } from \"./Plane\";\nimport { SphereGeometry } from \"./Sphere\";\n\nexport class Model extends GeometryRenderer {\n  set geometryType(value: GeometryType) {\n    if (this._geometryType === value) {\n      return;\n    }\n\n    switch (value) {\n      case \"Sphere\":\n        const {\n          sphereRadius,\n          sphereHorizontalSegments,\n          sphereVerticalSegments,\n          sphereAlphaStart,\n          sphereAlphaRange,\n          sphereThetaStart,\n          sphereThetaRange\n        } = this._props as any;\n        this.geometry = new SphereGeometry(\n          sphereRadius,\n          sphereHorizontalSegments,\n          sphereVerticalSegments,\n          sphereAlphaStart,\n          sphereAlphaRange,\n          sphereThetaStart,\n          sphereThetaRange,\n          this.engine\n        );\n        break;\n\n      case \"Cylinder\":\n        const {\n          cylinderRadiusTop,\n          cylinderRadiusBottom,\n          cylinderHeight,\n          cylinderRadialSegments,\n          cylinderHeightSegments,\n          cylinderOpenEnded\n        } = this._props as any;\n        this.geometry = new CylinderGeometry(\n          cylinderRadiusTop,\n          cylinderRadiusBottom,\n          cylinderHeight,\n          cylinderRadialSegments,\n          cylinderHeightSegments,\n          cylinderOpenEnded,\n          undefined,\n          undefined,\n          undefined,\n          this.engine\n        );\n        break;\n\n      case \"Plane\":\n        const { planeWidth, planeHeight, planeHorizontalSegments, planeVerticalSegments } = this._props as any;\n        this.geometry = new PlaneGeometry(\n          planeWidth,\n          planeHeight,\n          planeHorizontalSegments,\n          planeVerticalSegments,\n          this.engine\n        );\n        break;\n\n      case \"Box\":\n        var { boxWidth, boxHeight, boxDepth } = this._props as any;\n        this.geometry = new CuboidGeometry(boxWidth, boxHeight, boxDepth, this.engine);\n        break;\n    }\n\n    this._geometryType = value;\n  }\n\n  get geometryType() {\n    return this._geometryType;\n  }\n\n  private _geometryType: GeometryType;\n\n  constructor(entity: Entity, props) {\n    super(entity, props);\n\n    const { geometryType = GeometryType.Box } = props;\n    if (!props.material) {\n      this._material = new BlinnPhongMaterial(\"mtl\");\n    }\n    this.geometryType = geometryType;\n  }\n\n  get material(): any {\n    return this._material;\n  }\n\n  set material(mtl: any) {\n    if (!mtl) {\n      this._material = new BlinnPhongMaterial(\"mtl\");\n    } else {\n      this._material = mtl;\n    }\n  }\n}\n\nenum GeometryType {\n  Box = \"Box\",\n  Cylinder = \"Cylinder\",\n  Plane = \"Plane\",\n  Sphere = \"Sphere\"\n}\n","import { Matrix } from \"@alipay/o3-math\";\nimport { CompFunc, DataType, RenderState } from \"../base/Constant\";\nimport { Material } from \"../material/Material\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport fs from \"./skybox.fs.glsl\";\nimport vs from \"./skybox.vs.glsl\";\n\n/**\n * 天空盒材质\n */\nexport class SkyBoxMaterial extends Material {\n  private _cacheMat1: Matrix;\n  private _cacheMat2: Matrix;\n  private modelMatrix: Matrix;\n\n  constructor(name = SkyBoxMaterial.defaultName) {\n    super(name);\n  }\n\n  public setModel(modelMatrix: Matrix) {\n    this.modelMatrix = modelMatrix;\n  }\n\n  /**\n   * 渲染前调用\n   * @private\n   */\n  prepareDrawing(context, component) {\n    if (this._technique === null) {\n      this._generateTechnique();\n    }\n\n    if (!this._cacheMat1) {\n      this._cacheMat1 = new Matrix();\n      this._cacheMat2 = new Matrix();\n    }\n    const view = context.viewMatrix;\n    const proj = context.projectionMatrix;\n\n    Matrix.multiply(view, this.modelMatrix, this._cacheMat1);\n    const e = this._cacheMat1.elements;\n    e[12] = e[13] = e[14] = 0;\n    Matrix.multiply(proj, this._cacheMat1, this._cacheMat2);\n    this.setValue(\"u_mvpNoscale\", this._cacheMat2);\n\n    super.prepareDrawing(context, component, undefined);\n  }\n\n  /**\n   * 创建Technique\n   * @private\n   */\n  _generateTechnique() {\n    const tech = new RenderTechnique(SkyBoxMaterial.techniqueName);\n    tech.isValid = true;\n    tech.uniforms = SkyBoxMaterial.techniqueConfig.uniforms;\n    tech.attributes = SkyBoxMaterial.techniqueConfig.attributes;\n    tech.states = SkyBoxMaterial.techniqueConfig.states;\n    tech.vertexShader = SkyBoxMaterial.vertexShader;\n    tech.fragmentShader = SkyBoxMaterial.fragmentShader;\n\n    this._technique = tech;\n  }\n\n  static defaultName = \"SKY_BOX_MATERIAL\";\n  static techniqueName = \"SKY_BOX_TECHNIQUE\";\n  static vertexShader = vs;\n  static fragmentShader = fs;\n  static techniqueConfig = {\n    attributes: {},\n    uniforms: {\n      u_mvpNoscale: {\n        name: \"u_mvpNoscale\",\n        type: DataType.FLOAT_MAT4\n      },\n      u_cube: {\n        name: \"u_cube\",\n        type: DataType.SAMPLER_CUBE\n      }\n    },\n    states: {\n      disable: [RenderState.CULL_FACE],\n      functions: {\n        depthFunc: CompFunc.LEQUAL\n      }\n    }\n  };\n}\n","import { SkyBoxMaterial } from \"./SkyBoxMaterial\";\nimport { GeometryRenderer } from \"../geometry/GeometryRenderer\";\nimport { CuboidGeometry } from \"../geometry-shape/Cuboid\";\n\n/**\n * 天空盒组件\n * @class\n */\nexport class SkyBox extends GeometryRenderer {\n  private _skyBoxMap: any;\n\n  /**\n   * 天空盒组件\n   * @param {Entity} entity 挂载节点\n   * @param {Object} props Object对象包含以下参数\n   * @param {TextureCubeMap} props.skyBoxMap 天空盒纹理\n   */\n  constructor(entity, props) {\n    super(entity, props);\n\n    const { skyBoxMap } = props;\n\n    /**\n     * 天空盒纹理\n     * @member {TextureCubeMap}\n     */\n    this.geometry = new CuboidGeometry(2, 2, 2, this.engine);\n    this.material = new SkyBoxMaterial();\n    this.skyBoxMap = skyBoxMap;\n  }\n\n  update() {\n    (this.material as SkyBoxMaterial).setModel(this.entity.transform.worldMatrix);\n  }\n\n  render(camera) {\n    if (!this._skyBoxMap) return;\n    super.render(camera);\n  }\n\n  /**\n   * 天空盒贴图\n   * @type {TextureCubeMap}\n   */\n  get skyBoxMap() {\n    return this._skyBoxMap;\n  }\n\n  set skyBoxMap(v) {\n    this._skyBoxMap = v;\n    this.getMaterial().setValue(\"u_cube\", v);\n  }\n}\n","import { Matrix, Vector2, Vector3, Vector4 } from \"@alipay/o3-math\";\nimport { BlendFunc, CullFace, DataType, GLCapabilityType, MaterialType, RenderState, Side } from \"../base/Constant\";\nimport { Util } from \"../base/Util\";\nimport { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { Material } from \"../material/Material\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Texture } from \"../texture/Texture\";\nimport fs from \"./pbr.fs.glsl\";\nimport vs from \"./pbr.vs.glsl\";\n/**\n * PBR（Physically-Based Rendering）材质\n */\nclass PBRMaterial extends Material {\n  private _uniformObj;\n  private _stateObj;\n  private _ambientLightCount: number;\n  private _envMapLightCount: number;\n  private _spotLightCount: number;\n  private _directLightCount: number;\n  private _pointLightCount: number;\n  private _useDiffuseEnv: boolean;\n  private _useSpecularEnv: boolean;\n  private _clipPlaneCount: number;\n  private _useOIT: boolean;\n\n  /**\n   * PBR 材质\n   * @param {String} [name='PBR_MATERIAL'] 材质名\n   * @param {Object} [props] 包含以下参数\n   * @param {Vector4} [props.baseColorFactor=[1, 1, 1, 1]] 基础颜色因子\n   * @param {Texture2D} [props.baseColorTexture] 基础颜色纹理\n   * @param {Number} [props.metallicFactor=1] 金属度\n   * @param {Number} [props.roughnessFactor=1] 粗糙度\n   * @param {Texture2D} [props.metallicTexture] 金属纹理\n   * @param {Texture2D} [props.roughnessTexture] 粗糙度纹理\n   * @param {Texture2D} [props.metallicRoughnessTexture] 金属粗糙度纹理\n   * @param {Texture2D} [props.normalTexture] 法线纹理\n   * @param {Number} [props.normalScale=1] 法线缩放量\n   * @param {Texture2D} [props.emissiveTexture] 发散光纹理\n   * @param {Vector3} [props.emissiveFactor=[0, 0, 0]] 发散光因子\n   * @param {Texture2D} [props.occlusionTexture] 遮蔽纹理\n   * @param {Number} [props.occlusionStrength=1] 遮蔽强度\n   * @param {Number} [props.alphaCutoff=0.5] alpha裁剪值\n   * @param {String} [props.alphaMode='OPAQUE'] alpha混合模式\n   * @param {Boolean} [props.doubleSided=false] 是否显示双面\n   * @param {Side} [props.side=Side.Front] 显示哪一个面，向下兼容doubleSided\n   * @param {Boolean} [props.unlit=false] 是否不使用光照\n   * @param {Boolean} [props.srgb=false] 是否为 SRGB 色彩空间\n   * @param {Boolean} [props.srgbFast=true] sRGB线性校正是否使用近似快速算法\n   * @param {Boolean} [props.gamma=false] 是否使用 Gamma 纠正\n   * @param {Number} [props.opacity=1] 透明度\n   * @param {Texture2D} [props.opacityTexture] 透明度贴图\n   * @param {boolean} [props.getOpacityFromRGB=false] true:取透明度贴图的rgb亮度，false:取alpha通道\n   *\n   * @param {boolean} [props.isMetallicWorkflow=true] ture:金属粗糙度模式，false：高光光泽度模式\n   * @param {Vector3} [props.specularFactor=[1，1，1]] 高光度因子\n   * @param {number} [props.glossinessFactor=0] 光泽度\n   * @param {Texture2D} [props.specularGlossinessTexture] 高光光泽度纹理\n   *\n   * @param {number} [props.envMapIntensity] 反射模式时的反射强度；\n   *\n   *  todo: IOR 更加符合材质的属性，但是需要增加额外的属性来表示非真空折射率，如摄像机在水中等情况。\n   * @param {number} [props.refractionRatio] 折射模式时的折射率的比例，如真空折射率/水折射率=1/1.33;\n   * @param {boolean} [props.envMapModeRefract=false] 全局环境贴图使用 反射或者折射 模式;\n   * @param {Texture2D} [props.refractionTexture] 局部 折射纹理;\n   * @param {number} [props.refractionDepth] 局部 折射纹理 深度值，用来模拟折射距离;\n   *\n   * @param {Texture2D} [props.perturbationTexture] 扰动纹理\n   * @param {number} [props.perturbationUOffset] 扰动纹理U偏移\n   * @param {number} [props.perturbationVOffset] 扰动纹理V偏移\n   *\n   * @param {TextureCubeMap} [props.reflectionTexture] 局部反射贴图，可以覆盖 AEnvironmentMapLight\n   *\n   */\n  constructor(name = PBRMaterial.MATERIAL_NAME, props = {}) {\n    super(name);\n\n    this.createDefaulteValues();\n    this.setUniforms(props);\n    this.setStates(props);\n  }\n\n  /**\n   * 创建默认的参数值\n   * @private\n   */\n  createDefaulteValues() {\n    this._uniformObj = {\n      baseColorFactor: new Vector4(1.0, 1.0, 1.0, 1.0),\n      metallicFactor: 1,\n      roughnessFactor: 1,\n      metallicRoughness: new Vector2(1.0, 1.0),\n      normalScale: 1,\n      emissiveFactor: new Vector3(0.0, 0.0, 0.0),\n      occlusionStrength: 1,\n      alphaCutoff: 0.5,\n\n      // specular-glossiness workflow\n      specularFactor: new Vector3(1.0, 1.0, 1.0),\n      glossinessFactor: 0,\n\n      // reflect,refract\n      envMapIntensity: 1,\n      refractionRatio: 1 / 1.33,\n      refractionDepth: 1,\n\n      // perturbation\n      perturbationUOffset: 0,\n      perturbationVOffset: 0\n    };\n\n    this._stateObj = {\n      alphaMode: \"OPAQUE\",\n      doubleSided: false,\n      side: Side.FRONT,\n      unlit: false,\n      srgb: false,\n      srgbFast: false,\n      gamma: false,\n      blendFunc: [],\n      blendFuncSeparate: [BlendFunc.SRC_ALPHA, BlendFunc.ONE_MINUS_SRC_ALPHA, BlendFunc.ONE, BlendFunc.ONE],\n      depthMask: [false],\n      getOpacityFromRGB: false,\n      isMetallicWorkflow: true,\n      envMapModeRefract: false\n    };\n\n    Object.keys(this._uniformObj).forEach((k) => this.setValueByParamName(k, this._uniformObj[k]));\n  }\n\n  /**\n   * 设置使用到的Uniform信息\n   * @param {Object} obj 使用到的Uniform信息\n   * @private\n   */\n  setUniforms(obj) {\n    Object.keys(obj).forEach((key) => {\n      switch (key) {\n        case \"baseColorFactor\":\n          this.baseColorFactor = obj[key];\n          break;\n        case \"opacity\":\n          this.opacity = obj[key];\n          break;\n        case \"opacityTexture\":\n          this.opacityTexture = obj[key];\n          break;\n        case \"baseColorTexture\":\n          this.baseColorTexture = obj[key];\n          break;\n        case \"metallicFactor\":\n          this.metallicFactor = obj[key];\n          break;\n        case \"roughnessFactor\":\n          this.roughnessFactor = obj[key];\n          break;\n        case \"metallicTexture\":\n          this.metallicTexture = obj[key];\n          break;\n        case \"roughnessTexture\":\n          this.roughnessTexture = obj[key];\n          break;\n        case \"metallicRoughnessTexture\":\n          this.metallicRoughnessTexture = obj[key];\n          break;\n        case \"normalTexture\":\n          this.normalTexture = obj[key];\n          break;\n        case \"normalScale\":\n          this.normalScale = obj[key];\n          break;\n        case \"emissiveTexture\":\n          this.emissiveTexture = obj[key];\n          break;\n        case \"emissiveFactor\":\n          this.emissiveFactor = obj[key];\n          break;\n        case \"occlusionTexture\":\n          this.occlusionTexture = obj[key];\n          break;\n        case \"occlusionStrength\":\n          this.occlusionStrength = obj[key];\n          break;\n        case \"alphaCutoff\":\n          this.alphaCutoff = obj[key];\n          break;\n        case \"specularFactor\":\n          this.specularFactor = obj[key];\n          break;\n        case \"glossinessFactor\":\n          this.glossinessFactor = obj[key];\n          break;\n        case \"specularGlossinessTexture\":\n          this.specularGlossinessTexture = obj[key];\n          break;\n        case \"reflectionTexture\":\n          this.reflectionTexture = obj[key];\n          break;\n        case \"envMapIntensity\":\n          this.envMapIntensity = obj[key];\n          break;\n        case \"refractionRatio\":\n          this.refractionRatio = obj[key];\n          break;\n        case \"refractionDepth\":\n          this.refractionDepth = obj[key];\n          break;\n        case \"refractionTexture\":\n          this.refractionTexture = obj[key];\n          break;\n        case \"perturbationTexture\":\n          this.perturbationTexture = obj[key];\n          break;\n        case \"perturbationUOffset\":\n          this.perturbationUOffset = obj[key];\n          break;\n        case \"perturbationVOffset\":\n          this.perturbationVOffset = obj[key];\n          break;\n        default:\n          break;\n      }\n    });\n  }\n\n  /**\n   * 设置渲染状态信息\n   * @param {Object} obj 渲染状态信息\n   * @private\n   */\n  setStates(obj) {\n    Object.keys(obj).forEach((key) => {\n      switch (key) {\n        case \"doubleSided\":\n          this.doubleSided = obj[key];\n          break;\n        case \"side\":\n          this.side = obj[key];\n          break;\n        case \"alphaMode\":\n          this.alphaMode = obj[key];\n          break;\n        case \"unlit\":\n          this.unlit = obj[key];\n          break;\n        case \"srgb\":\n          this.srgb = obj[key];\n          break;\n        case \"srgbFast\":\n          this.srgbFast = obj[key];\n          break;\n        case \"gamma\":\n          this.gamma = obj[key];\n          break;\n        case \"blendFunc\":\n          this.blendFunc = obj[key];\n          break;\n        case \"blendFuncSeparate\":\n          this.blendFuncSeparate = obj[key];\n          break;\n        case \"depthMask\":\n          this.depthMask = obj[key];\n          break;\n        case \"getOpacityFromRGB\":\n          this.getOpacityFromRGB = obj[key];\n          break;\n        case \"isMetallicWorkflow\":\n          this.isMetallicWorkflow = obj[key];\n          break;\n        case \"envMapModeRefract\":\n          this.envMapModeRefract = obj[key];\n          break;\n      }\n    });\n  }\n\n  /**\n   * 根据 uniform 的参数名设置材质值\n   * @private\n   */\n  setValueByParamName(paramName, value) {\n    const uniforms = PBRMaterial.TECH_CONFIG.uniforms;\n    const uniformName = Object.keys(uniforms).find((key) => uniforms[key].paramName === paramName);\n    if (uniformName) {\n      this.setValue(uniformName, value);\n    }\n  }\n\n  /** 根据 state 跟新 technique */\n  private updateTechnique(stateName: string, v) {\n    if (this[stateName] === v) return;\n    this._stateObj[stateName] = v;\n\n    const states = this.technique?.states;\n    if (!states) return;\n\n    switch (stateName) {\n      case \"doubleSided\":\n      case \"side\":\n        if (this.doubleSided) {\n          states.disable.push(RenderState.CULL_FACE);\n        } else {\n          const index = states.disable.indexOf(RenderState.CULL_FACE);\n          if (index > -1) {\n            states.disable.splice(index, 1);\n          }\n          switch (this.side) {\n            case Side.FRONT:\n              states.functions.cullFace = [CullFace.BACK];\n              break;\n            case Side.BACK:\n              states.functions.cullFace = [CullFace.FRONT];\n              break;\n            case Side.NONE:\n              states.functions.cullFace = [CullFace.FRONT_AND_BACK];\n              break;\n            default:\n              delete states.functions.cullFace;\n          }\n        }\n        break;\n      case \"blendFunc\":\n      case \"blendFuncSeparate\":\n        if (this.blendFunc.length) {\n          states.functions.blendFunc = this.blendFunc;\n        } else {\n          states.functions.blendFuncSeparate = this.blendFuncSeparate;\n        }\n        break;\n      case \"depthMask\":\n        states.functions.depthMask = v;\n        break;\n      default:\n        this._technique = null;\n    }\n  }\n\n  /****************************************   uniform start **************************************** /\n\n   /**\n   * 基础颜色因子\n   * @type {Vector4}\n   */\n  get baseColorFactor() {\n    return this._uniformObj.baseColorFactor;\n  }\n\n  set baseColorFactor(v: Vector4) {\n    this._uniformObj.baseColorFactor = v;\n    this.setValueByParamName(\"baseColorFactor\", v);\n  }\n\n  get opacity(): number {\n    return this.baseColorFactor[3];\n  }\n\n  set opacity(val: number) {\n    this.baseColorFactor[3] = val;\n  }\n\n  /**\n   * 基础颜色纹理\n   * @type {Texture2D}\n   */\n  get baseColorTexture() {\n    return this._uniformObj.baseColorTexture;\n  }\n\n  set baseColorTexture(v) {\n    this.setValueByParamName(\"baseColorTexture\", v);\n    this._uniformObj.baseColorTexture = v;\n  }\n\n  /**\n   * 透明贴图\n   * @type {Texture2D}\n   * */\n  get opacityTexture() {\n    return this._uniformObj.opacityTexture;\n  }\n\n  set opacityTexture(v) {\n    this.setValueByParamName(\"opacityTexture\", v);\n    this._uniformObj.opacityTexture = v;\n  }\n\n  /**\n   * 金属度\n   * @type {Number}\n   */\n  get metallicFactor() {\n    return this._uniformObj.metallicFactor;\n  }\n\n  set metallicFactor(v) {\n    this._uniformObj.metallicFactor = v;\n    this._uniformObj.metallicRoughness.x = v;\n    this.setValueByParamName(\"metallicRoughness\", this._uniformObj.metallicRoughness);\n  }\n\n  /**\n   * 粗糙度\n   * @type {Number}\n   */\n  get roughnessFactor() {\n    return this._uniformObj.roughnessFactor;\n  }\n\n  set roughnessFactor(v) {\n    this._uniformObj.roughnessFactor = v;\n    this._uniformObj.metallicRoughness.y = v;\n    this.setValueByParamName(\"metallicRoughness\", this._uniformObj.metallicRoughness);\n  }\n\n  /**\n   * 金属纹理\n   * @type {Texture2D}\n   */\n  get metallicTexture() {\n    return this._uniformObj.metallicTexture;\n  }\n\n  set metallicTexture(v) {\n    this.setValueByParamName(\"metallicTexture\", v);\n    this._uniformObj.metallicTexture = v;\n  }\n\n  /**\n   * 粗糙度纹理\n   * @type {Texture2D}\n   */\n  get roughnessTexture() {\n    return this._uniformObj.roughnessTexture;\n  }\n\n  set roughnessTexture(v) {\n    this.setValueByParamName(\"roughnessTexture\", v);\n    this._uniformObj.roughnessTexture = v;\n  }\n\n  /**\n   * 金属粗糙度纹理\n   * @type {Texture2D}\n   */\n  get metallicRoughnessTexture() {\n    return this._uniformObj.metallicRoughnessTexture;\n  }\n\n  set metallicRoughnessTexture(v) {\n    this.setValueByParamName(\"metallicRoughnessTexture\", v);\n    this._uniformObj.metallicRoughnessTexture = v;\n  }\n\n  /**\n   * 法线纹理\n   * @type {Texture2D}\n   */\n  get normalTexture() {\n    return this._uniformObj.normalTexture;\n  }\n\n  set normalTexture(v) {\n    this.setValueByParamName(\"normalTexture\", v);\n    this._uniformObj.normalTexture = v;\n  }\n\n  /**\n   * 法线缩放量\n   * @type {Number}\n   */\n  get normalScale() {\n    return this._uniformObj.normalScale;\n  }\n\n  set normalScale(v) {\n    this._uniformObj.normalScale = v;\n    this.setValueByParamName(\"normalScale\", v);\n  }\n\n  /**\n   * 发散光纹理\n   * @type {Texture2D}\n   */\n  get emissiveTexture() {\n    return this._uniformObj.emissiveTexture;\n  }\n\n  set emissiveTexture(v) {\n    this.setValueByParamName(\"emissiveTexture\", v);\n    this._uniformObj.emissiveTexture = v;\n  }\n\n  /**\n   * 发散光因子\n   * @type {Vector3}\n   */\n  get emissiveFactor() {\n    return this._uniformObj.emissiveFactor;\n  }\n\n  set emissiveFactor(v: Vector3) {\n    this._uniformObj.emissiveFactor = v;\n    this.setValueByParamName(\"emissiveFactor\", v);\n  }\n\n  /**\n   * 遮蔽纹理\n   * @type {Texture2D}\n   */\n  get occlusionTexture() {\n    return this._uniformObj.occlusionTexture;\n  }\n\n  set occlusionTexture(v) {\n    this.setValueByParamName(\"occlusionTexture\", v);\n    this._uniformObj.occlusionTexture = v;\n  }\n\n  /**\n   * 遮蔽强度\n   * @type {Number}\n   */\n  get occlusionStrength() {\n    return this._uniformObj.occlusionStrength;\n  }\n\n  set occlusionStrength(v) {\n    this._uniformObj.occlusionStrength = v;\n    this.setValueByParamName(\"occlusionStrength\", v);\n  }\n\n  /**\n   * alpha裁剪值\n   * @type {Number}\n   */\n  get alphaCutoff() {\n    return this._uniformObj.alphaCutoff;\n  }\n\n  set alphaCutoff(v) {\n    this._uniformObj.alphaCutoff = v;\n    this.setValueByParamName(\"alphaCutoff\", v);\n  }\n\n  /**\n   * 高光度因子\n   * @type {Vector3}\n   */\n  get specularFactor() {\n    return this._uniformObj.specularFactor;\n  }\n\n  set specularFactor(v) {\n    this.setValueByParamName(\"specularFactor\", v);\n    this._uniformObj.specularFactor = v;\n  }\n\n  /**\n   * 光泽度\n   * @type {Array}\n   */\n  get glossinessFactor() {\n    return this._uniformObj.glossinessFactor;\n  }\n\n  set glossinessFactor(v) {\n    this.setValueByParamName(\"glossinessFactor\", v);\n    this._uniformObj.glossinessFactor = v;\n  }\n\n  /**\n   * 高光光泽度纹理\n   * @type {Texture2D}\n   */\n  get specularGlossinessTexture() {\n    return this._uniformObj.specularGlossinessTexture;\n  }\n\n  set specularGlossinessTexture(v) {\n    this.setValueByParamName(\"specularGlossinessTexture\", v);\n    this._uniformObj.specularGlossinessTexture = v;\n  }\n\n  /**\n   * 镜面反射纹理\n   * @type {TextureCubeMap}\n   */\n  get reflectionTexture() {\n    return this._uniformObj.reflectionTexture;\n  }\n\n  set reflectionTexture(v) {\n    this.setValueByParamName(\"reflectionTexture\", v);\n    this._uniformObj.reflectionTexture = v;\n  }\n\n  /**\n   * 反射强度\n   * @type {number}\n   */\n  get envMapIntensity() {\n    return this._uniformObj.envMapIntensity;\n  }\n\n  set envMapIntensity(v) {\n    this.setValueByParamName(\"envMapIntensity\", v);\n    this._uniformObj.envMapIntensity = v;\n  }\n\n  /**\n   * 折射率比\n   * @type {number}\n   */\n  get refractionRatio() {\n    return this._uniformObj.refractionRatio;\n  }\n\n  set refractionRatio(v) {\n    this.setValueByParamName(\"refractionRatio\", v);\n    this._uniformObj.refractionRatio = v;\n  }\n\n  /**\n   * 局部折射纹理的深度值，用来模拟折射距离\n   * @type {number}\n   */\n  get refractionDepth() {\n    return this._uniformObj.refractionDepth;\n  }\n\n  set refractionDepth(v) {\n    this.setValueByParamName(\"refractionDepth\", v);\n    this._uniformObj.refractionDepth = v;\n  }\n\n  /**\n   * 局部折射纹理\n   * @type {Texture2D}\n   */\n  get refractionTexture() {\n    return this._uniformObj.refractionTexture;\n  }\n\n  set refractionTexture(v) {\n    this.setValueByParamName(\"refractionTexture\", v);\n    this._uniformObj.refractionTexture = v;\n  }\n\n  /**\n   * 扰动纹理\n   * @type {Texture2D}\n   */\n  get perturbationTexture() {\n    return this._uniformObj.perturbationTexture;\n  }\n\n  set perturbationTexture(v) {\n    this.setValueByParamName(\"perturbationTexture\", v);\n    this._uniformObj.perturbationTexture = v;\n  }\n\n  /**\n   * 扰动纹理U偏移\n   * @type {number}\n   */\n  get perturbationUOffset() {\n    return this._uniformObj.perturbationUOffset;\n  }\n\n  set perturbationUOffset(v) {\n    this.setValueByParamName(\"perturbationUOffset\", v);\n    this._uniformObj.perturbationUOffset = v;\n  }\n\n  /**\n   * 扰动纹理V偏移\n   * @type {number}\n   */\n  get perturbationVOffset() {\n    return this._uniformObj.perturbationVOffset;\n  }\n\n  set perturbationVOffset(v) {\n    this.setValueByParamName(\"perturbationVOffset\", v);\n    this._uniformObj.perturbationVOffset = v;\n  }\n\n  /****************************************   uniform end **************************************** /\n\n\n  /****************************************   state start **************************************** /\n\n   /**\n   * alpha混合模式\n   * @type {'OPAQUE'|'MASK'|'BLEND'}\n   */\n  get alphaMode() {\n    return this._stateObj.alphaMode;\n  }\n\n  set alphaMode(v) {\n    this.updateTechnique(\"alphaMode\", v);\n  }\n\n  /**\n   * 是否显示双面\n   * @type {Boolean}\n   */\n  get doubleSided() {\n    return this._stateObj.doubleSided;\n  }\n\n  set doubleSided(v) {\n    if (v) {\n      this._stateObj.side = Side.DOUBLE;\n    } else if (this._stateObj.side === Side.DOUBLE) {\n      this._stateObj.side = Side.FRONT;\n    }\n    this.updateTechnique(\"doubleSided\", v);\n  }\n\n  /**\n   * 显示哪个面\n   * @type {Side}\n   * */\n  get side() {\n    return this._stateObj.side;\n  }\n\n  set side(v: Side) {\n    // 向下兼容doubleSided\n    if (v === Side.DOUBLE) {\n      this._stateObj.doubleSided = true;\n    } else {\n      this._stateObj.doubleSided = false;\n    }\n\n    this.updateTechnique(\"side\", v);\n  }\n\n  /**\n   * 是否使用光源\n   * @type {Boolean}\n   */\n  get unlit() {\n    return this._stateObj.unlit;\n  }\n\n  set unlit(v) {\n    this.updateTechnique(\"unlit\", v);\n  }\n\n  /**\n   * 是否 SRGB 色彩空间\n   * @type {Boolean}\n   */\n  get srgb() {\n    return this._stateObj.srgb;\n  }\n\n  set srgb(v) {\n    this.updateTechnique(\"srgb\", v);\n  }\n\n  /**\n   * sRGB线性校正是否使用近似快速算法\n   * */\n  get srgbFast(): boolean {\n    return this._stateObj.srgbFast;\n  }\n\n  set srgbFast(v: boolean) {\n    this.updateTechnique(\"srgbFast\", v);\n  }\n\n  /**\n   * 是否使用 Gamma 纠正\n   * @type {Boolean}\n   */\n  get gamma() {\n    return this._stateObj.gamma;\n  }\n\n  set gamma(v) {\n    this.updateTechnique(\"gamma\", v);\n  }\n\n  get blendFunc() {\n    return this._stateObj.blendFunc;\n  }\n\n  set blendFunc(v) {\n    this.updateTechnique(\"blendFunc\", v);\n  }\n\n  get blendFuncSeparate() {\n    return this._stateObj.blendFuncSeparate;\n  }\n\n  set blendFuncSeparate(v) {\n    this.updateTechnique(\"blendFuncSeparate\", v);\n  }\n\n  get depthMask() {\n    return this._stateObj.depthMask;\n  }\n\n  set depthMask(v) {\n    this.updateTechnique(\"depthMask\", v);\n  }\n\n  /**\n   * 透明度通道选择\n   * true:取透明度贴图的rgb亮度，false:取alpha通道\n   * @type{boolean}\n   * */\n  get getOpacityFromRGB(): boolean {\n    return this._stateObj.getOpacityFromRGB;\n  }\n\n  set getOpacityFromRGB(v) {\n    this.updateTechnique(\"getOpacityFromRGB\", v);\n  }\n\n  /**\n   * pbr工作流是否是金属粗糙度模式\n   * @type{boolean}\n   * */\n  get isMetallicWorkflow(): boolean {\n    return this._stateObj.isMetallicWorkflow;\n  }\n\n  set isMetallicWorkflow(v) {\n    this.updateTechnique(\"isMetallicWorkflow\", v);\n  }\n\n  /**\n   * 是否使用折射模式，默认反射模式\n   * @type{boolean}\n   * */\n  get envMapModeRefract(): boolean {\n    return this._stateObj.envMapModeRefract;\n  }\n\n  set envMapModeRefract(v) {\n    this.updateTechnique(\"envMapModeRefract\", v);\n  }\n\n  /****************************************   state end **************************************** /\n\n  /**\n   * 绘制前准备\n   * @param {Camera} camera 相机\n   * @param {Component} component 组件\n   * @private\n   */\n  prepareDrawing(context: RenderContext, component: Component, primitive) {\n    const camera = context.camera;\n    const scene = camera.scene;\n    const canvas = scene.engine.canvas;\n    const lightMgr = scene.findFeature(LightFeature);\n    const canOIT = (<any>camera._renderPipeline).canOIT;\n\n    /** 光源 uniform values */\n    lightMgr.bindMaterialValues(this);\n    /** 分辨率 */\n    this.setValue(\"u_resolution\", new Vector2(canvas.width, canvas.height));\n    /** clipPlane */\n    for (let i = 0; i < this._clipPlaneCount; i++) {\n      this.setValue(`u_clipPlanes[${i}]`, scene.clipPlanes[i]);\n    }\n\n    /** oit  depth texture */\n    if (canOIT) {\n      this.setValue(\"u_depthSampler\", (<any>camera._renderPipeline).depthTexture);\n    }\n\n    /** 是否需要重新编译 technique */\n    const {\n      ambientLightCount,\n      directLightCount,\n      pointLightCount,\n      spotLightCount,\n      envMapLightCount,\n      useDiffuseEnv,\n      useSpecularEnv\n    } = lightMgr.lightSortAmount;\n    if (\n      !this._technique ||\n      this._ambientLightCount !== ambientLightCount ||\n      this._envMapLightCount !== envMapLightCount ||\n      this._useDiffuseEnv !== useDiffuseEnv ||\n      this._useSpecularEnv !== useSpecularEnv ||\n      this._directLightCount !== directLightCount ||\n      this._pointLightCount !== pointLightCount ||\n      this._spotLightCount !== spotLightCount ||\n      this._clipPlaneCount !== scene.clipPlanes?.length ||\n      this._useOIT !== canOIT\n    ) {\n      this._ambientLightCount = ambientLightCount;\n      this._envMapLightCount = envMapLightCount;\n      this._useDiffuseEnv = useDiffuseEnv;\n      this._useSpecularEnv = useSpecularEnv;\n      this._directLightCount = directLightCount;\n      this._pointLightCount = pointLightCount;\n      this._spotLightCount = spotLightCount;\n      this._clipPlaneCount = scene.clipPlanes?.length;\n      this._useOIT = canOIT;\n      this._generateTechnique(camera, component, primitive);\n    }\n\n    super.prepareDrawing(context, component, primitive);\n  }\n\n  /**\n   * 创建Technique\n   * @param {Camera} camera 相机\n   * @param {Ability} component 组件\n   * @private\n   */\n  _generateTechnique(camera: Camera, component, primitive) {\n    const customMacros = this._generateShaderMacros(camera, component, primitive);\n    const techName = PBRMaterial.TECHNIQUE_NAME;\n    const vertex = PBRMaterial.STATIC_VERTEX_SHADER;\n    const frag = PBRMaterial.STATIC_FRAGMENT_SHADER;\n    const config = this._generateConfig();\n    const lightMgr = camera.scene.findFeature(LightFeature);\n\n    const tech = new RenderTechnique(techName);\n    tech.isValid = true;\n    tech.uniforms = { ...lightMgr.getUniformDefine(), ...config.uniforms };\n    tech.attributes = config.attributes;\n    tech.fragmentPrecision = \"highp\";\n    tech.customMacros = customMacros;\n    tech.states = config.states;\n    tech.vertexShader = vertex;\n    tech.fragmentShader = frag;\n    this._technique = tech;\n    return tech;\n  }\n\n  /**\n   * 创建宏\n   * @param {Camera} camera 相机\n   * @param {Ability} component 组件\n   * @private\n   */\n  _generateShaderMacros(camera: Camera, component, primitive) {\n    const rhi = camera.scene.engine._hardwareRenderer;\n\n    const _macros = [\"O3_NEED_WORLDPOS\"];\n\n    if (!primitive._vertexElementMap.NORMAL || !primitive._vertexElementMap.TANGENT)\n      if (rhi.canIUse(GLCapabilityType.standardDerivatives)) _macros.push(\"HAS_DERIVATIVES\");\n\n    const uniforms = Object.keys(this._values);\n    if (uniforms.indexOf(\"u_baseColorSampler\") > -1) _macros.push(\"HAS_BASECOLORMAP\");\n    if (uniforms.indexOf(\"u_normalSampler\") > -1) _macros.push(\"O3_HAS_NORMALMAP\");\n    if (uniforms.indexOf(\"u_metallicSampler\") > -1) _macros.push(\"HAS_METALMAP\");\n    if (uniforms.indexOf(\"u_roughnessSampler\") > -1) _macros.push(\"HAS_ROUGHNESSMAP\");\n    if (uniforms.indexOf(\"u_metallicRoughnessSampler\") > -1) _macros.push(\"HAS_METALROUGHNESSMAP\");\n    if (uniforms.indexOf(\"u_emissiveSampler\") > -1) _macros.push(\"HAS_EMISSIVEMAP\");\n    if (uniforms.indexOf(\"u_occlusionSampler\") > -1) _macros.push(\"HAS_OCCLUSIONMAP\");\n    if (uniforms.indexOf(\"u_specularGlossinessSampler\") > -1) _macros.push(\"HAS_SPECULARGLOSSINESSMAP\");\n    if (uniforms.indexOf(\"u_perturbationSampler\") > -1) _macros.push(\"HAS_PERTURBATIONMAP\");\n    if (uniforms.indexOf(\"u_reflectionSampler\") > -1) _macros.push(\"HAS_REFLECTIONMAP\");\n    if (uniforms.indexOf(\"u_refractionSampler\") > -1) {\n      this.setValueByParamName(\n        \"PTMMatrix\",\n        new Matrix(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0)\n      );\n      _macros.push(\"HAS_REFRACTIONMAP\");\n    }\n\n    if (this.alphaMode === \"MASK\") {\n      _macros.push(\"ALPHA_MASK\");\n    } else if (this.alphaMode === \"BLEND\" && !this.refractionTexture) {\n      _macros.push(\"ALPHA_BLEND\");\n      if (uniforms.indexOf(\"u_opacitySampler\") > -1) {\n        _macros.push(\"HAS_OPACITYMAP\");\n        if (this.getOpacityFromRGB) {\n          _macros.push(\"GETOPACITYFROMRGB\");\n        }\n      }\n    }\n\n    if (this._envMapLightCount) {\n      _macros.push(\"O3_HAS_ENVMAP_LIGHT\");\n\n      if (this._useDiffuseEnv) _macros.push(\"O3_USE_DIFFUSE_ENV\");\n\n      if (this._useSpecularEnv) _macros.push(\"O3_USE_SPECULAR_ENV\");\n\n      if (rhi.canIUse(GLCapabilityType.shaderTextureLod)) _macros.push(\"HAS_TEX_LOD\");\n    }\n\n    if (this._ambientLightCount) {\n      _macros.push(\"O3_HAS_AMBIENT_LIGHT\");\n    }\n    if (this._directLightCount) _macros.push(`O3_DIRECT_LIGHT_COUNT ${this._directLightCount}`);\n    if (this._pointLightCount) _macros.push(`O3_POINT_LIGHT_COUNT ${this._pointLightCount}`);\n    if (this._spotLightCount) _macros.push(`O3_SPOT_LIGHT_COUNT ${this._spotLightCount}`);\n    if (this._clipPlaneCount) _macros.push(`O3_CLIPPLANE_NUM ${this._clipPlaneCount}`);\n\n    if (this._stateObj.unlit) _macros.push(\"UNLIT\");\n    if (this._stateObj.srgb) _macros.push(\"MANUAL_SRGB\");\n    if (this._stateObj.srgbFast) _macros.push(\"SRGB_FAST_APPROXIMATION\");\n    if (this._stateObj.gamma) _macros.push(\"GAMMA\");\n    if (this._stateObj.isMetallicWorkflow) _macros.push(\"IS_METALLIC_WORKFLOW\");\n    if (this._stateObj.envMapModeRefract) _macros.push(\"ENVMAPMODE_REFRACT\");\n\n    if ((<any>camera._renderPipeline).canOIT) {\n      _macros.push(\"OIT_ENABLE\");\n    }\n    return _macros;\n  }\n\n  /**\n   * 创建Technique配置信息\n   */\n  _generateConfig() {\n    const defaultState = PBRMaterial.TECH_CONFIG.states;\n    const states = {\n      disable: defaultState.disable.slice(),\n      enable: defaultState.enable.slice(),\n      functions: Object.assign({}, defaultState.functions) as any\n    };\n    if (this.doubleSided) {\n      states.disable.push(RenderState.CULL_FACE);\n    } else {\n      switch (this.side) {\n        case Side.FRONT:\n          states.functions.cullFace = [CullFace.BACK];\n          break;\n        case Side.BACK:\n          states.functions.cullFace = [CullFace.FRONT];\n          break;\n        case Side.NONE:\n          states.functions.cullFace = [CullFace.FRONT_AND_BACK];\n          break;\n        default:\n          delete states.functions.cullFace;\n      }\n    }\n    if (this.alphaMode === \"BLEND\" && !this.refractionTexture) {\n      states.enable.push(RenderState.BLEND);\n      if (this.blendFunc.length) {\n        states.functions.blendFunc = this._stateObj.blendFunc;\n      } else {\n        states.functions.blendFuncSeparate = this._stateObj.blendFuncSeparate;\n      }\n      states.functions.depthMask = this._stateObj.depthMask;\n      this.renderType = MaterialType.TRANSPARENT;\n    } else {\n      this.renderType = MaterialType.OPAQUE;\n    }\n\n    const clipPlaneUniforms = {};\n    for (let i = 0; i < this._clipPlaneCount; i++) {\n      clipPlaneUniforms[`u_clipPlanes[${i}]`] = {\n        name: `u_clipPlanes[${i}]`,\n        type: DataType.FLOAT_VEC4\n      };\n    }\n\n    PBRMaterial.TECH_CONFIG.uniforms = Object.assign({}, PBRMaterial.TECH_CONFIG.uniforms, clipPlaneUniforms);\n\n    return Object.assign({}, PBRMaterial.TECH_CONFIG, { states });\n  }\n\n  /**\n   * 创建一个副本\n   * @param {string} name - name\n   */\n  clone(name?: string) {\n    const newMtl = new PBRMaterial(name || this.name);\n\n    newMtl.renderType = this.renderType;\n    newMtl.useFog = this.useFog;\n\n    for (const name in this._uniformObj) {\n      const value = this._uniformObj[name];\n      if (value instanceof Texture) {\n        newMtl[name] = value;\n      } else {\n        newMtl[name] = Util.clone(value);\n      }\n    }\n\n    if (this._stateObj) {\n      newMtl._stateObj = Util.clone(this._stateObj);\n    }\n    return newMtl;\n  }\n\n  /**\n   * 默认材质名 ‘PBR_MATERIAL’\n   * @private\n   */\n  static MATERIAL_NAME = \"PBR_MATERIAL\";\n  /**\n   * 默认Technique名 ‘PBR_TECHNIQUE’\n   * @private\n   */\n  static TECHNIQUE_NAME = \"PBR_TECHNIQUE\";\n\n  /**\n   * 顶点着色器\n   * @private\n   */\n  static STATIC_VERTEX_SHADER = vs;\n\n  /**\n   * 片断着色器\n   * @private\n   */\n  static STATIC_FRAGMENT_SHADER = fs;\n\n  /**\n   * 已占用定点着色器 Uniform Vector 个数\n   * @private\n   */\n  static attribUniformVec4 = 12;\n\n  /**\n   * 默认 Technique 配置信息\n   * @private\n   */\n  static TECH_CONFIG = {\n    attributes: {},\n    uniforms: Object.assign({\n      u_baseColorSampler: {\n        name: \"u_baseColorSampler\",\n        paramName: \"baseColorTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_baseColorFactor: {\n        name: \"u_baseColorFactor\",\n        paramName: \"baseColorFactor\",\n        type: DataType.FLOAT_VEC4\n      },\n      u_normalSampler: {\n        name: \"u_normalSampler\",\n        paramName: \"normalTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_normalScale: {\n        name: \"u_normalScale\",\n        paramName: \"normalScale\",\n        type: DataType.FLOAT\n      },\n      u_lightDirection: {\n        name: \"u_lightDirection\",\n        type: DataType.FLOAT_VEC3\n      },\n      u_lightColor: {\n        name: \"u_lightColor\",\n        type: DataType.FLOAT_VEC3\n      },\n      u_metallicRoughnessValue: {\n        name: \"u_metallicRoughnessValue\",\n        paramName: \"metallicRoughness\",\n        type: DataType.FLOAT_VEC2\n      },\n      u_metallicSampler: {\n        name: \"u_metallicSampler\",\n        paramName: \"metallicTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_roughnessSampler: {\n        name: \"u_roughnessSampler\",\n        paramName: \"roughnessTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_metallicRoughnessSampler: {\n        name: \"u_metallicRoughnessSampler\",\n        paramName: \"metallicRoughnessTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_emissiveFactor: {\n        name: \"u_emissiveFactor\",\n        paramName: \"emissiveFactor\",\n        type: DataType.FLOAT_VEC3\n      },\n      u_emissiveSampler: {\n        name: \"u_emissiveSampler\",\n        paramName: \"emissiveTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_occlusionSampler: {\n        name: \"u_occlusionSampler\",\n        paramName: \"occlusionTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_occlusionStrength: {\n        name: \"u_occlusionStrength\",\n        paramName: \"occlusionStrength\",\n        type: DataType.FLOAT\n      },\n      u_alphaCutoff: {\n        name: \"u_alphaCutoff\",\n        paramName: \"alphaCutoff\",\n        type: DataType.FLOAT\n      },\n      u_opacitySampler: {\n        name: \"u_opacitySampler\",\n        paramName: \"opacityTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_specularFactor: {\n        name: \"u_specularFactor\",\n        paramName: \"specularFactor\",\n        type: DataType.FLOAT_VEC3\n      },\n      u_glossinessFactor: {\n        name: \"u_glossinessFactor\",\n        paramName: \"glossinessFactor\",\n        type: DataType.FLOAT\n      },\n      u_specularGlossinessSampler: {\n        name: \"u_specularGlossinessSampler\",\n        paramName: \"specularGlossinessTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_reflectionSampler: {\n        name: \"u_reflectionSampler\",\n        paramName: \"reflectionTexture\",\n        type: DataType.SAMPLER_CUBE\n      },\n      u_PTMMatrix: {\n        name: \"u_PTMMatrix\",\n        paramName: \"PTMMatrix\",\n        type: DataType.FLOAT_MAT4\n      },\n      u_envMapIntensity: {\n        name: \"u_envMapIntensity\",\n        paramName: \"envMapIntensity\",\n        type: DataType.FLOAT\n      },\n      u_refractionRatio: {\n        name: \"u_refractionRatio\",\n        paramName: \"refractionRatio\",\n        type: DataType.FLOAT\n      },\n      u_refractionDepth: {\n        name: \"u_refractionDepth\",\n        paramName: \"refractionDepth\",\n        type: DataType.FLOAT\n      },\n      u_refractionSampler: {\n        name: \"u_refractionSampler\",\n        paramName: \"refractionTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_resolution: {\n        name: \"u_resolution\",\n        paramName: \"resolution\",\n        type: DataType.FLOAT_VEC2\n      },\n      u_perturbationSampler: {\n        name: \"u_perturbationSampler\",\n        paramName: \"perturbationTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_perturbationUOffset: {\n        name: \"u_perturbationUOffset\",\n        paramName: \"perturbationUOffset\",\n        type: DataType.FLOAT\n      },\n      u_perturbationVOffset: {\n        name: \"u_perturbationVOffset\",\n        paramName: \"perturbationVOffset\",\n        type: DataType.FLOAT\n      },\n      u_depthSampler: {\n        name: \"u_depthSampler\",\n        type: DataType.SAMPLER_2D\n      }\n    }),\n    states: {\n      disable: [],\n      enable: [],\n      functions: {}\n    }\n  };\n}\n\nexport { PBRMaterial };\n","import { MathUtil, Vector3 } from \"@alipay/o3-math\";\nimport { BlendFunc, DataType, MaterialType, RenderState, UniformSemantic } from \"../base/Constant\";\nimport { BufferGeometry, GeometryRenderer } from \"../geometry\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { PrimitiveTopology } from \"../graphic/enums/PrimitiveTopology\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { IndexBuffer } from \"../graphic/IndexBuffer\";\nimport { VertexBuffer } from \"../graphic/VertexBuffer\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Material } from \"../material/Material\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport { TextureWrapMode } from \"../texture/enums\";\n\n/**\n * GPU粒子系统渲染类\n * @extends GeometryRenderer\n */\nexport class GPUParticleSystem extends GeometryRenderer {\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: VertexBuffer;\n  private _time: number;\n  private _isInit: boolean;\n  private _isStart: boolean;\n  public maxCount: number;\n  public options: {};\n  public getOptions: any;\n  public rotateToVelocity: boolean;\n  public blendFunc: number[];\n  public blendFuncSeparate: number[];\n  public useOriginColor: boolean;\n  public fragmentShader: string;\n  public vertexShader: string;\n  public particleTex;\n  public fadeIn: boolean;\n  public fadeOut: boolean;\n  public particleMaskTex;\n  public isScaleByLifetime: boolean;\n  public scaleFactor: number;\n  public spriteSheet: any[];\n  public is2d: boolean;\n  public interleaved: boolean;\n\n  /**\n   * @constructor\n   * @param {Entity} entity 节点对象\n   */\n  constructor(entity) {\n    super(entity);\n    this._time = 0; // 渲染时间，单位秒\n    this._isInit = false; // 是否完成初始化\n    this._isStart = false; // 是否开始粒子动画\n  }\n\n  /**\n   * 粒子发射参数\n   * @typedef {Object} ParticleParam\n   * @property {Vector3} position 位置，默认[0, 0, 0]\n   * @property {Vector3} velocity 速度，默认[0, 0, 0]\n   * @property {Vector3} acceleration 加速度，默认[0, 0, 0]\n   * @property {Vector3} color  颜色，默认[1, 1, 1]，范围 0 ~ 1\n   * @property {number} size  大小，默认 10，范围  >0\n   * @property {number} startAngle  初始旋转角度，默认0，范围 0 ~ 2*PI\n   * @property {number} rotateRate  自转旋转角速率，默认0\n   * @property {number} lifetime  生命周期，默认5，范围  >0\n   * @property {number} alpha 透明度，默认1，范围 0 ~ 1\n   * @property {Vector3} positionRandomness  位置随机因子，默认[0,0,0]，范围  >0\n   * @property {Array} positionArray  固定位置数组\n   * @property {Vector3} velocityRandomness  速度随机因子，默认[0, 0, 0]，范围  >0\n   * @property {Vector3} accelerationRandomness  加速度随机因子，默认[0, 0, 0]，范围  >0\n   * @property {number} colorRandomness  颜色随机因子，默认0，范围  0 ~ 1\n   * @property {number} sizeRandomness  大小随机因子，默认0，范围  0 ~ 1\n   * @property {number} alphaRandomness  透明度随机因子，默认0，范围 0 ~ 1\n   * @property {number} startAngleRandomness  初始旋转角度随机因子，默认0，范围 0 ~ 1\n   * @property {number} rotateRateRandomness  自转旋转角速率随机因子，默认0，范围   >0\n   * @property {number} startTimeRandomness  每个粒子出现的时间点随机因子，单位秒   >0\n   */\n\n  /**\n   * 初始化\n   * @param {ParticleProps} props 初始化参数\n   * @param {number} [ParticleProps.maxCount = 1000] 最大粒子数\n   * @param {boolean} [ParticleProps.once = false] 是否只发射一帧, 默认\n   * @param {ParticleParam} [ParticleProps.options] 发射参数\n   * @param {Function} [ParticleProps.getOptions] 获取更新参数（每帧回调）\n   * @param {boolean} [ParticleProps.rotateToVelocity] 是否跟随粒子运动速度的方向。\n   * @param {Array} [ParticleProps.blendFunc] webgl 混合因子，默认透明度混合 [SRC_ALPHA, ONE_MINUS_SRC_ALPHA]\n   * @param {Array} [ParticleProps.blendFuncSeparate] webgl 混合因子alpha通道分离，优先级高于blendFunc，如无指定使用blendFunc\n   * @param {boolean} [ParticleProps.useOriginColor = true] 是否使用图片原色: true(使用图片原色)、 false(图片原色混合生成的颜色)\n   * @param {string} [ParticleProps.fragmentShader] 自定义片元着色器\n   * @param {string} [ParticleProps.vertexShader] 自定义定点着色器\n   * @param {Texture} [ParticleProps.texture] 粒子贴图\n   * @param {Texture} [ParticleProps.maskTexture] 粒子遮罩贴图\n   * @param {boolean} [ParticleProps.isScaleByLifetime = false] 是否随生命周期缩小至消失\n   * @param {boolean} [ParticleProps.fadeIn = false] 是否添加淡入效果\n   * @param {boolean} [ParticleProps.fadeOut = false] 是否添加淡出效果\n   * @param {number} [ParticleProps.scaleFactor = 1] 粒子随时间scale参数\n   * @param {Array} [ParticleProps.spriteSheet] 雪碧图数据\n   * @param {boolean} [ParticleProps.is2d] 是否是2D旋转\n   */\n\n  initialize(props) {\n    this.maxCount = props.maxCount !== undefined ? props.maxCount : 1000;\n    this.once = props.once || false;\n    this.options = props.options || {};\n    this.getOptions = props.getOptions;\n    this.rotateToVelocity = props.rotateToVelocity || false;\n    if (props.blendFuncSeparate) {\n      this.blendFuncSeparate = props.blendFuncSeparate;\n    }\n    this.blendFunc = props.blendFunc || [BlendFunc.SRC_ALPHA, BlendFunc.ONE_MINUS_SRC_ALPHA];\n    this.useOriginColor = props.useOriginColor !== undefined ? props.useOriginColor : true;\n    this.fragmentShader = props.fragmentShader || null;\n    this.vertexShader = props.vertexShader || null;\n    this.particleTex = props.texture || null;\n    this.fadeIn = props.fadeIn || false;\n    this.fadeOut = props.fadeOut === undefined ? true : props.fadeOut;\n    this.particleMaskTex = props.maskTexture || null;\n    this.isScaleByLifetime = props.isScaleByLifetime || false;\n    this.scaleFactor = props.scaleFactor || 1;\n    this.spriteSheet = props.spriteSheet || null;\n    this.is2d = props.is2d === undefined ? true : props.is2d;\n    this.interleaved = props.spriteSheet || true;\n\n    this.setMaterial();\n\n    /** @private */\n    this.geometry = this._createGeometry();\n\n    this._isInit = true;\n\n    const options = this.getOptions ? this.getOptions(this._time) : this.options;\n\n    for (let x = 0; x < this.maxCount; x++) {\n      this._spawnParticle(options, x);\n    }\n    this._vertexBuffer.setData(this._vertices);\n    return this;\n  }\n\n  /**\n   * 更新参数\n   * @param {number} deltaTime 帧间隔时间\n   * @private\n   */\n  update(deltaTime) {\n    if (!this._isInit || !this._isStart) {\n      return;\n    }\n\n    this._time += deltaTime / 1000;\n    this._material.setValue(\"uTime\", this._time);\n  }\n\n  /**\n   * 设置粒子发射参数\n   * @param {ParticleParam} options 发射参数\n   */\n  setOptions(options) {\n    if (options !== undefined) {\n      this.options = { ...this.options, ...options };\n    }\n\n    return this;\n  }\n\n  /**\n   * 激活发射模块，重新开始发射 */\n  start() {\n    this._isStart = true;\n    this._time = 0;\n    this._material.setValue(\"uActive\", 1.0);\n  }\n\n  /**\n   * 停止发射\n   */\n  stop() {\n    this._material.setValue(\"uActive\", 0.0);\n  }\n\n  /**\n   * 销毁资源\n   * @private\n   */\n  destroy() {\n    super.destroy();\n    this.options = null;\n    if (this.particleTex) {\n      this.particleTex = null;\n    }\n    if (this.particleMaskTex) {\n      this.particleMaskTex = null;\n    }\n  }\n\n  /**\n   * 创建材质\n   * @private\n   */\n  setMaterial() {\n    const technique = this._createTechnique();\n    const material = new Material(\"particleMaterial\", this.engine);\n    material.technique = technique;\n    material.renderType = MaterialType.TRANSPARENT;\n\n    material.setValue(\"uOnce\", this.once ? 1.0 : 0.0);\n\n    if (this.particleTex) {\n      this.particleTex.wrapModeU = this.particleTex.wrapModeV = TextureWrapMode.Clamp;\n      material.setValue(\"particleTex\", this.particleTex);\n    }\n    if (this.particleMaskTex) {\n      this.particleMaskTex.wrapModeU = this.particleTex.wrapModeV = TextureWrapMode.Clamp;\n      material.setValue(\"particleMaskTex\", this.particleMaskTex);\n    }\n    super.setMaterial(material);\n\n    this._material = material;\n  }\n\n  /**\n   * 创建 Technique\n   * @private\n   */\n  _createTechnique() {\n    const cfg = {\n      attributes: {\n        positionStart: {\n          name: \"positionStart\",\n          semantic: \"POSITIONSTART\",\n          type: DataType.FLOAT_VEC3\n        },\n        color: {\n          name: \"color\",\n          semantic: \"COLOR\",\n          type: DataType.FLOAT_VEC3\n        },\n        alpha: {\n          name: \"alpha\",\n          semantic: \"ALPHA\",\n          type: DataType.FLOAT\n        },\n        acceleration: {\n          name: \"acceleration\",\n          semantic: \"ACCELERATION\",\n          type: DataType.FLOAT_VEC3\n        },\n        velocity: {\n          name: \"velocity\",\n          semantic: \"VELOCITY\",\n          type: DataType.FLOAT_VEC3\n        },\n        startAngle: {\n          name: \"startAngle\",\n          semantic: \"STARTANGLE\",\n          type: DataType.FLOAT\n        },\n        lifeTime: {\n          name: \"lifeTime\",\n          semantic: \"LIFETIME\",\n          type: DataType.FLOAT\n        },\n        startTime: {\n          name: \"startTime\",\n          semantic: \"STARTTIME\",\n          type: DataType.FLOAT\n        },\n        size: {\n          name: \"size\",\n          semantic: \"SIZE\",\n          type: DataType.FLOAT\n        },\n        rotateRate: {\n          name: \"rotateRate\",\n          semantic: \"ROTATERATE\",\n          type: DataType.FLOAT\n        },\n        scaleFactor: {\n          name: \"scaleFactor\",\n          semantic: \"SCALEFACTOR\",\n          type: DataType.FLOAT\n        },\n        uv: {\n          name: \"uv\",\n          semantic: \"UV\",\n          type: DataType.FLOAT_VEC3\n        },\n        normalizedUv: {\n          name: \"normalizedUv\",\n          semantic: \"NORMALIZED_UV\",\n          type: DataType.FLOAT_VEC2\n        }\n      },\n      uniforms: {\n        uOnce: {\n          name: \"uOnce\",\n          type: DataType.FLOAT\n        },\n        uActive: {\n          name: \"uActive\",\n          type: DataType.FLOAT\n        },\n        uTime: {\n          name: \"uTime\",\n          type: DataType.FLOAT\n        },\n        matModelViewProjection: {\n          name: \"matModelViewProjection\",\n          semantic: UniformSemantic.MODELVIEWPROJECTION,\n          type: DataType.FLOAT_MAT4\n        },\n        matModelView: {\n          name: \"matModelView\",\n          semantic: UniformSemantic.MODELVIEW,\n          type: DataType.FLOAT_MAT4\n        }\n      } as any,\n      states: {\n        enable: [RenderState.BLEND],\n        functions: {\n          // blendFunc: this.blendFunc,\n          // todo question\n          depthMask: [false]\n        } as any\n      }\n    };\n\n    if (this.is2d) {\n      cfg.uniforms.matViewInverse = {\n        name: \"matViewInverse\",\n        semantic: UniformSemantic.VIEWINVERSE,\n        type: DataType.FLOAT_MAT4\n      };\n\n      cfg.uniforms.matProjection = {\n        name: \"matProjection\",\n        semantic: UniformSemantic.PROJECTION,\n        type: DataType.FLOAT_MAT4\n      };\n\n      cfg.uniforms.matView = {\n        name: \"matView\",\n        semantic: UniformSemantic.VIEW,\n        type: DataType.FLOAT_MAT4\n      };\n\n      cfg.uniforms.matWorld = {\n        name: \"matWorld\",\n        semantic: UniformSemantic.MODEL,\n        type: DataType.FLOAT_MAT4\n      };\n    } else {\n      // @ts-ignore\n      cfg.states.disable = [RenderState.CULL_FACE];\n    }\n\n    if (this.blendFuncSeparate) {\n      // @ts-ignore\n      cfg.states.functions.blendFuncSeparate = this.blendFuncSeparate;\n    } else {\n      // @ts-ignore\n      cfg.states.functions.blendFunc = this.blendFunc;\n    }\n    if (this.particleTex) {\n      cfg.uniforms.particleTex = {\n        name: \"particleTex\",\n        type: DataType.SAMPLER_2D\n      };\n    }\n    if (this.particleMaskTex) {\n      cfg.uniforms.particleMaskTex = {\n        name: \"particleMaskTex\",\n        type: DataType.SAMPLER_2D\n      };\n    }\n\n    const tech = new RenderTechnique(\"particleTech\");\n    tech.isValid = true;\n    tech.uniforms = cfg.uniforms;\n    tech.attributes = cfg.attributes;\n    tech.states = cfg.states;\n    tech.vertexShader = this._createVertexShader();\n    tech.fragmentShader = this._createFragmentShader();\n\n    return tech;\n  }\n\n  /**\n   * 创建几何体\n   * @private\n   */\n  _createGeometry() {\n    const geometry = new BufferGeometry(\"particleGeometry\");\n    geometry.primitiveTopology = PrimitiveTopology.Triangles;\n\n    const vertexStride = 96;\n    const vertexFloatCount = this.maxCount * 4 * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    const indices = new Uint16Array(6 * this.maxCount);\n\n    for (let i = 0, idx = 0; i < this.maxCount; ++i) {\n      let startIndex = i * 4;\n      indices[idx++] = startIndex + 0;\n      indices[idx++] = startIndex + 1;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex + 0;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex + 3;\n    }\n\n    const vertexElements = [\n      new VertexElement(\"POSITIONSTART\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"VELOCITY\", 12, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"ACCELERATION\", 24, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"COLOR\", 36, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"ALPHA\", 48, VertexElementFormat.Single, 0),\n      new VertexElement(\"SIZE\", 52, VertexElementFormat.Single, 0),\n      new VertexElement(\"ROTATERATE\", 56, VertexElementFormat.Single, 0),\n      new VertexElement(\"STARTTIME\", 60, VertexElementFormat.Single, 0),\n      new VertexElement(\"LIFETIME\", 64, VertexElementFormat.Single, 0),\n      new VertexElement(\"STARTANGLE\", 68, VertexElementFormat.Single, 0),\n      new VertexElement(\"SCALEFACTOR\", 72, VertexElementFormat.Single, 0),\n      new VertexElement(\"UV\", 76, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"NORMALIZED_UV\", 88, VertexElementFormat.Vector2, 0)\n    ];\n    const vertexBuffer = new VertexBuffer(this.engine, vertexFloatCount * 4, BufferUsage.Dynamic);\n    const indexBuffer = new IndexBuffer(this.engine, indices, BufferUsage.Dynamic);\n\n    geometry.setVertexBufferBindings(new VertexBufferBinding(vertexBuffer, vertexStride));\n    geometry.setIndexBufferBinding(indexBuffer, IndexFormat.UInt16);\n    geometry.addVertexElements(vertexElements);\n    geometry.drawGroup.count = indices.length;\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride;\n    this._vertices = vertices;\n    return geometry;\n  }\n\n  /**\n   * 粒子发射\n   * @param {Options} options\n   * @private\n   */\n  _spawnParticle(options, i) {\n    const position: Vector3 = options.position !== undefined ? options.position.clone() : new Vector3();\n    const positionRandomness: Vector3 =\n      options.positionRandomness !== undefined ? options.positionRandomness.clone() : new Vector3();\n    const positionArray = options.positionArray;\n    const velocity: Vector3 = options.velocity !== undefined ? options.velocity.clone() : new Vector3();\n    const velocityRandomness: Vector3 =\n      options.velocityRandomness !== undefined ? options.velocityRandomness.clone() : new Vector3();\n    const color: Vector3 = options.color !== undefined ? options.color.clone() : new Vector3(1, 1, 1);\n    const colorRandomness = options.colorRandomness !== undefined ? options.colorRandomness : 1;\n    const alpha = options.alpha !== undefined ? options.alpha : 1;\n    const alphaRandomness = options.alphaRandomness !== undefined ? options.alphaRandomness : 0;\n    const lifetime = options.lifetime !== undefined ? options.lifetime : 5;\n    let size = options.size !== undefined ? options.size : 1;\n    const sizeRandomness = options.sizeRandomness !== undefined ? options.sizeRandomness : 0;\n    const smoothPosition = options.smoothPosition !== undefined ? options.smoothPosition : false;\n    const startTimeRandomness = options.startTimeRandomness !== undefined ? options.startTimeRandomness : 0;\n\n    const acceleration: Vector3 = options.acceleration !== undefined ? options.acceleration.clone() : new Vector3();\n    const accelerationRandomness: Vector3 =\n      options.accelerationRandomness !== undefined ? options.accelerationRandomness.clone() : new Vector3();\n    const startAngle = options.startAngle !== undefined ? options.startAngle : 0;\n    const startAngleRandomness = options.startAngleRandomness !== undefined ? options.startAngleRandomness : 0;\n    const rotateRate = options.rotateRate !== undefined ? options.rotateRate : 0;\n    const rotateRateRandomness = options.rotateRateRandomness !== undefined ? options.rotateRateRandomness : 0;\n    const scaleFactor = options.scaleFactor !== undefined ? options.scaleFactor : 1;\n\n    let x = position.x;\n    let y = position.y;\n    let z = position.z;\n\n    if (positionArray) {\n      if (positionArray.length !== this.maxCount) {\n        throw Error(\"The length of positionArray must be equal to maxCount.\");\n      }\n\n      x += positionArray[i].x;\n      y += positionArray[i].y;\n      z += positionArray[i].z;\n    } else {\n      x += this._getRandom() * positionRandomness.x;\n      y += this._getRandom() * positionRandomness.y;\n      z += this._getRandom() * positionRandomness.z;\n    }\n\n    if (smoothPosition === true) {\n      x += -(velocity.x * this._getRandom());\n      y += -(velocity.y * this._getRandom());\n      z += -(velocity.z * this._getRandom());\n    }\n\n    const velX = velocity.x + this._getRandom() * velocityRandomness.x;\n    const velY = velocity.y + this._getRandom() * velocityRandomness.y;\n    const velZ = velocity.z + this._getRandom() * velocityRandomness.z;\n\n    const accX = acceleration.x + this._getRandom() * accelerationRandomness.x;\n    const accY = acceleration.y + this._getRandom() * accelerationRandomness.y;\n    const accZ = acceleration.z + this._getRandom() * accelerationRandomness.z;\n\n    color.x = MathUtil.clamp(color.x + this._getRandom() * colorRandomness, 0, 1);\n    color.y = MathUtil.clamp(color.y + this._getRandom() * colorRandomness, 0, 1);\n    color.z = MathUtil.clamp(color.z + this._getRandom() * colorRandomness, 0, 1);\n    size = Math.max(size + this._getRandom() * sizeRandomness * size * 2, 0);\n    const lifeTime = lifetime + this._getRandom() * lifetime;\n    const sa = startAngle + this._getRandom() * Math.PI * startAngleRandomness * 2;\n    const rr = rotateRate + this._getRandom() * rotateRateRandomness;\n    const particleAlpha = MathUtil.clamp(alpha + this._getRandom() * alphaRandomness, 0, 1);\n    const startTime = Math.random() * startTimeRandomness;\n\n    const vertices = this._vertices;\n    for (let j = 0; j < 4; j++) {\n      const k = ((i * 4 + j) * this._vertexStride) / 4;\n\n      // POSITIONSTART\n      vertices[k] = x;\n      vertices[k + 1] = y;\n      vertices[k + 2] = z;\n      // VELOCITY\n      vertices[k + 3] = velX;\n      vertices[k + 4] = velY;\n      vertices[k + 5] = velZ;\n      // ACCELERATION\n      vertices[k + 6] = accX;\n      vertices[k + 7] = accY;\n      vertices[k + 8] = accZ;\n      //COLOR\n      vertices[k + 9] = color[0];\n      vertices[k + 10] = color[1];\n      vertices[k + 11] = color[2];\n      //ALPHA\n      vertices[k + 12] = particleAlpha;\n      //SIZE\n      vertices[k + 13] = size;\n      //ROTATERATE\n      vertices[k + 14] = rr;\n      //STARTTIME\n      vertices[k + 15] = startTime;\n      //LIFETIME\n      vertices[k + 16] = lifeTime;\n      //STARTANGLE\n      vertices[k + 17] = sa;\n      //SCALEFACTOR\n      vertices[k + 18] = scaleFactor;\n\n      this._setUvs(i, j, k);\n    }\n  }\n\n  /**\n   * 设置每个粒子的uv\n   * @param i {number} 第i个粒子\n   * @param j {number} 单个粒子四个顶点中的第j个\n   * @param k {number} 所有粒子顶点中的第k个\n   */\n  private _setUvs(i: number, j: number, k: number) {\n    const { spriteSheet } = this;\n    const { particleTex } = this;\n    let rects;\n    const normalizedRects: any[] = [\n      [-0.5, -0.5],\n      [0.5, -0.5],\n      [0.5, 0.5],\n      [-0.5, 0.5]\n    ];\n    if (particleTex) {\n      const width = particleTex.image ? particleTex.image.width : particleTex.width;\n      const height = particleTex.image ? particleTex.image.height : particleTex.height;\n\n      if (spriteSheet) {\n        const { x, y, w, h } = spriteSheet[i % spriteSheet.length];\n\n        const u = x / width;\n        const v = y / height;\n        const p = u + w / width;\n        const q = v + h / height;\n\n        rects = [\n          [u, q, h / w], // left bottom\n          [p, q, h / w], // right bottom\n          [p, v, h / w], // right top\n          [u, v, h / w] // left top\n        ];\n      } else {\n        rects = [\n          [0, 0, height / width],\n          [1, 0, height / width],\n          [1, 1, height / width],\n          [0, 1, height / width]\n        ];\n      }\n    } else {\n      rects = [\n        [0, 0, 1],\n        [1, 0, 1],\n        [1, 1, 1],\n        [0, 1, 1]\n      ];\n    }\n    const vertices = this._vertices;\n\n    //UV\n    const uv = rects[j];\n    vertices[k + 19] = uv[0];\n    vertices[k + 20] = uv[1];\n    vertices[k + 21] = uv[2];\n    //NORMALIZED_U\n    const nuv = normalizedRects[j];\n    vertices[k + 22] = nuv[0];\n    vertices[k + 23] = nuv[1];\n  }\n\n  /**\n   * 获取随机数\n   * @returns {number}\n   * @private\n   */\n  _getRandom() {\n    return Math.random() - 0.5;\n  }\n\n  /**\n   * 获取着色器代码\n   * @returns {string}\n   * @private\n   */\n  _getShader() {\n    return {\n      vertexShader: `\n        precision highp float;\n        precision highp int;\n\n        attribute float lifeTime;\n        attribute float startTime;\n        attribute float size;\n        attribute float rotateRate;\n        attribute vec3 velocity;\n        attribute vec3 acceleration;\n        attribute vec3 positionStart;\n        attribute vec3 color;\n        attribute float alpha;\n        attribute float startAngle;\n        attribute float scaleFactor;\n        attribute vec3 uv;\n        attribute vec2 normalizedUv;\n        \n        uniform float uTime;\n        uniform float uOnce;\n        uniform float uActive;\n        uniform mat4 matModelViewProjection;\n        uniform mat4 matModelView;\n        uniform mat4 matViewInverse;\n        uniform mat4 matView;\n        uniform mat4 matProjection;\n        uniform mat4 matWorld;\n\n        varying vec3 v_color;\n        varying float v_alpha;\n        varying float lifeLeft;\n        varying mat2 vTextureMat;\n        varying vec2 v_uv;\n\n        mat2 rotation2d(float angle) {\n          float s = sin(angle);\n          float c = cos(angle);\n        \n          return mat2(\n            c, -s,\n            s, c\n          );\n        }\n\n        void main()\n        {\n          v_color = color;\n          v_uv = uv.xy;\n          v_alpha = alpha;\n          \n          // float deltaTime = max(mod(uTime, lifeTime), 0.0);\n          // 真实的生命周期\n          float life = lifeTime + startTime;\n          // 当前已过去的时间\n          float deltaTime = max(mod(uTime, life) - startTime, 0.0);\n\n          bool isDying = false;\n\n          if (uOnce == 1.0 || uActive == 0.0) {\n            isDying = true;\n          }\n\n          if ((isDying && uTime > life)) {\n            deltaTime = life;\n          }\n\n          // 没出生就代表死亡，否则没出生就显示了\n          if (deltaTime == 0.0) {\n            deltaTime = life;\n          }\n\n          lifeLeft = 1.0 - deltaTime / lifeTime;\n          float scale = size;\n          vec3 position = positionStart + (velocity + acceleration * deltaTime * 0.5) * deltaTime;\n      `,\n      postionShader: `\n        gl_Position = matModelViewProjection * vec4(position, 1.0 );\n      `,\n      sizeVertexShader: `\n          scale *= pow(scaleFactor, deltaTime);\n      `,\n      isScaleByLifetimeVertexShader: `\n          scale *= lifeLeft;\n      `,\n      rotateToVelocityVertexShader: `\n        vec3 v = velocity + acceleration * deltaTime;\n        float angle = atan(v.z, v.x) * 2.0;\n        float s = sin(angle);\n        float c = cos(angle);\n      `,\n      rotationVertexShader: `\n        float deltaAngle = deltaTime * rotateRate;\n        float angle = startAngle + deltaAngle;\n        float s = sin(angle);\n        float c = cos(angle);\n\n      `,\n      rotation2dShader: `\n        vec2 rotatedPoint = rotation2d(angle) * vec2(normalizedUv.x, normalizedUv.y * uv.z);\n\n        vec3 basisX = matViewInverse[0].xyz;\n        vec3 basisZ = matViewInverse[1].xyz;\n\n        vec3 localPosition = vec3(basisX * rotatedPoint.x + \n                    basisZ * rotatedPoint.y) * scale + position;\n\n        gl_Position = matProjection * matView * vec4(localPosition + matWorld[3].xyz, 1.);\n      `,\n      rotation3dShader: `\n        vec4 rotatedPoint = vec4((normalizedUv.x * c + normalizedUv.y * uv.z * s) * scale , 0., \n                                 (normalizedUv.x * s - normalizedUv.y * uv.z * c) * scale, 1.);\n      \n        vec4 orientation = vec4(0, 0, 0, 1);\n        vec4 q2 = orientation + orientation;\n        vec4 qx = orientation.xxxw * q2.xyzx;\n        vec4 qy = orientation.xyyw * q2.xyzy;\n        vec4 qz = orientation.xxzw * q2.xxzz;\n      \n        mat4 localMatrix = mat4(\n            (1.0 - qy.y) - qz.z, \n            qx.y + qz.w, \n            qx.z - qy.w,\n            0,\n      \n            qx.y - qz.w, \n            (1.0 - qx.x) - qz.z, \n            qy.z + qx.w,\n            0,\n      \n            qx.z + qy.w, \n            qy.z - qx.w, \n            (1.0 - qx.x) - qy.y,\n            0,\n      \n            position.x, position.y, position.z, 1);\n\n        rotatedPoint = localMatrix * rotatedPoint;\n\n        gl_Position = matModelViewProjection * rotatedPoint;\n      `,\n\n      fragmentShader: `\n        precision mediump float;\n        precision mediump int;\n\n        varying vec3 v_color;\n        varying float v_alpha;\n        varying float lifeLeft;\n        varying vec2 v_uv;\n        uniform sampler2D particleTex;\n        uniform sampler2D particleMaskTex;\n\n        void main()\n        {\n          float alphaFactor = 1.0;\n      `,\n      fadeInFragmentShader: `\n        float fadeInFactor = step(0.5, lifeLeft);\n        alphaFactor = 2.0 * fadeInFactor * (1.0 - lifeLeft) + (1.0 - fadeInFactor);\n      `,\n      fadeOutFragmentShader: `\n        float fadeOutFactor = step(0.5, lifeLeft);\n        alphaFactor = alphaFactor * 2.0 * (1.0 - fadeOutFactor) * lifeLeft + alphaFactor * fadeOutFactor;\n      `,\n      noImgFragmentShader: ` \n        gl_FragColor = vec4( v_color, alphaFactor * v_alpha);\n      `,\n      imgFragmentShader: `\n        vec4 tex = texture2D(particleTex, v_uv);\n      `,\n      originColorFragmentShader: `\n        gl_FragColor = vec4(tex.rgb, alphaFactor * tex.a * v_alpha);\n      `,\n      createColorFragmentShader: `\n        gl_FragColor = vec4(v_color * tex.rgb, alphaFactor * tex.a * v_alpha);\n      `,\n      createColorWithMaskFragmentShader: `\n        vec4 maskTex = texture2D( particleMaskTex, v_uv);\n        gl_FragColor = vec4(v_color * tex.rgb + maskTex.a, alphaFactor * tex.a * v_alpha);\n      `\n    };\n  }\n\n  /**\n   * 创建顶点着色器\n   * @returns {string}\n   * @private\n   */\n  _createVertexShader() {\n    const shader = this._getShader();\n\n    let vertexShader = \"\";\n    if (this.vertexShader) {\n      vertexShader = this.vertexShader;\n    } else {\n      vertexShader = shader.vertexShader;\n      if (this.isScaleByLifetime) {\n        vertexShader += shader.isScaleByLifetimeVertexShader;\n      } else {\n        vertexShader += shader.sizeVertexShader;\n      }\n\n      if (this.rotateToVelocity) {\n        vertexShader += shader.rotateToVelocityVertexShader;\n      } else {\n        vertexShader += shader.rotationVertexShader;\n      }\n\n      // 2D 和 3D 的旋转算法不同\n      if (this.is2d) {\n        vertexShader += shader.rotation2dShader;\n      } else {\n        vertexShader += shader.rotation3dShader;\n      }\n\n      vertexShader += \"}\";\n    }\n    return vertexShader;\n  }\n\n  /**\n   * 创建片元着色器\n   * @returns {string}\n   * @private\n   */\n  _createFragmentShader() {\n    const shader = this._getShader();\n\n    let fragmentShader = \"\";\n    if (this.fragmentShader) {\n      fragmentShader = this.fragmentShader;\n    } else {\n      fragmentShader = shader.fragmentShader;\n      if (this.fadeIn) {\n        fragmentShader += shader.fadeInFragmentShader;\n      }\n\n      if (this.fadeOut) {\n        fragmentShader += shader.fadeOutFragmentShader;\n      }\n\n      if (!this.particleTex) {\n        fragmentShader += shader.noImgFragmentShader;\n      } else {\n        fragmentShader += shader.imgFragmentShader;\n        if (this.useOriginColor) {\n          fragmentShader += shader.originColorFragmentShader;\n        } else {\n          if (this.particleMaskTex) {\n            fragmentShader += shader.createColorWithMaskFragmentShader;\n          } else {\n            fragmentShader += shader.createColorFragmentShader;\n          }\n        }\n      }\n      fragmentShader += \"}\";\n    }\n    return fragmentShader;\n  }\n}\n","import { BlendFunc } from \"../base/Constant\";\nimport { GPUParticleSystem } from \"./particle\";\n\n/**\n * 暂时只为编辑器使用\n */\nexport class Particle extends GPUParticleSystem {\n  private _config;\n  private _options;\n\n  constructor(node, props) {\n    super(node);\n\n    this._options = {\n      position: props.__position,\n      positionRandomness: props.__positionRandomness,\n      velocity: props.__velocity,\n      velocityRandomness: props.__velocityRandomness,\n      acceleration: props.__acceleration,\n      accelerationRandomness: props.__accelerationRandomness,\n      color: props.__color,\n      colorRandomness: props.__colorRandomness,\n      lifetime: props.__lifetime,\n      size: props.__size,\n      sizeRandomness: props.__sizeRandomness,\n      startAngle: props.__startAngle,\n      startAngleRandomness: props.__startAngleRandomness,\n      rotateRate: props.__rotateRate,\n      rotateRateRandomness: props.__rotateRateRandomness,\n      scaleFactor: props.__scaleFactor,\n      alpha: props.__alpha,\n      alphaRandomness: props.__alphaRandomness,\n      startTimeRandomness: props.__startTimeRandomness\n    };\n    // 粒子发射器环境参数\n    this._config = {\n      maxCount: props.__maxCount,\n      once: props.__once,\n      rotateToVelocity: props.__rotateToVelocity,\n      isScaleByLifetime: props.__isScaleByLifetime,\n      fadeIn: props.__fadeIn,\n      fadeOut: props.__fadeOut,\n      texture: props.__texture ? props.__texture : null,\n      maskTexture: props.__maskTexture ? props.__maskTexture : null,\n      // blendFunc: [props.__blendFunc01, props.__blendFunc02],\n      useOriginColor: props.__useOriginColor,\n      is2d: props.__is2d,\n      options: this._options\n    };\n    if (props.__spriteSheet) {\n      if (typeof props.__spriteSheet === \"object\" && props.__spriteSheet.length) {\n        this._config.spriteSheet = props.__spriteSheet;\n      } else if (typeof props.__spriteSheet === \"string\") {\n        try {\n          const spriteSheet = JSON.parse(props.__spriteSheet);\n          if (spriteSheet.length) {\n            this._config.spriteSheet = spriteSheet;\n          }\n        } catch (e) {}\n      }\n    }\n    if (props.__positionArray) {\n      if (typeof props.__positionArray === \"object\" && props.__positionArray.length) {\n        this._options.positionArray = props.__positionArray;\n      } else if (typeof props.__positionArray === \"string\") {\n        try {\n          const positionArray = JSON.parse(props.__positionArray);\n          if (positionArray.length) {\n            this._options.positionArray = positionArray;\n          }\n        } catch (e) {}\n      }\n    }\n    if (props.__separate) {\n      this._config.blendFuncSeparate = [\n        BlendFunc[props.__srcRGB || \"SRC_ALPHA\"],\n        BlendFunc[props.__dstRGB || \"ONE_MINUS_SRC_ALPHA\"],\n        BlendFunc[props.__srcAlpha || \"SRC_ALPHA\"],\n        BlendFunc[props.__dstAlpha || \"ONE_MINUS_SRC_ALPHA\"]\n      ];\n    } else if (props.__src && props.__dst) {\n      this._config.blendFunc = [BlendFunc[props.__src], BlendFunc[props.__dst]];\n    }\n    this.initialize(this._config);\n    if (props.__defaultStart === true || props.__defaultStart === undefined) {\n      this.start();\n    }\n  }\n\n  updateOption(key, value) {\n    this._options = {\n      ...this._options,\n      [key]: value\n    };\n    this._config = {\n      ...this._config,\n      options: {\n        ...this._options\n      }\n    };\n    this.initialize(this._config);\n    this.start();\n  }\n\n  updateConfig(key, value) {\n    this._config = {\n      ...this._config,\n      [key]: value\n    };\n    this.initialize(this._config);\n    this.start();\n  }\n\n  set __position(value) {\n    this.updateOption(\"position\", value);\n  }\n\n  set __positionRandomness(value) {\n    this.updateOption(\"positionRandomness\", value);\n  }\n\n  set __velocity(value) {\n    this.updateOption(\"velocity\", value);\n  }\n\n  set __velocityRandomness(value) {\n    this.updateOption(\"velocityRandomness\", value);\n  }\n\n  set __acceleration(value) {\n    this.updateOption(\"acceleration\", value);\n  }\n\n  set __accelerationRandomness(value) {\n    this.updateOption(\"accelerationRandomness\", value);\n  }\n\n  set __color(value) {\n    this.updateOption(\"color\", value);\n  }\n\n  set __colorRandomness(value) {\n    this.updateOption(\"colorRandomness\", value);\n  }\n\n  set __lifetime(value) {\n    this.updateOption(\"lifetime\", value);\n  }\n\n  set __size(value) {\n    this.updateOption(\"size\", value);\n  }\n\n  set __sizeRandomness(value) {\n    this.updateOption(\"sizeRandomness\", value);\n  }\n\n  set __startAngle(value) {\n    this.updateOption(\"startAngle\", value);\n  }\n\n  set __startAngleRandomness(value) {\n    this.updateOption(\"startAngleRandomness\", value);\n  }\n\n  set __rotateRate(value) {\n    this.updateOption(\"rotateRate\", value);\n  }\n\n  set __rotateRateRandomness(value) {\n    this.updateOption(\"rotateRateRandomness\", value);\n  }\n\n  set __scaleFactor(value) {\n    this.updateOption(\"scaleFactor\", value);\n  }\n\n  set __alpha(value) {\n    this.updateOption(\"alpha\", value);\n  }\n\n  set __alphaRandomness(value) {\n    this.updateOption(\"alphaRandomness\", value);\n  }\n\n  set __startTimeRandomness(value) {\n    this.updateOption(\"startTimeRandomness\", value);\n  }\n\n  set __positionArray(value) {\n    if (typeof value === \"object\" && value.length) {\n      this.updateOption(\"positionArray\", value);\n    } else if (typeof value === \"string\") {\n      try {\n        const positionArray = JSON.parse(value);\n        if (positionArray.length) {\n          this.updateOption(\"positionArray\", positionArray);\n        } else {\n          this.updateOption(\"positionArray\", null);\n        }\n      } catch (e) {\n        this.updateOption(\"positionArray\", null);\n      }\n    } else {\n      this.updateOption(\"positionArray\", null);\n    }\n  }\n\n  set __maxCount(value) {\n    this.updateConfig(\"maxCount\", value);\n  }\n\n  set __useOriginColor(value) {\n    this.updateConfig(\"useOriginColor\", value);\n  }\n\n  set __once(value) {\n    this.updateConfig(\"once\", value);\n  }\n\n  set __rotateToVelocity(value) {\n    this.updateConfig(\"rotateToVelocity\", value);\n  }\n\n  set __isScaleByLifetime(value) {\n    this.updateConfig(\"isScaleByLifetime\", value);\n  }\n\n  set __fadeIn(value) {\n    this.updateConfig(\"fadeIn\", value);\n  }\n\n  set __fadeOut(value) {\n    this.updateConfig(\"fadeOut\", value);\n  }\n\n  set __texture(value) {\n    this.updateConfig(\"texture\", value);\n  }\n\n  set __maskTexture(value) {\n    this.updateConfig(\"maskTexture\", value);\n  }\n\n  set __spriteSheet(value) {\n    if (typeof value === \"object\" && value.length) {\n      this.updateConfig(\"spriteSheet\", value);\n    } else if (typeof value === \"string\") {\n      try {\n        const spriteSheet = JSON.parse(value);\n        if (spriteSheet.length) {\n          this.updateConfig(\"spriteSheet\", spriteSheet);\n        } else {\n          this.updateConfig(\"spriteSheet\", null);\n        }\n      } catch (e) {\n        this.updateConfig(\"spriteSheet\", null);\n      }\n    } else {\n      this.updateConfig(\"spriteSheet\", null);\n    }\n  }\n\n  set __is2d(value) {\n    this.updateConfig(\"is2d\", value);\n  }\n  // set __blendFunc01(value) {\n  //   this._config.blendFunc[0] = value;\n  //   this.updateConfig('blendFunc', this._config.blendFunc);\n  // }\n\n  // set __blendFunc02(value) {\n  //   this._config.blendFunc[1] = value;\n  //   this.updateConfig('blendFunc', this._config.blendFunc);\n  // }\n}\n","import FRAG_SHADER from \"./trail.fs.glsl\";\nimport VERT_SHADER from \"./trail.vs.glsl\";\nimport { Material } from \"../material/Material\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport { BlendFunc, MaterialType, RenderState, DataType } from \"../base/Constant\";\n\nexport class TrailMaterial extends Material {\n  /**\n   * 生成内部所使用的 Technique 对象\n   * @private\n   */\n  _generateTechnique() {\n    //--\n    const tech = new RenderTechnique(\"trail_tech\");\n    tech.isValid = true;\n    tech.uniforms = {\n      u_texture: {\n        name: \"u_texture\",\n        type: DataType.SAMPLER_2D\n      }\n    };\n    tech.attributes = {};\n    tech.states = {\n      enable: [RenderState.BLEND],\n      functions: {\n        blendFunc: [BlendFunc.SRC_ALPHA, BlendFunc.ONE],\n        depthMask: [false]\n      }\n    };\n    tech.customMacros = [];\n    tech.vertexShader = VERT_SHADER;\n    tech.fragmentShader = FRAG_SHADER;\n\n    this._technique = tech;\n    this.renderType = MaterialType.TRANSPARENT;\n  }\n\n  /**\n   * 重写基类方法\n   * @private\n   */\n  prepareDrawing(context, component, primitive) {\n    if (this._technique === null) {\n      this._generateTechnique();\n    }\n\n    super.prepareDrawing(context, component, primitive);\n  }\n}\n","import { Matrix, Quaternion, Vector3 } from \"@alipay/o3-math\";\nimport { BufferGeometry, GeometryRenderer } from \"../geometry\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { PrimitiveTopology } from \"../graphic/enums/PrimitiveTopology\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexBuffer } from \"../graphic/VertexBuffer\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { TrailMaterial } from \"./TrailMaterial\";\n\nconst _tempVector3 = new Vector3();\n\n/**\n * 拖尾效果渲染组件\n */\nexport class TrailRenderer extends GeometryRenderer {\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: VertexBuffer;\n  private _stroke;\n  private _minSeg;\n  private _lifetime;\n  private _maxPointNum;\n  private _points: Array<Vector3>;\n  private _pointStates: Array<number>;\n  private _strapPoints: Array<Vector3>;\n  private _curPointNum;\n  private _prePointsNum;\n  /**\n   * 纹理对象基类\n   * @param {Entity} entity 所属的Node对象\n   * @param {Object} props 可选配置，包含以下参数\n   * @param {float} [props.stroke=0.2] 拖尾的宽度\n   * @param {float} [props.minSeg=0.02] 拖尾形状由物体运动轨迹上的点构成，描述相邻点之间最小间隔距离\n   * @param {Number} [props.lifetime=1000] 物体运动时，拖尾效果持续的时长\n   * @param {Material} [props.material=TrailMaterial] 拖尾使用的材质，默认使用内置的TrailMaterial\n   */\n  constructor(entity, props) {\n    super(entity);\n\n    this._stroke = props.stroke || 0.2;\n    this._minSeg = props.minSeg || 0.02;\n    this._lifetime = props.lifetime || 1000;\n    this._maxPointNum = (this._lifetime / 1000.0) * entity.engine.targetFrameRate;\n\n    this._points = [];\n    this._pointStates = [];\n    this._strapPoints = [];\n    for (let i = 0; i < this._maxPointNum; i++) {\n      this._points.push(new Vector3());\n      this._pointStates.push(this._lifetime);\n\n      this._strapPoints.push(new Vector3());\n      this._strapPoints.push(new Vector3());\n    }\n    this._curPointNum = 0;\n\n    const mtl = props.material || new TrailMaterial(\"trial_mtl\");\n    this.setMaterial(mtl);\n\n    this.setTexture(props.texture);\n    this._initGeometry();\n  }\n\n  /**\n   * 每帧的更新函数\n   * @private\n   */\n  update(deltaTime) {\n    let mov = 0,\n      newIdx = 0;\n    for (let i = 0; i < this._curPointNum; i++) {\n      this._pointStates[i] -= deltaTime;\n      if (this._pointStates[i] < 0) {\n        mov++;\n      } else if (mov > 0) {\n        newIdx = i - mov;\n\n        // Move data\n        this._pointStates[newIdx] = this._pointStates[i];\n\n        // Move point\n        this._points[i].cloneTo(this._points[newIdx]);\n      }\n    }\n    this._curPointNum -= mov;\n\n    let appendNewPoint = true;\n    if (this._curPointNum === this._maxPointNum) {\n      appendNewPoint = false;\n    } else if (this._curPointNum > 0) {\n      const lastPoint = this._points[this._points.length - 1];\n      if (Vector3.distance(this.entity.worldPosition, lastPoint) < this._minSeg) {\n        appendNewPoint = false;\n      } else {\n        // debugger\n      }\n    }\n\n    if (appendNewPoint) {\n      this._pointStates[this._curPointNum] = this._lifetime;\n      this.entity.worldPosition.cloneTo(this._points[this._curPointNum]);\n\n      this._curPointNum++;\n    }\n  }\n\n  /**\n   * 更新位置，将数据对象加入渲染队列\n   * @param {Camera} camera\n   * @private\n   */\n  render(camera) {\n    this._updateStrapVertices(camera, this._points);\n    this._updateStrapCoords();\n    this._vertexBuffer.setData(this._vertices);\n\n    super.render(camera);\n  }\n\n  /**\n   * 设置当前拖尾的纹理\n   * @param {Texture2D} texture\n   */\n  setTexture(texture) {\n    if (texture) {\n      this.getMaterial().setValue(\"u_texture\", texture);\n    }\n  }\n\n  // ----------  private  -------------------\n  /**\n   * 初始化 geometry\n   * @private\n   */\n  _initGeometry() {\n    const geometry = new BufferGeometry();\n    geometry.primitiveTopology = PrimitiveTopology.TriangleStrip;\n\n    const vertexStride = 20;\n    const vertexCount = this._maxPointNum * 2;\n    const vertexFloatCount = vertexCount * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0)\n    ];\n    const vertexBuffer = new VertexBuffer(this.engine, vertexFloatCount * 4, BufferUsage.Dynamic);\n\n    geometry.setVertexBufferBindings(new VertexBufferBinding(vertexBuffer, vertexStride));\n    geometry.addVertexElements(vertexElements);\n    geometry.drawGroup.count = vertexCount;\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride;\n    this._vertices = vertices;\n    this.geometry = geometry;\n  }\n\n  /**\n   * 更新拖尾顶点位置\n   * @private\n   */\n  _updateStrapVertices(camera, points: Array<Vector3>) {\n    const m: Matrix = camera.viewMatrix;\n    const e = m.elements;\n    const vx = new Vector3(e[0], e[4], e[8]);\n    const vy = new Vector3(e[1], e[5], e[9]);\n    const vz = new Vector3(e[2], e[6], e[10]);\n    const s = this._stroke;\n\n    vy.scale(s);\n\n    const up = new Vector3();\n    const down = new Vector3();\n\n    const rotation = new Quaternion();\n\n    Vector3.transformByQuat(vx, rotation, vx);\n    Vector3.transformByQuat(vy, rotation, vy);\n\n    const dy = new Vector3();\n    const cross = new Vector3();\n    const perpVector = new Vector3();\n\n    vx.normalize();\n\n    const vertieces = this._vertices;\n    //-- quad pos\n    for (let i = 0; i < this._maxPointNum; i++) {\n      //-- center pos\n      if (i < this._curPointNum) {\n        const p = points[i];\n\n        if (i === this._curPointNum - 1 && i !== 0) {\n          Vector3.subtract(p, points[i - 1], perpVector);\n        } else {\n          Vector3.subtract(points[i + 1], p, perpVector);\n        }\n\n        this._projectOnPlane(perpVector, vz, perpVector);\n        perpVector.normalize();\n\n        // Calculate angle between vectors\n        let angle = Math.acos(Vector3.dot(vx, perpVector));\n        Vector3.cross(vx, perpVector, cross);\n        if (Vector3.dot(cross, vz) <= 0) {\n          angle = Math.PI * 2 - angle;\n        }\n        Quaternion.rotationAxisAngle(vz, angle, rotation);\n        Vector3.transformByQuat(vy, rotation, dy);\n\n        Vector3.add(p, dy, up);\n        Vector3.subtract(p, dy, down);\n      }\n\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n      vertieces[p0] = up.x;\n      vertieces[p0 + 1] = up.y;\n      vertieces[p0 + 2] = up.z;\n\n      vertieces[p1] = down.x;\n      vertieces[p1 + 1] = down.y;\n      vertieces[p1 + 2] = down.z;\n    }\n  }\n\n  /**\n   * 更新拖尾 uv 位置\n   * @private\n   */\n  _updateStrapCoords() {\n    if (this._prePointsNum === this._curPointNum) {\n      return;\n    }\n\n    this._prePointsNum = this._curPointNum;\n\n    const count = this._curPointNum;\n    const texDelta = 1.0 / count;\n    const vertieces = this._vertices;\n    for (let i = 0; i < count; i++) {\n      const d = 1.0 - i * texDelta;\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n\n      vertieces[p0] = 0;\n      vertieces[p0 + 1] = d;\n\n      vertieces[p1] = 1.0;\n      vertieces[p1 + 1] = d;\n    }\n  }\n\n  /**\n   * 将向量 a 投影到向 p 上。\n   * @param a - 要投影的向量\n   * @param p - 目标向量\n   * @param out - 向量 a 投影到向量 p 的结果向量\n   */\n  _projectOnVector(a: Vector3, p: Vector3, out: Vector3): void {\n    const n_p = p.clone();\n    Vector3.normalize(n_p, n_p);\n    const cosine = Vector3.dot(a, n_p);\n    out.x = n_p.x * cosine;\n    out.y = n_p.y * cosine;\n    out.z = n_p.z * cosine;\n  }\n\n  /**\n   * 将向量 a 投影到和法向量 n 正交的平面上。\n   * @param a - 输入向量\n   * @param n - 法向量\n   * @param out - 投影到平面上的向量\n   */\n  _projectOnPlane(a: Vector3, n: Vector3, out: Vector3) {\n    this._projectOnVector(a, n, _tempVector3);\n    Vector3.subtract(a, _tempVector3, out);\n  }\n}\n","import { Vector3 } from \"@alipay/o3-math\";\n\n/**\n * 射线定义&相交运算\n * @class\n */\nexport class Ray {\n  public direction: Vector3;\n  public origin: Vector3;\n\n  /**\n   * @constructor\n   * @param {Vector3} origin\n   * @param {Vector3} direction\n   */\n  constructor(origin: Vector3, direction: Vector3) {\n    this.origin = origin;\n    this.direction = new Vector3();\n    Vector3.normalize(direction, this.direction);\n  }\n\n  /**\n   * 检测本射线与平面相交\n   * @param {Vector3} point 平面上的一个点：(p-p0)·n = 0\n   * @param {Vector3} normal 平面的法线\n   */\n  intersectPlane(point: Vector3, normal: Vector3) {\n    const origin = this.origin;\n\n    const denom = Vector3.dot(normal, this.direction);\n    if (Math.abs(denom) > 1e-6) {\n      const p0l0 = new Vector3();\n      Vector3.subtract(point, origin, p0l0);\n\n      const t = Vector3.dot(p0l0, normal) / denom;\n      if (t >= 0) {\n        return t;\n      }\n    } // end of if\n\n    return false;\n  }\n\n  /**\n   * 射线方向上，距离起点指定距离的坐标\n   * @param {number} distance 距离\n   */\n  getPoint(distance: number): Vector3 {\n    // origin + direction * distance;\n    const point = new Vector3();\n    Vector3.scale(this.direction, distance, point);\n    return point.add(this.origin);\n  }\n\n  /**\n   * 检测本射线与球体相交\n   * @param {Vector3} center 球心坐标\n   * @param {number} radius 球的半径\n   */\n  intersectSphere(center: Vector3, radius: number) {\n    // analytic solution\n    const dir = this.direction;\n    const L = new Vector3();\n    Vector3.subtract(this.origin, center, L);\n\n    const a = Vector3.dot(dir, dir);\n    const b = 2 * Vector3.dot(dir, L);\n    const c = Vector3.dot(L, L) - radius * radius;\n\n    const s = _solveQuadratic(a, b, c);\n    if (s) {\n      return s[0];\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * 检测本射线与轴对齐的Box的相交\n   * @param {Vector3} max Box的最大点\n   * @param {Vector3} min Box的最小点\n   */\n  intersectAABB(max: Vector3, min: Vector3) {\n    const dir = this.direction;\n    const orig = this.origin;\n    const invdir = new Vector3(1 / dir.x, 1 / dir.y, 1 / dir.z);\n\n    const bounds = [min, max];\n    const sign = [dir.x < 0 ? 1 : 0, dir.y < 0 ? 1 : 0, dir.z < 0 ? 1 : 0];\n\n    let tmin = (bounds[sign[0]].x - orig.x) * invdir.x;\n    let tmax = (bounds[1 - sign[0]].x - orig.x) * invdir.x;\n    const tymin = (bounds[sign[1]].y - orig.y) * invdir.y;\n    const tymax = (bounds[1 - sign[1]].y - orig.y) * invdir.y;\n\n    if (tmin > tymax || tymin > tmax) {\n      return false;\n    }\n\n    if (tymin > tmin) {\n      tmin = tymin;\n    }\n    if (tymax < tmax) {\n      tmax = tymax;\n    }\n\n    const tzmin = (bounds[sign[2]].z - orig.z) * invdir.z;\n    const tzmax = (bounds[1 - sign[2]].z - orig.z) * invdir.z;\n\n    if (tmin > tzmax || tzmin > tmax) {\n      return false;\n    }\n\n    if (tzmin > tmin) {\n      tmin = tzmin;\n    }\n    if (tzmax < tmax) {\n      tmax = tzmax;\n    }\n\n    let t = tmin;\n\n    if (t < 0) {\n      t = tmax;\n      if (t < 0) {\n        return false;\n      }\n    }\n\n    return t;\n  }\n} // end of class Ray\n\n/**\n * solve: ax^2 + bx + c = 0\n * @private\n * @returns {null|array} null: no answers; [x0 : float, x1 : float] where x0 <= x1\n */\nfunction _solveQuadratic(a, b, c) {\n  const discr = b * b - 4 * a * c;\n  if (discr < 0) {\n    return false;\n  } else if (discr == 0) {\n    const x = (-0.5 * b) / a;\n    return [x, x];\n  } else {\n    const r = Math.sqrt(discr);\n    const q = b > 0 ? -0.5 * (b + r) : -0.5 * (b - r);\n    const x0 = q / a;\n    const x1 = c / q;\n    if (x0 <= x1) {\n      return [x0, x1];\n    } else {\n      return [x1, x0];\n    }\n  } // end of else\n}\n","import { Vector3 } from \"@alipay/o3-math\";\nimport { ACollider } from \"../collider\";\n\n/**\n * Raycast检测的结果记录\n * @class\n */\nexport class RaycastHit {\n  public distance: number;\n  public collider: ACollider;\n  public point: Vector3;\n  /**\n   * 构造函数\n   */\n  constructor() {\n    /**\n     * 碰撞点离射线起点的距离\n     * @member {float}\n     */\n    this.distance = Number.MAX_VALUE;\n\n    /**\n     * 与射线相交的碰撞体\n     * @member {ACollider}\n     */\n    this.collider = null;\n\n    /**\n     * 碰撞体与射线的相交点\n     * @member {vec3}\n     */\n    this.point = null;\n  }\n}\n","import { SceneFeature } from \"../SceneFeature\";\nimport { Collider } from \"./Collider\";\n\nexport class ColliderFeature extends SceneFeature {\n  colliders: Collider[];\n  constructor() {\n    super();\n\n    this.colliders = [];\n  }\n\n  /**\n   * 添加一个 Collider 组件\n   * @param {Collider} collider 碰撞体对象\n   * @private\n   */\n  attachCollider(collider: Collider) {\n    this.colliders.push(collider);\n  }\n\n  /**\n   * 移除一个Collider组件\n   * @param {Collider} collider 碰撞体对象\n   * @private\n   */\n  detachCollider(collider: Collider) {\n    const index = this.colliders.indexOf(collider);\n    if (index != -1) {\n      this.colliders.splice(index, 1);\n    }\n  }\n}\n","import { ColliderFeature } from \"./ColliderFeature\";\nimport { MaskList } from \"../base/Constant\";\nimport { Entity } from \"../Entity\";\nimport { Component } from \"../Component\";\n\n/**\n * 碰撞体组件的基类, 定义碰撞体的数据\n */\nexport class Collider extends Component {\n  /**\n   * collider flg\n   */\n  tag: MaskList;\n  /**\n   * @constructor\n   * @param {Entity} entity\n   */\n  constructor(entity: Entity, props?: any) {\n    super(entity, props);\n\n    this.tag = props.tag || MaskList.EVERYTHING;\n  }\n\n  /** 事件回调：在对象Enable的时候，挂载到当前的Scene\n   * @private\n   */\n  _onEnable(): void {\n    this.scene.findFeature(ColliderFeature).attachCollider(this);\n  }\n\n  /** 事件回调：在对象Disable的时候，从当前的Scene移除\n   * @private\n   */\n  _onDisable(): void {\n    this.scene.findFeature(ColliderFeature).detachCollider(this);\n  }\n}\n","import { Collider } from \"./Collider\";\nimport { Vector3 } from \"@alipay/o3-math\";\nimport { Entity } from \"../Entity\";\n\nconst _tempVec30 = new Vector3();\nconst _tempVec31 = new Vector3();\nconst _tempVec32 = new Vector3();\nconst _tempVec33 = new Vector3();\nconst _tempVec34 = new Vector3();\nconst _tempVec35 = new Vector3();\nconst _tempVec36 = new Vector3();\nconst _tempVec37 = new Vector3();\n\n/**\n * 轴对齐的包围盒（AABBox）碰撞体组件\n * @extends Collider\n */\nexport class ABoxCollider extends Collider {\n  private static _tempVec3: Vector3 = new Vector3();\n\n  public boxMin: Vector3;\n  public boxMax: Vector3;\n  private _corners: Array<Vector3> = [];\n\n  /**\n   * 构造函数\n   * @param {Entity} entity 对象所在节点\n   */\n  constructor(entity: Entity, props: any) {\n    super(entity, props);\n    this.boxMin = new Vector3(-0.5, -0.5, -0.5);\n    this.boxMax = new Vector3(0.5, 0.5, 0.5);\n  }\n\n  /**\n   * 使用范围坐标，设置包围盒\n   * @param {Vector3} min 最小坐标\n   * @param {Vector3} max 最大坐标\n   */\n  setBoxMinMax(min: Vector3, max: Vector3) {\n    this.boxMin = min;\n    this.boxMin = max;\n\n    this._corners.length = 0;\n  }\n\n  /**\n   * 使用中心点和Size的方式设置包围盒\n   * @param {Vector3} center 包围盒的中心点\n   * @param {Vector3} size 包围盒的3个轴向的大小\n   */\n  setBoxCenterSize(center: Vector3, size: Vector3) {\n    const halfSize = ABoxCollider._tempVec3;\n    Vector3.scale(size, 0.5, halfSize);\n    Vector3.add(center, halfSize, this.boxMax);\n    Vector3.subtract(center, halfSize, this.boxMin);\n\n    this._corners.length = 0;\n  }\n\n  /**\n   * 取得八个顶点的位置\n   */\n  getCorners(): Vector3[] {\n    if (this._corners.length === 0) {\n      const minX = this.boxMin.x;\n      const minY = this.boxMin.y;\n      const minZ = this.boxMin.z;\n      const w = this.boxMax.x - minX;\n      const h = this.boxMax.y - minY;\n      const d = this.boxMax.z - minZ;\n\n      // follow the same order as the old\n      _tempVec30.setValue(minX + w, minY + h, minZ + d);\n      _tempVec31.setValue(minX, minY + h, minZ + d);\n      _tempVec32.setValue(minX, minY, minZ + d);\n      _tempVec33.setValue(minX + w, minY, minZ + d);\n      _tempVec34.setValue(minX + w, minY + h, minZ);\n      _tempVec35.setValue(minX, minY + h, minZ);\n      _tempVec36.setValue(minX, minY, minZ);\n      _tempVec37.setValue(minX + w, minY, minZ);\n\n      this._corners = [_tempVec30, _tempVec31, _tempVec32, _tempVec33, _tempVec34, _tempVec35, _tempVec36, _tempVec37];\n    }\n\n    return this._corners;\n  }\n}\n","import { Collider } from \"./Collider\";\nimport { Vector3 } from \"@alipay/o3-math\";\nimport { Entity } from \"../Entity\";\n/**\n * 球型碰撞体组件\n * @extends Collider\n */\nexport class ASphereCollider extends Collider {\n  center: Vector3;\n\n  radius: number;\n  /**\n   * @constructor\n   * @param {Entity} entity\n   */\n  constructor(entity: Entity, props: any) {\n    super(entity, props);\n\n    /**\n     * 球心的坐标(在Local坐标系)\n     * @member {Vector3}\n     */\n    this.center = new Vector3();\n\n    /**\n     * 球体的半径\n     * @member {float}\n     */\n    this.radius = 1;\n  }\n\n  /**\n   * 设置球体的属性数据\n   * @param {Vector3} center 球心坐标\n   * @param {number} radius 球的半径\n   */\n  setSphere(center: Vector3, radius: number) {\n    this.center = center;\n    this.radius = radius;\n  }\n}\n","import { Collider } from \"./Collider\";\nimport { Vector3 } from \"@alipay/o3-math\";\nimport { Entity } from \"../Entity\";\n\n/**\n * 平面（无限大）碰撞体组件，平面的位置和朝向与SceneObject一致\n * @extends Collider\n */\nexport class PlaneCollider extends Collider {\n  planePoint: Vector3;\n\n  normal: Vector3;\n  /**\n   * @constructor\n   * @param {Entity} entity\n   */\n  constructor(entity: Entity, props: any) {\n    super(entity, props);\n\n    /**\n     * 平面经过点的坐标(在Local坐标系)\n     * @member {Vector3}\n     */\n    this.planePoint = new Vector3();\n\n    /**\n     * 平面法线的方向\n     * @member {Vector3}\n     */\n    this.normal = new Vector3(0, 1, 0);\n  }\n\n  /**\n   * 使用Local坐标，设置point\n   * @param {Vector3} point 平面上的一个点：(p-p0)·n = 0\n   * @param {Vector3} normal 平面的法线\n   */\n  setPlane(point: Vector3, normal: Vector3) {\n    this.planePoint = point;\n    this.normal = normal;\n  }\n}\n","import { Ray } from \"./Ray\";\nimport { Vector3, Matrix } from \"@alipay/o3-math\";\nimport { RaycastHit } from \"./RaycastHit\";\nimport { MaskList } from \"../base/Constant\";\nimport { Scene } from \"../Scene\";\nimport { ColliderFeature } from \"../collider/ColliderFeature\";\nimport { ABoxCollider } from \"../collider/ABoxCollider\";\nimport { ASphereCollider } from \"../collider/ASphereCollider\";\nimport { PlaneCollider } from \"../collider/PlaneCollider\";\n\n/**\n * 对场景中所有 Collider 进行射线检测，返回离射线起点最近的一个\n * @param {Ray} _ray 使用的射线，对于点击拾取，这个设想可以调用 CameraComponent.screenPointToRay() 方法获得\n * @param {Vector3} _outPos 射线和碰撞体的交点\n * @return {ACollider} 射线检测结果\n */\n(Scene.prototype as any).raycast = function (_ray, _outPos: Vector3, tag: MaskList = MaskList.EVERYTHING) {\n  const ray = new Ray(_ray.origin, _ray.direction);\n  const cf = this.findFeature(ColliderFeature);\n  const colliders = cf.colliders;\n\n  let nearestHit = new RaycastHit();\n\n  for (let i = 0, len = colliders.length; i < len; i++) {\n    const collider = colliders[i];\n    if (!collider.entity.isActiveInHierarchy) {\n      continue;\n    }\n\n    if (!(collider.tag & tag)) {\n      continue;\n    }\n    const hit = new RaycastHit();\n    if (collider.raycast(ray, hit)) {\n      if (hit.distance < nearestHit.distance) {\n        nearestHit = hit;\n      }\n    }\n  } // end of for\n\n  if (_outPos && nearestHit.collider) {\n    nearestHit.point.cloneTo(_outPos);\n  }\n\n  return nearestHit.collider;\n};\n\n/**\n * 执行射线检测\n * @param {Ray} ray\n * @param {RaycastHit} hit\n */\n(ABoxCollider.prototype as any).raycast = function (ray, hit) {\n  const localRay = _getLocalRay(this, ray);\n  const intersect = localRay.intersectAABB(this.boxMax, this.boxMin);\n  if (intersect) {\n    _updateHitResult(this, localRay, intersect, hit, ray.origin);\n    return true;\n  } else {\n    return false;\n  } // end of else\n};\n\n(ASphereCollider.prototype as any).raycast = function (ray, hit) {\n  const localRay = _getLocalRay(this, ray);\n  const intersect = localRay.intersectSphere(this.center, this.radius);\n  if (intersect) {\n    _updateHitResult(this, localRay, intersect, hit, ray.origin);\n    return true;\n  } else {\n    return false;\n  } // end of else\n};\n\n(PlaneCollider.prototype as any).raycast = function (ray, hit) {\n  const localRay = _getLocalRay(this, ray);\n  const intersect = localRay.intersectPlane(this.planePoint, this.normal);\n  if (intersect) {\n    _updateHitResult(this, localRay, intersect, hit, ray.origin);\n    return true;\n  } else {\n    return false;\n  } // end of else\n};\n\n/**\n * 计算世界坐标系中的碰撞点\n * @param {Ray} ray\n * @param {number} distance\n * @param {RaycastHit} outHit\n * @private\n */\nfunction _updateHitResult(collider, ray: Ray, distance: number, outHit: RaycastHit, origin: Vector3) {\n  const hitPos = ray.getPoint(distance);\n  Vector3.transformCoordinate(hitPos, collider.entity.transform.worldMatrix, hitPos);\n\n  outHit.distance = Vector3.distance(origin, hitPos);\n  outHit.collider = collider;\n  outHit.point = hitPos;\n}\n\n/**\n * transform ray to local space\n * @param {Ray} ray\n * @private\n */\n\nfunction _getLocalRay(collider, ray) {\n  const worldToLocal = collider.entity.getInvModelMatrix();\n\n  // o = worldToLocal * vec4(ray.origin, 1)\n  const o = new Vector3();\n  Vector3.transformCoordinate(ray.origin, worldToLocal, o);\n\n  // d = worldToLocal * vec4(ray.direction, 0)\n  const d = new Vector3();\n  _transformDirection(d, ray.direction, worldToLocal);\n\n  return new Ray(o, d);\n}\n\n// a: vec3\n// m: mat4\n// return m * vec3(a, 0)\nfunction _transformDirection(out: Vector3, a: Vector3, m: Matrix) {\n  const x = a.x;\n  const y = a.y;\n  const z = a.z;\n  const e = m.elements;\n  out.x = x * e[0] + y * e[4] + z * e[8];\n  out.y = x * e[1] + y * e[5] + z * e[9];\n  out.z = x * e[2] + y * e[6] + z * e[10];\n  return out;\n}\n","import { ABoxCollider } from \"./ABoxCollider\";\nimport { Vector3 } from \"@alipay/o3-math\";\nimport { Entity } from \"../Entity\";\n\nexport class BoxCollider extends ABoxCollider {\n  private _center: Vector3 = new Vector3();\n  private _size: Vector3 = new Vector3();\n  private isShowCollider: boolean = true;\n\n  constructor(\n    entity: Entity,\n    props?: {\n      center: Vector3;\n      size: Vector3;\n      isShowCollider: boolean;\n    }\n  ) {\n    super(entity, props);\n\n    const { center, size, isShowCollider } = props;\n\n    this.center = center ?? this.center;\n    this.size = size ?? this.size;\n    this.isShowCollider = isShowCollider ?? this.isShowCollider;\n  }\n\n  get center(): Vector3 {\n    return this._center;\n  }\n\n  set center(value: Vector3) {\n    this._center = value;\n    this.setBoxCenterSize(this._center, this._size);\n  }\n\n  get size(): Vector3 {\n    return this._size;\n  }\n\n  set size(value: Vector3) {\n    this._size = value;\n    this.setBoxCenterSize(this._center, this._size);\n  }\n}\n","import { ASphereCollider } from \"./ASphereCollider\";\nimport { Vector3 } from \"@alipay/o3-math\";\nimport { Entity } from \"../Entity\";\n\nexport class SphereCollider extends ASphereCollider {\n  private __center: Vector3 = new Vector3();\n  private __radius: number = 1.0;\n  private isShowCollider: boolean = true;\n\n  constructor(entity: Entity, props?: any) {\n    super(entity, props);\n\n    const { _center, _radius, isShowCollider } = props;\n\n    this._center = _center ?? this._center;\n    this._radius = _radius ?? this._radius;\n    this.isShowCollider = isShowCollider ?? this.isShowCollider;\n  }\n\n  get _center(): Vector3 {\n    return this.__center;\n  }\n\n  set _center(value: Vector3) {\n    this.__center = value;\n    this.setSphere(this.__center, this.__radius);\n  }\n\n  get _radius() {\n    return this.__radius;\n  }\n\n  set _radius(value: number) {\n    this.__radius = value;\n    this.setSphere(this.__center, this.__radius);\n  }\n}\n","import { ColliderFeature } from \"./ColliderFeature\";\nimport { Scene } from \"../Scene\";\nScene.registerFeature(ColliderFeature);\n\n//-- colliders\nexport { ColliderFeature };\nexport { Collider as ACollider } from \"./Collider\";\nexport { ABoxCollider } from \"./ABoxCollider\";\nexport { PlaneCollider } from \"./PlaneCollider\";\nexport { ASphereCollider } from \"./ASphereCollider\";\nexport { BoxCollider } from \"./BoxCollider\";\nexport { SphereCollider } from \"./SphereCollider\";\n","import { Vector3 } from \"@alipay/o3-math\";\n\n/**\n * AABBox = {\n *  min: [-1,-1,-1],\n *  max: [1,1,1]\n * };\n *\n * Sphere = {\n *  center: [0,0,0],\n *  radius: 1\n * };\n */\n\n/**\n * 两个 AABBox 是否相交\n * @private\n */\nexport function intersectBox2Box(boxA, boxB) {\n  return (\n    boxA.min.x <= boxB.max.x &&\n    boxA.max.x >= boxB.min.x &&\n    boxA.min.y <= boxB.max.y &&\n    boxA.max.y >= boxB.min.y &&\n    boxA.min.z <= boxB.max.z &&\n    boxA.max.z >= boxB.min.z\n  );\n}\n\n/**\n * 两个球体是否相交\n * @private\n */\nexport function intersectSphere2Sphere(sphereA, sphereB) {\n  const distance = Vector3.distance(sphereA.center, sphereB.center);\n  return distance < sphereA.radius + sphereA.radius;\n}\n\n/**\n * 球体和AABBox是否相交\n * @private\n */\nexport function intersectSphere2Box(sphere, box) {\n  const center: Vector3 = sphere.center;\n\n  const closestPoint: Vector3 = new Vector3(\n    Math.max(box.min.x, Math.min(center.x, box.max.x)),\n    Math.max(box.min.y, Math.min(center.y, box.max.y)),\n    Math.max(box.min.z, Math.min(center.z, box.max.z))\n  );\n\n  const distance = Vector3.distance(center, closestPoint);\n  return distance < sphere.radius;\n}\n","import { Vector3 } from \"@alipay/o3-math\";\nimport { Event } from \"../base/Event\";\nimport { ABoxCollider } from \"../collider/ABoxCollider\";\nimport { Script } from \"../Script\";\nimport { intersectBox2Box, intersectSphere2Box, intersectSphere2Sphere } from \"./intersect\";\nimport { ASphereCollider } from \"../collider/ASphereCollider\";\nimport { ColliderFeature } from \"../collider/ColliderFeature\";\nimport { ACollider } from \"../collider\";\n\n/**\n * 检测当前 Entity 上的 Collider 与场景中其他 Collider 的碰撞\n * 发出事件：collision\n */\nexport class CollisionDetection extends Script {\n  private static _tempVec3: Vector3 = new Vector3();\n\n  private _colliderManager;\n  private _myCollider;\n  private _overlopCollider;\n  private _sphere;\n  private _box;\n\n  /**\n   * 构造函数\n   * @param {Entity} entity 对象所在节点\n   */\n  constructor(entity) {\n    super(entity);\n\n    this._colliderManager = null;\n    this._myCollider = null;\n    this._overlopCollider = null;\n\n    // this.addEventListener(\"start\", this._onStart);\n  }\n\n  /**\n   * 和当前 Entity 上的 Collider 相交的 Collider 对象\n   */\n  get overlopCollider() {\n    return this._overlopCollider;\n  }\n\n  /**\n   * 每帧更新时，计算与其他 collider 的碰撞\n   */\n  onUpdate(deltaTime) {\n    super.onUpdate(deltaTime);\n\n    let overlopCollider = null;\n\n    if (this._colliderManager && this._myCollider) {\n      const colliders = this._colliderManager.colliders;\n\n      if (this._myCollider instanceof ABoxCollider) {\n        this._box = this._getWorldBox(this._myCollider);\n        for (let i = 0, len = colliders.length; i < len; i++) {\n          const collider = colliders[i];\n          if (collider != this._myCollider && this._boxCollision(collider)) {\n            overlopCollider = collider;\n            this.trigger(new Event(\"collision\", this, { collider }));\n          }\n        } // end of for\n      } else if (this._myCollider instanceof ASphereCollider) {\n        this._sphere = this._getWorldSphere(this._myCollider);\n        for (let i = 0, len = colliders.length; i < len; i++) {\n          const collider = colliders[i];\n          if (collider != this._myCollider && this._sphereCollision(collider)) {\n            overlopCollider = collider;\n            this.trigger(new Event(\"collision\", this, { collider }));\n          }\n        } // end of for\n      }\n    } // end of if\n\n    //-- overlop events\n    if (overlopCollider != null && this._overlopCollider != overlopCollider) {\n      this.trigger(new Event(\"begin_overlop\", this, { collider: overlopCollider }));\n    }\n\n    if (this._overlopCollider != null && this._overlopCollider != overlopCollider) {\n      const e = this._overlopCollider;\n      this.trigger(new Event(\"end_overlop\", this, { collider: e }));\n    }\n\n    this._overlopCollider = overlopCollider;\n  }\n\n  /**\n   * 获得世界空间中的 Box 坐标\n   * @param boxCollider\n   */\n  _getWorldBox(boxCollider) {\n    const mat = boxCollider.entity.transform.worldMatrix;\n    const max: Vector3 = new Vector3();\n    const min: Vector3 = new Vector3();\n    Vector3.transformCoordinate(boxCollider.boxMax, mat, max);\n    Vector3.transformCoordinate(boxCollider.boxMin, mat, min);\n\n    //--\n    const temp: Vector3 = CollisionDetection._tempVec3;\n    const corners = boxCollider.getCorners();\n    for (let i = 0; i < 8; i++) {\n      Vector3.transformCoordinate(corners[i], mat, temp);\n      if (temp.x > max.x) max.x = temp.x;\n      if (temp.y > max.y) max.y = temp.y;\n      if (temp.z > max.z) max.z = temp.z;\n      if (temp.x < min.x) min.x = temp.x;\n      if (temp.y < min.y) min.y = temp.y;\n      if (temp.z < min.z) min.z = temp.z;\n    }\n\n    return {\n      min,\n      max\n    };\n  }\n\n  /**\n   * 获得世界空间中的 Sphere 坐标\n   * @param {SphereCollider} sphereCollider\n   */\n  _getWorldSphere(sphereCollider) {\n    const center: Vector3 = new Vector3();\n    Vector3.transformCoordinate(sphereCollider.center, sphereCollider.entity.transform.worldMatrix, center);\n    return {\n      radius: sphereCollider.radius,\n      center\n    };\n  }\n\n  /**\n   * 自身的 Collider 与另一个 Collider 做碰撞检测\n   * @param {ABoxCollider|ASphereCollider} other\n   */\n  _boxCollision(other) {\n    if (other instanceof ABoxCollider) {\n      const box = this._getWorldBox(other);\n      return intersectBox2Box(box, this._box);\n    } else if (other instanceof ASphereCollider) {\n      const sphere = this._getWorldSphere(other);\n      return intersectSphere2Box(sphere, this._box);\n    }\n    return false;\n  }\n\n  /**\n   * 自身的 Collider 与另一个 Collider 做碰撞检测\n   * @param {ABoxCollider|ASphereCollider} other\n   */\n  _sphereCollision(other) {\n    if (other instanceof ABoxCollider) {\n      const box = this._getWorldBox(other);\n      return intersectSphere2Box(this._sphere, box);\n    } else if (other instanceof ASphereCollider) {\n      const sphere = this._getWorldSphere(other);\n      return intersectSphere2Sphere(sphere, this._sphere);\n    }\n    return false;\n  }\n\n  /**\n   * 在 start 事件时，查找其他组件并记录下来\n   */\n  _onAwake() {\n    this._colliderManager = this.scene.findFeature(ColliderFeature);\n    this._myCollider = this.entity.getComponent(ACollider);\n  }\n}\n","import { Vector3 } from \"@alipay/o3-math\";\nimport { FogFeature } from \"./FogFeature\";\nimport { Component } from \"../Component\";\n\n/**\n * 雾基类\n */\nexport class Fog extends Component {\n  public color: Vector3;\n\n  constructor(node, props) {\n    super(node, props);\n\n    /**\n     * 雾颜色\n     * @member {Vector3}\n     */\n    this.color = props.color === undefined ? new Vector3(1, 0, 0) : props.color;\n  }\n\n  /**\n   * @private\n   */\n  _onEnable() {\n    this.scene.findFeature(FogFeature).fog = this;\n  }\n\n  /**\n   * @private\n   */\n  _onDisable() {\n    this.scene.findFeature(FogFeature).fog = null;\n  }\n\n  /**\n   * @private\n   */\n  bindMaterialValues(mtl) {}\n}\n","import { Fog } from \"./Fog\";\n\n/**\n * 指数雾\n */\nexport class EXP2Fog extends Fog {\n  public density: number;\n  /**\n   * 指数变换的雾\n   * @param {*} node 节点\n   * @param {Object} [props] 包含以下参数\n   * @param {Vector3} [props.color=new Vector3(1, 0, 0)] 雾颜色\n   * @param {Number} [props.density=0.0025] 雾的浓度（0-1）\n   */\n  constructor(node, props) {\n    super(node, props);\n\n    /**\n     * 浓度\n     * @member {Number}\n     */\n    this.density = props.density === undefined ? 0.0025 : props.density;\n  }\n\n  /**\n   * @private\n   */\n  bindMaterialValues(mtl) {\n    mtl.setValue(\"u_fogColor\", this.color);\n    mtl.setValue(\"u_fogDensity\", this.density);\n  }\n}\n","import { EXP2Fog } from \"./EXP2Fog\";\nimport { Fog } from \"./Fog\";\nimport { SceneFeature } from \"../SceneFeature\";\n\n/**\n * 是否有雾效特性\n * @private\n */\nexport function hasFogFeature() {\n  return true;\n}\n\n/**\n * 获取雾效相关宏\n * @private\n */\nexport function getFogMacro() {\n  return this.findFeature(FogFeature).macro;\n}\n\n/**\n * 设置雾参数到材质\n * @param {Material} mtl 材质\n * @private\n */\nexport function bindFogToMaterial(mtl) {\n  this.findFeature(FogFeature).bindFogToMaterial(mtl);\n}\n\n/**\n * 雾效场景特性\n * @private\n */\nexport class FogFeature extends SceneFeature {\n  private _fog;\n  private _macros;\n\n  constructor() {\n    super();\n    this._fog = null;\n    this._macros = [];\n  }\n\n  /**\n   * 雾\n   */\n  get fog() {\n    return this._fog;\n  }\n\n  set fog(v) {\n    if (v !== this._fog) {\n      this._fog = v;\n      const macro = [];\n      if (v instanceof Fog) {\n        macro.push(\"O3_HAS_FOG\");\n\n        if (v instanceof EXP2Fog) {\n          macro.push(\"O3_FOG_EXP2\");\n        }\n      }\n\n      if (this._macros.length !== macro.length) {\n        this._macros = macro;\n      }\n    }\n  }\n\n  /**\n   * 宏\n   */\n  get macro() {\n    return this._macros;\n  }\n\n  /**\n   * @private\n   * 绑定雾参数到材质\n   * @param {Material} mtl 材质\n   */\n  bindFogToMaterial(mtl) {\n    if (this.fog && mtl.useFog) {\n      this.fog.bindMaterialValues(mtl);\n    }\n\n    return this;\n  }\n}\n","import { Fog } from \"./Fog\";\nimport { Vector3 } from \"@alipay/o3-math\";\n\n/**\n * 线性雾，根据镜头距离线性差值雾浓度\n */\nexport class LinearFog extends Fog {\n  public near: number;\n  public far: number;\n  public color: Vector3;\n  /**\n   * 线性雾\n   * @param {*} node 节点\n   * @param {Object} [props] 包含以下参数\n   * @param {Vector3} [props.color=[1, 1, 1]] 雾颜色\n   * @param {Number} [props.near=1] 最近距离\n   * @param {Number} [props.far=1000] 最远距离\n   */\n  constructor(node, props) {\n    super(node, props);\n\n    /**\n     * 最近距离\n     * @member {Number}\n     */\n    this.near = props.near === undefined ? 1 : props.near;\n    /**\n     * 最远距离\n     * @member {Number}\n     */\n    this.far = props.far === undefined ? 1000 : props.far;\n  }\n\n  /**\n   * @private\n   */\n  bindMaterialValues(mtl) {\n    mtl.setValue(\"u_fogColor\", this.color);\n    mtl.setValue(\"u_fogNear\", this.near);\n    mtl.setValue(\"u_fogFar\", this.far);\n  }\n}\n","import { Scene } from \"../Scene\";\nimport { bindFogToMaterial, FogFeature, getFogMacro, hasFogFeature } from \"./FogFeature\";\n\nScene.registerFeature(FogFeature);\n(Scene.prototype as any).hasFogFeature = hasFogFeature;\n(Scene.prototype as any).getFogMacro = getFogMacro;\n(Scene.prototype as any).bindFogToMaterial = bindFogToMaterial;\n\nexport { EXP2Fog } from \"./EXP2Fog\";\nexport { LinearFog } from \"./LinearFog\";\nexport { FogFeature };\n","import { Vector4 } from \"@alipay/o3-math\";\nimport { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { Material } from \"../material/Material\";\nimport { BasicRenderPipeline } from \"../RenderPipeline/BasicRenderPipeline\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { RenderBufferDepthFormat } from \"../texture/enums\";\nimport { RenderColorTexture } from \"../texture/RenderColorTexture\";\nimport { RenderDepthTexture } from \"../texture/RenderDepthTexture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { Texture } from \"../texture/Texture\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { TextureCubeMap } from \"../texture/TextureCubeMap\";\nimport { ProbeConfig } from \"./type\";\n\nlet cacheId = 0;\n\n/**\n * 环境探针类，提供诸如反射折射等需要的功能\n * */\nexport abstract class Probe extends Component {\n  protected readonly cacheId: number;\n  private readonly isCube: boolean;\n  private oriClipPlane: Vector4[];\n\n  private _camera: Camera;\n\n  /** 优先级 excludeRenderList > renderAll > renderList */\n  public excludeRenderList: Material[];\n  public renderAll: boolean;\n  public renderList: Material[];\n\n  public renderPass: RenderPass;\n  protected renderTarget: RenderTarget;\n  protected renderTargetSwap: RenderTarget;\n\n  /** 裁剪面 */\n  public clipPlanes: Vector4[];\n\n  public set camera(camera: Camera) {\n    if (camera === this._camera) return;\n    this._camera && this.renderPipeline.removeRenderPass(this.renderPass);\n    this._camera = camera;\n    camera && this.renderPipeline.addRenderPass(this.renderPass);\n  }\n\n  public get camera() {\n    return this._camera;\n  }\n\n  /**\n   * 探针所得 2D 纹理\n   * */\n  public get texture(): Texture2D | RenderColorTexture {\n    return this.renderPass.renderTarget?.getColorTexture();\n  }\n\n  /**\n   * 探针所得 深度 纹理\n   * */\n  public get depthTexture(): Texture2D | RenderDepthTexture {\n    return this.renderPass.renderTarget?.depthTexture;\n  }\n\n  /**\n   * 探针所得 立方体 纹理\n   * */\n  public get cubeTexture(): TextureCubeMap | RenderColorTexture {\n    return this.renderPass.renderTarget?.getColorTexture();\n  }\n\n  protected get renderPipeline(): BasicRenderPipeline {\n    return this.camera._renderPipeline;\n  }\n\n  /**\n   * @deperated\n   */\n  protected get rhi(): any {\n    return this.camera.scene.engine._hardwareRenderer;\n  }\n\n  /**\n   * 获取需要渲染的真实队列.\n   * 优先级 excludeRenderList > renderAll > renderList\n   */\n  protected get renderItems() {\n    const opaqueQueue = this.renderPipeline.opaqueQueue;\n    const transparentQueue = this.renderPipeline.transparentQueue;\n    return opaqueQueue.items.concat(transparentQueue.items).filter((item) => {\n      if (!item.primitive) return false;\n      if (this.excludeRenderList.includes(item.mtl)) return false;\n      if (this.renderAll) return true;\n      if (this.renderList.includes(item.mtl)) return true;\n    });\n  }\n\n  /** WebGL2 时，可以开启硬件层的 MSAA */\n  public get samples() {\n    return this.renderTarget.antiAliasing;\n  }\n\n  /**\n   *探针基类\n   * @param {Entity} entity\n   * @param {ProbeConfig} config\n   * */\n  protected constructor(entity: Entity, config: ProbeConfig = {}) {\n    super(entity, config);\n    this.cacheId = cacheId++;\n\n    this.renderPass = new RenderPass(\"_renderPass\" + this.cacheId, -10);\n\n    /** 自定义渲染管道 */\n    this.renderPass.renderOverride = true;\n    this.renderPass.preRender = this.preRender.bind(this);\n    this.renderPass.render = this.render.bind(this);\n    this.renderPass.postRender = this.postRender.bind(this);\n\n    this.isCube = !!config.isCube;\n    this.camera = config.camera || this.scene._activeCameras[0];\n    this.excludeRenderList = config.excludeRenderList || [];\n    this.renderAll = !!config.renderAll;\n    this.renderList = config.renderList || [];\n    this.clipPlanes = config.clipPlanes || [];\n\n    const width = config.width || 1024;\n    const height = config.height || 1024;\n    const samples = config.samples || 1;\n\n    this.renderTarget = new RenderTarget(\n      width,\n      height,\n      new RenderColorTexture(width, height, undefined, false, this.isCube, this.engine),\n      RenderBufferDepthFormat.Depth,\n      samples,\n      this.engine\n    );\n    this.renderTargetSwap = new RenderTarget(\n      width,\n      height,\n      new RenderColorTexture(width, height, undefined, false, this.isCube, this.engine),\n      RenderBufferDepthFormat.Depth,\n      samples,\n      this.engine\n    );\n\n    this.renderPass.renderTarget = this.renderTarget;\n\n    /**\n     * 继续 RTT\n     * */\n    this.addEventListener(\"enabled\", () => {\n      this.renderPass.enabled = true;\n    });\n\n    /**\n     * 暂停 RTT（ render target to texture）\n     * */\n    this.addEventListener(\"disabled\", () => {\n      this.renderPass.enabled = false;\n    });\n  }\n\n  protected preRender() {\n    this.oriClipPlane = this.scene.clipPlanes;\n    this.scene.clipPlanes = this.clipPlanes;\n  }\n\n  protected render() {\n    const context = RenderContext._getRenderContext(this.camera);\n    this.renderItems.forEach((item) => {\n      const { component, primitive, mtl } = item;\n      if (!(component.renderPassFlag & this.renderPassFlag)) return;\n      mtl.prepareDrawing(context, component, primitive);\n      this.rhi.drawPrimitive(primitive, mtl);\n    });\n  }\n\n  protected postRender() {\n    this.scene.clipPlanes = this.oriClipPlane;\n    // 交换 FBO\n    // prevent issue: Feedback Loops Between Textures and the Framebuffer.\n    if (this.renderPass.enabled) {\n      // 钩子\n      if (this.onTextureChange) {\n        if (this.isCube) {\n          this.onTextureChange(this.cubeTexture);\n        } else {\n          this.onTextureChange(this.texture, this.depthTexture);\n        }\n      }\n\n      if (this.renderPass.renderTarget === this.renderTarget) {\n        this.renderPass.renderTarget = this.renderTargetSwap;\n      } else {\n        this.renderPass.renderTarget = this.renderTarget;\n      }\n    }\n  }\n\n  /**\n   * 销毁 probe 以及 renderPass\n   */\n  public destroy(): void {\n    this.enabled = false;\n    this.renderPipeline.removeRenderPass(this.renderPass);\n\n    super.destroy();\n\n    // todo:delete\n    this.renderTarget.destroy();\n    this.renderTargetSwap.destroy();\n  }\n\n  /**\n   * prevent issue: Feedback Loops Between Textures and the Framebuffer\n   * 提供钩子让用户进行交换 Texture\n   * @example\n   * probe.onTextureChange = cubeTexture => {\n   *   envLight.specularMap = cubeTexture;\n   *   skybox.specularMap = cubeTexture;\n   * }\n   * */\n  public onTextureChange(texture: Texture | RenderColorTexture, depthTexture?: Texture2D | RenderDepthTexture) {}\n}\n","import { Side } from \"../base/Constant\";\nimport { Entity } from \"../Entity\";\nimport { Probe } from \"./Probe\";\nimport { PlaneProbeConfig } from \"./type\";\n\n/**\n * 平面探针，用于生成 折射/纹理扰动 等效果\n * */\nexport class PlaneProbe extends Probe {\n  /**\n   * 创建探针\n   * @param {Entity} node\n   * @param {PlaneProbeConfig} config\n   * */\n  constructor(node: Entity, config: PlaneProbeConfig = {}) {\n    super(node, config);\n  }\n\n  /**\n   * 预处理材质，保存初始状态\n   * */\n  private storeMaterial() {\n    this.renderItems.forEach((item) => {\n      const material = item.mtl;\n      item.initialSide = material.side;\n      material.side = Side.BACK;\n    });\n  }\n\n  /**\n   * 后处理材质，还原初始状态\n   * */\n  private restoreMaterial() {\n    this.renderItems.forEach((item) => {\n      const material = item.mtl;\n      material.side = item.initialSide;\n      delete item.initialSide;\n    });\n  }\n\n  protected preRender() {\n    super.preRender();\n    this.storeMaterial();\n  }\n\n  protected postRender() {\n    super.postRender();\n    this.restoreMaterial();\n  }\n}\n","import { Probe } from \"./Probe\";\nimport { Matrix, Vector3 } from \"@alipay/o3-math\";\nimport { CubeProbeConfig } from \"./type\";\nimport { Entity } from \"../Entity\";\n\nconst cacheTarget: Vector3 = new Vector3();\nconst cacheUp: Vector3 = new Vector3();\nconst cacheDir: Vector3 = new Vector3();\nconst fovRadian = (90 * Math.PI) / 180;\n\n/**\n * 立方体探针,生成 cubeTexture,用于 动态环境反射 等效果\n * */\nexport class CubeProbe extends Probe {\n  /** 可以设置探针的位置，默认为原点 [0,0,0] */\n  public position: Vector3;\n\n  private oriViewMatrix = new Matrix();\n  private oriInverseViewMatrix = new Matrix();\n  private oriProjectionMatrix = new Matrix();\n  private oriInverseProjectionMatrix = new Matrix();\n\n  /**\n   * 创建探针\n   * @param {Entity} node\n   * @param {CubeProbeConfig} config - 可选配置\n   * */\n  constructor(node: Entity, config: CubeProbeConfig = {}) {\n    super(node, {\n      ...config,\n      isCube: true\n    });\n\n    this.position = config.position || new Vector3();\n  }\n\n  /**\n   * 贮藏原相机参数\n   * */\n  private storeCamera() {\n    this.camera.viewMatrix.cloneTo(this.oriViewMatrix);\n    this.camera.inverseViewMatrix.cloneTo(this.oriInverseViewMatrix);\n    this.camera.projectionMatrix.cloneTo(this.oriProjectionMatrix);\n    this.camera.inverseProjectionMatrix.cloneTo(this.oriInverseProjectionMatrix);\n  }\n\n  /**\n   * 还原相机参数\n   * */\n  private restoreCamera() {\n    this.oriViewMatrix.cloneTo(this.camera.viewMatrix);\n    this.oriInverseViewMatrix.cloneTo(this.camera.inverseViewMatrix);\n    this.oriProjectionMatrix.cloneTo(this.camera.projectionMatrix);\n    this.oriInverseProjectionMatrix.cloneTo(this.camera.inverseProjectionMatrix);\n  }\n\n  protected preRender() {\n    super.preRender();\n    this.storeCamera();\n  }\n\n  protected render() {\n    // 渲染6个面\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      // 设置渲染面\n      this.rhi.setRenderTargetFace(this.renderPass.renderTarget, faceIndex);\n\n      // clear\n      this.rhi.clearRenderTarget(this.renderPass.clearMode, this.renderPass.clearParam);\n\n      // 改 camera 参数\n      this.setCamera(faceIndex);\n\n      // render\n      super.render();\n\n      // MSAA need to blit\n      // 6'th face will blit in pipeline\n      if (faceIndex < 5) {\n        this.rhi.blitRenderTarget(this.renderPass.renderTarget);\n      }\n    }\n  }\n\n  protected postRender() {\n    super.postRender();\n    this.restoreCamera();\n  }\n\n  /**\n   * 根据渲染面设置相机参数\n   * */\n  private setCamera(faceIndex: number) {\n    switch (faceIndex) {\n      // positive_x\n      case 0:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(1, 0, 0);\n        break;\n      // negative_x\n      case 1:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(-1, 0, 0);\n        break;\n      // positive_y\n      case 2:\n        cacheUp.setValue(0, 0, 1);\n        cacheDir.setValue(0, 1, 0);\n        break;\n      // negative_y\n      case 3:\n        cacheUp.setValue(0, 0, -1);\n        cacheDir.setValue(0, -1, 0);\n        break;\n      // positive_z\n      case 4:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(0, 0, 1);\n        break;\n      // negative_z\n      case 5:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(0, 0, -1);\n        break;\n    }\n\n    Vector3.add(this.position, cacheDir, cacheTarget);\n    Matrix.lookAt(this.position, cacheTarget, cacheUp, this.camera.viewMatrix);\n    Matrix.invert(this.camera.viewMatrix, this.camera.inverseViewMatrix);\n    Matrix.perspective(fovRadian, 1, this.camera.nearClipPlane, this.camera.farClipPlane, this.camera.projectionMatrix);\n    Matrix.invert(this.camera.projectionMatrix, this.camera.inverseProjectionMatrix);\n  }\n}\n","import { MathUtil, Matrix, Vector2 } from \"@alipay/o3-math\";\nimport { DataType } from \"../base/Constant\";\nimport { DirectLight } from \"../lighting/DirectLight\";\nimport { PointLight } from \"../lighting/PointLight\";\nimport { SpotLight } from \"../lighting/SpotLight\";\nimport { RenderColorTexture } from \"../texture/RenderColorTexture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * 阴影的管理类\n * @private\n */\nexport class LightShadow {\n  private rhi;\n  private _mapSize;\n  private _renderTarget;\n  public bias;\n  public intensity;\n  public radius;\n  public projectionMatrix;\n\n  constructor(props = { width: 512, height: 512 }) {\n    this._mapSize = new Vector2(props.width, props.height);\n    this._renderTarget = new RenderTarget(props.width, props.height, new RenderColorTexture(props.width, props.height));\n\n    /**\n     * （偏斜）\n     * @member {float}\n     */\n    this.bias = 0.005;\n\n    /**\n     * （投影强度）值越大投影越清晰越黑\n     * @member {float}\n     */\n    this.intensity = 0.2;\n\n    /**\n     * 阴影 PCF 插值使用的像素范围\n     * @member { float }\n     */\n    this.radius = 1.0;\n\n    /**\n     * 生成 shadow map 使用的投影矩阵\n     * @member {Matrix}\n     */\n    this.projectionMatrix = new Matrix();\n  }\n\n  /**\n   * shadow map 对应的 RenderTarget\n   * @member {RenderTarget}\n   * @readonly\n   */\n  get renderTarget() {\n    return this._renderTarget;\n  }\n\n  /**\n   * shadow map 纹理对象\n   * @member {Texture2D}\n   * @readonly\n   */\n  get map() {\n    return this._renderTarget.getColorTexture();\n  }\n\n  /**\n   * shadow map 纹理大小\n   * @member {Vector2}\n   * @readonly\n   */\n  get mapSize() {\n    return this._mapSize;\n  }\n\n  /**\n   * 初始化光照的投影矩阵\n   * @param {ALight} light\n   */\n  initShadowProjectionMatrix(light) {\n    /**\n     * 方向光初始化投影矩阵，默认覆盖区域 left: -5, right: 5, bottom: -5, up: 5, near: 0.5, far: 50\n     */\n    if (light instanceof DirectLight) {\n      Matrix.ortho(-5, 5, -5, 5, 0.1, 50, this.projectionMatrix);\n    }\n\n    /**\n     * 点光源初始化投影矩阵，默认配置：fov: 50, aspect: 1, near: 0.5, far: 50\n     */\n    if (light instanceof PointLight) {\n      Matrix.perspective(MathUtil.degreeToRadian(50), 1, 0.5, 50, this.projectionMatrix);\n    }\n\n    /**\n     * 聚光灯初始化投影矩阵，默认配置：fov: this.angle * 2 * Math.sqrt(2), aspect: 1, near: 0.1, far: this.distance + 5\n     */\n    if (light instanceof SpotLight) {\n      const fov = Math.min(Math.PI / 2, light.angle * 2 * Math.sqrt(2));\n      Matrix.perspective(fov, 1, 0.1, light.distance + 5, this.projectionMatrix);\n    }\n  }\n\n  /**\n   * 将阴影参数值提交到阴影材质对象\n   * @param {Material} mtl\n   * @param {number} index\n   * @param {Component} component\n   * @param {ALight} light\n   */\n  bindShadowValues(mtl, index, light) {\n    // 光源视点VP\n    mtl.setValue(`u_viewMatFromLight[${index}]`, light.viewMatrix);\n    mtl.setValue(`u_projMatFromLight[${index}]`, this.projectionMatrix);\n\n    // shadow map\n    const uniformName = `u_shadows[${index}]`;\n    mtl.setValue(uniformName + \".bias\", this.bias);\n    mtl.setValue(uniformName + \".intensity\", this.intensity);\n    mtl.setValue(uniformName + \".radius\", this.radius);\n    mtl.setValue(uniformName + \".mapSize\", this._mapSize);\n\n    mtl.setValue(`u_shadowMaps[${index}]`, this.map);\n  }\n\n  /**\n   * 生成 Technique 所需的 uniform 定义\n   * @param {number} index ShadowMap Index\n   */\n  static getUniformDefine(index) {\n    const uniforms = {};\n\n    uniforms[`u_viewMatFromLight[${index}]`] = {\n      name: `u_viewMatFromLight[${index}]`,\n      type: DataType.FLOAT_MAT4\n    };\n\n    uniforms[`u_projMatFromLight[${index}]`] = {\n      name: `u_projMatFromLight[${index}]`,\n      type: DataType.FLOAT_MAT4\n    };\n\n    const uniformName = `u_shadows[${index}]`;\n    uniforms[uniformName + \".bias\"] = {\n      name: uniformName + \".bias\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".intensity\"] = {\n      name: uniformName + \".intensity\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".radius\"] = {\n      name: uniformName + \".radius\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".mapSize\"] = {\n      name: uniformName + \".mapSize\",\n      type: DataType.FLOAT_VEC2\n    };\n\n    uniforms[`u_shadowMaps[${index}]`] = {\n      name: `u_shadowMaps[${index}]`,\n      type: DataType.SAMPLER_2D\n    };\n    return uniforms;\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { AmbientLight } from \"../lighting/AmbientLight\";\nimport { Light } from \"../lighting/Light\";\nimport { LightShadow } from \"./LightShadow\";\nimport { Component } from \"../Component\";\n\n/**\n * 设置是否产生阴影\n * @param {boolean} enabled\n */\nObject.defineProperty(Light.prototype, \"enableShadow\", {\n  get: function () {\n    return this._enableShadow;\n  },\n  set: function (enabled) {\n    this._enableShadow = enabled;\n\n    if (this._enableShadow) {\n      if (this instanceof AmbientLight) {\n        Logger.warn(\"Has no shadow!\");\n        return;\n      }\n\n      this.shadow = this.shadow || new LightShadow();\n      this.shadow.initShadowProjectionMatrix(this);\n    }\n  }\n});\n\n/**\n * 设置是否接收阴影\n * @param {boolean} enabled\n */\nObject.defineProperty(Component.prototype, \"recieveShadow\", {\n  get: function () {\n    return this._recieveShadow;\n  },\n  set: function (enabled) {\n    this._recieveShadow = enabled;\n  }\n});\n\n/**\n * 设置是否投射阴影\n * @param {boolean} enabled\n */\nObject.defineProperty(Component.prototype, \"castShadow\", {\n  get: function () {\n    return this._castShadow;\n  },\n  set: function (enabled) {\n    this._castShadow = enabled;\n  }\n});\n","import { DataType } from \"../base/Constant\";\nimport { ComplexMaterial } from \"../material/ComplexMaterial\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport fs from \"./shaders/shadowMap.fs.glsl\";\nimport vs from \"./shaders/vertex.glsl\";\n\n/**\n * 生成 Shadow Map 使用的材质\n * @private\n */\nexport class ShadowMapMaterial extends ComplexMaterial {\n  /**\n   * 生成内部所使用的 Technique 对象\n   * @private\n   */\n  _generateTechnique(camera, component) {\n    const customMacros = this._generateMacros();\n    const uniforms = this._generateFragmentUniform();\n\n    //--\n    const tech = new RenderTechnique(this.name);\n    tech.isValid = true;\n    tech.uniforms = uniforms;\n    tech.attributes = {};\n    tech.states = {};\n    tech.customMacros = customMacros;\n    tech.vertexShader = vs;\n    tech.fragmentShader = fs;\n\n    return tech;\n  }\n\n  /**\n   * 添加阴影相关的 uniform 定义\n   * @private\n   */\n  _generateFragmentUniform() {\n    const uniforms = {\n      u_viewMatFromLight: {\n        name: \"u_viewMatFromLight\",\n        type: DataType.FLOAT_MAT4\n      },\n      u_projMatFromLight: {\n        name: \"u_projMatFromLight\",\n        type: DataType.FLOAT_MAT4\n      }\n    };\n\n    return uniforms;\n  }\n\n  /**\n   * 根据阴影的个数，添加相应的宏定义\n   * @private\n   */\n  _generateMacros() {\n    const macros = [];\n\n    macros.push(\"O3_GENERATE_SHADOW_MAP\");\n\n    return macros;\n  }\n}\n","import { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { Camera } from \"../Camera\";\n\n/**\n * RednerPass 对象\n * @private\n */\nexport class ShadowMapPass extends RenderPass {\n  public light;\n  /**\n   * RenderPass 构造函数\n   * @param {string} name 这个 Pass 的名称\n   * @param {number} priority 优先级，小于0在默认Pass之前，大于0在默认Pass之后\n   * @param {RenderTarget} renderTarget 指定的 Render Target\n   * @param {Material} replaceMaterial 替换模型的默认材质\n   * @param {number} mask 与 Component.renderPassFlag 进行 bit and 操作，对这个 Pass 需要渲染的对象进行筛选\n   * @param {ALight} light 需要生成 ShadowMap 的光源\n   */\n  constructor(name, priority, renderTarget, replaceMaterial, mask, light) {\n    super(name, priority, renderTarget, replaceMaterial, mask);\n    this.light = light;\n  }\n\n  /**\n   * Pass 渲染前调用\n   * @param {Camera} camera 相机\n   * @param {RenderQueue} opaqueQueue 不透明物体渲染队列\n   * @param {RenderQueue} transparentQueue 透明物体渲染队列\n   */\n  preRender(camera: Camera, opaqueQueue, transparentQueue) {\n    // 光源视点 VP 矩阵\n    this.replaceMaterial.setValue(\"u_viewMatFromLight\", this.light.viewMatrix);\n    this.replaceMaterial.setValue(\"u_projMatFromLight\", this.light.shadow.projectionMatrix);\n  }\n}\n","import { BlendFunc, CompFunc, RenderState } from \"../base/Constant\";\nimport { ComplexMaterial } from \"../material/ComplexMaterial\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport { LightShadow } from \"./LightShadow\";\nimport fs from \"./shaders/shadow.fs.glsl\";\nimport vs from \"./shaders/vertex.glsl\";\n\n/**\n * 接收阴影的材质\n * @private\n */\nexport class ShadowMaterial extends ComplexMaterial {\n  public shadowMapCount;\n  /**\n   * 生成内部所使用的 Technique 对象\n   * @private\n   */\n  _generateTechnique(camera, component) {\n    const customMacros = this._generateMacros();\n    const uniforms = this._generateFragmentUniform();\n\n    //--\n    const tech = new RenderTechnique(this.name);\n    tech.autoConvert = false;\n    tech.isValid = true;\n    tech.uniforms = uniforms;\n    tech.attributes = {};\n    tech.states = {};\n    tech.customMacros = customMacros;\n    tech.vertexShader = vs;\n    tech.fragmentShader = fs;\n    tech.states = {\n      enable: [RenderState.BLEND],\n      functions: {\n        depthFunc: [CompFunc.LEQUAL],\n        blendFunc: [BlendFunc.DST_COLOR, BlendFunc.ZERO]\n      }\n    };\n\n    return tech;\n  }\n\n  /**\n   * 添加阴影相关的 uniform 定义\n   * @private\n   */\n  _generateFragmentUniform() {\n    let uniforms = {};\n\n    for (let i = 0; i < this.shadowMapCount; i++) {\n      const lgtUniforms = LightShadow.getUniformDefine(i);\n      uniforms = { ...uniforms, ...lgtUniforms };\n    } // end of for\n\n    return uniforms;\n  }\n\n  /**\n   * 根据阴影的个数，添加相应的宏定义\n   * @private\n   */\n  _generateMacros() {\n    const macros = [];\n\n    if (this.shadowMapCount > 0) {\n      macros.push(`O3_SHADOW_MAP_COUNT ${this.shadowMapCount}`);\n    }\n    return macros;\n  }\n}\n","import { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { ClearMode } from \"../base/Constant\";\nimport { Camera } from \"../Camera\";\nimport { LightFeature } from \"../lighting/LightFeature\";\n\n/**\n * RednerPass 对象\n * @private\n */\nexport class ShadowPass extends RenderPass {\n  constructor(...args) {\n    super(...args);\n    this.clearMode = ClearMode.DONT_CLEAR;\n  }\n\n  /**\n   * Pass 渲染前调用\n   * @param {Camera} camera 相机\n   * @param {RenderQueue} opaqueQueue 不透明物体渲染队列\n   * @param {RenderQueue} transparentQueue 透明物体渲染队列\n   */\n  preRender(camera: Camera, opaqueQueue, transparentQueue) {\n    this.enabled = false;\n    const lightMgr = camera.scene.findFeature(LightFeature);\n    if (lightMgr) {\n      // keep render based on default render pass\n      const pass = camera._renderPipeline.defaultRenderPass;\n      this.renderTarget = pass.renderTarget;\n\n      const lights = lightMgr.visibleLights;\n      let shadowMapCount = 0;\n      for (let i = 0, len = lights.length; i < len; i++) {\n        const lgt: any = lights[i];\n        if (lgt.enableShadow) {\n          lgt.shadow.bindShadowValues(this.replaceMaterial, shadowMapCount, lgt);\n          shadowMapCount++;\n        }\n      } // end of for\n\n      if (shadowMapCount !== this.replaceMaterial.shadowMapCount) {\n        this.replaceMaterial.shadowMapCount = shadowMapCount;\n        this.replaceMaterial.clearTechniques();\n      }\n\n      if (shadowMapCount) this.enabled = true;\n    }\n  }\n}\n","import { ShadowMapMaterial } from \"./ShadowMapMaterial\";\nimport { ShadowMapPass } from \"./ShadowMapPass\";\nimport { ShadowMaterial } from \"./ShadowMaterial\";\nimport { ShadowPass } from \"./ShadowPass\";\nimport { SceneFeature } from \"../SceneFeature\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { Camera } from \"../Camera\";\nimport { MaskList } from \"../base/Constant\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { Component } from \"../Component\";\n\n/**\n * Shadow Feature：场景中 Shadow 特性\n * @extends SceneFeature\n * @private\n */\nexport class ShadowFeature extends SceneFeature {\n  private _shadowPass;\n  private _shadowMapMaterial: ShadowMapMaterial;\n  /**\n   * 场景渲染前的回调, 在此环节生成 Shadow Map\n   * @param {Scene} scene\n   * @param {Camera} camera\n   */\n  preRender(scene, camera: Camera) {\n    const lightMgr = camera.scene.findFeature(LightFeature);\n    if (lightMgr && lightMgr.visibleLights.length > 0) {\n      // 检查添加绘制 Shadow 的 RenderPass\n      if (!this._shadowPass) {\n        this.addShadowPass(camera);\n      }\n\n      // 检查添加绘制 Shadow Map 的 RenderPass\n      const lights = lightMgr.visibleLights;\n      for (let i = 0, len = lights.length; i < len; i++) {\n        const lgt: any = lights[i];\n        if (lgt.enableShadow && !lgt.shadowMapPass) {\n          lgt.shadowMapPass = this.addShadowMapPass(camera, lgt);\n        } else if (!lgt.enableShadow && lgt.shadowMapPass) {\n          const renderer = camera._renderPipeline;\n          renderer.removeRenderPass(lgt.shadowMapPass);\n          lgt.shadowMapPass = null;\n        }\n      } // end of for\n\n      this.updatePassRenderFlag(camera._renderPipeline.opaqueQueue);\n      this.updatePassRenderFlag(camera._renderPipeline.transparentQueue);\n    } // end of if\n  }\n\n  /**\n   * 添加渲染阴影的 RendererPass\n   * @param {Camera} camera\n   */\n  addShadowPass(camera: Camera) {\n    const shadowMaterial = new ShadowMaterial(\"shadowMaterial\");\n    this._shadowPass = new ShadowPass(\"ShadowPass\", 1, null, shadowMaterial, MaskList.SHADOW);\n    const renderer = camera._renderPipeline;\n    renderer.addRenderPass(this._shadowPass);\n  }\n\n  /**\n   * 添加渲染 shadow map 的 RendererPass\n   * @param {Camera} camera\n   * @param {ALight} light\n   */\n  addShadowMapPass(camera: Camera, light) {\n    // 共用 shadow map 材质\n    this._shadowMapMaterial = this._shadowMapMaterial || new ShadowMapMaterial(\"shadowMapMaterial\");\n\n    const shadowMapPass = new ShadowMapPass(\n      \"ShadowMapPass\",\n      -1,\n      light.shadow.renderTarget,\n      this._shadowMapMaterial,\n      MaskList.SHADOW_MAP,\n      light\n    );\n    const renderer = camera._renderPipeline;\n    renderer.addRenderPass(shadowMapPass);\n\n    return shadowMapPass;\n  }\n\n  /**\n   * 用于更新场景中物体的 renderPassFlag 状态\n   * @param {RenderQueue} renderQueue\n   */\n  updatePassRenderFlag(renderQueue: RenderQueue) {\n    const items = renderQueue.items;\n    for (let i = 0, len = items.length; i < len; i++) {\n      const item = items[i];\n      const ability: Component = item.component;\n\n      const recieveShadow = (ability as any).recieveShadow;\n      const castShadow = (ability as any).castShadow;\n      if (recieveShadow === true) {\n        ability.addPassMasks(MaskList.SHADOW);\n      } else if (recieveShadow === false) {\n        ability.removePassMasks(MaskList.SHADOW);\n      }\n\n      if (castShadow === true) {\n        ability.addPassMasks(MaskList.SHADOW_MAP);\n      } else if (castShadow === false) {\n        ability.removePassMasks(MaskList.SHADOW_MAP);\n      }\n    }\n  }\n}\n","import \"./Extension\";\nimport { ShadowFeature } from \"./ShadowFeature\";\nimport { Scene } from \"../Scene\";\n\nScene.registerFeature(ShadowFeature);\n","export { Engine } from \"./Engine\";\nexport { SystemInfo } from \"./SystemInfo\";\nexport type { HardwareRenderer } from \"./HardwareRenderer\";\nexport type { Canvas } from \"./Canvas\";\nexport { EngineFeature } from \"./EngineFeature\";\nexport { AssetObject } from \"./asset/AssetObject\";\n\nexport { Scene } from \"./Scene\";\nexport { SceneVisitor } from \"./SceneVisitor\";\nexport { SceneFeature } from \"./SceneFeature\";\n\nexport { Entity } from \"./Entity\";\nexport { Component } from \"./Component\";\nexport { Script } from \"./Script\";\nexport { RenderableComponent } from \"./RenderableComponent\";\nexport { dependencies } from \"./ComponentsDependencies\";\n\nexport { Camera } from \"./Camera\";\nexport { Transform } from \"./Transform\";\nexport { UpdateFlag } from \"./UpdateFlag\";\nexport { request } from \"./asset/request\";\nexport { Loader } from \"./asset/Loader\";\nexport { ResourceManager, resourceLoader } from \"./asset/ResourceManager\";\nexport { AssetPromise, AssetPromiseStatus } from \"./asset/AssetPromise\";\nexport type { LoadItem } from \"./asset/LoadItem\";\nexport { AssetType } from \"./asset/AssetType\";\nexport { ReferenceObject } from \"./asset/ReferenceObject\";\n\nexport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nexport { RenderQueue } from \"./RenderPipeline//RenderQueue\";\nexport { RenderContext } from \"./RenderPipeline/RenderContext\";\nexport { RenderPass } from \"./RenderPipeline/RenderPass\";\nexport * from \"./base\";\n\n//lighting\nimport { LightFeature, hasLight } from \"./lighting/LightFeature\";\nimport { Scene } from \"./Scene\";\nScene.registerFeature(LightFeature);\n(Scene.prototype as any).hasLight = hasLight;\nexport { LightFeature };\nexport { AmbientLight } from \"./lighting/AmbientLight\";\nexport { DirectLight } from \"./lighting/DirectLight\";\nexport { PointLight } from \"./lighting/PointLight\";\nexport { SpotLight } from \"./lighting/SpotLight\";\nexport { EnvironmentMapLight } from \"./lighting/EnvironmentMapLight\";\nexport { Light } from \"./lighting/Light\";\n\n//bouding-info\nexport { AABB } from \"./bounding-info/AABB\";\nexport { OBB } from \"./bounding-info//OBB\";\nexport { BoundingSphere } from \"./bounding-info//BoudingSphere\";\nexport type { BoundingBox } from \"./RenderableComponent\";\n//mesh\nexport { Mesh } from \"./mesh/Mesh\";\nexport { Skin } from \"./mesh/Skin\";\nexport { MeshRenderer } from \"./mesh/MeshRenderer\";\nexport { SkinnedMeshRenderer } from \"./mesh/SkinnedMeshRenderer\";\nexport { LODGroup } from \"./mesh/LODGroup\";\n\n// primitive\nexport { Primitive } from \"./primitive/Primitive\";\n\n// material\n\nexport { Material } from \"./material/Material\";\nexport { ComplexMaterial } from \"./material/ComplexMaterial\";\nexport { RenderTechnique } from \"./material/RenderTechnique\";\nexport * from \"./material/type\";\n\n// texture\nexport { Texture } from \"./texture/Texture\";\nexport { Texture2D } from \"./texture/Texture2D\";\nexport { TextureCubeMap } from \"./texture/TextureCubeMap\";\nexport { RenderTarget } from \"./texture/RenderTarget\";\nexport { RenderColorTexture } from \"./texture/RenderColorTexture\";\nexport { RenderDepthTexture } from \"./texture/RenderDepthTexture\";\nexport * from \"./texture/enums\";\n\nexport * from \"./graphic/index\";\nexport * from \"./2d/index\";\nexport * from \"./shaderlib/index\";\nexport * from \"./animation/index\";\nexport * from \"./mobile-material/index\";\nexport * from \"./geometry/index\";\nexport * from \"./geometry-shape/index\";\nexport * from \"./skybox/index\";\nexport * from \"./pbr/index\";\nexport * from \"./particle/index\";\nexport * from \"./trail/index\";\nexport * from \"./rayCast/index\";\nexport * from \"./collider/index\";\nexport * from \"./collision/index\";\nexport * from \"./fog/index\";\nexport * from \"./env-probe\";\nexport * from \"./shadow/index\";\n"],"names":["Event","_propagationStopped","_target","t","_timeStamp","_currentTarget","_bubbles","_type","type","target","data","bubbles","Date","getTime","EngineObject","instanceId","_instanceIdCounter","EventDispatcher","_listeners","listener","listeners","undefined","indexOf","push","once","addEventListener","arguments","length","index","splice","event","listenersArray","copiedListeners","slice","i","l","call","removeEventListener","parent","propagationStopped","trigger","prototype","on","off","noop","message","debug","console","log","bind","info","warn","error","Logger","isEnabled","enable","disable","Time","_clock","_timeScale","_deltaTime","_startTime","_lastTickTime","performance","now","nowTime","s","Util","isArray","Array","value","toString","isArrayLike","x","clone","obj","rst","k","hasOwnProperty","downloadBlob","blob","fileName","navigator","msSaveBlob","url","window","URL","createObjectURL","a","document","createElement","body","appendChild","style","display","href","download","parentElement","removeChild","click","revokeObjectURL","InternalAssetType","ClearMode","MaterialType","RenderState","FrontFace","CullFace","Side","CompFunc","TextureFilter","DataType","UniformSemantic","BlendFunc","MaskList","RefreshRate","IntersectInfo","BoundingType","GLCapabilityType","OITMode","AssetPromiseStatus","AssetPromise","callback","add","_status","Pending","_reject","_progress","promises","resolve","reject","setProgress","completed","total","results","forEach","Promise","then","result","err","executor","newReject","progress","reason","Failed","Success","Set","ResourceManager","loader","extnames","_loaders","len","_extTypeMapping","substring","lastIndexOf","engine","retryCount","retryInterval","timeout","_assetPool","Object","create","_assetUrlPool","_referenceObjectPool","_loadingPromises","assetInfo","_loadSingleItem","map","item","all","values","promise","cancel","p","objects","sort","refObj1","refObj2","gcPriority","isGCIgnored","destroy","path","asset","id","_getTypeByUrl","urls","join","_assignDefaultOptions","load","res","useCache","_addAsset","resourceLoader","assetType","Target","_addLoader","FeatureManager","_features","_objects","IFeature","featureArray","objectArray","features","method","args","count","feature","apply","constructor","ComponentsDependencies","currentComponent","dependentComponent","_addDependency","_dependenciesMap","_invDependenciesMap","entity","dependencies","get","getComponent","invDenpendencies","components","set","Map","abilityClass","ability","register","DisorderedArray","_elements","element","deleteByIndex","elements","end","lastIndex","Component","_enabled","_entity","isActiveInHierarchy","_onEnable","_onDisable","_destroyed","scene","props","_props","_awaked","_renderPriority","_renderPassFlag","_passMasks","_cullDistanceSq","EVERYTHING","_removeComponent","_onInActive","_onDestroy","_onAwake","_isActiveInHierarchy","_onActive","desComponent","masks","reduce","b","mask","idx","setPassMasks","val","Math","sqrt","UpdateFlag","_flags","flag","flags","last","Transform","_position","cloneTo","_setDirtyFlagTrue","_LOCAL_MATRIX_FLAG","_updateWorldPositionFlag","_isContainDirtyFlag","_WORLD_POSITION_FLAG","_getParentTransform","worldMatrix","getTranslation","_worldPosition","_setDirtyFlagFalse","Matrix","invert","_tempMat41","Vector3","transformCoordinate","position","_LOCAL_EULER_FLAG","_rotationQuaternion","toEuler","_rotation","scale","MathUtil","radToDegreeFactor","_LOCAL_QUAT_FLAG","_updateWorldRotationFlag","_WORLD_EULER_FLAG","worldRotationQuaternion","_worldRotation","Quaternion","rotationEuler","degreeToRadian","y","z","_worldRotationQuaternion","_WORLD_QUAT_FLAG","multiply","rotationQuaternion","_tempQuat0","_scale","_updateWorldScaleFlag","_WORLD_SCALE_FLAG","scaleMat","_getScaleMatrix","e","_lossyWorldScale","setValue","affineTransformation","_localMatrix","decompose","_updateAllWorldFlag","_WORLD_MATRIX_FLAG","localMatrix","_worldMatrix","_tempMat42","_dirtyFlag","_WM_WP_WE_WQ_WS_FLAGS","_changeFlags","_isParentDirty","_parentTransformCache","rotation","w","worldPosition","worldRotation","forward","normalize","right","up","translation","relativeToLocal","rotationMat","_tempMat40","_tempVec3","translate","rotateXYZ","radFactor","degreeToRadFactor","rotQuat","_rotateByQuat","axis","angle","rad","rotationAxisAngle","worldUp","EPSILON","zeroTolerance","abs","mat","_tempMat43","lookAt","getRotation","_isContainDirtyFlags","_WM_WP_FLAGS","_worldAssociatedChange","nodeChildren","_children","n","transform","_WM_WE_WQ_FLAGS","_updateWorldPositionAndRotationFlag","_WM_WP_WE_WQ_FLAGS","_WM_WS_FLAGS","_updateWorldPositionAndScaleFlag","_WM_WP_WS_FLAGS","parentCache","invRotation","invRotationMat","_tempMat30","worldRotScaMat","_tempMat31","scaMat","_tempMat32","setValueByMatrix","Matrix3x3","targetDirtyFlags","rotateQuat","Entity","_isActive","_parent","_isRoot","_scene","_isActiveInEngine","_processActive","_processInActive","oldParent","_removeFromParent","newParent","parentScene","_traverseSetOwnerScene","_setTransformDirty","_engine","name","_entitys","nodeName","Engine","_lastCreateEngine","sceneManager","activeScene","splits","split","filter","Boolean","rootEntitiesCount","findEntity","getRootEntity","j","m","_findChildByName","root","children","child","childCount","_components","_activeChangedComponents","_invModelMatrix","_inverseWorldMatFlag","_getDefaultEngine","addComponent","registerWorldChangeFlag","_addCheck","component","_setActive","grandson","findByName","newNode","childNode","addChild","abilityArray","newCom","_cloneTo","parentChildren","_removeCheck","oldParentChildren","_componentsManager","getActiveChangedTempList","_setActiveInHierarchy","_setActiveComponents","_setInActiveInHierarchy","isActive","activeChangedComponents","putActiveChangedTempList","_parentChange","Scene","_rootEntities","clipPlanes","_activeCameras","sceneFeatureManager","addObject","addRootEntity","isRoot","oldScene","_removeEntity","callFeatureMethod","camera","active","rootEntities","oldRootEntities","Feature","findFeature","ray","outPos","tag","registerFeature","SceneManager","_activeScene","destroyOldScene","scenePromise","resourceManager","sourceScene","destScene","ComponentsManager","_onStartScripts","_onUpdateScripts","_onLateUpdateScripts","_destoryComponents","_onUpdateAnimations","_renderers","_onUpdateRenderers","_componentsContainerPool","renderer","_rendererIndex","replaced","script","_onStartIndex","_onUpdateIndex","_onLateUpdateIndex","animation","onStartScripts","_started","onStart","deltaTime","onUpdate","onLateUpdate","update","_render","destoryComponents","onDestroy","camComps","camComp","onBeginRender","onEndRender","pop","componentContainer","engineFeatureManager","_canvas","_resourceManager","_sceneManager","_time","_isPaused","_vSyncCount","max","floor","_targetFrameRate","_targetFrameInterval","_hardwareRenderer","defaultCreateObjectEngine","canvas","hardwareRenderer","_requestId","_timeoutId","_loopCounter","_animate","requestAnimationFrame","setTimeout","init","cancelAnimationFrame","clearTimeout","time","tick","beginFrame","componentsManager","callScriptOnStart","callScriptOnUpdate","callAnimationUpdate","callScriptOnLateUpdate","callComponentDestory","endFrame","resume","pause","gc","cameras","callRendererOnUpdate","camera1","camera2","priority","cameraEntity","enabled","callCameraOnBeginRender","render","callCameraOnEndRender","SystemInfo","devicePixelRatio","EngineFeature","currentScene","AssetObject","cacheID","needRecreate","glAsset","SceneVisitor","SceneFeature","Script","_onPreRenderIndex","_onPostRenderIndex","onAwake","addOnStartScript","addOnUpdateScript","addOnLateUpdateScript","onEnable","removeOnStartScript","removeOnUpdateScript","removeOnLateUpdateScript","onDisable","addDestoryComponent","RenderableComponent","changeFlag","_transformChangeFlag","_updateBounds","_bounds","_overrideUpdate","min","worldBounds","addOnUpdateRenderers","addRenderer","removeOnUpdateRenderers","removeRenderer","culled","cullDistanceSq","distanceSq","distanceSquared","passNum","RenderPass","renderTarget","replaceMaterial","clearParam","Vector4","renderOverride","clearMode","_clearParam","SOLID_COLOR","opaqueQueue","transparentQueue","v","RenderContext","viewMatrix","projectionMatrix","viewProjectMatrix","inverseViewMatrix","inverseProjectionMatrix","viewport","cameraPosition","context","_renderContext","RenderQueue","_items","primitive","mtl","eyePos","items","item1","item2","renderPriority","pos1","pos2","dis","tech1","technique","tech2","localeCompare","positionQuad","uvRect","tintColor","texture","renderMode","rhi","updateMaxJointsNum","_getRenderContext","renderPassFlag","_isPrimitive","flushSprite","material","preRender","prepareDrawing","drawPrimitive","postRender","drawSprite","materialControl","jointNodes","maxJointsNum","SeparateSpritePass","_spriteItems","DONT_CLEAR","isUsed","renderHardware","_sortByDistance","node","BasicRenderPipeline","_camera","_opaqueQueue","_transparentQueue","_defaultPass","_renderPassArray","_canvasDepthPass","_separateSpritePass","addRenderPass","nameOrPass","renderPass","p1","p2","pass","getRenderPass","clear","callRender","sortByTechnique","sortByDistance","_drawRenderPass","activeRenderTarget","clearRenderTarget","blitRenderTarget","renderType","TRANSPARENT","pushPrimitive","separateDraw","pushSprite","MathTemp","tempMat4","tempVec4","tempVec3","ClearFlags","Camera","_nearClipPlane","_projMatChange","_farClipPlane","_fieldOfView","_customAspectRatio","width","_viewport","height","_isOrthographic","_orthographicSize","_backgroundColor","setClearMode","_clearMode","Error","_isViewMatrixDirty","_transform","_viewMatrix","_projectionMatrix","_isProjMatSetting","_isProjectionDirty","_lastAspectSize","aspectRatio","perspective","ortho","_renderTarget","RenderPipeline","cullingMask","_renderPipeline","_inverseProjectionMatrix","_inverseViewMatrix","_isInvProjMatDirty","Vector2","_invViewProjMat","_isInvViewProjDirty","point","out","nx","ny","nz","invViewProjMat","_innerViewportToWorldPoint","clipPoint","origin","viewportToWorldPoint","farPoint","subtract","direction","cubeFaces","attachRenderCamera","detachRenderCamera","depth","invW","backgroundColor","defaultRenderPass","mimeType","json","gltf","prefab","txt","bin","png","webp","jpg","defaultRetryCount","defaultTimeout","defaultInterval","request","config","getMimeTypeFromUrl","realRequest","requestImage","requestRes","lastError","MultiExecutor","onProgress","stop","start","img","Image","onerror","onabort","timeoutId","onload","crossOrigin","src","xhr","XMLHttpRequest","status","response","responseText","ontimeout","onprogress","loaded","open","withCredentials","credentials","responseType","headers","keys","setRequestHeader","send","extname","execFunc","totalCount","interval","_currentCount","done","exec","Loader","AssetType","ReferenceObject","_gcPriority","_referenceCount","resEngine","_addReferenceObject","force","_deleteAsset","_deleteReferenceObject","referenceCount","Light","uniformName","_viewMat","_modelMat","LightFeature","attachRenderLight","detachRenderLight","rotateAxisAngle","PI","AmbientLight","FLOAT_VEC3","FLOAT","_lightColor","color","intensity","lightColor","DirectLight","_forward","_reverseDirection","getWorldForward","uniforms","cacheMat3","EnvironmentMapLight","SAMPLER_CUBE","FLOAT_MAT3","diffuseMap","specularMap","diffuse","specular","diffuseIntensity","specularIntensity","useDiffuseMap","useSpecularMap","mipmapCount","transformMatrix","PointLight","distance","decay","SpotLight","_inverseDirection","penumbra","cos","hasLight","visibleLights","ambientLightCount","directLightCount","pointLightCount","spotLightCount","envMapLightCount","useDiffuseEnv","useSpecularEnv","lights","light","bindMaterialValues","getUniformDefine","pointDistanceToPlane","plane","pt","getMaxScaleByModelMatrix","modelMatrix","scaleXSq","scaleYSq","scaleZSq","AABB","minWorld","maxWorld","center","size","halfSize","frustumPlanes","d1","d2","EXCLUDE","INTERSECT","INCLUDE","OBB","minLocal","maxLocal","corners","cornersWorld","getCornersFromMinMax","updateByModelMatrix","minX","minY","minZ","maxX","maxY","maxZ","Infinity","corner","cornerWorld","isInPlane","BoundingSphere","radius","centerWorld","radiusWorld","Mesh","primitives","weights","bounds","weightsIndices","Skin","inverseBindMatrices","joints","skeleton","MeshRenderer","_mesh","_instanceMaterials","_sharedMaterials","mesh","primitiveIndex","_addReference","renderPipeline","localBounds","RenderBufferColorFormat","RenderBufferDepthFormat","TextureCubeFace","TextureFilterMode","TextureFormat","TextureWrapMode","GLCompressedTextureInternalFormat","Texture","_mipmap","gl","_rhi","_bind","generateMipmap","_unbind","deleteTexture","_glTexture","_formatDetail","bindTexture","face","baseFormat","dataType","_readFrameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_2D","readPixels","isCube","isWebGL2","internalFormat","texStorage2D","_mipmapCount","_width","_height","texImage2D","faceIndex","log2","pname","Clamp","_isPowerOf2","texParameteri","CLAMP_TO_EDGE","Repeat","REPEAT","Mirror","MIRRORED_REPEAT","_wrapModeU","_setWrapMode","TEXTURE_WRAP_S","_wrapModeV","TEXTURE_WRAP_T","_filterMode","Point","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","NEAREST_MIPMAP_NEAREST","Bilinear","LINEAR","LINEAR_MIPMAP_NEAREST","Trilinear","LINEAR_MIPMAP_LINEAR","_anisoLevel","capability","maxAnisoLevel","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","format","R8G8B8","RGB8","RGB","UNSIGNED_BYTE","isCompressed","R8G8B8A8","RGBA8","RGBA","R4G4B4A4","RGBA4","UNSIGNED_SHORT_4_4_4_4","R5G5B5A1","RGB5_A1","UNSIGNED_SHORT_5_5_5_1","R5G6B5","RGB565","UNSIGNED_SHORT_5_6_5","Alpha8","ALPHA","R32G32B32A32","RGBA32F","DXT1","RGB_S3TC_DXT1_EXT","DXT5","RGBA_S3TC_DXT5_EXT","ETC1_RGB","RGB_ETC1_WEBGL","ETC2_RGB","RGB8_ETC2","ETC2_RGBA5","RGB8_PUNCHTHROUGH_ALPHA1_ETC2","ETC2_RGBA8","RGBA8_ETC2_EAC","PVRTC_RGB2","RGB_PVRTC_2BPPV1_IMG","PVRTC_RGBA2","RGBA_PVRTC_2BPPV1_IMG","PVRTC_RGB4","RGB_PVRTC_4BPPV1_IMG","PVRTC_RGBA4","RGBA_PVRTC_4BPPV1_IMG","ASTC_4x4","RGBA_ASTC_4X4_KHR","ASTC_5x5","RGBA_ASTC_5X5_KHR","ASTC_6x6","RGBA_ASTC_6X6_KHR","ASTC_8x8","RGBA_ASTC_8X8_KHR","ASTC_10x10","RGBA_ASTC_10X10_KHR","ASTC_12x12","RGBA_ASTC_12X12_KHR","R16G16B16A16","RGBA16F","HALF_FLOAT","Depth","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DEPTH_COMPONENT","UNSIGNED_INT","attachment","DEPTH_ATTACHMENT","DepthStencil","DEPTH24_STENCIL8","DEPTH_STENCIL","UNSIGNED_INT_24_8","DEPTH_STENCIL_ATTACHMENT","Stencil","STENCIL_INDEX8","STENCIL_ATTACHMENT","Depth16","Depth24","DEPTH_COMPONENT24","Depth32","Depth24Stencil8","Depth32Stencil8","DEPTH32F_STENCIL8","FLOAT_32_UNSIGNED_INT_24_8_REV","isSupported","canIUse","textureFloat","colorBufferFloat","colorBufferHalfFloat","textureHalfFloat","isTexture","depthTexture","Texture2D","_format","mipmap","_compressedMipFilled","_supportTextureFormat","formatDetail","_getFormatDetail","createTexture","_getMipmapCount","_initMipmap","filterMode","wrapModeU","wrapModeV","colorBuffer","mipLevel","mipWidth","mipHeight","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","mipBit","compressedTexSubImage2D","compressedTexImage2D","texSubImage2D","imageSource","flipY","premultiplyAlpha","SkinnedMeshRenderer","_hasInitJoints","matrixPalette","jointTexture","_mat","_weights","_skin","_useJointTexture","skin","setWeights","updatePrimitiveWeightsIndices","findByNodeName","Float32Array","maxAttribUniformVec4","renderStates","getParameter","MAX_VERTEX_UNIFORM_VECTORS","maxJoints","canIUseMoreJoints","brother","_findParent","_initJoints","ibms","worldToLocal","getInvModelMatrix","identity","createJointTexture","setPixelBuffer","LODGroup","_lods","rendererAbility","dist","lods","activeLevel","lod","BufferUsage","VertexElementFormat","IndexFormat","BufferUtil","bufferUsage","Static","STATIC_DRAW","Dynamic","DYNAMIC_DRAW","Stream","STREAM_DRAW","indexFormat","UInt8","UInt16","UNSIGNED_SHORT","UInt32","Single","Byte4","Short2","SHORT","Short4","UShort2","UShort4","PrimitiveTopology","IndexBufferBinding","_buffer","buffer","Primitive","_vertexBufferBindings","_vertexElements","_indexBufferBinding","_vertexElementMap","primitiveTopology","Triangles","drawOffset","drawCount","instanceCount","_glIndexType","materialIndex","targets","boundingBox","boundingSphere","isInFrustum","_primitiveID","bufferBindings","firstIndex","bindings","multiBindings","needLength","singleBinding","binding","_getGLIndexType","addElements","_addVertexElement","vertexElements","vertexBufferBindings","vertexBufferBinding","indexBufferBinding","finalize","semantic","Material","useFog","_technique","_values","OPAQUE","newMtl","oriValue","getValue","oriIsTexture","curIsTexture","_generateTechnique","delValue","originalMaterial","uniform","_updateValueBySemantic","hasFogFeature","bindFogToMaterial","compile","tech","LOCAL","MODEL","VIEW","PROJECTION","MODELVIEW","view","model","modelView","VIEWPROJECTION","viewProj","MODELVIEWPROJECTION","MVP","MODELINVERSE","invModelMatrixs","VIEWINVERSE","PROJECTIONINVERSE","MODELVIEWINVERSE","invMV","MODELVIEWPROJECTIONINVERSE","invMVP","MODELINVERSETRANSPOSE","modelIT","normalMatrix","MODELVIEWINVERSETRANSPOSE","modelViewIT","transpose","VIEWPORT","JOINTMATRIX","JOINTTEXTURE","JOINTCOUNT","MORPHWEIGHTS","EYEPOS","TIME","timeSinceStartup","ComplexMaterial","_techniquePool","_requireTechnique","key","_getTechniqueKey","isSkin","jontCount","pbr_common_frag_define","pbr_util_frag_define","pbr_envmap_light_frag_define","pbr_base_frag_define","pbr_texture_frag_define","pbr_runtime_frag_define","pbr_normal_frag_define","pbr_brdf_cook_torrance_frag_define","pbr_direct_irradiance_frag_define","pbr_ibl_specular_frag_define","pbr_ibl_diffuse_frag_define","pbr_begin_frag","pbr_direct_irradiance_frag","pbr_ibl_diffuse_frag","pbr_ibl_specular_frag","pbr_end_frag","ShaderLib","common","common_vert","common_frag","color_share","normal_share","uv_share","worldpos_share","shadow_share","fog_share","begin_normal_vert","begin_position_vert","morph_target_vert","position_vert","color_vert","normal_vert","skinning_vert","uv_vert","worldpos_vert","shadow_vert","morph_vert","fog_vert","ambient_light_frag","direct_light_frag","point_light_frag","spot_light_frag","mobile_material_frag","fog_frag","begin_mobile_frag","begin_normal_frag","begin_viewdir_frag","mobile_blinnphong_frag","mobile_lambert_frag","noise_common","noise_cellular_2D","noise_cellular_2x2","noise_cellular_2x2x2","noise_cellular_3D","noise_cellular","noise_perlin_2D","noise_perlin_3D","noise_perlin_4D","noise_perlin","noise_psrd_2D","noise_simplex_2D","noise_simplex_3D_grad","noise_simplex_3D","noise_simplex_4D","noise_simplex","perturbation_share","perturbation_frag","refraction_share","refraction_frag","clipPlane_vert_define","clipPlane_vert","clipPlane_frag_define","clipPlane_frag","gamma_frag","oit_frag","oit_frag_define","PBRShaderLib","InjectShaderSlices","ShaderFactory","version","vertP","fragP","compileVert","downgrade","macros","parseIncludes","regex","replace","match","trim","slices","extensions","shader","isFrag","isGLSL300","includes","isMRT","test","replaceMRTShader","mrtIndexSet","fragmentShader","hasFragData","declaration","SetDataOptions","IndexBuffer","_byteLength","_bufferUsage","byteLengthOrData","_nativeBuffer","_glBufferUsage","glBufferUsage","_getGLBufferUsage","createBuffer","bufferData","ELEMENT_ARRAY_BUFFER","byteLength","bindBuffer","bufferByteOffset","dataOffset","dataLength","options","None","Discard","byteSize","BYTES_PER_ELEMENT","dataByteLength","isArrayBufferView","byteOffset","bufferSubData","subData","Uint8Array","getBufferSubData","deleteBuffer","VertexBuffer","ARRAY_BUFFER","VertexBufferBinding","_stride","stride","VertexElement","_semantic","_offset","_vertexBufferIndex","_instanceDivisor","offset","vertexBufferIndex","instanceDivisor","normalized","_glElementInfo","_getElementInfo","RenderTechnique","isValid","_uniforms","commonUniforms","_attributes","commonAttributes","states","vertexShader","autoConvert","vertexPrecision","fragmentPrecision","customMacros","shaderExtension100","shaderExtension300","_needCompile","_recreateHeader","_vsHeader","_vsCode","_fsHeader","_fsCode","_fogMacro","attribLocSet","parseFog","preCompile","attribMacros","getAttributeDefines","attributes","parseVersion","parseShaderName","toUpperCase","parsePrecision","parseAttributeMacros","parseCustomMacros","parseShader","parseExtension","maxDrawBuffers","shaderMaxDrawBuffers","getMaxDrawBuffers","convertTo300","compatible","postCompile","_macros","attribNames","getFogMacro","fogMacro","targetNum","morphConfig","a_position","a_uv","FLOAT_VEC2","a_normal","a_tangent","FLOAT_VEC4","a_color","a_joint","a_weight","u_localMat","FLOAT_MAT4","u_modelMat","u_viewMat","u_projMat","u_MVMat","u_MVPMat","u_normalMat","u_cameraPos","u_time","u_jointMatrix","FLOAT_MAT4_ARRAY","u_jointSampler","SAMPLER_2D","u_jointCount","u_fogColor","u_fogDensity","u_fogNear","u_fogFar","TextureCubeMap","_compressedFaceFilled","TEXTURE_CUBE_MAP","mipSize","RenderDepthTexture","_autoMipmap","_isCube","_supportRenderBufferDepthFormat","_getRenderBufferDepthFormatDetail","RenderTarget","_colorTextures","_depthTexture","_antiAliasing","renderTexture","antiAliasing","_frameBuffer","_MSAAFrameBuffer","_depthRenderBuffer","_MSAAColorRenderBuffers","_MSAADepthRenderBuffer","_oriDrawBuffers","_blitDrawBuffers","drawBuffers","some","maxAntiAliasing","_bindMainFBO","_bindMSAAFBO","deleteFramebuffer","deleteRenderbuffer","colorTexture","_activeRenderTarget","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","colorTextureLength","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","textureIndex","readBuffer","blitFramebuffer","NONE","renderDepth","depthRenderBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","MSAADepthRenderBuffer","MSAAColorRenderBuffer","renderbufferStorageMultisample","_checkFrameBuffer","checkFramebufferStatus","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","RenderColorTexture","_supportRenderBufferColorFormat","_getRenderBufferColorFormatDetail","SpriteRenderer","sprite","_uvRect","_worldSize","_positionQuad","_rotationAngle","_anchor","_texture","_rect","_worldSizeFactor","rect","anchor","worldSizeFactor","setTexture","setRect","setAnchor","setUvRect","setWorldSize","leftTop","leftBottom","rightTop","rightBottom","rectObject","JSON","parse","h","u","_updatePositionQuad","_transformByMatrix","matrix","temp","_tempVec40","_tempVec41","_tempVec42","_tempVec43","vx","vy","c","ns","vz","transformByQuat","cx","cy","WrapMode","AnimationEvent","InterpolationType","TagetType","AnimationClip","duration","durationIndex","samplers","channels","_input","_output","_outputSize","_interpolation","CUBICSPLINE","sampler","input","output","outputSize","interpolation","samplerIndex","targetID","targetPath","bindSampler","tagetType","_tagetTypeMap","channel","pathType","other","channelIndex","frameIndex","frameCount","outValue","nextFrameIndex","alpha","evaluateCubicSpline","evaluateLinear","squared","cubed","part1","part2","part3","part4","t1","v1","t2","v2","_quaSlerp","aIndex","bIndex","ax","ay","az","aw","bx","by","bz","bw","omega","cosom","sinom","scale0","scale1","acos","sin","AnimationLayer","_animClip","_isPlaying","layerWeight","mixTagetLayer","isFading","fadeDeltaTime","crossFadeDuration","fadeDuration","crossFadeDeltaTime","isMixLayer","hasMixLayer","mixEntity","_activedEvents","_wrapMode","_channelStates","_animClipLength","_frameEvents","nextAnimClip","rootEntity","getChannelCount","curChannel","getChannelObject","curTargetObject","_findChannelTarget","nextChannel","nextTargetObject","animClip","targetLayer","isPlaying","wrapMode","_addEvents","targetChannelStates","targetObject","frameTime","currentFrame","currentValue","createChannelValue","mixWeight","channelTimeLength","getChannelTimeLength","LOOP","channelTargets","rightnow","ONCE","_activeEvents","playingCount","_updateChannelState","removeMixWeight","channelState","animClipLength","lerpState","_getKeyAndAlpha","evaluate","currentKey","nextKey","removeAllEventListeners","events","frameEventIndex","eventType","FRAME_EVENT","triggerTime","triggered","curFrameTime","frameEvent","hasEvent","LOOP_END","FINISHED","rootNode","targetSceneObject","keyTime","timeKeys","numKeys","keyLength","Animation","startValue","endValue","quat","slerp","_animSet","_animLayers","_channelTargets","animLayer","updateState","_updateValues","triggerEvents","_removeRefMixLayers","play","targetAnimLayer","canMix","playAnimationClip","mixBoneName","mixNode","mix","jumpToFrame","channelTarget","_getChannelValue","weight","getChannelLayerWeight","getChannelValue","lerp","addOnUpdateAnimations","removeOnUpdateAnimations","destComponent","aniClip","CommonMaterial","_ambientLightCount","functions","emission","ambient","lightMgr","lightSortAmount","bindLightUniformDefine","_generateMacros","_generateFragmentUniform","VertexShader","fragmentUniform","u_emission","u_ambient","ConstantMaterial","_internalGenerate","ConstantShader","LambertMaterial","_directLightCount","LambertShader","u_diffuse","baseUniforms","BlinnPhongMaterial","_spotLightCount","_pointLightCount","shininess","BlinnPhongShader","u_specular","u_shininess","TextureMaterial","FRAG_SHADER","_setDoubleSidedDisplay","paramName","CULL_FACE","TECH_NAME","DISABLE_SHARE","TransparentMaterial","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","depthMask","ShaderMaterial","_renderStates","_enableConfig","_disableConfig","_functionsConfig","state","union","enableState","commonEnable","disableState","commonDisable","removeState","DEPTH_TEST","matModelViewProjection","matModelView","arr1","arr2","concat","DrawGroup","BufferGeometry","_primitive","topology","_drawGroups","_geometryCount","setVertexBufferBindings","setIndexBufferBinding","addVertexElements","drawGroup","drawGroups","GeometryRenderer","_geometry","_material","geometry","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","GeometryShape","vertices","indices","vertexStride","_initBuffer","vertexBuffer","indexBuffer","_computeBounds","vertexElement","bufferIndex","vertexCount","arrayBuffer","ArrayBuffer","dataView","DataView","base","getFloat32","CuboidGeometry","halfWidth","halfHeight","halfDepth","Uint16Array","_initialize","SphereGeometry","horizontalSegments","verticalSegments","alphaStart","alphaRange","thetaStart","thetaRange","_parameters","_thetaEnd","initialize","grid","iy","verticesRow","ix","posX","posY","posZ","d","from","PlaneGeometry","CylinderGeometry","radiusTop","radiusBottom","radialSegments","heightSegments","openEnded","thetaLength","frontFace","indexArray","_vertices","_indices","CCW","generateTorso","generateCap","normal","slope","indexRow","theta","sinTheta","cosTheta","vertX","vertY","vertZ","isTop","sign","centerIndexStart","centerIndexEnd","vertexX","vertexY","vertexZ","uvX","uvY","CircleGeometry","segments","segment","ScreenQuadGeometry","TriangleFan","TorusGeometry","parameters","tube","tubularSegments","arc","Model","_geometryType","sphereRadius","sphereHorizontalSegments","sphereVerticalSegments","sphereAlphaStart","sphereAlphaRange","sphereThetaStart","sphereThetaRange","cylinderRadiusTop","cylinderRadiusBottom","cylinderHeight","cylinderRadialSegments","cylinderHeightSegments","cylinderOpenEnded","planeWidth","planeHeight","planeHorizontalSegments","planeVerticalSegments","boxWidth","boxHeight","boxDepth","geometryType","GeometryType","Box","SkyBoxMaterial","defaultName","_cacheMat1","_cacheMat2","proj","techniqueName","techniqueConfig","vs","fs","u_mvpNoscale","u_cube","depthFunc","LEQUAL","SkyBox","_skyBoxMap","skyBoxMap","setModel","getMaterial","PBRMaterial","MATERIAL_NAME","_uniformObj","_stateObj","_envMapLightCount","_useDiffuseEnv","_useSpecularEnv","_clipPlaneCount","_useOIT","createDefaulteValues","setUniforms","setStates","baseColorFactor","metallicFactor","roughnessFactor","metallicRoughness","normalScale","emissiveFactor","occlusionStrength","alphaCutoff","specularFactor","glossinessFactor","envMapIntensity","refractionRatio","refractionDepth","perturbationUOffset","perturbationVOffset","alphaMode","doubleSided","side","FRONT","unlit","srgb","srgbFast","gamma","blendFuncSeparate","ONE","getOpacityFromRGB","isMetallicWorkflow","envMapModeRefract","setValueByParamName","opacity","opacityTexture","baseColorTexture","metallicTexture","roughnessTexture","metallicRoughnessTexture","normalTexture","emissiveTexture","occlusionTexture","specularGlossinessTexture","reflectionTexture","refractionTexture","perturbationTexture","TECH_CONFIG","find","stateName","cullFace","BACK","FRONT_AND_BACK","canOIT","_generateShaderMacros","techName","TECHNIQUE_NAME","vertex","STATIC_VERTEX_SHADER","frag","STATIC_FRAGMENT_SHADER","_generateConfig","NORMAL","TANGENT","standardDerivatives","shaderTextureLod","defaultState","clipPlaneUniforms","updateTechnique","DOUBLE","attribUniformVec4","u_baseColorSampler","u_baseColorFactor","u_normalSampler","u_normalScale","u_lightDirection","u_lightColor","u_metallicRoughnessValue","u_metallicSampler","u_roughnessSampler","u_metallicRoughnessSampler","u_emissiveFactor","u_emissiveSampler","u_occlusionSampler","u_occlusionStrength","u_alphaCutoff","u_opacitySampler","u_specularFactor","u_glossinessFactor","u_specularGlossinessSampler","u_reflectionSampler","u_PTMMatrix","u_envMapIntensity","u_refractionRatio","u_refractionDepth","u_refractionSampler","u_resolution","u_perturbationSampler","u_perturbationUOffset","u_perturbationVOffset","u_depthSampler","GPUParticleSystem","_vertexStride","_vertexBuffer","_isInit","_isStart","maxCount","getOptions","rotateToVelocity","useOriginColor","particleTex","fadeIn","fadeOut","particleMaskTex","isScaleByLifetime","scaleFactor","spriteSheet","is2d","interleaved","maskTexture","setMaterial","_createGeometry","_spawnParticle","setData","_createTechnique","cfg","positionStart","acceleration","velocity","startAngle","lifeTime","startTime","rotateRate","uv","normalizedUv","uOnce","uActive","uTime","matViewInverse","matProjection","matView","matWorld","_createVertexShader","_createFragmentShader","vertexFloatCount","startIndex","positionRandomness","positionArray","velocityRandomness","colorRandomness","alphaRandomness","lifetime","sizeRandomness","smoothPosition","startTimeRandomness","accelerationRandomness","startAngleRandomness","rotateRateRandomness","_getRandom","velX","velY","velZ","accX","accY","accZ","clamp","sa","rr","particleAlpha","random","_setUvs","rects","normalizedRects","image","q","nuv","postionShader","sizeVertexShader","isScaleByLifetimeVertexShader","rotateToVelocityVertexShader","rotationVertexShader","rotation2dShader","rotation3dShader","fadeInFragmentShader","fadeOutFragmentShader","noImgFragmentShader","imgFragmentShader","originColorFragmentShader","createColorFragmentShader","createColorWithMaskFragmentShader","_getShader","Particle","_config","_options","__position","__positionRandomness","__velocity","__velocityRandomness","__acceleration","__accelerationRandomness","__color","__colorRandomness","__lifetime","__size","__sizeRandomness","__startAngle","__startAngleRandomness","__rotateRate","__rotateRateRandomness","__scaleFactor","__alpha","__alphaRandomness","__startTimeRandomness","__maxCount","__once","__rotateToVelocity","__isScaleByLifetime","__fadeIn","__fadeOut","__texture","__maskTexture","__useOriginColor","__is2d","__spriteSheet","__positionArray","__separate","__srcRGB","__dstRGB","__srcAlpha","__dstAlpha","__src","__dst","__defaultStart","updateOption","updateConfig","TrailMaterial","u_texture","VERT_SHADER","_tempVector3","TrailRenderer","_stroke","_minSeg","_lifetime","_maxPointNum","_points","_pointStates","_strapPoints","_curPointNum","_prePointsNum","stroke","minSeg","targetFrameRate","_initGeometry","mov","newIdx","appendNewPoint","lastPoint","_updateStrapVertices","_updateStrapCoords","TriangleStrip","points","down","dy","cross","perpVector","vertieces","_projectOnPlane","dot","p0","texDelta","n_p","cosine","_projectOnVector","Ray","denom","p0l0","dir","L","_solveQuadratic","orig","invdir","tmin","tmax","tymin","tymax","tzmin","tzmax","discr","r","x0","x1","RaycastHit","collider","MAX_VALUE","ColliderFeature","colliders","Collider","attachCollider","detachCollider","_tempVec30","_tempVec31","_tempVec32","_tempVec33","_tempVec34","_tempVec35","_tempVec36","_tempVec37","ABoxCollider","boxMin","boxMax","_corners","ASphereCollider","PlaneCollider","planePoint","raycast","_ray","_outPos","cf","nearestHit","hit","localRay","_getLocalRay","intersect","intersectAABB","_updateHitResult","intersectSphere","intersectPlane","outHit","hitPos","getPoint","o","_transformDirection","BoxCollider","_center","_size","isShowCollider","setBoxCenterSize","SphereCollider","__center","__radius","_radius","setSphere","intersectBox2Box","boxA","boxB","intersectSphere2Sphere","sphereA","sphereB","intersectSphere2Box","sphere","box","closestPoint","CollisionDetection","_colliderManager","_myCollider","_overlopCollider","_sphere","_box","overlopCollider","_getWorldBox","_boxCollision","_getWorldSphere","_sphereCollision","boxCollider","getCorners","sphereCollider","ACollider","Fog","FogFeature","fog","EXP2Fog","density","macro","_fog","LinearFog","near","far","cacheId","Probe","removeRenderPass","getColorTexture","excludeRenderList","renderAll","renderList","oriClipPlane","renderTargetSwap","samples","renderItems","onTextureChange","cubeTexture","PlaneProbe","initialSide","storeMaterial","restoreMaterial","cacheTarget","cacheUp","cacheDir","fovRadian","CubeProbe","oriViewMatrix","oriInverseViewMatrix","oriProjectionMatrix","oriInverseProjectionMatrix","storeCamera","setRenderTargetFace","setCamera","restoreCamera","nearClipPlane","farClipPlane","LightShadow","_mapSize","bias","fov","defineProperty","_enableShadow","shadow","initShadowProjectionMatrix","_recieveShadow","_castShadow","ShadowMapMaterial","u_viewMatFromLight","u_projMatFromLight","ShadowMapPass","ShadowMaterial","shadowMapCount","DST_COLOR","ZERO","lgtUniforms","ShadowPass","lgt","enableShadow","bindShadowValues","clearTechniques","ShadowFeature","_shadowPass","_shadowMapMaterial","addShadowPass","shadowMapPass","addShadowMapPass","updatePassRenderFlag","shadowMaterial","SHADOW","SHADOW_MAP","renderQueue","recieveShadow","castShadow","addPassMasks","removePassMasks"],"mappings":"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"}