import { Vector3, Vector4, Matrix } from "@alipay/o3-math";
import { IntersectInfo } from "../base/Constant";
/**
 * 包围球
 * */
export declare class BoundingSphere {
    /** 本地坐标系 */
    center: Vector3;
    radius: number;
    /** 世界坐标系 */
    centerWorld: Vector3;
    radiusWorld: number;
    /**
     * 初始化包围球, 之后可以通过 modelMatrix 缓存计算
     * @param {Vector3} minLocal - 本地坐标系的最小坐标
     * @param {Vector3} maxLocal - 本地坐标系的最大坐标
     * @param {Matrix} modelMatrix - Local to World矩阵
     * */
    constructor(minLocal: Vector3, maxLocal: Vector3, modelMatrix: Matrix);
    /**
     * 通过模型矩阵，和缓存的本地坐标系包围球，获取新的世界坐标系包围球
     * @param {Matrix} modelMatrix - Local to World矩阵
     * */
    updateByModelMatrix(modelMatrix: Matrix): void;
    /**
     * 获取与视锥体的 具体相交状态
     * @param { Vector4[] } frustumPlanes - Oasis 视锥体的6个平面方程
     * @return {IntersectInfo} 返回相交状态
     * */
    intersectsFrustum(frustumPlanes: Vector4[]): IntersectInfo;
    /**
     * 是否在视锥体内部（包含或者交叉）
     * @param { Vector4[] } frustumPlanes - Oasis 视锥体的6个平面方程
     * @return {boolean}
     * */
    isInFrustum(frustumPlanes: Vector4[]): boolean;
}
