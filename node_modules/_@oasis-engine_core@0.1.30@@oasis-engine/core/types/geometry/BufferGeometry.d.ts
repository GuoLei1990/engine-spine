import { EngineObject } from "../base";
import { Engine } from "../Engine";
import { PrimitiveTopology, SubPrimitive } from "../graphic";
import { Buffer } from "../graphic/Buffer";
import { IndexFormat } from "../graphic/enums/IndexFormat";
import { IndexBufferBinding } from "../graphic/IndexBufferBinding";
import { VertexBufferBinding } from "../graphic/VertexBufferBinding";
import { VertexElement } from "../graphic/VertexElement";
/**
 * 缓冲几何体。
 */
export declare class BufferGeometry extends EngineObject {
    /** 名称。*/
    name: string;
    private _bounds;
    private _subGeometries;
    /**
     * 顶点缓冲绑定信息集合。
     */
    get vertexBufferBindings(): Readonly<VertexBufferBinding[]>;
    /**
     * 索引缓冲绑定信息。
     */
    get indexBufferBinding(): IndexBufferBinding;
    /**
     * 顶点元素集合。
     */
    get vertexElements(): Readonly<VertexElement[]>;
    /**
     * 首个子几何体,使用第一个材质渲染,设置多个几何体组详见 subGeometrys 属性。
     */
    get subGeometry(): SubPrimitive | null;
    /**
     * 子几何体集合,每个子几何体可以使用独立的材质渲染。
     */
    get subGeometries(): Readonly<SubPrimitive[]>;
    /**
     * 实例数量,0 表示关闭。
     */
    get instanceCount(): number;
    set instanceCount(count: number);
    /**
     * 包围体。
     */
    get bounds(): any;
    set bounds(value: any);
    /**
     * 创建几何体缓冲。
     * @param engine - 所属引擎
     * @param name - 名称
     */
    constructor(engine: Engine, name?: string);
    /**
     * 设置顶点缓冲绑定。
     * @param vertexBufferBindings - 顶点缓冲绑定
     * @param firstIndex - 第一个顶点缓冲索引，默认值为 0
     */
    setVertexBufferBinding(vertexBufferBindings: VertexBufferBinding, firstIndex?: number): void;
    /**
     * 设置顶点缓冲绑定。
     * @param vertexBuffer - 顶点缓冲
     * @param stride - 顶点缓冲跨度
     * @param firstIndex - 第一个顶点缓冲索引，默认值为 0
     */
    setVertexBufferBinding(vertexBuffer: Buffer, stride: number, firstIndex?: number): void;
    /**
     * 设置顶点缓冲集合。
     * @param vertexBufferBindings - 顶点缓冲绑定集合
     * @param firstIndex - 第一个顶点缓冲索引,默认值为 0
     */
    setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[], firstIndex?: number): void;
    /**
     * 设置索引缓冲绑定。
     * @param buffer - 索引缓冲
     * @param format - 索引缓冲格式
     */
    setIndexBufferBinding(buffer: Buffer, format: IndexFormat): void;
    /**
     * 设置索引缓冲绑定。
     * @param bufferBinding - 索引缓冲绑定
     */
    setIndexBufferBinding(bufferBinding: IndexBufferBinding): void;
    /**
     * 设置顶点元素集合。
     * @param elements - 顶点元素集合。
     */
    setVertexElements(elements: VertexElement[]): void;
    /**
     * 添加子几何体，每一个子几何体可对应独立的材质。
     * @param start - 起始绘制偏移，如果设置了索引缓冲则表示在索引缓冲的偏移，如果没有设置则表示在顶点缓冲中的偏移
     * @param count - 绘制数量，如果设置了索引缓冲则表示在索引缓冲的数量，如果没有设置则表示在顶点缓冲中的数量
     * @param topology - 几何体拓扑，默认值是 PrimitiveTopology.Triangles
     */
    addSubGeometry(start: number, count: number, topology?: PrimitiveTopology): SubPrimitive;
    /**
     * 移除子几何体。
     * @param subGeometry - 子几何体
     */
    removeSubGeometry(subGeometry: SubPrimitive): void;
    /**
     * 清空子几何体。
     */
    clearSubGeometry(): void;
    /**
     * 销毁。
     */
    destroy(): void;
}
