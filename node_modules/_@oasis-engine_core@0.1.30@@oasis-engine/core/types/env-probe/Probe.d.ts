import { Vector4 } from "@oasis-engine/math";
import { Camera } from "../Camera";
import { Component } from "../Component";
import { Entity } from "../Entity";
import { Material } from "../material/Material";
import { BasicRenderPipeline } from "../RenderPipeline/BasicRenderPipeline";
import { RenderPass } from "../RenderPipeline/RenderPass";
import { RenderColorTexture } from "../texture/RenderColorTexture";
import { RenderDepthTexture } from "../texture/RenderDepthTexture";
import { RenderTarget } from "../texture/RenderTarget";
import { Texture } from "../texture/Texture";
import { Texture2D } from "../texture/Texture2D";
import { TextureCubeMap } from "../texture/TextureCubeMap";
import { ProbeConfig } from "./type";
/**
 * 环境探针类，提供诸如反射折射等需要的功能
 * */
export declare abstract class Probe extends Component {
    protected readonly cacheId: number;
    private isCube;
    private oriClipPlane;
    private _camera;
    /** 优先级 excludeRenderList > renderAll > renderList */
    excludeRenderList: Material[];
    renderAll: boolean;
    renderList: Material[];
    renderPass: RenderPass;
    protected renderTarget: RenderTarget;
    protected renderTargetSwap: RenderTarget;
    /** 裁剪面 */
    clipPlanes: Vector4[];
    set camera(camera: Camera);
    get camera(): Camera;
    /**
     * 探针所得 2D 纹理
     * */
    get texture(): Texture2D | RenderColorTexture;
    /**
     * 探针所得 深度 纹理
     * */
    get depthTexture(): Texture2D | RenderDepthTexture;
    /**
     * 探针所得 立方体 纹理
     * */
    get cubeTexture(): TextureCubeMap | RenderColorTexture;
    protected get renderPipeline(): BasicRenderPipeline;
    /**
     * @deperated
     */
    protected get rhi(): any;
    /**
     * 获取需要渲染的真实队列.
     * 优先级 excludeRenderList > renderAll > renderList
     */
    protected get renderItems(): any;
    /** WebGL2 时，可以开启硬件层的 MSAA */
    get samples(): number;
    /**
     * 探针基类
     * @param {Entity} entity
     */
    protected constructor(entity: Entity);
    /**
     * 初始化探针。
     * @param config - 初始化配置
     */
    init(config?: ProbeConfig): void;
    protected preRender(): void;
    protected render(): void;
    protected postRender(): void;
    /**
     * 销毁 probe 以及 renderPass
     */
    destroy(): void;
    /**
     * prevent issue: Feedback Loops Between Textures and the Framebuffer
     * 提供钩子让用户进行交换 Texture
     * @example
     * probe.onTextureChange = cubeTexture => {
     *   envLight.specularMap = cubeTexture;
     *   skybox.specularMap = cubeTexture;
     * }
     * */
    onTextureChange(texture: Texture | RenderColorTexture, depthTexture?: Texture2D | RenderDepthTexture): void;
}
