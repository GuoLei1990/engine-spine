import { Material, RenderTechnique } from "@oasis-engine/core";
import { GLAsset } from "./GLAsset";
import { GLRenderStates } from "./GLRenderStates";
import { GLShaderProgram } from "./GLShaderProgram";
import { WebGLRenderer } from "./WebGLRenderer";
/**
 * GL 层的 Technique 资源管理和渲染调用处理
 * @private
 */
export declare class GLTechnique extends GLAsset {
    static cacheCounter: number;
    readonly valid: boolean;
    private _tech;
    private _activeTextureCount;
    private _program;
    private _attributes;
    private _uniforms;
    private _tempSamplerArray;
    constructor(rhi: WebGLRenderer, tech: RenderTechnique);
    /**
     * 释放 GL 资源
     */
    finalize(forceDispose?: boolean): void;
    /**
     * Shader Program 对象
     * @member {GLShaderProgram}
     */
    get program(): GLShaderProgram;
    /**
     * 顶点属性数组
     */
    get attributes(): any;
    /**
     * Unifrom 参数集合
     */
    get uniforms(): any;
    /**
     * 开始渲染时调用，绑定内部 GL Program，并设定 Unifrom
     * @param {Material} mtl
     */
    begin(mtl: Material): void;
    /**
     * 结束渲染，回复状态
     */
    end(): void;
    /**
     * 将状态设置到GL/RenderStateManager
     * @param {GLRenderStates} stateManager
     */
    _applyStates(stateManager: GLRenderStates): void;
    /**
     * 将自己的value设置到shader的uniform值之上
     * @param uniform
     * @param location
     * @param value
     * @private
     */
    private _uploadUniformValue;
    /**
     * 将一个内存中的 Texture2D 对象绑定到 GL
     * @param {Texture} texture
     */
    _uploadTexture(texture: any, location: any): void;
    /**
     * 将一堆内存中的 Texture2D 对象绑定到 GL
     */
    _uploadTextures(textures: any, location: any): void;
}
