import { Vector3 } from "@oasis-engine/math";
import { MaskList } from "../base";
import { Camera } from "../Camera";
import { Component } from "../Component";
import { RenderableComponent } from "../RenderableComponent";
import { RenderElement } from "./RenderElement";
interface SpriteElement {
    component: RenderableComponent;
    positionQuad: any;
    uvRect: any;
    tintColor: any;
    texture: any;
    renderMode: any;
    camera: any;
}
declare type Material = any;
/**
 * 渲染队列管理。
 * @private
 */
export declare class RenderQueue {
    private _items;
    constructor();
    /**
     * 需要渲染的对象数组
     * @member {Object}
     * @readonly
     */
    get items(): (RenderElement | SpriteElement)[];
    /**
     * 情况内部数据
     */
    clear(): void;
    /**
     * 把一个 Primitive 对象添加进来
     */
    pushPrimitive(element: RenderElement): void;
    /**
     * 对于透明对象，按照离摄像机由远及近的顺序渲染，有助于减少视觉错误
     * @param {Vector3} eyePos
     */
    sortByDistance(eyePos: Vector3): void;
    /**
     * 对于不透明对象，按照 Technique 排序，可以减少渲染状态切换，提升效率
     */
    sortByTechnique(): void;
    /**
     * 把一个 Sprite 绘制需要的信息传进来
     * @param {Component} component
     * @param {object} positionQuad  Sprite四个顶点的位置
     * @param {object} uvRect        Sprite在texture上的纹理坐标
     * @param {vec4}   tintColor     颜色
     * @param {Texture}   texture    纹理信息
     * @param {String}    renderMode    绘制方式， '2D' 或者 '3D'
     * @param {Camera}   camera        相机信息
     */
    pushSprite(component: Component, positionQuad: any, uvRect: any, tintColor: any, texture: any, renderMode: any, camera: Camera): void;
    /**
     * 执行渲染操作
     * @param {Camera} camera 当前的摄像机
     * @param {Material} replaceMaterial 替换模型自身的材质
     * @param {number} mask 渲染过滤使用的mask
     */
    render(camera: Camera, replaceMaterial: Material, mask: MaskList): void;
    /**
     * 更新当前 renderQueue 中各个材质的最大骨骼节点数
     * @param items
     * @param {Material} replaceMaterial
     */
    updateMaxJointsNum(items: any, replaceMaterial: Material): void;
    /**
     * 判断是否是sprite
     * @private
     */
    _isPrimitive(item: any): boolean;
}
export {};
