{"version":3,"file":"browser.min.js","sources":["../src/log.ts","../src/hooks/DrawCallHook.ts","../src/hooks/ShaderHook.ts","../src/hooks/TextureHook.ts","../src/Core.ts","../src/Monitor.ts","../src/Stats.ts","../src/index.ts"],"sourcesContent":["import { Logger } from \"oasis-engine\";\n\nexport function log(...args: any) {\n  Logger.info(\"🚀 [o3-engine-stats]\", ...args);\n}\n\nexport function errorLog(...args: any) {\n  Logger.error(\"🚀 [o3-engine-stats]\", ...args);\n}\n","import { log, errorLog } from \"../log\";\n\n/**\n * @class DrawCallHook\n */\nexport default class DrawCallHook {\n  public drawCall: number = 0;\n  public triangles: number = 0;\n  public lines: number = 0;\n  public points: number = 0;\n  private hooked: boolean;\n  private realDrawElements: any;\n  private realDrawArrays: any;\n  private gl: WebGLRenderingContext | WebGL2RenderingContext;\n\n  constructor(gl: WebGLRenderingContext | WebGL2RenderingContext) {\n    this.realDrawElements = gl.drawElements;\n    this.realDrawArrays = gl.drawArrays;\n\n    gl.drawElements = this.hookedDrawElements.bind(this);\n    gl.drawArrays = this.hookedDrawArrays.bind(this);\n\n    this.hooked = true;\n    this.gl = gl;\n\n    log(`DrawCall is hooked.`);\n  }\n\n  private hookedDrawElements(mode: number, count: number, type: number, offset: number) {\n    this.realDrawElements.call(this.gl, mode, count, type, offset);\n    this.update(count, mode);\n  }\n\n  private hookedDrawArrays(mode: number, first: number, count: number) {\n    this.realDrawArrays.call(this.gl, mode, first, count);\n    this.update(count, mode);\n  }\n\n  private update(count: number, mode: number) {\n    const { gl } = this;\n\n    this.drawCall++;\n\n    switch (mode) {\n      case gl.TRIANGLES:\n        this.triangles += count / 3;\n        break;\n\n      case gl.TRIANGLE_STRIP:\n      case gl.TRIANGLE_FAN:\n        this.triangles += count - 2;\n        break;\n\n      case gl.LINES:\n        this.lines += count / 2;\n        break;\n\n      case gl.LINE_STRIP:\n        this.lines += count - 1;\n        break;\n\n      case gl.LINE_LOOP:\n        this.lines += count;\n        break;\n\n      case gl.POINTS:\n        this.points += count;\n        break;\n\n      default:\n        errorLog(`Unknown draw mode: ${mode}`);\n        break;\n    }\n  }\n\n  public reset(): void {\n    this.drawCall = 0;\n    this.triangles = 0;\n    this.lines = 0;\n    this.points = 0;\n  }\n\n  public release(): void {\n    if (this.hooked) {\n      this.gl.drawElements = this.realDrawElements;\n      this.gl.drawArrays = this.realDrawArrays;\n    }\n\n    this.hooked = false;\n  }\n}\n","import { log, errorLog } from \"../log\";\n\n/**\n * @class ShaderHook\n */\nexport default class ShaderHook {\n  public shaders: number = 0;\n  private realAttachShader: any;\n  private realDetachShader: any;\n  private hooked: boolean;\n  private gl: WebGLRenderingContext | WebGL2RenderingContext;\n\n  constructor(gl: WebGLRenderingContext | WebGL2RenderingContext) {\n    this.realAttachShader = gl.attachShader;\n    this.realDetachShader = gl.detachShader;\n\n    gl.attachShader = this.hookedAttachShader.bind(this);\n    gl.detachShader = this.hookedDetachShader.bind(this);\n\n    this.hooked = true;\n    this.gl = gl;\n\n    log(`Shader is hooked.`);\n  }\n\n  private hookedAttachShader(program: any, shader: any) {\n    this.realAttachShader.call(this.gl, program, shader);\n\n    this.shaders++;\n\n    log(`AttachShader:`, shader, `shaders: ${this.shaders}`);\n  }\n\n  private hookedDetachShader(program: any, shader: any) {\n    this.realDetachShader.call(this.gl, program, shader);\n\n    this.shaders--;\n\n    log(`DetachShader. shaders: ${this.shaders}`);\n  }\n\n  public reset() {\n    this.shaders = 0;\n  }\n\n  public release() {\n    if (this.hooked) {\n      this.gl.attachShader = this.realAttachShader;\n      this.gl.detachShader = this.realDetachShader;\n    }\n\n    this.hooked = false;\n  }\n}\n","import { log, errorLog } from \"../log\";\n\n/**\n * @class TextureHook\n */\nexport default class TextureHook {\n  public textures: number = 0;\n  private realCreateTexture: any;\n  private realDeleteTexture: any;\n  private hooked: boolean;\n  private gl: WebGLRenderingContext | WebGL2RenderingContext;\n\n  constructor(gl: WebGLRenderingContext | WebGL2RenderingContext) {\n    this.realCreateTexture = gl.createTexture;\n    this.realDeleteTexture = gl.deleteTexture;\n\n    gl.createTexture = this.hookedCreateTexture.bind(this);\n    gl.deleteTexture = this.hookedDeleteTexture.bind(this);\n\n    this.hooked = true;\n    this.gl = gl;\n\n    log(`Texture is hooked.`);\n  }\n\n  private hookedCreateTexture() {\n    let texture = this.realCreateTexture.call(this.gl);\n\n    this.textures++;\n\n    log(`CreateTexture:`, texture, `textures: ${this.textures}`);\n\n    return texture;\n  }\n\n  private hookedDeleteTexture(texture: any) {\n    this.realDeleteTexture.call(this.gl, texture);\n\n    this.textures--;\n\n    log(`DeleteTexture. textures: ${this.textures}`);\n  }\n\n  public reset() {\n    this.textures = 0;\n  }\n\n  public release() {\n    if (this.hooked) {\n      this.gl.createTexture = this.realCreateTexture;\n      this.gl.deleteTexture = this.realDeleteTexture;\n    }\n\n    this.hooked = false;\n  }\n}\n","import { Entity } from \"oasis-engine\";\nimport DrawCallHook from \"./hooks/DrawCallHook\";\nimport ShaderHook from \"./hooks/ShaderHook\";\nimport TextureHook from \"./hooks/TextureHook\";\n\ndeclare global {\n  interface Performance {\n    memory: any;\n  }\n}\n\n/**\n * @class Core\n */\nexport default class Core {\n  private gl: WebGLRenderingContext | WebGL2RenderingContext;\n  private drawCallHook: DrawCallHook;\n  private textureHook: TextureHook;\n  private shaderHook: ShaderHook;\n  private samplingFrames: number = 60;\n  private samplingIndex: number = 0;\n  private now: number;\n\n  constructor(gl: WebGLRenderingContext | WebGL2RenderingContext) {\n    this.gl = gl;\n    this.hook(gl);\n  }\n\n  private hook(gl: WebGLRenderingContext | WebGL2RenderingContext) {\n    this.drawCallHook = new DrawCallHook(gl);\n    this.textureHook = new TextureHook(gl);\n    this.shaderHook = new ShaderHook(gl);\n  }\n\n  public reset() {\n    this.drawCallHook && this.drawCallHook.reset();\n  }\n\n  public release() {\n    this.drawCallHook && this.drawCallHook.release();\n    this.textureHook && this.textureHook.release();\n    this.shaderHook && this.shaderHook.release();\n  }\n\n  public update() {\n    let now = performance.now();\n    let delta = now - this.now;\n    this.now = now;\n\n    if (this.samplingIndex !== this.samplingFrames) {\n      this.reset();\n      this.samplingIndex++;\n      return;\n    }\n\n    this.samplingIndex = 0;\n\n    let data = {\n      fps: delta ? (1000 / delta) >> 0 : 0,\n      memory: performance.memory && (performance.memory.usedJSHeapSize / 1048576) >> 0,\n      drawCall: this.drawCallHook.drawCall,\n      triangles: this.drawCallHook.triangles,\n      //@ts-ignorets-ignore\n      nodes: Entity._entitys.length,\n      lines: this.drawCallHook.lines,\n      points: this.drawCallHook.points,\n      textures: this.textureHook.textures,\n      shaders: this.shaderHook.shaders,\n      webglContext:\n        window.hasOwnProperty(\"WebGL2RenderingContext\") && this.gl instanceof WebGL2RenderingContext ? \"2.0\" : \"1.0\"\n    };\n\n    this.reset();\n\n    return data;\n  }\n}\n","import Core from \"./Core\";\n\nlet tpl = `\n  <dl>\n    <dt>FPS</dt>\n    <dd>0</dd>\n    <dt>Memory <span class=\"unit\">(MB)</span></dt>\n    <dd>0</dd>\n    <dt>DrawCall</dt>\n    <dd>0</dd>\n    <dt>Triangles</dt>\n    <dd>0</dd>\n    <dt>Nodes</dt>\n    <dd>0</dd>\n    <dt>Textures</dt>\n    <dd>0</dd>\n    <dt>Shaders</dt>\n    <dd>0</dd>\n    <dt>WebGL</dt>\n    <dd></dd>\n  </dl>\n`;\nlet css = `\n  .gl-perf {\n    pointer-events: none;\n    user-select: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    padding: ${10 / 7.5}vh ${10 / 7.5}vh 0 ${10 / 7.5}vh;\n    background: rgba(0, 0, 0, 0.3);\n    color: #fff;\n    font: ${10 / 7.5}vh arial;\n  }\n\n  .gl-perf dl,\n  .gl-perf dt,\n  .gl-perf dd {\n    padding: 0;\n    margin: 0;\n  }\n\n  .gl-perf dt {\n    color: #fff;\n    text-shadow: #000 0 0 1px;\n  }\n\n  .gl-perf dt .unit{\n    font-size: ${10 / 7.5}vh;\n  }\n\n  .gl-perf dd {\n    font-size: ${20 / 7.5}vh;\n    padding: ${10 / 7.5}vh 0 ${10 / 7.5}vh;\n  }\n`;\n\nexport default class Monitor {\n  private core: Core;\n  private doms: HTMLElement[];\n  private items: string[];\n  private container: HTMLElement;\n\n  constructor(gl: WebGLRenderingContext | WebGL2RenderingContext) {\n    this.core = new Core(gl);\n    this.items = [];\n    this.items = [\"fps\", \"memory\", \"drawCall\", \"triangles\", \"nodes\", \"textures\", \"shaders\", \"webglContext\"];\n    this.createContainer();\n    this.update = this.update.bind(this);\n  }\n\n  private createContainer() {\n    let container = document.createElement(\"div\");\n    container.classList.add(\"gl-perf\");\n    container.innerHTML = tpl;\n\n    container.appendChild(this.createStyle());\n\n    document.body.appendChild(container);\n\n    this.doms = Array.prototype.slice.apply(container.querySelectorAll(\"dd\"));\n    this.container = container;\n  }\n\n  private createStyle() {\n    let style: HTMLStyleElement = document.createElement(\"style\");\n\n    style.type = \"text/css\";\n\n    style.appendChild(document.createTextNode(css));\n\n    return style;\n  }\n\n  /**\n   * Update per frame\n   */\n  public update() {\n    let data = this.core.update();\n\n    if (data) {\n      for (let i = 0, l = this.items.length; i < l; i++) {\n        let dom = this.doms[i];\n        let item = this.items[i];\n        let value = data[item] || 0;\n\n        // see: http://wilsonpage.co.uk/preventing-layout-thrashing/\n        requestAnimationFrame(() => {\n          dom.innerText = value;\n        });\n      }\n    }\n  }\n\n  /**\n   * reset all hooks\n   */\n  public reset() {\n    this.core.reset();\n  }\n\n  /**\n   * release all hooks\n   */\n  public release() {\n    this.core.release();\n  }\n\n  /**\n   * destory the instance\n   */\n  public destroy() {\n    this.release();\n    document.body.removeChild(this.container);\n  }\n}\n","import { EngineFeature, Engine, Scene } from \"oasis-engine\";\nimport Monitor from \"./Monitor\";\n\n/**\n * Engine Feature：显示 FPS 等引擎状态数据\n */\nexport class Stats extends EngineFeature {\n  private monitor: Monitor;\n  /**\n   * 构造函数\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * tick 前置回调\n   */\n  preTick(engine: Engine, currentScene: Scene): void {\n    if (!this.monitor) {\n      const gl = currentScene.engine._hardwareRenderer.gl;\n      if (gl) {\n        this.monitor = new Monitor(gl);\n      }\n    }\n  }\n\n  /**\n   * tick 后置回调\n   */\n  postTick(engine: Engine, currentScene: Scene): void {\n    if (this.monitor) {\n      this.monitor.update();\n    }\n  }\n}\n","import { Engine } from \"oasis-engine\";\nimport { Stats } from \"./Stats\";\n\nEngine.registerFeature(Stats);\n\nexport { Stats };\n"],"names":["log","args","Logger","info","DrawCallHook","gl","drawCall","triangles","lines","points","hooked","realDrawElements","realDrawArrays","drawElements","drawArrays","this","hookedDrawElements","bind","hookedDrawArrays","mode","count","type","offset","call","update","first","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","LINES","LINE_STRIP","LINE_LOOP","POINTS","error","errorLog","ShaderHook","shaders","realAttachShader","realDetachShader","attachShader","detachShader","hookedAttachShader","hookedDetachShader","program","shader","TextureHook","textures","realCreateTexture","realDeleteTexture","createTexture","deleteTexture","hookedCreateTexture","hookedDeleteTexture","texture","Core","drawCallHook","textureHook","shaderHook","samplingFrames","samplingIndex","now","hook","reset","release","performance","delta","data","fps","memory","usedJSHeapSize","nodes","Entity","_entitys","length","webglContext","window","hasOwnProperty","WebGL2RenderingContext","css","Monitor","core","doms","items","container","createContainer","document","createElement","classList","add","innerHTML","appendChild","createStyle","body","Array","prototype","slice","apply","querySelectorAll","style","createTextNode","i","l","dom","_this","item","value","requestAnimationFrame","innerText","removeChild","Stats","monitor","engine","currentScene","_hardwareRenderer","EngineFeature","registerFeature"],"mappings":"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"}