import { Entity } from "../Entity";
import { Texture2D } from "../texture/Texture2D";
import { MeshRenderer } from "./MeshRenderer";
import { Skin } from "./Skin";
/**
 * 负责渲染一个 Skinned Mesh 的组件
 * @extends MeshRenderer
 */
export declare class SkinnedMeshRenderer extends MeshRenderer {
    matrixPalette: Float32Array;
    jointNodes: Entity[];
    jointTexture: Texture2D;
    private _hasInitJoints;
    private _mat;
    private _weights;
    private weightsIndices;
    /** 当超过设备最大骨骼数时，自动使用骨骼纹理技术，该技术能提高骨骼上限，但是性能会下降 */
    private _useJointTexture;
    private _skin;
    /**
     * constructor
     * @param entity
     * @param props
     */
    constructor(entity: Entity);
    /**
     * set morph target weights
     * @param {Number|Vec} weights 权重参数
     */
    setWeights(weights: number[]): void;
    /**
     * 当前绑定的 Skin 对象
     */
    get skin(): Skin;
    /**
     * 绑定 Skin 对象
     */
    set skin(skin: Skin);
    get weights(): number[];
    _initJoints(): void;
    private findByNodeName;
    /**
     * 在SceneGraph的树形结构中中向上查找
     * @param {SceneNode} entity
     * @param {string} nodeName
     * @private
     */
    _findParent(entity: Entity, nodeName: string): any;
    /**
     * TODO 渲染之前
     * update matrix palette
     * @private
     */
    update(): void;
    /**
     * 生成骨骼纹理，将 matrixPalette 存储到 u_jointSampler 中
     * 格式：(4 * RGBA) * jointCont
     * */
    createJointTexture(): void;
}
