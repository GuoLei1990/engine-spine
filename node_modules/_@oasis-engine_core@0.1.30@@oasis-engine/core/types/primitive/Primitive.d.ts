import { AssetObject } from "../asset/AssetObject";
import { BoundingSphere } from "../bounding-info/BoudingSphere";
import { OBB } from "../bounding-info/OBB";
import { IndexFormat } from "../graphic/enums/IndexFormat";
import { PrimitiveTopology } from "../graphic/enums/PrimitiveTopology";
import { IndexBuffer } from "../graphic/IndexBuffer";
import { IndexBufferBinding } from "../graphic/IndexBufferBinding";
import { VertexBufferBinding } from "../graphic/VertexBufferBinding";
import { VertexElement } from "../graphic/VertexElement";
/**
 * primitive(triangles, lines) data, vbo+indices, equal glTF meshes.primitives define
 * @private
 */
export declare class Primitive extends AssetObject {
    private static _primitiveID;
    /** 绘制模式。*/
    primitiveTopology: PrimitiveTopology;
    /** 绘制偏移。*/
    drawOffset: number;
    /** 绘制数量。*/
    drawCount: number;
    /** 实例数量，0 表示关闭实例渲染。*/
    instanceCount: number;
    _vertexElementMap: object;
    _glIndexType: number;
    private _vertexBufferBindings;
    private _indexBufferBinding;
    private _vertexElements;
    /**
     * 顶点缓冲绑定信息集合。
     */
    get vertexBufferBindings(): Readonly<VertexBufferBinding[]>;
    /**
     * 顶点元素集合。
     */
    get vertexElements(): Readonly<VertexElement[]>;
    /**
     * 索引缓冲绑定信息。
     */
    get indexBufferBinding(): IndexBufferBinding;
    readonly id: number;
    material: any;
    materialIndex: number;
    targets: any[];
    boundingBox: OBB;
    boundingSphere: BoundingSphere;
    isInFrustum: boolean;
    get attributes(): object;
    constructor(name?: string);
    /**
     * 设置顶点缓冲绑定信息。
     * @param bufferBindings - 缓冲绑定集合
     * @param firstIndex - 第一个绑定索引
     */
    setVertexBufferBindings(bufferBindings: VertexBufferBinding | VertexBufferBinding[], firstIndex?: number): void;
    /**
     * 设置索引缓冲绑定。
     * @param buffer - 索引缓冲
     * @param format - 索引缓冲格式
     */
    setIndexBufferBinding(buffer: IndexBuffer, format: IndexFormat): void;
    /**
     * 添加顶点元素集合。
     * @param elements
     */
    addVertexElements(elements: VertexElement | VertexElement[]): void;
    removeVertexElements(vertexElements: VertexElement | VertexElement[]): void;
    destroy(): void;
    private _addVertexElement;
}
