import { Vector3 } from "@oasis-engine/math";
import { Script } from "../Script";
/**
 * 检测当前 Entity 上的 Collider 与场景中其他 Collider 的碰撞
 * 发出事件：collision
 */
export declare class CollisionDetection extends Script {
    private static _tempVec3;
    private _colliderManager;
    private _myCollider;
    private _overlopCollider;
    private _sphere;
    private _box;
    /**
     * 构造函数
     * @param {Entity} entity 对象所在节点
     */
    constructor(entity: any);
    /**
     * 和当前 Entity 上的 Collider 相交的 Collider 对象
     */
    get overlopCollider(): any;
    /**
     * 每帧更新时，计算与其他 collider 的碰撞
     */
    onUpdate(deltaTime: any): void;
    /**
     * 获得世界空间中的 Box 坐标
     * @param boxCollider
     */
    _getWorldBox(boxCollider: any): {
        min: Vector3;
        max: Vector3;
    };
    /**
     * 获得世界空间中的 Sphere 坐标
     * @param {SphereCollider} sphereCollider
     */
    _getWorldSphere(sphereCollider: any): {
        radius: any;
        center: Vector3;
    };
    /**
     * 自身的 Collider 与另一个 Collider 做碰撞检测
     * @param {ABoxCollider|ASphereCollider} other
     */
    _boxCollision(other: any): boolean;
    /**
     * 自身的 Collider 与另一个 Collider 做碰撞检测
     * @param {ABoxCollider|ASphereCollider} other
     */
    _sphereCollision(other: any): boolean;
    /**
     * 在 start 事件时，查找其他组件并记录下来
     */
    onAwake(): void;
}
