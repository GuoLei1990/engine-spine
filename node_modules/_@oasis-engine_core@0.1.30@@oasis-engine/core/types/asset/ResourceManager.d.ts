import { AssetPromise } from "./AssetPromise";
import { LoadItem } from "./LoadItem";
import { Engine } from "..";
import { Loader } from "./Loader";
import { AssetType } from "./AssetType";
/**
 * 资源管理员。
 */
export declare class ResourceManager {
    readonly engine: Engine;
    /** loader 集合。*/
    private static _loaders;
    private static _extTypeMapping;
    private static _getTypeByUrl;
    /** 加载资产失败后的重试次数。*/
    retryCount: number;
    /** 加载资产失败后的重试延迟时间，单位是毫秒(ms)。*/
    retryInterval: number;
    /** 加载资产默认的超时时间，单位是毫秒(ms)。*/
    timeout: number;
    /** 资产路径池,key为资产ID，值为资产路径，通过路径加载的资源均放入该池中，用于资源文件管理。*/
    private _assetPool;
    /** 资产池,key为资产路径，值为资产，通过路径加载的资源均放入该池中，用于资产文件管理。*/
    private _assetUrlPool;
    /** 引用计数对象池,key为对象ID，引用计数的对象均放入该池中。*/
    private _refObjectPool;
    /** 加载中的资源。*/
    private _loadingPromises;
    /**
     * 创建资源管理员。
     * @param engine - 当前资源管理所属的 engine
     */
    constructor(engine: Engine);
    /**
     * 通过路径异步加载资源。
     * @param path - 路径
     * @returns 资源 Promise
     */
    load<T>(path: string): AssetPromise<T>;
    /**
     * 通过路径集合异步加载资源集合。
     * @param path - 路径集合
     * @returns 资源 Promise
     */
    load(pathes: string[]): AssetPromise<Object[]>;
    /**
     * 通过加载信息集合异步加载资源集合。
     * @param assetItem - 资源加载项
     * @returns 资源 Promise
     */
    load<T>(assetItem: LoadItem): AssetPromise<T>;
    /**
     * 通过加载信息集合异步加载资源集合。
     * @param assetItems - 资源加载项集合
     * @returns 资源 Promise
     */
    load(assetItems: LoadItem[]): AssetPromise<Object[]>;
    /**
     * 取消所有未完成加载的资产。
     */
    cancelNotLoaded(): void;
    /**
     * 取消 url 未完成加载的资产。
     * @param url - 资源链接
     */
    cancelNotLoaded(url: string): void;
    /**
     * 取消加载 urls 中未完成加载的资产。
     * @param urls - 资源链接数组
     */
    cancelNotLoaded(urls: string[]): void;
    /**
     * 垃圾回收，会释放受引用计数管理的资源对象。
     * @remarks 释放原则为没有被组件实例引用，包含直接引用和间接引用。
     */
    gc(): void;
    /**
     * 根据 instanceId 获取资源路径
     * @param instanceId 对象 id
     * @returns 资源路径
     */
    getAssetPath(instanceId: number): string;
    private _assignDefaultOptions;
    private _loadSingleItem;
}
/**
 * 声明 resourceLoader 的装饰器。
 * @param assetType - 资源类型
 * @param extnames - 扩展名
 */
export declare function resourceLoader(assetType: AssetType, extnames: string[], useCache?: boolean): <T extends Loader<any>>(Target: new (useCache: boolean) => T) => void;
