{"version":3,"file":"main.js","sources":["../src/DRACOWorker.ts","../src/decoder.ts"],"sourcesContent":["import { Logger } from \"@alipay/o3-core\";\n\nexport class DRACOWorker {\n  // worker 实例\n  private _worker: Worker;\n  // 记录每一个 task 的 byteLength\n  private _costs: { [taskId: number]: number } = {};\n  // 当前政治处理的所有 task 的 byteLength 的和，排序用\n  private _currentLoad: number = 0;\n  private _callbacks: { [taskId: number]: IResolveReject } = {};\n  get currentLoad(): number {\n    return this._currentLoad;\n  }\n\n  constructor(workerSourceURL: string, decoderWASMBinary?: ArrayBuffer) {\n    this._worker = new Worker(workerSourceURL);\n    this._worker.onmessage = (e) => {\n      const message = e.data;\n      switch (message.type) {\n        case \"decode\":\n          this._callbacks[message.id].resolve(message.geometry);\n          break;\n\n        case \"error\":\n          this._callbacks[message.id].reject(message);\n          break;\n        default:\n          Logger.error('DRACOWorker: Unexpected message, \"' + message.type + '\"');\n      }\n    };\n    if (decoderWASMBinary) {\n      this._worker.postMessage({ type: \"init\", decoderConfig: { wasmBinary: decoderWASMBinary } });\n    } else {\n      this._worker.postMessage({ type: \"init\", decoderConfig: {} });\n    }\n  }\n\n  setCosts(taskId: number, cost: number) {\n    this._costs[taskId] = cost;\n  }\n\n  addCurrentLoad(cost: number) {\n    this._currentLoad += cost;\n  }\n\n  setCallback(taskId: number, resolve: (any) => void, reject: (any) => void) {\n    this._callbacks[taskId] = { resolve, reject };\n  }\n\n  decode(taskId: number, taskConfig: ITaskConfig, buffer: ArrayBuffer) {\n    this._worker.postMessage({ type: \"decode\", id: taskId, taskConfig, buffer }, [buffer]);\n  }\n\n  releaseTask(taskId: number) {\n    this._currentLoad -= this._costs[taskId];\n    delete this._callbacks[taskId];\n    delete this._costs[taskId];\n  }\n}\n\ninterface IResolveReject {\n  resolve: (any) => void;\n  reject: (any) => void;\n}\n\nexport interface ITaskConfig {\n  attributeIDs: { [attribute: string]: number };\n  attributeTypes: { [attribute: string]: string };\n  useUniqueIDs: boolean;\n  indexType: string;\n}\n","import { Logger } from \"@alipay/o3-core\";\n\nimport { DRACOWorker, ITaskConfig } from \"./DRACOWorker\";\n\nimport workerString from \"./worker/worker.js\";\n\nconst LIB_PATH = \"https://gw.alipayobjects.com/os/lib/alipay/draco-javascript/1.3.6/lib/\";\nconst JS_FILE = \"draco_decoder_gltf.js\";\n// basement cdn 不支持wasm后缀，暂时用r3bin后缀代替\nconst WASM_FILE = \"draco_decoder_gltf.r3bin\";\nconst WASM_WRAPPER_FILE = \"draco_wasm_wrapper_gltf.js\";\n\nexport class DRACODecoder {\n  private pool: DRACOWorker[] = [];\n  private workerLimit = Math.min(navigator.hardwareConcurrency || 4, 4);\n  private useJS: boolean;\n  private currentTaskId: number = 1;\n  private taskCache = new WeakMap();\n  private loadLibPromise: Promise<any>;\n\n  constructor(config: IDecoderConfig = { type: \"wasm\", workerLimit: 4 }) {\n    if (config.workerLimit > this.workerLimit) {\n      Logger.warn(\"DRACOWorkerPool: Can not initialize worker pool with limit:\" + config.workerLimit);\n    } else {\n      this.workerLimit = config.workerLimit ?? 4;\n    }\n    this.useJS = typeof WebAssembly !== \"object\" || config.type === \"js\";\n    this.loadLibPromise = this.preloadLib();\n  }\n\n  private preloadLib(): Promise<any> {\n    if (this.loadLibPromise) {\n      return this.loadLibPromise;\n    }\n    const loadQueue = {};\n    if (this.useJS) {\n      loadQueue[\"js\"] = { type: \"text\", props: { url: `${LIB_PATH}${JS_FILE}` } };\n    } else {\n      loadQueue[\"wasm\"] = { type: \"binary\", props: { url: `${LIB_PATH}${WASM_FILE}` } };\n      loadQueue[\"wrapper\"] = { type: \"text\", props: { url: `${LIB_PATH}${WASM_WRAPPER_FILE}` } };\n    }\n\n    return new Promise((resolve, reject) => {\n      // TODO: 直接使用Promise.all 和 新版加载函数\n      // loadAll(loadQueue, (err, res) => {\n      //   if (err) {\n      //     reject(err);\n      //     return;\n      //   }\n      //   const workerStrings = [this.useJS ? res[\"js\"] : res[\"wrapper\"], workerString];\n      //   const body = workerStrings.join(\"\\n\");\n      //   const workerSourceURL = URL.createObjectURL(new Blob([body]));\n      //   let decoderWASMBinary = this.useJS ? null : res[\"wasm\"];\n      //   resolve({ workerSourceURL, decoderWASMBinary });\n      // });\n    });\n  }\n\n  private getWorker(): Promise<DRACOWorker> {\n    return this.preloadLib().then((worderResources) => {\n      if (this.pool.length < this.workerLimit) {\n        const dracoWorker = new DRACOWorker(worderResources.workerSourceURL, worderResources.decoderWASMBinary);\n        this.pool.push(dracoWorker);\n      } else {\n        this.pool.sort(function (a, b) {\n          return a.currentLoad > b.currentLoad ? -1 : 1;\n        });\n      }\n      return this.pool[this.pool.length - 1];\n    });\n  }\n\n  decode(buffer: ArrayBuffer, taskConfig: ITaskConfig): Promise<any> {\n    const taskKey = JSON.stringify(taskConfig);\n\n    // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n    // again from this thread.\n    if (this.taskCache.has(buffer)) {\n      const cachedTask = this.taskCache.get(buffer);\n      if (cachedTask.key === taskKey) {\n        return cachedTask.promise;\n      } else if (buffer.byteLength === 0) {\n        // 使用transferable传递数据后，原来环境中的数据会被清除，所以这里判断byteLength为0代表已经传输过\n        // Technically, it would be possible to wait for the previous task to complete,\n        // transfer the buffer back, and decode again with the second configuration. That\n        // is complex, and I don't know of any reason to decode a Draco buffer twice in\n        // different ways, so this is left unimplemented.\n        throw new Error(\n          \"DRACODecoder: Unable to re-decode a buffer with different \" +\n            \"settings. Buffer has already been transferred.\"\n        );\n      }\n    }\n\n    const taskId = this.currentTaskId++;\n    const cost = buffer.byteLength;\n    let taskWorker;\n    const task = new Promise((resolve, reject) => {\n      this.getWorker()\n        .then((worker) => {\n          taskWorker = worker;\n          worker.setCosts(taskId, cost);\n          worker.addCurrentLoad(cost);\n\n          worker.setCallback(taskId, resolve, reject);\n          worker.decode(taskId, taskConfig, buffer);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n    task.finally(() => {\n      if (taskWorker && taskId) {\n        taskWorker.releaseTask(taskId);\n      }\n    });\n\n    this.taskCache.set(buffer, {\n      key: taskKey,\n      promise: task\n    });\n    return task;\n  }\n}\n\ninterface IDecoderConfig {\n  type?: \"js\" | \"wasm\";\n  workerLimit?: number;\n}\n"],"names":["DRACOWorker","_currentLoad","workerSourceURL","decoderWASMBinary","_worker","_costs","_callbacks","Worker","onmessage","e","message","data","type","id","resolve","geometry","reject","Logger","error","postMessage","decoderConfig","wasmBinary","taskId","cost","taskConfig","buffer","DRACODecoder","config","workerLimit","pool","Math","min","navigator","hardwareConcurrency","useJS","currentTaskId","taskCache","WeakMap","loadLibPromise","warn","WebAssembly","preloadLib","Promise","then","worderResources","length","dracoWorker","push","sort","a","b","currentLoad","taskKey","JSON","stringify","has","cachedTask","get","key","promise","byteLength","Error","taskWorker","task","getWorker","worker","setCosts","addCurrentLoad","setCallback","decode","releaseTask","set"],"mappings":"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"}