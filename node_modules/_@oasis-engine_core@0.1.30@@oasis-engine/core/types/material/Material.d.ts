import { RefObject } from "../asset/RefObject";
import { MaterialType } from "../base/Constant";
import { Engine } from "../Engine";
import { RenderContext } from "../RenderPipeline/RenderContext";
import { RenderTechnique } from "./RenderTechnique";
/**
 * 材质对象：RenderTechniqe + 实例化参数，对应 glTF 中的 material 对象
 */
export declare class Material extends RefObject {
    /**
     * 名称
     * @member {string}
     */
    name: string;
    /**
     * 材质类型：透明 or 不透明
     * @member {MaterialType}
     */
    renderType: MaterialType;
    /**
     * 是否受到全局雾效影响
     * @member {boolean}
     */
    useFog: boolean;
    /**
     * 最大骨骼关节数
     * @member {number}
     */
    maxJointsNum: number;
    protected _technique: RenderTechnique;
    protected _values: any;
    /**
     * 构造函数
     * @param {string} name 名称
     */
    constructor(engine: Engine, name?: string);
    /** 创建一个本材质对象的深拷贝对象
     * @param {string} name - 复制的材质名字
     * @param {boolean} cloneTexture - 是否复制纹理，默认 false,共用纹理
     * // todo: texture.clone()
     * */
    clone(name?: string, cloneTexture?: boolean): any;
    /**
     * 是否透明
     * @member {boolean}
     */
    get transparent(): boolean;
    set transparent(val: boolean);
    /**
     * 获取所引用的RenderTechnique对象
     * @member {RenderTechnique}
     */
    get technique(): RenderTechnique;
    /**
     * 设置所引用的RenderTechnique对象
     */
    set technique(tech: RenderTechnique);
    /**
     * 设定材质参数值
     * 当 texture 发生 无 <-> 有 变化时，需要重新编译
     * TODO: 重构成不需要重新编译 technique 的机制
     * @param {string} name 参数名称
     * @param {*} value 参数值
     */
    setValue(name: string, value: any): void;
    /**
     * 删除材质参数值
     * @param {string} name
     * */
    delValue(name: string): void;
    /**
     * 取得某个参数的当前值
     * @param {string} name 参数名称
     * @return {*} 参数的当前值
     */
    getValue(name: string): any;
    /**
     * 开始渲染指定对象
     * @param {CameraComponent} camera 当前摄像机
     * @param {Component} component 当前渲染的对象
     * @param {Primitive} primitive 几何对象
     * @param {Material} originalMaterial 物体本来的材质，用于renderPass使用replaceMaterial时的识别
     * @private
     */
    prepareDrawing(context: any, component: any, primitive: any, originalMaterial?: Material): void;
    /** 编译前钩子，在编译前可以自定义替换tech的shader,customMacros等配置
     * @param {RenderTechnique} tech - technique
     * @example
     *  tech.fragmentShader=tech.fragmentShader.replace(**,**);
     *  tech.fragmentPrecision='highp'
     * */
    preCompile(tech: RenderTechnique): void;
    /**
     * 编译后钩子
     * */
    postCompile(tech: RenderTechnique): void;
    /**
     * 材质渲染前钩子
     * @param {Component} component
     * @param {Primitive} primitive
     * */
    preRender(component: any, primitive: any): void;
    /**
     * 材质渲染后钩子
     * */
    postRender(component: any, primitive: any): void;
    /**
     * 按照Uniform的Semantic，自动更新部分参数值
     * @param {object} uniform
     * @param {CameraComponent} camera
     * @param {Component} component
     * @private
     */
    _updateValueBySemantic(uniform: any, context: RenderContext, component: any): void;
    /**
     * @override
     */
    _onDestroy(): void;
}
