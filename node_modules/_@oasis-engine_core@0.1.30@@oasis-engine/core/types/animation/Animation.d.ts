import { Component } from "../Component";
import { Entity } from "../Entity";
import { AnimationClip } from "./AnimationClip";
import { AnimationLayer } from "./AnimationLayer";
import { AnimationOptions } from "./types";
/**
 * 播放动画片段，动画片段所引用的对象必须是此组件的 Entity 及其子物体
 */
export declare class Animation extends Component {
    /**
     * 缩放播放速度
     * @member {number}
     */
    get timeScale(): number;
    /**
     * 设置播放速度
     */
    set timeScale(val: number);
    /**
     * @param {Float32Array | number} outValue
     * @param {number} startValue
     * @param {number} endValue
     * @param {number} outputSize
     * @param {number} alpha
     * @private
     */
    static lerp(outValue: number | Float32Array, startValue: number | Float32Array, endValue: number | Float32Array, alpha: number, outputSize: number): number | Float32Array;
    private _animSet;
    private _animLayers;
    private _timeScale;
    private _channelTargets;
    /**
     * @param {Entity} entity
     */
    constructor(entity: Entity);
    /**
     * 动画更新计算
     * @param {number} deltaTime
     * @private
     */
    update(deltaTime: number): void;
    /**
     * 加载一个animClip
     * @param {AnimationClip} animClip 动画片段对象
     * @param {string} name 动画片段名称
     */
    addAnimationClip(animClip: AnimationClip, name: string): void;
    /**
     * 移除一个animClip
     * @param {string} name 动画片段的名称
     */
    removeAnimationClip(name: string): void;
    /**
     * 取得指定的 AnimationClip 的时间长度
     * @param {string} name 动画片段的名称
     * @return {number}
     */
    getAnimationClipLength(name: string): number;
    /**
     * 取得指定的 AnimationClip
     * @param {string} name 动画片段的名称
     * @return {number}
     */
    getAnimationClip(name: string): AnimationClip;
    /**
     * 是否正在播放
     * @return {boolean}
     */
    isPlaying(): boolean;
    /**
     * 动画事件参数
     * @typedef {Object} AnimationEventOpt
     * @param {AnimationEvent} type 动画事件类型
     * @param {function} callback 回调
     * @param {float} triggerTime 触发时间，只有type === AnimationEvent.FRAME_EVENT 时配置
     */
    /**
     * 配置动画播放的参数
     * @typedef {Object} AnimationOptions
     * @param {WrapMode} wrapMode 动画播放方式，LOOP：循环，ONCE：仅一次
     * @param {AnimationEventOpt[]} events 动画事件
     */
    /**
     * 播放动画
     * @param {String} name 动画片段的名称
     * @param {AnimationOptions} options 动画参数
     */
    playAnimationClip(name: string, options?: AnimationOptions): void;
    /**
     * 动画混合过渡，因为动画混合过渡是一个比较消耗性能的操作，这里使用单独的接口crossFade
     * @param {string} name 动画片段的名称
     * @param {number} crossFadeDuration 动画切换需要的毫秒数
     * @param {AnimationOptions} options 动画参数
     */
    crossFade(name: string, crossFadeDuration: number, options: AnimationOptions): void;
    /**
     * 动画混合切换，因为动画混合是一个比较消耗性能的操作，这里使用单独的接口mix
     * @param {string} name 混合动画片段的名称
     * @param {string} mixBoneName 混合动画对名为mixBoneName的骨骼以及附属在其上的子骨骼生效
     * @param {AnimationOptions} options 动画参数
     */
    mix(name: string, mixBoneName: string, options: AnimationOptions): void;
    /**
     * 停止播放
     * @param {boolean} rightnow, stop it immediately, or it will stop at the end of the clip
     */
    stop(rightnow: boolean): void;
    /**
     * 跳转到动画的某一帧，立刻生效
     * @param {float} frameTime
     */
    jumpToFrame(frameTime: number): void;
    /**
     * 移除和mixTargetLayer关联的混合动画
     * @param {AnimationLayer} mixTargetLayer
     * @private
     */
    _removeRefMixLayers(targetLayer: AnimationLayer, mixNode?: any): void;
    /**
     * update animation value
     * @private
     */
    _updateValues(): void;
    /**
     * @return channel value
     * @param {number} channelIndex
     * @param {number} outputSize
     * @private
     */
    _getChannelValue(channelIndex: number, outputSize: number): number | boolean | Float32Array;
}
