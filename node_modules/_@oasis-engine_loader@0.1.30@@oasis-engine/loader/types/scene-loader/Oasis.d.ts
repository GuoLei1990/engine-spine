import { Engine, EventDispatcher } from "@oasis-engine/core";
import { AbilityManager } from "./AbilityManager";
import { NodeManager } from "./NodeManager";
import { PluginManager } from "./plugins/PluginManager";
import { SchemaResourceManager } from "./ResourceManager";
import { Options, Schema } from "./types";
export declare class Oasis extends EventDispatcher {
    private _options;
    readonly pluginManager: PluginManager;
    readonly engine: Engine;
    readonly nodeManager: NodeManager;
    readonly abilityManager: AbilityManager;
    resourceManager: SchemaResourceManager;
    _canvas: HTMLCanvasElement;
    private schema;
    timeout: number;
    private oasis;
    private constructor();
    get canvas(): HTMLCanvasElement;
    get options(): Readonly<Options>;
    updateConfig(config: Schema): void;
    private init;
    /**
     * 加载资源
     */
    private loadResources;
    /**
     * 资源绑定
     */
    private bindResources;
    /**
     * 解析 nodes
     */
    private parseEntities;
    /**
     * 解析 Component
     */
    private parseNodeAbilities;
    /**
     * 广度优先遍历，对 nodes 进行排序
     */
    private bfsNodes;
    /**
     * 重置 Feature
     */
    private resetFeature;
    private attach;
    static create(options: Options, pluginManager: PluginManager): Promise<Oasis>;
}
