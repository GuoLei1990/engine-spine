import { Vector3 } from "@oasis-engine/math";
import { GeometryRenderer } from "../geometry";
/**
 * 拖尾效果渲染组件
 */
export declare class TrailRenderer extends GeometryRenderer {
    private _vertexStride;
    private _vertices;
    private _vertexBuffer;
    private _stroke;
    private _minSeg;
    private _lifetime;
    private _maxPointNum;
    private _points;
    private _pointStates;
    private _strapPoints;
    private _curPointNum;
    private _prePointsNum;
    /**
     * 纹理对象基类
     * @param {Entity} entity 所属的Node对象
     * @param {Object} props 可选配置，包含以下参数
     * @param {float} [props.stroke=0.2] 拖尾的宽度
     * @param {float} [props.minSeg=0.02] 拖尾形状由物体运动轨迹上的点构成，描述相邻点之间最小间隔距离
     * @param {Number} [props.lifetime=1000] 物体运动时，拖尾效果持续的时长
     * @param {Material} [props.material=TrailMaterial] 拖尾使用的材质，默认使用内置的TrailMaterial
     */
    constructor(entity: any, props: any);
    /**
     * 每帧的更新函数
     * @private
     */
    update(deltaTime: any): void;
    /**
     * 更新位置，将数据对象加入渲染队列
     * @param {Camera} camera
     * @private
     */
    render(camera: any): void;
    /**
     * 设置当前拖尾的纹理
     * @param {Texture2D} texture
     */
    setTexture(texture: any): void;
    /**
     * 初始化 geometry
     * @private
     */
    _initGeometry(): void;
    /**
     * 更新拖尾顶点位置
     * @private
     */
    _updateStrapVertices(camera: any, points: Array<Vector3>): void;
    /**
     * 更新拖尾 uv 位置
     * @private
     */
    _updateStrapCoords(): void;
    /**
     * 将向量 a 投影到向 p 上。
     * @param a - 要投影的向量
     * @param p - 目标向量
     * @param out - 向量 a 投影到向量 p 的结果向量
     */
    _projectOnVector(a: Vector3, p: Vector3, out: Vector3): void;
    /**
     * 将向量 a 投影到和法向量 n 正交的平面上。
     * @param a - 输入向量
     * @param n - 法向量
     * @param out - 投影到平面上的向量
     */
    _projectOnPlane(a: Vector3, n: Vector3, out: Vector3): void;
}
