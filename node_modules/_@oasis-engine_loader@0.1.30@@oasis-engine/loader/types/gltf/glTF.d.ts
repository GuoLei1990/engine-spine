import { AnimationClip, Engine, EngineObject, Entity, Material, Mesh, Scene, Skin, Texture2D, Camera as OasisCamera } from "@oasis-engine/core";
import { LoadedGLTFResource } from "../GLTF";
/**
 * 扩展专用注册键值
 */
export declare const HandledExtensions: {
    PBRMaterial: string;
    KHR_lights: string;
    KHR_materials_unlit: string;
    KHR_materials_pbrSpecularGlossiness: string;
    KHR_techniques_webgl: string;
    KHR_draco_mesh_compression: string;
};
/**
 * 注册扩展组件到 glTF loader
 * @param {Object} extobj 需要添加的扩展
 */
export declare function RegistExtension(extobj: any): void;
export interface GLTFParsed extends LoadedGLTFResource {
    asset: Partial<GLTFResource>;
    engine?: Engine;
}
export declare class GLTFResource extends EngineObject {
    defaultSceneRoot: Entity;
    defaultScene: Scene;
    scenes: Scene[];
    textures?: Texture2D[];
    animations?: AnimationClip[];
    materials?: Material[];
    meshes?: Mesh[];
    skins?: Skin[];
    cameras?: OasisCamera[];
    meta: any;
}
/**
 * 解析 glTF 结构
 * @param resource
 * @returns {*}
 * @private
 */
export declare function parseGLTF(data: LoadedGLTFResource, engine: Engine): Promise<GLTFResource>;
/**
 * 解析 材质
 * @param gltfMaterial
 * @param resources
 * @private
 */
export declare function parseMaterial(gltfMaterial: any, resources: any): Promise<any>;
/**
 * 解析蒙皮
 * @param gltfSkin
 * @param resources
 * @private
 */
export declare function parseSkin(gltfSkin: any, resources: any): Promise<Skin>;
/**
 * 解析 Mesh
 * @param gltfMesh
 * @param resources
 * @private
 */
export declare function parseMesh(gltfMesh: any, resources: any): Promise<Mesh>;
/**
 * 解析动画
 * @param gltfAnimation
 * @param resources
 * @returns {*}
 * @private
 */
export declare function parseAnimation(gltfAnimation: any, resources: any): Promise<AnimationClip>;
/**
 * 解析 glTF 节点
 * @param gltfNode
 * @param resources
 * @private
 */
export declare function parseNode(gltfNode: any, resources: GLTFParsed): Promise<Entity>;
/**
 * 解析 glTF 场景
 * @param gltfScene
 * @param resources
 * @returns {{nodes: Array}}
 * @private
 */
export declare function parseScene(gltfScene: any, resources: any): Promise<{
    nodes: any[];
}>;
/**
 * 通过索引获得内容
 * @param name
 * @param idx
 * @param resources
 * @returns {*}
 * @private
 */
export declare function getItemByIdx(name: any, idx: any, resources: any, inverse?: boolean): any;
/**
 * 构造 scene graph，根据节点配置创建 Ability
 * @param resources
 * @private
 */
export declare function buildSceneGraph(resources: GLTFParsed): GLTFResource;
