import { Matrix, Quaternion, Vector3 } from "@oasis-engine/math";
import { EventDispatcher } from "./base";
import { Component } from "./Component";
import { Engine } from "./Engine";
import { Layer } from "./Layer";
import { Scene } from "./Scene";
import { Transform } from "./Transform";
/**
 * 实体,可作为组件的容器。
 */
export declare class Entity extends EventDispatcher {
    private static _entitys;
    /**
     * 根据名字全局查找实体。
     * @param name - 名字
     * @returns 实体
     */
    static findByName(name: string): Entity;
    /**
     * 根据路径全局查找实体，使用‘/’符号作为路径分割符。
     * @deprecated use scene find by path instead.
     * @param scene - 查找场景
     * @param path - 路径
     * @returns 实体
     */
    static findByPath(scene: Scene, path: string): Entity | null;
    name: string;
    /** 实体所属层级。 */
    layer: Layer;
    readonly transform: Transform;
    private _parent;
    private _activeChangedComponents;
    /**
     * 是否局部激活。
     */
    get isActive(): boolean;
    set isActive(value: boolean);
    /**
     * 在层级中是否处于激活状态。
     */
    get isActiveInHierarchy(): boolean;
    /**
     * 父实体。
     */
    get parent(): Entity;
    set parent(entity: Entity);
    /**
     * 子实体集合。
     */
    get children(): Readonly<Entity[]>;
    /**
     * 子实体数量。
     */
    get childCount(): number;
    /**
     * 所属的场景对象。
     */
    get scene(): Scene;
    /**
     * 所属引擎。
     */
    get engine(): Engine;
    /**
     * 创建一个实体。
     * @param engine - 所属 Engine
     * @param name - 名字
     */
    constructor(engine: Engine, name?: string);
    /**
     * 根据组件类型添加组件。
     * @param type - 组件类型
     * @returns	组件实例
     */
    addComponent<T extends Component>(type: new (entity: Entity) => T): T;
    /**
     * 根据组件类型获取组件。
     * @param type - 组件类型
     * @returns	组件
     */
    getComponent<T extends Component>(type: new (entity: Entity) => T): T;
    /**
     * 根据组件类型获取组件集合。
     * @param type - 组件类型
     * @param results - 组件集合
     * @returns	组件集合
     */
    getComponents<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[];
    /**
     * 根据组件类型获取自身和所有子实体的组件集合。
     * @param type - 组件类型
     * @param results - 组件集合
     * @returns	组件集合
     */
    getComponentsIncludeChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[];
    /**
     * 添加子实体。
     * @param child - 子实体
     */
    addChild(child: Entity): void;
    /**
     * 删除子实体。
     * @param child - 子实体
     */
    removeChild(child: Entity): void;
    /**
     * 根据索引获取子实体。
     * @param index - 索引
     * @returns 实体
     */
    getChild(index: number): Entity;
    /**
     * 根据名字查找子实体。
     * @param name - 名字
     * @returns 实体
     */
    findByName(name: string): Entity;
    /**
     * 根据路径查找实体，使用‘/’符号作为路径分割符。
     * @param path - 路径
     * @returns 实体
     */
    findByPath(path: string): Entity;
    /**
     * 创建子实体。
     * @param name - 名称
     * @returns 子实体
     */
    createChild(name?: string): Entity;
    /**
     * 清空子实体。
     */
    clearChildren(): void;
    /**
     * 克隆。
     * @returns 克隆的实体
     */
    clone(): Entity;
    /**
     * 销毁。
     */
    destroy(): void;
    private _getComponentsIncludeChildren;
    private _setActiveComponents;
    private _setActiveInHierarchy;
    private _setInActiveInHierarchy;
    private _setTransformDirty;
    private _invModelMatrix;
    private _inverseWorldMatFlag;
    /**
     * @deprecated
     * 请使用 transform.position 代替。
     */
    get position(): Vector3;
    set position(val: Vector3);
    /**
     * @deprecated
     * 请使用 transform.worldPosition 代替
     */
    get worldPosition(): Vector3;
    set worldPosition(val: Vector3);
    /**
     * @deprecated
     * 请使用 transform.rotationQuaternion 代替
     */
    get rotation(): Quaternion;
    set rotation(val: Quaternion);
    /**
     * @deprecated
     * 请使用 transform.scale 代替
     */
    get scale(): Vector3;
    set scale(val: Vector3);
    /**
     * @deprecated
     */
    getInvModelMatrix(): Matrix;
}
