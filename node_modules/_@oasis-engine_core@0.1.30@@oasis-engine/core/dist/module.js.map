{"version":3,"file":"module.js","sources":["../src/asset/AssetPromise.ts","../src/base/Util.ts","../src/asset/ResourceManager.ts","../src/base/Event.ts","../src/clone/enums/CloneMode.ts","../src/clone/CloneManager.ts","../src/base/EngineObject.ts","../src/base/EventDispatcher.ts","../src/base/Logger.ts","../src/base/Time.ts","../src/base/Constant.ts","../src/DisorderedArray.ts","../src/ComponentsManager.ts","../src/clone/ComponentCloner.ts","../src/ComponentsDependencies.ts","../src/Layer.ts","../src/Component.ts","../src/UpdateFlag.ts","../src/Transform.ts","../src/Entity.ts","../src/FeatureManager.ts","../src/RenderPipeline/RenderElement.ts","../src/Scene.ts","../src/SceneManager.ts","../src/Engine.ts","../src/SystemInfo.ts","../src/EngineFeature.ts","../src/asset/AssetObject.ts","../src/SceneVisitor.ts","../src/SceneFeature.ts","../src/Script.ts","../src/RenderableComponent.ts","../src/RenderPipeline/RenderPass.ts","../src/RenderPipeline/RenderContext.ts","../src/RenderPipeline/RenderQueue.ts","../src/RenderPipeline/SeparateSpritePass.ts","../src/RenderPipeline/BasicRenderPipeline.ts","../src/Camera.ts","../src/asset/request.ts","../src/asset/Loader.ts","../src/asset/AssetType.ts","../src/asset/RefObject.ts","../src/lighting/Light.ts","../src/lighting/AmbientLight.ts","../src/lighting/DirectLight.ts","../src/lighting/EnvironmentMapLight.ts","../src/lighting/PointLight.ts","../src/lighting/SpotLight.ts","../src/lighting/LightFeature.ts","../src/collider/ColliderFeature.ts","../src/collider/Collider.ts","../src/collider/ABoxCollider.ts","../src/collider/ASphereCollider.ts","../src/collider/PlaneCollider.ts","../src/raycast/index.ts","../src/mesh/Mesh.ts","../src/mesh/Skin.ts","../src/mesh/MeshRenderer.ts","../src/texture/enums/TextureFilterMode.ts","../src/texture/enums/TextureFormat.ts","../src/texture/enums/TextureWrapMode.ts","../src/material/type.ts","../src/texture/enums/RenderBufferColorFormat.ts","../src/texture/enums/RenderBufferDepthFormat.ts","../src/texture/Texture.ts","../src/texture/Texture2D.ts","../src/mesh/SkinnedMeshRenderer.ts","../src/mesh/LODGroup.ts","../src/material/Material.ts","../src/material/ComplexMaterial.ts","../src/graphic/enums/BufferUsage.ts","../src/graphic/enums/VertexElementFormat.ts","../src/graphic/enums/IndexFormat.ts","../src/graphic/BufferUtil.ts","../src/graphic/enums/BufferBindFlag.ts","../src/graphic/enums/SetDataOptions.ts","../src/graphic/Buffer.ts","../src/graphic/enums/PrimitiveTopology.ts","../src/graphic/IndexBufferBinding.ts","../src/graphic/VertexBufferBinding.ts","../src/graphic/Primitive.ts","../src/graphic/VertexElement.ts","../src/graphic/SubPrimitive.ts","../src/shaderlib/pbr/index.ts","../src/shaderlib/ShaderLib.ts","../src/shaderlib/ShaderFactory.ts","../src/material/RenderTechnique.ts","../src/texture/enums/TextureCubeFace.ts","../src/texture/TextureCubeMap.ts","../src/texture/RenderDepthTexture.ts","../src/texture/RenderTarget.ts","../src/texture/RenderColorTexture.ts","../src/2d/SpriteRenderer.ts","../src/animation/AnimationConst.ts","../src/animation/AnimationClip.ts","../src/animation/AnimationLayer.ts","../src/animation/Animation.ts","../src/mobile-material/CommonMaterial.ts","../src/mobile-material/ConstantMaterial.ts","../src/mobile-material/LambertMaterial.ts","../src/mobile-material/BlinnPhongMaterial.ts","../src/mobile-material/TextureMaterial.ts","../src/mobile-material/TransparentMaterial.ts","../src/mobile-material/ShaderMaterial.ts","../src/geometry/BufferGeometry.ts","../src/geometry/GeometryRenderer.ts","../src/geometry-shape/ShapeGeometry.ts","../src/geometry-shape/CuboidGeometry.ts","../src/geometry-shape/SphereGeometry.ts","../src/geometry-shape/PlaneGeometry.ts","../src/geometry-shape/CylinderGeometry.ts","../src/geometry-shape/CircleGeometry.ts","../src/geometry-shape/ScreenQuadGeometry.ts","../src/geometry-shape/TorusGeometry.ts","../src/geometry-shape/Model.ts","../src/skybox/SkyBoxMaterial.ts","../src/skybox/SkyBox.ts","../src/pbr/PBRMaterial.ts","../src/particle/particle.ts","../src/particle/particle-editor.ts","../src/trail/TrailMaterial.ts","../src/trail/TrailRenderer.ts","../src/collider/BoxCollider.ts","../src/collider/SphereCollider.ts","../src/collider/index.ts","../src/collision/intersect.ts","../src/collision/CollisionDetection.ts","../src/fog/Fog.ts","../src/fog/EXP2Fog.ts","../src/fog/FogFeature.ts","../src/fog/LinearFog.ts","../src/fog/index.ts","../src/env-probe/Probe.ts","../src/env-probe/PlaneProbe.ts","../src/env-probe/CubeProbe.ts","../src/shadow/LightShadow.ts","../src/shadow/Extension.ts","../src/shadow/ShadowMapMaterial.ts","../src/shadow/ShadowMapPass.ts","../src/shadow/ShadowMaterial.ts","../src/shadow/ShadowPass.ts","../src/shadow/ShadowFeature.ts","../src/shadow/index.ts","../src/index.ts"],"sourcesContent":["type PromiseNotifier = (progress: number) => void;\n\n/**\n * 资源 Promise 状态\n */\nexport enum AssetPromiseStatus {\n  /** 成功。*/\n  Success,\n  /** 请求中。*/\n  Pending,\n  /** 失败。*/\n  Failed\n}\n/**\n * 资源加载的 Promise。\n */\nexport class AssetPromise<T> extends Promise<T> {\n  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>,\n      T9 | PromiseLike<T9>,\n      T10 | PromiseLike<T10>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>,\n      T9 | PromiseLike<T9>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7, T8>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7]>;\n\n  static all<T1, T2, T3, T4, T5, T6>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6]>;\n\n  static all<T1, T2, T3, T4, T5>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5]>;\n\n  static all<T1, T2, T3, T4>(\n    values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>]\n  ): AssetPromise<[T1, T2, T3, T4]>;\n\n  static all<T1, T2, T3>(\n    values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]\n  ): AssetPromise<[T1, T2, T3]>;\n\n  static all<T1, T2>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): AssetPromise<[T1, T2]>;\n\n  static all<T>(values: readonly (T | PromiseLike<T>)[]): AssetPromise<T[]>;\n\n  /**\n   * 通过提供的资源 Promise 集合返回一个新的资源 Promise。\n   * 当提供集合中所有的 Promise 完成时会触发新资源 Promise 的 resolved。\n   * @param - 资源 Promise 集合\n   * @returns 资源 Promise\n   */\n  static all<T>(promises: T | PromiseLike<T>[]): AssetPromise<T[]> {\n    return new AssetPromise((resolve, reject, setProgress) => {\n      if (!Array.isArray(promises)) {\n        return resolve([promises]);\n      }\n\n      let completed = 0;\n      let total = promises.length;\n      let results = new Array<T>(total);\n\n      promises.forEach((value, index) => {\n        Promise.resolve(value)\n          .then((result) => {\n            results[index] = result;\n\n            completed += 1;\n            setProgress(completed / total);\n\n            if (completed == total) {\n              resolve(results);\n            }\n          })\n          .catch((err) => reject(err));\n      });\n    });\n  }\n\n  private _status: AssetPromiseStatus;\n  private _progress: number;\n  private _reject: (reason?: any) => void;\n  private _listeners: Set<PromiseNotifier>;\n\n  /**\n   * 当前 promise 状态。\n   */\n  get status(): AssetPromiseStatus {\n    return this._status;\n  }\n\n  /**\n   * 加载进度。\n   */\n  get progress(): number {\n    return this._progress;\n  }\n\n  /**\n   * 进度回调。\n   * @param callback - 进度回调\n   * @returns 资源 Promise\n   */\n  onProgress(callback: (progress?: number) => any): AssetPromise<T> {\n    this._listeners.add(callback);\n    return this;\n  }\n\n  /**\n   * 取消 Promise 请求。\n   * @returns 资源 Promise\n   */\n  cancel(): AssetPromise<T> {\n    if (this._status !== AssetPromiseStatus.Pending) {\n      return this;\n    }\n    this._reject(\"Promise Canceled\");\n    return this;\n  }\n\n  /**\n   * 创建一个资源加载的 Promise。\n   * @param executor - A callback used to initialize the promise. This callback is passed two arguments:\n   * a resolve callback used to resolve the promise with a value or the result of another promise,\n   * and a reject callback used to reject the promise with a provided reason or error.\n   * and a setProgress callback used to set promise progress with a percent.\n   */\n  constructor(\n    executor: (\n      resolve: (value?: T | PromiseLike<T>) => void,\n      reject?: (reason?: any) => void,\n      setProgress?: PromiseNotifier\n    ) => void\n  ) {\n    let newReject: (reason?: any) => void;\n\n    const setProgress = (progress: number) => {\n      if (progress <= this._progress) {\n        return;\n      }\n      this._progress = progress;\n\n      for (const listener of this._listeners) {\n        listener(progress);\n      }\n    };\n\n    super((resolve, reject) => {\n      newReject = (reason?: any) => {\n        // 加入到微任务中，避免直接调用找不到 this 报错\n        Promise.resolve().then(() => {\n          this._status = AssetPromiseStatus.Failed;\n          reject(reason);\n        });\n      };\n      executor(\n        (value: T) => {\n          // 加入到微任务中，避免直接调用找不到 this 报错\n          Promise.resolve().then(() => {\n            setProgress(1);\n            this._status = AssetPromiseStatus.Success;\n            resolve(value);\n          });\n        },\n        newReject,\n        (progress: number) => {\n          // 加入到微任务中，避免直接调用找不到 this 报错\n          Promise.resolve().then(() => {\n            setProgress(progress);\n          });\n        }\n      );\n    });\n    this._reject = newReject;\n    this._listeners = new Set();\n    this._progress = 0;\n    this._status = AssetPromiseStatus.Pending;\n  }\n}\n","export const Util = {\n  isArray:\n    \"isArray\" in Array\n      ? Array.isArray\n      : (value: any): boolean => {\n          return toString.call(value) === \"[object Array]\";\n        },\n  isArrayLike(x: any): boolean {\n    return !!x && typeof x.length === \"number\" && typeof x !== \"function\";\n  },\n  clone<T>(obj: T): T {\n    if (typeof obj !== \"object\" || obj === null) {\n      return obj;\n    }\n    let rst;\n    if (Util.isArrayLike(obj)) {\n      rst = (obj as any).slice();\n      for (let i = 0, l = (obj as any).length; i < l; i++) {\n        rst[i] = Util.clone(obj[i]);\n      }\n    } else {\n      rst = {};\n      for (const k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          rst[k] = Util.clone(obj[k]);\n        }\n      }\n    }\n\n    return rst;\n  },\n  /**\n   * 下载Blob对象\n   * @param {Blob} blob - 浏览器 blob 对象\n   * @param {string} fileName - 下载文件名字\n   */\n  downloadBlob(blob: Blob, fileName: string = \"\") {\n    if (navigator && navigator.msSaveBlob) {\n      navigator.msSaveBlob(blob, fileName);\n      return;\n    }\n\n    let url = window.URL.createObjectURL(blob);\n    let a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style.display = \"none\";\n    a.href = url;\n    a.download = fileName;\n    a.addEventListener(\"click\", () => {\n      if (a.parentElement) {\n        a.parentElement.removeChild(a);\n      }\n    });\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n};\n\nexport const isArrayLike = <T>(x: any): x is ArrayLike<T> =>\n  x && typeof x.length === \"number\" && typeof x !== \"function\";\n\n/**\n * 通过交换法快速从数组中移除元素。\n * @param array - 数组\n * @param item - 元素\n */\nexport function removeFromArray(array: any[], item: any): boolean {\n  const index = array.indexOf(item);\n  if (index < 0) {\n    return false;\n  }\n  const last = array.length - 1;\n  if (index !== last) {\n    const end = array[last];\n    array[index] = end;\n  }\n  array.length--;\n  return true;\n}\n\nexport function ObjectValues(obj: any) {\n  return Object.keys(obj).map((key: any) => obj[key]);\n}\n","import { AssetPromise } from \"./AssetPromise\";\nimport { LoadItem } from \"./LoadItem\";\nimport { RefObject } from \"./RefObject\";\nimport { Engine } from \"..\";\nimport { Loader } from \"./Loader\";\nimport { AssetType } from \"./AssetType\";\nimport { ObjectValues } from \"../base/Util\";\n\n/**\n * 资源管理员。\n */\nexport class ResourceManager {\n  /** loader 集合。*/\n  private static _loaders: { [key: number]: Loader<any> } = {};\n  private static _extTypeMapping: { [key: string]: AssetType } = {};\n\n  /**\n   * @internal\n   */\n  static _addLoader(type: AssetType, loader: Loader<any>, extnames: string[]) {\n    this._loaders[type] = loader;\n    for (let i = 0, len = extnames.length; i < len; i++) {\n      this._extTypeMapping[extnames[i]] = type;\n    }\n  }\n\n  private static _getTypeByUrl(url: string): AssetType {\n    const path = url.split(\"?\")[0];\n    return this._extTypeMapping[path.substring(path.lastIndexOf(\".\") + 1)];\n  }\n\n  /** 加载资产失败后的重试次数。*/\n  retryCount: number = 1;\n  /** 加载资产失败后的重试延迟时间，单位是毫秒(ms)。*/\n  retryInterval: number = 0;\n  /** 加载资产默认的超时时间，单位是毫秒(ms)。*/\n  timeout: number = 20000;\n\n  /** 资产路径池,key为资产ID，值为资产路径，通过路径加载的资源均放入该池中，用于资源文件管理。*/\n  private _assetPool: { [key: number]: string } = Object.create(null);\n  /** 资产池,key为资产路径，值为资产，通过路径加载的资源均放入该池中，用于资产文件管理。*/\n  private _assetUrlPool: { [key: string]: Object } = Object.create(null);\n  /** 引用计数对象池,key为对象ID，引用计数的对象均放入该池中。*/\n  private _refObjectPool: { [key: number]: RefObject } = Object.create(null);\n  /** 加载中的资源。*/\n  private _loadingPromises: { [url: string]: AssetPromise<any> } = {};\n\n  /**\n   * 创建资源管理员。\n   * @param engine - 当前资源管理所属的 engine\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * 通过路径异步加载资源。\n   * @param path - 路径\n   * @returns 资源 Promise\n   */\n  load<T>(path: string): AssetPromise<T>;\n\n  /**\n   * 通过路径集合异步加载资源集合。\n   * @param path - 路径集合\n   * @returns 资源 Promise\n   */\n  load(pathes: string[]): AssetPromise<Object[]>;\n\n  /**\n   * 通过加载信息集合异步加载资源集合。\n   * @param assetItem - 资源加载项\n   * @returns 资源 Promise\n   */\n  load<T>(assetItem: LoadItem): AssetPromise<T>;\n\n  /**\n   * 通过加载信息集合异步加载资源集合。\n   * @param assetItems - 资源加载项集合\n   * @returns 资源 Promise\n   */\n  load(assetItems: LoadItem[]): AssetPromise<Object[]>;\n\n  load<T>(assetInfo: string | LoadItem | (LoadItem | string)[]): AssetPromise<T | Object[]> {\n    // single item\n    if (!Array.isArray(assetInfo)) {\n      return this._loadSingleItem(assetInfo);\n    }\n    // multi items\n    const promises = assetInfo.map((item) => this._loadSingleItem<T>(item));\n    return AssetPromise.all(promises);\n  }\n\n  /**\n   * 取消所有未完成加载的资产。\n   */\n  cancelNotLoaded(): void;\n\n  /**\n   * 取消 url 未完成加载的资产。\n   * @param url - 资源链接\n   */\n  cancelNotLoaded(url: string): void;\n\n  /**\n   * 取消加载 urls 中未完成加载的资产。\n   * @param urls - 资源链接数组\n   */\n  cancelNotLoaded(urls: string[]): void;\n\n  cancelNotLoaded(url?: string | string[]): void {\n    if (!url) {\n      ObjectValues(this._loadingPromises).forEach((promise) => {\n        promise.cancel();\n      });\n    } else if (typeof url === \"string\") {\n      this._loadingPromises[url]?.cancel();\n    } else {\n      url.forEach((p) => {\n        this._loadingPromises[p]?.cancel();\n      });\n    }\n  }\n\n  /**\n   * 垃圾回收，会释放受引用计数管理的资源对象。\n   * @remarks 释放原则为没有被组件实例引用，包含直接引用和间接引用。\n   */\n  gc(): void {\n    const objects = ObjectValues(this._refObjectPool);\n    for (let i = 0, len = objects.length; i < len; i++) {\n      if (!objects[i].isGCIgnored) {\n        objects[i].destroy();\n      }\n    }\n  }\n\n  /**\n   * 根据 instanceId 获取资源路径\n   * @param instanceId 对象 id\n   * @returns 资源路径\n   */\n  getAssetPath(instanceId: number): string {\n    return this._assetPool[instanceId];\n  }\n\n  /**\n   * @internal\n   */\n  _addAsset(path: string, asset: RefObject): void {\n    this._assetPool[asset.instanceId] = path;\n    this._assetUrlPool[path] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteAsset(asset: RefObject): void {\n    const id = asset.instanceId;\n    const path = this._assetPool[id];\n    if (path) {\n      delete this._assetPool[id];\n      delete this._assetUrlPool[path];\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addRefObject(id: number, asset: RefObject): void {\n    this._refObjectPool[id] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteRefObject(id: number): void {\n    delete this._refObjectPool[id];\n  }\n\n  private _assignDefaultOptions(assetInfo: LoadItem): LoadItem | never {\n    assetInfo.type = assetInfo.type ?? ResourceManager._getTypeByUrl(assetInfo.url);\n    if (assetInfo.type === undefined) {\n      throw `asset type should be specified: ${assetInfo.url}`;\n    }\n    assetInfo.retryCount = assetInfo.retryCount ?? this.retryCount;\n    assetInfo.timeout = assetInfo.timeout ?? this.timeout;\n    assetInfo.retryInterval = assetInfo.retryInterval ?? this.retryInterval;\n    assetInfo.url = assetInfo.url ?? assetInfo.urls.join(\",\");\n    return assetInfo;\n  }\n\n  private _loadSingleItem<T>(item: LoadItem | string): AssetPromise<T> {\n    const info = this._assignDefaultOptions(typeof item === \"string\" ? { url: item } : item);\n    const url = info.url;\n    // has cache\n    if (this._assetUrlPool[url]) {\n      return new AssetPromise((resolve) => {\n        resolve(this._assetUrlPool[url] as T);\n      });\n    }\n    // loading\n    if (this._loadingPromises[url]) {\n      return this._loadingPromises[info.url];\n    }\n    const loader = ResourceManager._loaders[info.type];\n    const promise = loader.load(info, this);\n    this._loadingPromises[url] = promise;\n    promise\n      .then((res) => {\n        if (loader.useCache) this._addAsset(url, res);\n        delete this._loadingPromises[url];\n      })\n      .catch(() => {\n        // then 会产生一个新的 promise，若是报错没有 catch 会导致 uncaught error\n      });\n    return promise;\n  }\n}\n\n/**\n * 声明 resourceLoader 的装饰器。\n * @param assetType - 资源类型\n * @param extnames - 扩展名\n */\nexport function resourceLoader(assetType: AssetType, extnames: string[], useCache: boolean = true) {\n  return <T extends Loader<any>>(Target: { new (useCache: boolean): T }) => {\n    const loader = new Target(useCache);\n    ResourceManager._addLoader(assetType, loader, extnames);\n  };\n}\n","import { EventDispatcher } from \"./EventDispatcher\";\n\nexport type Listener = ((e: Event) => any) & { once?: boolean };\n\n/** 事件对象* @class */\nexport class Event {\n  get propagationStopped(): boolean {\n    return this._propagationStopped;\n  }\n\n  get target(): EventDispatcher {\n    return this._target;\n  }\n\n  set target(t) {\n    this._target = t;\n  }\n\n  get timeStamp(): number {\n    return this._timeStamp;\n  }\n\n  get currentTarget(): EventDispatcher {\n    return this._currentTarget;\n  }\n\n  set currentTarget(t) {\n    this._currentTarget = t;\n  }\n\n  get bubbles(): boolean {\n    return this._bubbles;\n  }\n\n  get type(): string | number {\n    return this._type;\n  }\n\n  public data: any;\n\n  private _timeStamp: number;\n\n  private _target: EventDispatcher;\n\n  private _currentTarget: any;\n\n  private _bubbles: boolean;\n\n  private _propagationStopped: boolean;\n\n  private _type: string | number;\n\n  constructor(type: string | number, target: EventDispatcher = null, data: any = {}, bubbles: boolean = true) {\n    this._timeStamp = new Date().getTime();\n    this._target = target;\n    this.data = data;\n    this._currentTarget = null;\n    this._bubbles = bubbles;\n    this._propagationStopped = false;\n    this._type = type;\n  }\n\n  public stopPropagation(): void {\n    this._propagationStopped = true;\n  }\n}\n","/**\n * 克隆模式。\n */\nexport enum CloneMode {\n  /** 忽略克隆。*/\n  Ignore,\n  /** 赋值克隆。*/\n  Assignment,\n  /** 浅克隆。*/\n  Shallow,\n  /** 深克隆。*/\n  Deep\n}\n","import { CloneMode } from \"./enums/CloneMode\";\n\n/**\n * 属性装饰器，克隆时对字段进行忽略。\n */\nexport function ignoreClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Ignore);\n}\n\n/**\n * 属性装饰器，克隆时对字段进行赋值克隆。\n * 如果是基本类型则会拷贝值，如果是引用类型则会拷贝其引用地址。\n */\nexport function assignmentClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Assignment);\n}\n\n/**\n * 属性装饰器，克隆时对字段进行浅克隆。\n * 克隆后会保持自身引用独立，并使用赋值的方式克隆其内部所有字段（如果内部字段是基本类型则会拷贝值，如果内部字段是引用类型则会拷贝其引用地址）。\n *\n * @remarks\n * 适用于 Obect、Array 和 Class 类型。\n */\nexport function shallowClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Shallow);\n}\n\n/**\n * 属性装饰器，克隆时对属性进行深克隆。\n * 克隆后会保持自身引用独立，并且其内部所有深层字段均保持完全独立。\n *\n * @remarks\n * 适用于 Obect、Array 和 Class 类型。\n * 如果在深克隆过程中遇到 Class 则会调用对象的 cloneTo() 实现克隆，需要对象实现 IClone 接口。\n */\nexport function deepClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Deep);\n}\n\n/**\n * @internal\n * 克隆管理员。\n */\nexport class CloneManager {\n  /** @internal */\n  static _subCloneModeMap = new Map<Object, Object>();\n  /** @internal */\n  static _cloneModeMap = new Map<Object, Object>();\n\n  private static _obejctType = Object.getPrototypeOf(Object);\n\n  /**\n   * 注释克隆模式。\n   * @param target - 克隆目标类型\n   * @param propertyKey - 属性名称\n   * @param mode - 克隆模式\n   */\n  static registerCloneMode(target: Object, propertyKey: string, mode: CloneMode): void {\n    let targetMap = CloneManager._subCloneModeMap.get(target.constructor);\n    if (!targetMap) {\n      targetMap = Object.create(null);\n      CloneManager._subCloneModeMap.set(target.constructor, targetMap);\n    }\n    targetMap[propertyKey] = mode;\n  }\n\n  /**\n   * 根据原型链获取 CloneMode。\n   */\n  static getCloneModeMode(type: Function): Object {\n    let cloneModes = CloneManager._cloneModeMap.get(type);\n    if (!cloneModes) {\n      cloneModes = Object.create(null);\n      CloneManager._cloneModeMap.set(type, cloneModes);\n      const obejctType = CloneManager._obejctType;\n      const cloneModeMap = CloneManager._subCloneModeMap;\n      while (type !== obejctType) {\n        const subCloneModes = cloneModeMap.get(type);\n        if (subCloneModes) {\n          Object.assign(cloneModes, subCloneModes);\n        }\n        type = Object.getPrototypeOf(type);\n      }\n    }\n    return cloneModes;\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { ignoreClone } from \"../clone/CloneManager\";\n\n/**\n * 引擎对象。\n */\nexport abstract class EngineObject {\n  private static _instanceIdCounter: number = 0;\n\n  /** 引擎唯一 Id。*/\n  @ignoreClone\n  readonly instanceId: number = ++EngineObject._instanceIdCounter;\n\n  /** 所属引擎。*/\n  @ignoreClone\n  protected _engine: Engine;\n\n  constructor(engine: Engine) {\n    this._engine = engine;\n  }\n}\n","import { EngineObject } from \"./EngineObject\";\nimport { Event } from \"./Event\";\nimport { ignoreClone } from \"../clone/CloneManager\";\n\n/**\n * 事件派发管理，可作为基类继承\n * @class\n */\nexport class EventDispatcher extends EngineObject {\n  @ignoreClone\n  private _evts = Object.create(null);\n  private _evtCount = 0;\n\n  /**\n   * 判断是否有事件监听。\n   * @param event 事件名\n   * @returns 返回是否有对应事件\n   */\n  hasEvent(event: string): boolean {\n    return this._evts[event] != null;\n  }\n\n  /**\n   * 返回注册的所有事件名。\n   * @returns 所有的事件名\n   */\n  eventNames(): string[] {\n    if (this._evtCount === 0) return [];\n    return Object.keys(this._evts);\n  }\n\n  /**\n   * 返回指定事件名的监听函数的数量。\n   * @param event 事件名\n   * @returns 监听函数的数量\n   */\n  listenerCount(event: string): number {\n    const listeners = this._evts[event];\n\n    if (!listeners) return 0;\n    if (listeners.fn) return 1;\n    return listeners.length;\n  }\n\n  /**\n   * 派发指定事件名的事件。\n   * @param event 事件名\n   * @param data 数据\n   * @returns 派发事件是否成功\n   */\n  dispatch(event: string, data?: any): boolean {\n    if (!this._evts[event]) {\n      return false;\n    }\n\n    const listeners = this._evts[event];\n\n    if (listeners.fn) {\n      if (listeners.once) this.removeEventListener(event, listeners.fn);\n      listeners.fn(data);\n    } else {\n      const l = listeners.length;\n      for (let i = 0; i < l; i++) {\n        if (listeners[i].once) this.removeEventListener(event, listeners[i].fn);\n        listeners[i].fn(data);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * 添加监听函数。\n   * @param event 事件名\n   * @param fn 函数\n   * @returns this\n   */\n  on(event: string, fn: Function): EventDispatcher {\n    return this.addEventListener(event, fn);\n  }\n\n  /**\n   * 添加一次性的监听函数。\n   * @param event 事件名\n   * @param fn 函数\n   * @returns this\n   */\n  once(event: string, fn: Function): EventDispatcher {\n    return this.addEventListener(event, fn, true);\n  }\n\n  /**\n   * @deprecated 使用 on/once 替换\n   * 添加指定事件名的监听函数。\n   * @param event 事件名\n   * @param fn 函数\n   * @param once 是否是一次性监听\n   * @returns this\n   */\n  addEventListener(event: string, fn: Function, once?: boolean): EventDispatcher {\n    const listener = { fn, once };\n    const events = this._evts;\n    if (!events[event]) {\n      events[event] = listener;\n      this._evtCount++;\n    } else if (!events[event].fn) {\n      events[event].push(listener);\n    } else {\n      events[event] = [events[event], listener];\n    }\n    return this;\n  }\n\n  off(event: string, fn?: Function): EventDispatcher {\n    if (!this._evts[event]) return this;\n    if (!fn) {\n      this._clearEvent(event);\n      return this;\n    }\n\n    const listeners = this._evts[event];\n\n    if (listeners.fn && listeners.fn === fn) {\n      this._clearEvent(event);\n    } else {\n      const index = listeners.indexOf(fn);\n      if (index > -1) {\n        const temp = listeners[listeners.length - 1];\n        listeners[index] = temp;\n        listeners.length--;\n        if (listeners.length === 1) {\n          this._evts[event] = listeners[0];\n        }\n      }\n    }\n    return this;\n  }\n\n  /**\n   * @deprecated 使用\n   * 移除指定事件名的事件监听。\n   * @param event - 事件名\n   * @param fn - 函数，若不传则删除所有对应的事件监听\n   */\n  removeEventListener(event: string, fn?: Function): EventDispatcher {\n    return this.off(event, fn);\n  }\n\n  /**\n   * 移除所有的事件监听。\n   * @param event - 事件名，若不传则删除所有事件\n   */\n  removeAllEventListeners(event?: string): void {\n    if (event) {\n      if (this._evts[event]) this._clearEvent(event);\n    } else {\n      this._evts = Object.create(null);\n      this._evtCount = 0;\n    }\n  }\n\n  /**\n   * @deprecated 使用 dispatch 替换\n   * @param - 事件\n   */\n  trigger(e: Event) {\n    this.dispatch(e.type as string, e.data);\n  }\n\n  private _clearEvent(event: string) {\n    if (--this._evtCount === 0) {\n      this._evts = Object.create(null);\n    } else {\n      delete this._evts[event];\n    }\n  }\n}\n","/**\n * console log的简单封装，默认为关闭状态，需要调用Logger.enable()来开启\n * @class\n * @private\n */\n/* tslint:disable */\nconst noop = (message?: any, ...optionalParams: any[]) => {};\nconst debug = console.log.bind(console);\nconst info = console.info.bind(console);\nconst warn = console.warn.bind(console);\nconst error = console.error.bind(console);\n\nexport const Logger = {\n  debug: noop,\n  info: noop,\n  warn: noop,\n  error: noop,\n  isEnabled: false,\n\n  /** 开启Log */\n  enable() {\n    this.debug = debug;\n    this.info = info;\n    this.warn = warn;\n    this.error = error;\n    this.isEnabled = true;\n  },\n\n  /** 关闭Log */\n  disable() {\n    this.debug = noop;\n    this.info = noop;\n    this.warn = noop;\n    this.error = noop;\n    this.isEnabled = false;\n  }\n};\n","/**\n * 计算每帧时间的工具类\n * @class\n */\nexport class Time {\n  private _clock: { now: () => number };\n\n  private _timeScale: number;\n\n  private _deltaTime: number;\n\n  private _startTime: number;\n\n  private _lastTickTime: number;\n  /**\n   * 初始化内部数据\n   * @constructor\n   */\n  constructor() {\n    // 优先使用 performance 进行计时\n    this._clock = performance ? performance : Date;\n\n    this._timeScale = 1.0;\n    this._deltaTime = 0.0001;\n\n    const now = this._clock.now();\n    this._startTime = now;\n    this._lastTickTime = now;\n  }\n\n  reset() {\n    this._lastTickTime = this._clock.now();\n  }\n\n  /**\n   * 当前时间\n   * @readonly\n   */\n  get nowTime(): number {\n    return this._clock.now();\n  }\n\n  /**\n   * 两次 tick 之间的时间\n   * @readonly\n   */\n  get deltaTime(): number {\n    return this._deltaTime;\n  }\n\n  /**\n   * Delta Time 的缩放值\n   */\n  get timeScale(): number {\n    return this._timeScale;\n  }\n  set timeScale(s) {\n    this._timeScale = s;\n  }\n\n  /**\n   * 未经缩放的 Delta Time 数值\n   * @readonly\n   */\n  get unscaledDeltaTime(): number {\n    return this._deltaTime / this._timeScale;\n  }\n\n  /**\n   * 时钟初始化之后，经历的时间\n   */\n  get timeSinceStartup(): number {\n    return this.nowTime - this._startTime;\n  }\n\n  /**\n   * 每帧调用，更新 Delta Time 等内部数据\n   */\n  public tick(): void {\n    const now = this.nowTime;\n    this._deltaTime = (now - this._lastTickTime) * this._timeScale;\n    this._lastTickTime = now;\n  }\n}\n","/**\n * 资源的类型，主要用来处理资源对象关联的GL对象的回收\n */\nexport enum InternalAssetType {\n  /** 属于当前场景的，场景切换时，GL资源会被自动释放 */\n  Scene = 1,\n  /** Cache自动处理，在一段时间内没有用到，则GL资源会被释放 */\n  Cache = 2\n}\n\n/**\n * Camera 的清空模式枚举\n * @readonly\n */\nexport enum ClearMode {\n  /** 不执行任何清空背景的操作 */\n  DONT_CLEAR = 0,\n  /** 清空背景颜色和深度缓冲 */\n  SOLID_COLOR = 1,\n  /** 只清空深度缓冲 */\n  DEPTH_ONLY = 2,\n  /** 只清空颜色 */\n  COLOR_ONLY = 3,\n  /** 只清空模版缓冲*/\n  STENCIL_ONLY = 4,\n  /** 清空所有缓冲区 */\n  ALL_CLEAR = 5\n}\n\n/**\n * 材质类型枚举\n * @readonly\n */\nexport enum MaterialType {\n  /** 不透明 */\n  OPAQUE = 1000,\n  /** 透明或半透明 */\n  TRANSPARENT = 2000\n}\n\n/**\n * 可以开启或者关闭的渲染状态\n * @readonly\n */\nexport enum RenderState {\n  /** 片元的颜色融合计算 */\n  BLEND = 3042,\n  /** 多边形正反面剔除 */\n  CULL_FACE = 2884,\n  /** 深度测试 */\n  DEPTH_TEST = 2929,\n  /** Alpha通道测试 */\n  ALPHA_TEST = 3008,\n  /** 多边形片段的深度值偏移 */\n  POLYGON_OFFSET_FILL = 32823,\n  /** 通过alpha值决定的临时覆盖值计算。 */\n  SAMPLE_ALPHA_TO_COVERAGE = 32926,\n  /** 剪裁测试，即丢弃在剪裁矩形范围外的片段。 */\n  SCISSOR_TEST = 3089\n}\n\n/**\n * 面朝向枚举\n * @readonly\n */\nexport enum FrontFace {\n  /** 顺时针 */\n  CW = 0x0900,\n  /** 逆时针 */\n  CCW = 0x0901\n}\n\n/**\n * 面剔除枚举\n * @readonly\n */\nexport enum CullFace {\n  /** 正面 */\n  FRONT = 1028,\n  /** 反面 */\n  BACK = 1029,\n  /** 正面和反面 */\n  FRONT_AND_BACK = 1032\n}\n\n/**\n * 显示面枚举\n * @readonly\n * */\nexport enum Side {\n  /** 背面剔除，只显示正面 */\n  FRONT,\n  /** 正面剔除，只显示背面 */\n  BACK,\n  /** 光珊化前剔除，不显示任何面 */\n  NONE,\n  /** 关闭剔除，显示正反面 */\n  DOUBLE\n}\n\n/**\n * 比较函数枚举\n * @readonly\n */\nexport enum CompFunc {\n  /** 永不通过 */\n  NEVER = 0x0200,\n  /** 小于参考值时通过 */\n  LESS = 0x0201,\n  /** 等于参考值时通过 */\n  EQUAL = 0x0202,\n  /** 小于等于参考值时通过 */\n  LEQUAL = 0x0203,\n  /** 大于参考值时通过 */\n  GREATER = 0x0204,\n  /** 不等于参考值时通过 */\n  NOTEQUAL = 0x0205,\n  /** 大于等于参考值时通过 */\n  GEQUAL = 0x0206,\n  /** 总是通过 */\n  ALWAYS = 0x0207\n}\n\n/**\n * 纹理过滤枚举\n * @readonly\n */\nexport enum TextureFilter {\n  NEAREST = 9728, // gl.NEAREST\n  LINEAR = 9729, // gl.LINEAR\n  NEAREST_MIPMAP_NEAREST = 9984, // gl.NEAREST_MIPMAP_NEAREST\n  LINEAR_MIPMAP_NEAREST = 9985, // gl.LINEAR_MIPMAP_NEAREST\n  NEAREST_MIPMAP_LINEAR = 9986, // gl.NEAREST_MIPMAP_LINEAR\n  LINEAR_MIPMAP_LINEAR = 9987 // gl.LINEAR_MIPMAP_LINEAR\n}\n\n/**\n * 数据类型枚举\n */\nexport enum DataType {\n  /** 浮点数 */\n  FLOAT = 5126, // gl.FLOAT\n  /** 浮点型二维向量 */\n  FLOAT_VEC2 = 35664, // gl.FLOAT_VEC2\n  /** 浮点型三维向量 */\n  FLOAT_VEC3 = 35665, // gl.FLOAT_VEC3\n  /** 浮点型四维向量 */\n  FLOAT_VEC4 = 35666, // gl.FLOAT_VEC4\n\n  /** 整数 */\n  INT = 5124, // gl.INT\n  /** 整型二维向量 */\n  INT_VEC2 = 35667, // gl.INT_VEC2\n  /** 整型三维向量 */\n  INT_VEC3 = 35668, // gl.INT_VEC3\n  /** 整型四维向量 */\n  INT_VEC4 = 35669, // gl.INT_VEC4\n\n  /** 布尔类型 */\n  BOOL = 35670, // gl.BOOL\n  /** 布尔型二维向量 */\n  BOOL_VEC2 = 35671, // gl.BOOL_VEC2\n  /** 布尔型三维向量 */\n  BOOL_VEC3 = 35672, // gl.BOOL_VEC3\n  /** 布尔型四维向量 */\n  BOOL_VEC4 = 35673, // gl.BOOL_VEC4\n\n  /** 二阶矩阵 */\n  FLOAT_MAT2 = 35674, // gl.FLOAT_MAT2\n  /** 三阶矩阵 */\n  FLOAT_MAT3 = 35675, // gl.FLOAT_MAT3\n  /** 四阶矩阵 */\n  FLOAT_MAT4 = 35676, // gl.FLOAT_MAT4\n\n  /** 浮点数组 */\n  FLOAT_ARRAY = 35677, // gl.FLOAT_ARRAY\n  /** 浮点型二维向量数组 */\n  FLOAT_VEC2_ARRAY = 100000,\n  /** 浮点型三维向量数组 */\n  FLOAT_VEC3_ARRAY,\n  /** 浮点型四维向量数组 */\n  FLOAT_VEC4_ARRAY,\n\n  /** 整数数组 */\n  INT_ARRAY,\n  /** 整型二维向量数组 */\n  INT_VEC2_ARRAY,\n  /** 整型三维向量数组 */\n  INT_VEC3_ARRAY,\n  /** 整型四维向量数组 */\n  INT_VEC4_ARRAY,\n\n  /** 二阶矩阵数组 */\n  FLOAT_MAT2_ARRAY,\n  /** 三阶矩阵数组 */\n  FLOAT_MAT3_ARRAY,\n  /** 四阶矩阵数组 */\n  FLOAT_MAT4_ARRAY,\n\n  /** 2D 纹理采样数组 */\n  SAMPLER_2D_ARRAY,\n  /** Cube Map 纹理采样数组 */\n  SAMPLER_CUBE_ARRAY,\n\n  /** 2D 纹理采样 */\n  SAMPLER_2D = 35678, // gl.SAMPLER_2D\n  /** Cube Map 纹理采样 */\n  SAMPLER_CUBE = 35680, // gl.SAMPLER_CUBE\n\n  /** 单字节类型 */\n  BYTE = 5120, // gl.BYTE\n  /** 无符号的字节类型 */\n  UNSIGNED_BYTE = 5121, // gl.UNSIGNED_BYTE\n  /** Short 类型 */\n  SHORT = 5122, // gl.SHORT\n  /** 无符号的 Short 在线 */\n  UNSIGNED_SHORT = 5123, // gl.UNSIGNED_SHORT\n  /** 无符号整数 */\n  UNSIGNED_INT = 5125 // gl.UNSIGNED_INT\n}\n\n/**\n * glTF 1.0所支持的Uniform Semantic以及Oasis3D的扩展\n * @readonly\n */\nexport enum UniformSemantic {\n  // -- GLTF\n  /** Local 矩阵 */\n  LOCAL = 1,\n  /** Model 矩阵 */\n  MODEL = 2,\n  /** View 矩阵 */\n  VIEW = 3,\n  /** Project 矩阵 */\n  PROJECTION = 4,\n  /** Model View 矩阵 */\n  MODELVIEW = 5,\n  /** View Projection 矩阵 */\n  VIEWPROJECTION = 21,\n  /** Model View Project 矩阵 */\n  MODELVIEWPROJECTION = 6,\n  /** Model 矩阵的逆矩阵 */\n  MODELINVERSE = 7,\n  /** View 矩阵的逆矩阵 */\n  VIEWINVERSE = 8,\n  /** Projection 矩阵的逆矩阵 */\n  PROJECTIONINVERSE = 9,\n  /** Model View 矩阵的逆矩阵 */\n  MODELVIEWINVERSE = 10,\n  /** Model View Project 矩阵的逆矩阵 */\n  MODELVIEWPROJECTIONINVERSE = 11,\n  /** Model 矩阵的逆转置矩阵，可用来变换 Normal */\n  MODELINVERSETRANSPOSE = 12,\n  /** Model View 矩阵的逆转置矩阵 */\n  MODELVIEWINVERSETRANSPOSE = 13,\n  /** Viewport 参数 */\n  VIEWPORT = 14,\n  /** 骨骼矩阵数组 */\n  JOINTMATRIX = 15,\n  /** MorphTarget 权重 */\n  MORPHWEIGHTS = 16,\n\n  // --\n  /** 当前的摄像机的位置 */\n  EYEPOS = 17,\n  /** 当前程序运行的时长 */\n  TIME = 18,\n  /** 骨骼矩阵纹理 */\n  JOINTTEXTURE = 19,\n  /** joint 个数 */\n  JOINTCOUNT = 20\n}\n\n/**\n * 颜色混合方式枚举\n */\nexport enum BlendFunc {\n  /** 所有通道乘以0 */\n  ZERO = 0,\n  /** 所有通道乘以1 */\n  ONE = 1,\n  /** 所有通道乘以 Source Color */\n  SRC_COLOR = 768,\n  /** 所有通道乘以 1 减去 Source Color */\n  ONE_MINUS_SRC_COLOR = 769,\n  /** 所有通道乘以 Source Alpha */\n  SRC_ALPHA = 770,\n  /** 所有通道乘以 1 减去 Source Alpha */\n  ONE_MINUS_SRC_ALPHA = 771,\n  /** 所有通道乘以 destination Alpha */\n  DST_ALPHA = 772,\n  /** 所有通道乘以 1 减去 destination Alpha */\n  ONE_MINUS_DST_ALPHA = 773,\n  /** 所有通道乘以 1 减去 destination Color */\n  DST_COLOR = 774,\n  /** 所有通道乘以 1 减去 destination Color */\n  ONE_MINUS_DST_COLOR = 775,\n  /**\n   * Multiplies the RGB colors by the smaller of either the source alpha value or the value of 1 minus the destination alpha value. The alpha value is multiplied by 1.\n   */\n  SRC_ALPHA_SATURATE = 776,\n  /**\n   * 所有通道乘以一个颜色常量\n   */\n  enumANT_COLOR = 32769,\n  /** 所有通道乘以 1 减去颜色常量 */\n  ONE_MINUS_enumANT_COLOR = 32770,\n  /**\n   * 所有通道乘以一个Alpha常量\n   */\n  enumANT_ALPHA = 32771,\n  /**\n   * 所有通道乘以一减去Alpha常量\n   */\n  ONE_MINUS_enumANT_ALPHA = 32772\n}\n\n/**\n * RenderPass 的可用 MASK\n * @readonly\n * @private\n */\nexport enum MaskList {\n  MASK1 = 0b1,\n  MASK2 = 0b10,\n  MASK3 = 0b100,\n  MASK4 = 0b1000,\n  MASK5 = 0b10000,\n  MASK6 = 0b100000,\n  MASK7 = 0b1000000,\n  MASK8 = 0b10000000,\n  MASK9 = 0b100000000,\n  MASK10 = 0b1000000000,\n  MASK11 = 0b10000000000,\n  MASK12 = 0b100000000000,\n  MASK13 = 0b1000000000000,\n  MASK14 = 0b10000000000000,\n  MASK15 = 0b100000000000000,\n  MASK16 = 0b1000000000000000,\n  MASK17 = 0b10000000000000000,\n  MASK18 = 0b100000000000000000,\n  MASK19 = 0b1000000000000000000,\n  MASK20 = 0b10000000000000000000,\n  // MASK21=        0b100000000000000000000,  // 预留\n  // MASK22=        0b1000000000000000000000,\n  // MASK23=        0b10000000000000000000000,\n  // MASK24=        0b100000000000000000000000,\n  // MASK25=        0b1000000000000000000000000,\n  // MASK26=        0b10000000000000000000000000,\n  // MASK27=        0b100000000000000000000000000,\n  EVERYTHING = 0b1111111111111111111111111111,\n  SHADOW = 0b10000000000000000000000000000,\n  SHADOW_MAP = 0b100000000000000000000000000000\n}\n\n/**\n * 探针渲染速率\n * */\nexport enum RefreshRate {\n  /** 只渲染一次 */\n  ONCE = 1,\n  /** 每帧渲染 */\n  EVERYFRAME = 2\n}\n\n/**\n * 包围物类型\n * */\nexport enum BoundingType {\n  /** 轴对齐包围盒 */\n  AABB,\n  /** 方向包围盒 */\n  OBB,\n  /** 包围球 */\n  SPHERE\n}\n\n/**\n * GL 层能力\n * 有些能力可以靠 extension 来抹平，有些能力必须支持 WebGL 2.0\n * */\nexport enum GLCapabilityType {\n  standardDerivatives = \"OES_standard_derivatives\",\n  shaderTextureLod = \"EXT_shader_texture_lod\",\n  elementIndexUint = \"OES_element_index_uint\",\n  depthTexture = \"WEBGL_depth_texture\",\n  drawBuffers = \"WEBGL_draw_buffers\",\n  vertexArrayObject = \"OES_vertex_array_object\",\n  instancedArrays = \"ANGLE_instanced_arrays\",\n  multipleSample = \"multipleSampleOnlySupportedInWebGL2\",\n  textureFloat = \"OES_texture_float\",\n  textureFloatLinear = \"OES_texture_float_linear\",\n  textureHalfFloat = \"OES_texture_half_float\",\n  textureHalfFloatLinear = \"OES_texture_half_float_linear\",\n  WEBGL_colorBufferFloat = \"WEBGL_color_buffer_float\",\n  colorBufferFloat = \"EXT_color_buffer_float\",\n  colorBufferHalfFloat = \"EXT_color_buffer_half_float\",\n  textureFilterAnisotropic = \"EXT_texture_filter_anisotropic\",\n\n  astc = \"WEBGL_compressed_texture_astc\",\n  astc_webkit = \"WEBKIT_WEBGL_compressed_texture_astc\",\n  etc = \"WEBGL_compressed_texture_etc\",\n  etc_webkit = \"WEBKIT_WEBGL_compressed_texture_etc\",\n  etc1 = \"WEBGL_compressed_texture_etc1\",\n  etc1_webkit = \"WEBKIT_WEBGL_compressed_texture_etc1\",\n  pvrtc = \"WEBGL_compressed_texture_pvrtc\",\n  pvrtc_webkit = \"WEBKIT_WEBGL_compressed_texture_pvrtc\",\n  s3tc = \"WEBGL_compressed_texture_s3tc\",\n  s3tc_webkit = \"WEBKIT_WEBGL_compressed_texture_s3tc\"\n  // atc = \"WEBGL_compressed_texture_atc\",\n  // s3tc_srgb = \"WEBGL_compressed_texture_s3tc_srgb\"\n}\n\n/**\n * OIT 模式\n * */\nexport enum OITMode {\n  /** 加权平均算法，性能较高 */\n  WEIGHTED_AVERAGE,\n  /** 深度剥离算法，性能较低，但精确度高 */\n  DEPTH_PEEL,\n  /** 双层深度剥离，性能更好，强依赖 MRT */\n  DUAL_DEPTH_PEEL\n}\n\nexport type TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray\n  | Float32Array\n  | Float64Array;\n","/**\n * 高性能无序数组，delete采用交换法提升行,内部数只扩不缩。\n */\nexport class DisorderedArray<T> {\n  _elements: T[];\n\n  length: number = 0;\n\n  constructor(count: number = 0) {\n    this._elements = new Array<T>(count);\n  }\n\n  add(element: T): void {\n    if (this.length === this._elements.length) this._elements.push(element);\n    else this._elements[this.length] = element;\n    this.length++;\n  }\n\n  delete(element: T): void {\n    const index = this._elements.indexOf(element); //CM:可修改为自定义二分查找等算法,目前this._elements>=this.length 浪费性能\n    this.deleteByIndex(index);\n  }\n  /**\n   *\n   * @param index\n   * @returns 被替换过来的项 用于外部重置他的index\n   */\n  deleteByIndex(index: number): T {\n    var elements: T[] = this._elements;\n    let end: T = null;\n    const lastIndex = this.length - 1;\n    if (index !== lastIndex) {\n      end = elements[lastIndex];\n      elements[index] = end;\n    }\n    this.length--;\n    return end;\n  }\n\n  garbageCollection(): void {\n    this._elements.length = this.length;\n  }\n}\n","import { Camera } from \"./Camera\";\nimport { DisorderedArray } from \"./DisorderedArray\";\nimport { Component } from \"./Component\";\nimport { RenderableComponent } from \"./RenderableComponent\";\nimport { Script } from \"./Script\";\n\n/**\n * 组件的管理员。\n */\nexport class ComponentsManager {\n  // Script\n  private _onStartScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onLateUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _destoryComponents: Script[] = [];\n\n  // Animation\n  private _onUpdateAnimations: DisorderedArray<Component> = new DisorderedArray();\n\n  // Render\n  private _renderers: DisorderedArray<RenderableComponent> = new DisorderedArray();\n  private _onUpdateRenderers: DisorderedArray<RenderableComponent> = new DisorderedArray();\n\n  // Delay dispose active/inActive Pool\n  private _componentsContainerPool: Component[][] = [];\n\n  addRenderer(renderer: RenderableComponent) {\n    renderer._rendererIndex = this._renderers.length;\n    this._renderers.add(renderer);\n  }\n\n  removeRenderer(renderer: RenderableComponent) {\n    const replaced = this._renderers.deleteByIndex(renderer._rendererIndex);\n    replaced && (replaced._rendererIndex = renderer._rendererIndex);\n    renderer._rendererIndex = -1;\n  }\n\n  addOnStartScript(script: Script) {\n    script._onStartIndex = this._onStartScripts.length;\n    this._onStartScripts.add(script);\n  }\n\n  removeOnStartScript(script: Script): void {\n    const replaced = this._onStartScripts.deleteByIndex(script._onStartIndex);\n    replaced && (replaced._onStartIndex = script._onStartIndex);\n    script._onStartIndex = -1;\n  }\n\n  addOnUpdateScript(script: Script) {\n    script._onUpdateIndex = this._onUpdateScripts.length;\n    this._onUpdateScripts.add(script);\n  }\n\n  removeOnUpdateScript(script: Script): void {\n    const replaced = this._onUpdateScripts.deleteByIndex(script._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = script._onUpdateIndex);\n    script._onUpdateIndex = -1;\n  }\n\n  addOnLateUpdateScript(script: Script): void {\n    script._onLateUpdateIndex = this._onLateUpdateScripts.length;\n    this._onLateUpdateScripts.add(script);\n  }\n\n  removeOnLateUpdateScript(script: Script): void {\n    const replaced = this._onLateUpdateScripts.deleteByIndex(script._onLateUpdateIndex);\n    replaced && (replaced._onLateUpdateIndex = script._onLateUpdateIndex);\n    script._onLateUpdateIndex = -1;\n  }\n\n  addOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    animation._onUpdateIndex = this._onUpdateAnimations.length;\n    this._onUpdateAnimations.add(animation);\n  }\n\n  removeOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    const replaced = this._onUpdateAnimations.deleteByIndex(animation._onUpdateIndex);\n    //@ts-ignore\n    replaced && (replaced._onUpdateIndex = animation._onUpdateIndex);\n    //@ts-ignore\n    animation._onUpdateIndex = -1;\n  }\n\n  addOnUpdateRenderers(renderer: RenderableComponent): void {\n    renderer._onUpdateIndex = this._onUpdateRenderers.length;\n    this._onUpdateRenderers.add(renderer);\n  }\n\n  removeOnUpdateRenderers(renderer: RenderableComponent): void {\n    const replaced = this._onUpdateRenderers.deleteByIndex(renderer._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = renderer._onUpdateIndex);\n    renderer._onUpdateIndex = -1;\n  }\n\n  addDestoryComponent(component): void {\n    this._destoryComponents.push(component);\n  }\n\n  callScriptOnStart(): void {\n    const onStartScripts = this._onStartScripts;\n    if (onStartScripts.length > 0) {\n      const elements = onStartScripts._elements;\n      // onStartScripts's length maybe add if you add some Script with addComponent() in some Script's onStart()\n      for (let i = 0; i < onStartScripts.length; i++) {\n        const script = elements[i];\n        script._started = true;\n        script._onStartIndex = -1;\n        script.onStart();\n      }\n      onStartScripts.length = 0;\n    }\n  }\n\n  callScriptOnUpdate(deltaTime): void {\n    const elements = this._onUpdateScripts._elements;\n    for (let i = this._onUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (element._started) {\n        element.onUpdate(deltaTime);\n      }\n    }\n  }\n\n  callScriptOnLateUpdate(deltaTime): void {\n    const elements = this._onLateUpdateScripts._elements;\n    for (let i = this._onLateUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (element._started) {\n        element.onLateUpdate(deltaTime);\n      }\n    }\n  }\n\n  callAnimationUpdate(deltaTime): void {\n    const elements = this._onUpdateAnimations._elements;\n    for (let i = this._onUpdateAnimations.length - 1; i >= 0; --i) {\n      //@ts-ignore\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRendererOnUpdate(deltaTime: number): void {\n    const elements = this._onUpdateRenderers._elements;\n    for (let i = this._onUpdateRenderers.length - 1; i >= 0; --i) {\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRender(camera: Camera): void {\n    const elements = this._renderers._elements;\n    for (let i = this._renderers.length - 1; i >= 0; --i) {\n      elements[i]._render(camera);\n    }\n  }\n\n  callComponentDestory(): void {\n    const destoryComponents = this._destoryComponents;\n    const length = destoryComponents.length;\n    if (length > 0) {\n      for (let i = length - 1; i >= 0; --i) {\n        destoryComponents[i].onDestroy();\n      }\n      destoryComponents.length = 0;\n    }\n  }\n\n  callCameraOnBeginRender(camera: Camera) {\n    const camComps = camera.entity._components;\n    for (let i = camComps.length - 1; i >= 0; --i) {\n      const camComp = camComps[i];\n      (camComp as any).onBeginRender && (camComp as any).onBeginRender(camera);\n    }\n  }\n\n  callCameraOnEndRender(camera: Camera) {\n    const camComps = camera.entity._components;\n    for (let i = camComps.length - 1; i >= 0; --i) {\n      const camComp = camComps[i];\n      (camComp as any).onBeginRender && (camComp as any).onEndRender(camera);\n    }\n  }\n\n  getActiveChangedTempList(): Component[] {\n    return this._componentsContainerPool.length ? this._componentsContainerPool.pop() : [];\n  }\n\n  putActiveChangedTempList(componentContainer: Component[]): void {\n    componentContainer.length = 0;\n    this._componentsContainerPool.push(componentContainer);\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { Component } from \"../Component\";\nimport { CloneManager } from \"./CloneManager\";\nimport { CloneMode } from \"./enums/CloneMode\";\n\nexport class ComponentCloner {\n  /**\n   * 克隆组件。\n   * @param source - 克隆源\n   * @param target - 克隆目标\n   */\n  static cloneComponent(source: Component, target: Component): void {\n    const cloneModes = CloneManager.getCloneModeMode(source.constructor);\n    const keys = Object.keys(source);\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const k = keys[i];\n      const cloneMode = cloneModes[k];\n      switch (cloneMode) {\n        case undefined:\n        case CloneMode.Assignment:\n          target[k] = source[k];\n          break;\n        case CloneMode.Shallow:\n          const sourcePropS: Object = source[k];\n          if (sourcePropS instanceof Object) {\n            let tarProp = <Object>target[k];\n            tarProp == null && (tarProp = target[k] = sourcePropS.constructor());\n            Object.assign(tarProp, sourcePropS);\n          } else {\n            target[k] = sourcePropS; // null or undefine and primitive type.\n          }\n          break;\n        case CloneMode.Deep:\n          const sourcePropD: Object = source[k];\n          if (sourcePropD instanceof Object) {\n            let tarProp = <Object>target[k];\n            tarProp == null && (tarProp = target[k] = sourcePropD.constructor());\n            ComponentCloner._cloneComponentProp(sourcePropD, tarProp);\n          } else {\n            target[k] = sourcePropD; // null or undefine and primitive type.\n          }\n          break;\n      }\n    }\n  }\n\n  /**\n   * 克隆组件属性。\n   * @param source - 克隆源\n   * @param target - 克隆目标\n   */\n  private static _cloneComponentProp(source: Object, target: Object): void {\n    const type = source.constructor;\n    if (type === Object) {\n      const keys = Object.keys(source);\n      for (let i = 0, n = keys.length; i < n; i++) {\n        const k = keys[i];\n        const sourceItem = source[k];\n        if (sourceItem instanceof Object) {\n          let targetItem = <Object>target[k];\n          targetItem == null && (target[k] = targetItem = sourceItem.constructor());\n          ComponentCloner._cloneComponentProp(sourceItem, targetItem);\n        } else {\n          target[k] = sourceItem; // null or undefine and primitive type.\n        }\n      }\n    } else if (type === Array) {\n      const arraySource = <Object[]>source;\n      const arrayTarget = <Object[]>target;\n      const length = arraySource.length;\n      arrayTarget.length = length;\n      for (let i = 0; i < length; i++) {\n        const sourceItem = arraySource[i];\n        if (sourceItem instanceof Object) {\n          let targetItem = <Object>arrayTarget[i];\n          targetItem == null && (arrayTarget[i] = targetItem = sourceItem.constructor());\n          ComponentCloner._cloneComponentProp(sourceItem, targetItem);\n        } else {\n          arrayTarget[i] = sourceItem; // null or undefine and primitive type.\n        }\n      }\n    } else {\n      (<IClone>source).cloneTo(target);\n    }\n  }\n}\n","import { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\n\ntype ComponentConstructor = new (entity: Entity) => Component;\n\n/**\n * 用于组件依赖注册。\n */\nexport class ComponentsDependencies {\n  /**\n   * @internal\n   */\n  private static _dependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n  private static _invDependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n\n  /**\n   * 注册组件依赖关系。\n   * @param currentComponent\n   * @param dependentComponent\n   */\n  static register(currentComponent: ComponentConstructor, dependentComponent: ComponentConstructor) {\n    this._addDependency(currentComponent, dependentComponent, this._dependenciesMap);\n    this._addDependency(dependentComponent, currentComponent, this._invDependenciesMap);\n  }\n\n  /**\n   * @internal\n   */\n  static _addCheck(entity: Entity, type: ComponentConstructor) {\n    // 检查是否有被依赖组件\n    const dependencies = ComponentsDependencies._dependenciesMap.get(type);\n    if (dependencies) {\n      for (let i = 0, len = dependencies.length; i < len; i++) {\n        if (!entity.getComponent(dependencies[i])) {\n          throw `you should add ${dependencies[i]} before adding ${type}`;\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _removeCheck(entity: Entity, type: ComponentConstructor) {\n    const invDenpendencies = ComponentsDependencies._invDependenciesMap.get(type);\n    if (invDenpendencies) {\n      for (let i = 0, len = invDenpendencies.length; i < len; i++) {\n        if (entity.getComponent(invDenpendencies[i])) {\n          throw `you should remove ${invDenpendencies[i]} before adding ${type}`;\n        }\n      }\n    }\n  }\n\n  private static _addDependency(\n    currentComponent: ComponentConstructor,\n    dependentComponent: ComponentConstructor,\n    map: Map<any, any>\n  ) {\n    let components = map.get(currentComponent);\n    if (!components) {\n      components = [];\n      map.set(currentComponent, components);\n    }\n    if (components.indexOf(dependentComponent) === -1) {\n      components.push(dependentComponent);\n    }\n  }\n\n  private constructor() {}\n}\n\nexport function dependencies(...abilityClass: ComponentConstructor[]) {\n  return function <T extends ComponentConstructor>(target: T): void {\n    abilityClass.forEach((ability) => ComponentsDependencies.register(target, ability));\n  };\n}\n","/**\n * 层，位运算使用。\n */\nexport enum Layer {\n  Layer0 = 0x1,\n  Layer1 = 0x2,\n  Layer2 = 0x4,\n  Layer3 = 0x8,\n  Layer4 = 0x10,\n  Layer5 = 0x20,\n  Layer6 = 0x40,\n  Layer7 = 0x80,\n  Layer8 = 0x100,\n  Layer9 = 0x200,\n  Layer10 = 0x400,\n  Layer11 = 0x800,\n  Layer12 = 0x1000,\n  Layer13 = 0x2000,\n  Layer14 = 0x4000,\n  Layer15 = 0x8000,\n  Layer16 = 0x10000,\n  Layer17 = 0x20000,\n  Layer18 = 0x40000,\n  Layer19 = 0x80000,\n  Layer20 = 0x100000,\n  Layer21 = 0x200000,\n  Layer22 = 0x400000,\n  Layer23 = 0x800000,\n  Layer24 = 0x1000000,\n  Layer25 = 0x2000000,\n  Layer26 = 0x4000000,\n  Layer27 = 0x8000000,\n  Layer28 = 0x10000000,\n  Layer29 = 0x20000000,\n  Layer30 = 0x40000000,\n  Layer31 = 0x80000000,\n  Everything = 0xffffffff,\n  Nothing = 0x0\n}\n","import { EventDispatcher, MaskList } from \"./base\";\nimport { ignoreClone } from \"./clone/CloneManager\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { Scene } from \"./Scene\";\n\n/**\n * 组件的基类。\n */\nexport abstract class Component extends EventDispatcher {\n  /** @internal */\n  @ignoreClone\n  _entity: Entity;\n  /** @internal */\n  @ignoreClone\n  _destroyed: boolean = false;\n\n  @ignoreClone\n  private _enabled: boolean = true;\n  @ignoreClone\n  private _awaked: boolean = false;\n\n  /**\n   * 是否启用。\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(value: boolean) {\n    if (value === this._enabled) {\n      return;\n    }\n    this._enabled = value;\n    if (value) {\n      this._entity.isActiveInHierarchy && this._onEnable();\n    } else {\n      this._entity.isActiveInHierarchy && this._onDisable();\n    }\n  }\n\n  /**\n   * 是否已经销毁。\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * 所属节点对象。\n   */\n  get entity(): Entity {\n    return this._entity;\n  }\n\n  /**\n   * 所属场景对象。\n   */\n  get scene(): Scene {\n    return this._entity.scene;\n  }\n\n  /**\n   * 所属的 Engine 对象。\n   */\n  get engine(): Engine {\n    return this._entity.engine;\n  }\n\n  constructor(entity: Entity) {\n    super(entity.engine);\n    this._entity = entity;\n\n    this._renderPassFlag = MaskList.EVERYTHING; // @deprecated\n    this._passMasks = [MaskList.EVERYTHING]; // @deprecated\n  }\n\n  /**\n   * 销毁本组件对象\n   */\n  destroy(): void {\n    if (this._destroyed) return;\n    this._entity._removeComponent(this);\n    if (this._entity.isActiveInHierarchy) {\n      this._enabled && this._onDisable();\n      this._onInActive();\n    }\n    this._destroyed = true;\n    this._onDestroy();\n  }\n\n  /**\n   * @internal\n   */\n  _onAwake(): void {}\n\n  /**\n   * @internal\n   */\n  _onEnable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDisable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {}\n\n  /**\n   * @internal\n   */\n  _onActive(): void {}\n\n  /**\n   * @internal\n   */\n  _onInActive(): void {}\n\n  /**\n   * @internal\n   */\n  _setActive(value: boolean): void {\n    if (value) {\n      if (!this._awaked) {\n        this._awaked = true;\n        this._onAwake();\n      }\n      // onAwake can do isActive = false,for example write this in Script's onAwake().\n      if (this._entity._isActiveInHierarchy) {\n        this._onActive();\n        this._enabled && this._onEnable();\n      }\n    } else {\n      this._enabled && this._onDisable();\n      this._onInActive();\n    }\n  }\n\n  //---------------------------------------------Deprecated-----------------------------------------------------------------\n\n  private _renderPriority: number = 0;\n  private _renderPassFlag: MaskList;\n  private _passMasks: MaskList[];\n  private _cullDistanceSq: number = 0; // 等于0，代表不进行 distance cull\n\n  /**\n   * @deprecated\n   * 渲染优先级\n   * @member {number}\n   */\n  get renderPriority(): number {\n    return this._renderPriority;\n  }\n  set renderPriority(val: number) {\n    this._renderPriority = val;\n  }\n\n  /**\n   * @deprecated\n   */\n  get cullDistanceSq(): number {\n    return this._cullDistanceSq;\n  }\n\n  /**\n   * @deprecated\n   */\n  get cullDistance(): number {\n    return Math.sqrt(this._cullDistanceSq);\n  }\n  set cullDistance(val: number) {\n    this._cullDistanceSq = val * val;\n  }\n\n  /**\n   * @deprecated\n   */\n  get renderPassFlag(): MaskList {\n    return this._renderPassFlag;\n  }\n  set renderPassFlag(val: MaskList) {\n    this._renderPassFlag = val;\n  }\n\n  /**\n   * @deprecated\n   * 设置通过的 Pass Mask，\n   * @param  {PassMask} masks 各个 mask\n   */\n  public setPassMasks(...masks: MaskList[]): void {\n    this._passMasks = masks;\n    this._renderPassFlag = masks.reduce((a, b) => a | b, 0);\n  }\n\n  /**\n   * @deprecated\n   * 添加 Mask 到通过列表\n   * @param  {PassMask} masks 各个 mask\n   */\n  public addPassMasks(...masks: MaskList[]): void {\n    for (const mask of masks) {\n      const idx = this._passMasks.indexOf(mask);\n      if (idx < 0) {\n        this._passMasks.push(mask);\n      }\n    }\n\n    this.setPassMasks(...this._passMasks);\n  }\n\n  /**\n   * @deprecated\n   * 从当前的通过列表移除 Mask\n   * @param  {PassMask} masks 各个 mask\n   */\n  public removePassMasks(...masks: MaskList[]): void {\n    for (const mask of masks) {\n      const idx = this._passMasks.indexOf(mask);\n      if (idx > -1) {\n        this._passMasks.splice(idx, 1);\n      }\n    }\n\n    this.setPassMasks(...this._passMasks);\n  }\n}\n","import { removeFromArray } from \"./base/Util\";\n\n/**\n * 由于更新标记。\n */\nexport class UpdateFlag {\n  /** 标记。 */\n  flag = true;\n\n  constructor(private _flags: UpdateFlag[] = []) {}\n\n  /**\n   * 销毁。\n   */\n  destroy(): void {\n    const flags = this._flags;\n    removeFromArray(flags, this);\n    this._flags = null;\n  }\n}\n","import { MathUtil, Matrix, Matrix3x3, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { assignmentClone, deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * 用于实现变换相关功能。\n */\nexport class Transform extends Component {\n  private static _tempQuat0: Quaternion = new Quaternion();\n  private static _tempVec3: Vector3 = new Vector3();\n  private static _tempMat30: Matrix3x3 = new Matrix3x3();\n  private static _tempMat31: Matrix3x3 = new Matrix3x3();\n  private static _tempMat32: Matrix3x3 = new Matrix3x3();\n  private static _tempMat40: Matrix = new Matrix();\n  private static _tempMat41: Matrix = new Matrix();\n  private static _tempMat42: Matrix = new Matrix();\n  private static _tempMat43: Matrix = new Matrix();\n\n  private static _LOCAL_EULER_FLAG: number = 0x1;\n  private static _LOCAL_QUAT_FLAG: number = 0x2;\n  private static _WORLD_POSITION_FLAG: number = 0x4;\n  private static _WORLD_EULER_FLAG: number = 0x8;\n  private static _WORLD_QUAT_FLAG: number = 0x10;\n  private static _WORLD_SCALE_FLAG: number = 0x20;\n  private static _LOCAL_MATRIX_FLAG: number = 0x40;\n  private static _WORLD_MATRIX_FLAG: number = 0x80;\n\n  /** _WORLD_MATRIX_FLAG | _WORLD_POSITION_FLAG */\n  private static _WM_WP_FLAGS: number = 0x84;\n  /** _WORLD_MATRIX_FLAG | _WORLD_EULER_FLAG | _WORLD_QUAT_FLAG */\n  private static _WM_WE_WQ_FLAGS: number = 0x98;\n  /** _WORLD_MATRIX_FLAG | _WORLD_POSITION_FLAG | _WORLD_EULER_FLAG ｜ _WORLD_QUAT_FLAG */\n  private static _WM_WP_WE_WQ_FLAGS: number = 0x9c;\n  /** Transform._WORLD_MATRIX_FLAG | Transform._WORLD_SCALE_FLAG */\n  private static _WM_WS_FLAGS: number = 0xa0;\n  /** Transform._WORLD_MATRIX_FLAG | Transform._WORLD_POSITION_FLAG | Transform._WORLD_SCALE_FLAG */\n  private static _WM_WP_WS_FLAGS: number = 0xa4;\n  /** Transform._WORLD_MATRIX_FLAG | Transform._WORLD_POSITION_FLAG | Transform._WORLD_EULER_FLAG | Transform._WORLD_QUAT_FLAG | Transform._WORLD_SCALE_FLAG */\n  private static _WM_WP_WE_WQ_WS_FLAGS: number = 0xbc;\n\n  @deepClone\n  private _position: Vector3 = new Vector3();\n  @deepClone\n  private _rotation: Vector3 = new Vector3();\n  @deepClone\n  private _rotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _scale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _worldPosition: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotation: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _lossyWorldScale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _localMatrix: Matrix = new Matrix();\n  @deepClone\n  private _worldMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _changeFlags: UpdateFlag[] = [];\n  @ignoreClone\n  private _isParentDirty: boolean = true;\n  @ignoreClone\n  private _parentTransformCache: Transform = null;\n\n  private _dirtyFlag: number = Transform._WM_WP_WE_WQ_WS_FLAGS;\n\n  /**\n   * 局部位置。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      value.cloneTo(this._position);\n    }\n    this._setDirtyFlagTrue(Transform._LOCAL_MATRIX_FLAG);\n    this._updateWorldPositionFlag();\n  }\n\n  /**\n   * 世界位置。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get worldPosition(): Vector3 {\n    if (this._isContainDirtyFlag(Transform._WORLD_POSITION_FLAG)) {\n      if (this._getParentTransform()) {\n        this.worldMatrix.getTranslation(this._worldPosition);\n      } else {\n        this._position.cloneTo(this._worldPosition);\n      }\n      this._setDirtyFlagFalse(Transform._WORLD_POSITION_FLAG);\n    }\n    return this._worldPosition;\n  }\n\n  set worldPosition(value: Vector3) {\n    if (this._worldPosition !== value) {\n      value.cloneTo(this._worldPosition);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat41);\n      Vector3.transformCoordinate(value, Transform._tempMat41, this._position);\n    } else {\n      value.cloneTo(this._position);\n    }\n    this.position = this._position;\n    this._setDirtyFlagFalse(Transform._WORLD_POSITION_FLAG);\n  }\n\n  /**\n   * 局部旋转，欧拉角表达，单位是角度制，欧拉角的旋转顺序为 Yaw、Pitch、Roll。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get rotation(): Vector3 {\n    if (this._isContainDirtyFlag(Transform._LOCAL_EULER_FLAG)) {\n      this._rotationQuaternion.toEuler(this._rotation);\n      this._rotation.scale(MathUtil.radToDegreeFactor); // 弧度转角度\n\n      this._setDirtyFlagFalse(Transform._LOCAL_EULER_FLAG);\n    }\n    return this._rotation;\n  }\n\n  set rotation(value: Vector3) {\n    if (this._rotation !== value) {\n      value.cloneTo(this._rotation);\n    }\n    this._setDirtyFlagTrue(Transform._LOCAL_MATRIX_FLAG | Transform._LOCAL_QUAT_FLAG);\n    this._setDirtyFlagFalse(Transform._LOCAL_EULER_FLAG);\n    this._updateWorldRotationFlag();\n  }\n\n  /**\n   * 世界旋转，欧拉角表达，单位是角度制，欧拉角的旋转顺序为 Yaw、Pitch、Roll。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get worldRotation(): Vector3 {\n    if (this._isContainDirtyFlag(Transform._WORLD_EULER_FLAG)) {\n      this.worldRotationQuaternion.toEuler(this._worldRotation);\n      this._worldRotation.scale(MathUtil.radToDegreeFactor); // 弧度转角度\n      this._setDirtyFlagFalse(Transform._WORLD_EULER_FLAG);\n    }\n    return this._worldRotation;\n  }\n\n  set worldRotation(value: Vector3) {\n    if (this._worldRotation !== value) {\n      value.cloneTo(this._worldRotation);\n    }\n    Quaternion.rotationEuler(\n      MathUtil.degreeToRadian(value.x),\n      MathUtil.degreeToRadian(value.y),\n      MathUtil.degreeToRadian(value.z),\n      this._worldRotationQuaternion\n    );\n    this.worldRotationQuaternion = this._worldRotationQuaternion;\n    this._setDirtyFlagFalse(Transform._WORLD_EULER_FLAG);\n  }\n\n  /**\n   * 局部旋转，四元数表达。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get rotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(Transform._LOCAL_QUAT_FLAG)) {\n      Quaternion.rotationEuler(\n        MathUtil.degreeToRadian(this._rotation.x),\n        MathUtil.degreeToRadian(this._rotation.y),\n        MathUtil.degreeToRadian(this._rotation.z),\n        this._rotationQuaternion\n      );\n      this._setDirtyFlagFalse(Transform._LOCAL_QUAT_FLAG);\n    }\n    return this._rotationQuaternion;\n  }\n\n  set rotationQuaternion(value: Quaternion) {\n    if (this._rotationQuaternion !== value) {\n      value.cloneTo(this._rotationQuaternion);\n    }\n    this._setDirtyFlagTrue(Transform._LOCAL_MATRIX_FLAG | Transform._LOCAL_EULER_FLAG);\n    this._setDirtyFlagFalse(Transform._LOCAL_QUAT_FLAG);\n    this._updateWorldRotationFlag();\n  }\n\n  /**\n   * 世界旋转，四元数表达。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get worldRotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(Transform._WORLD_QUAT_FLAG)) {\n      const parent = this._getParentTransform();\n      if (parent != null) {\n        Quaternion.multiply(parent.worldRotationQuaternion, this.rotationQuaternion, this._worldRotationQuaternion);\n      } else {\n        this.rotationQuaternion.cloneTo(this._worldRotationQuaternion);\n      }\n      this._setDirtyFlagFalse(Transform._WORLD_QUAT_FLAG);\n    }\n    return this._worldRotationQuaternion;\n  }\n\n  set worldRotationQuaternion(value: Quaternion) {\n    if (this._worldRotationQuaternion !== value) {\n      value.cloneTo(this._worldRotationQuaternion);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Quaternion.invert(parent.worldRotationQuaternion, Transform._tempQuat0);\n      Quaternion.multiply(value, Transform._tempQuat0, this._rotationQuaternion);\n    } else {\n      value.cloneTo(this._rotationQuaternion);\n    }\n    this.rotationQuaternion = this._rotationQuaternion;\n    this._setDirtyFlagFalse(Transform._WORLD_QUAT_FLAG);\n  }\n\n  /**\n   * 局部缩放。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get scale(): Vector3 {\n    return this._scale;\n  }\n\n  set scale(value: Vector3) {\n    if (this._scale !== value) {\n      value.cloneTo(this._scale);\n    }\n    this._setDirtyFlagTrue(Transform._LOCAL_MATRIX_FLAG);\n    this._updateWorldScaleFlag();\n  }\n\n  /**\n   * 世界有损缩放。\n   * @remarks 某种条件下获取该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用 Vector3 正确表示,必须使用 Matrix3x3 矩阵才能正确表示。\n   */\n  get lossyWorldScale(): Vector3 {\n    if (this._isContainDirtyFlag(Transform._WORLD_SCALE_FLAG)) {\n      if (this._getParentTransform()) {\n        const scaleMat = this._getScaleMatrix();\n        const e = scaleMat.elements;\n        this._lossyWorldScale.setValue(e[0], e[4], e[8]);\n      } else {\n        this._scale.cloneTo(this._lossyWorldScale);\n      }\n      this._setDirtyFlagFalse(Transform._WORLD_SCALE_FLAG);\n    }\n    return this._lossyWorldScale;\n  }\n\n  /**\n   * 局部矩阵。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get localMatrix(): Matrix {\n    if (this._isContainDirtyFlag(Transform._LOCAL_MATRIX_FLAG)) {\n      Matrix.affineTransformation(this._scale, this.rotationQuaternion, this._position, this._localMatrix);\n      this._setDirtyFlagFalse(Transform._LOCAL_MATRIX_FLAG);\n    }\n    return this._localMatrix;\n  }\n\n  set localMatrix(value: Matrix) {\n    if (this._localMatrix !== value) {\n      value.cloneTo(this._localMatrix);\n    }\n    this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale);\n    this._setDirtyFlagTrue(Transform._LOCAL_EULER_FLAG);\n    this._setDirtyFlagFalse(Transform._LOCAL_MATRIX_FLAG);\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * 世界矩阵。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get worldMatrix(): Matrix {\n    if (this._isContainDirtyFlag(Transform._WORLD_MATRIX_FLAG)) {\n      const parent = this._getParentTransform();\n      if (parent) {\n        Matrix.multiply(parent.worldMatrix, this.localMatrix, this._worldMatrix);\n      } else {\n        this.localMatrix.cloneTo(this._worldMatrix);\n      }\n      this._setDirtyFlagFalse(Transform._WORLD_MATRIX_FLAG);\n    }\n    return this._worldMatrix;\n  }\n\n  set worldMatrix(value: Matrix) {\n    if (this._worldMatrix !== value) {\n      value.cloneTo(this._worldMatrix);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat42);\n      Matrix.multiply(value, Transform._tempMat42, this._localMatrix);\n    } else {\n      value.cloneTo(this._localMatrix);\n    }\n    this.localMatrix = this._localMatrix;\n    this._setDirtyFlagFalse(Transform._WORLD_MATRIX_FLAG);\n  }\n\n  /**\n   * 通过位置的 X Y Z 设置局部位置。\n   * @param x - 位置的 X 坐标\n   * @param y - 位置的 Y 坐标\n   * @param z - 位置的 Z 坐标\n   */\n  setPosition(x: number, y: number, z: number): void {\n    this._position.setValue(x, y, z);\n    this.position = this._position;\n  }\n\n  /**\n   * 通过欧拉角的 X、Y、Z 分量设置局部旋转，单位是角度制，欧拉角的旋转顺序为 Yaw、Pitch、Roll。\n   * @param x - 绕 X 轴旋转的角度\n   * @param y - 绕 Y 轴旋转的角度\n   * @param z - 绕 Z 轴旋转的角度\n   */\n  setRotation(x: number, y: number, z: number): void {\n    this._rotation.setValue(x, y, z);\n    this.rotation = this._rotation;\n  }\n\n  /**\n   * 通过四元数的 X、Y、Z、W 分量设置局部旋转。\n   * @param x - 四元数的 X 分量\n   * @param y - 四元数的 Y 分量\n   * @param z - 四元数的 Z 分量\n   * @param w - 四元数的 W 分量\n   */\n  setRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._rotationQuaternion.setValue(x, y, z, w);\n    this.rotationQuaternion = this._rotationQuaternion;\n  }\n\n  /**\n   * 通过沿 X、Y、Z 的缩放值设置局部缩放。\n   * @param x - 沿 X 缩放\n   * @param y - 沿 Y 缩放\n   * @param z - 沿 Z 缩放\n   */\n  setScale(x: number, y: number, z: number): void {\n    this._scale.setValue(x, y, z);\n    this.scale = this._scale;\n  }\n\n  /**\n   * 通过位置的 X Y Z 设置世界位置。\n   * @param x - 位置的 X 坐标\n   * @param y - 位置的 Y 坐标\n   * @param z - 位置的 Z 坐标\n   */\n  setWorldPosition(x: number, y: number, z: number): void {\n    this._worldPosition.setValue(x, y, z);\n    this.worldPosition = this._worldPosition;\n  }\n\n  /**\n   * 通过欧拉角的 X、Y、Z 分量设置世界旋转，单位是角度制，欧拉角的旋转顺序为 Yaw、Pitch、Roll。\n   * @param x - 绕 X 轴旋转的角度\n   * @param y - 绕 Y 轴旋转的角度\n   * @param z - 绕 Z 轴旋转的角度\n   */\n  setWorldRotation(x: number, y: number, z: number): void {\n    this._worldRotation.setValue(x, y, z);\n    this.worldRotation = this._worldRotation;\n  }\n\n  /**\n   * 通过四元数的 X、Y、Z、W 分量设置世界旋转。\n   * @param x - 四元数的 X 分量\n   * @param y - 四元数的 Y 分量\n   * @param z - 四元数的 Z 分量\n   * @param w - 四元数的 W 分量\n   */\n  setWorldRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._worldRotationQuaternion.setValue(x, y, z, w);\n    this.worldRotationQuaternion = this._worldRotationQuaternion;\n  }\n\n  /**\n   * 获取世界矩阵的前向量。\n   * @param forward - 前向量\n   * @returns 前向量\n   */\n  getWorldForward(forward: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    forward.setValue(-e[8], -e[9], -e[10]);\n    return forward.normalize();\n  }\n\n  /**\n   * 获取世界矩阵的右向量。\n   * @param right - 右向量\n   * @returns 右向量\n   */\n  getWorldRight(right: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    right.setValue(e[0], e[1], e[2]);\n    return right.normalize();\n  }\n\n  /**\n   * 获取世界矩阵的上向量。\n   * @param up - 上向量\n   * @returns 上向量\n   */\n  getWorldUp(up: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    up.setValue(e[4], e[5], e[6]);\n    return up.normalize();\n  }\n\n  /**\n   * 在指定的方向和距离上位移。\n   * @param translation - 位移的方向和距离\n   * @param relativeToLocal - 是否相对局部空间\n   */\n  translate(translation: Vector3, relativeToLocal: boolean = true): void {\n    if (relativeToLocal) {\n      const rotationMat = Transform._tempMat40;\n      Matrix.rotationQuaternion(this.rotationQuaternion, rotationMat);\n      Vector3.transformCoordinate(translation, rotationMat, Transform._tempVec3);\n      this.position = this._position.add(Transform._tempVec3);\n    } else {\n      this.worldPosition = this._worldPosition.add(translation);\n    }\n  }\n\n  /**\n   * 在指定的方向和距离上位移。\n   * @param x - X 轴的位移的方向和距离\n   * @param y - Y 轴的位移的方向和距离\n   * @param z - Z 轴的位移的方向和距离\n   * @param relativeToLocal - 是否相对局部空间\n   */\n  translateXYZ(x: number, y: number, z: number, relativeToLocal: boolean = true): void {\n    const translate = Transform._tempVec3;\n    translate.setValue(x, y, z);\n    this.translate(translate, relativeToLocal);\n  }\n\n  /**\n   * 根据指定欧拉角旋转。\n   * @param rotation - 旋转角度，欧拉角表达，单位是角度制\n   * @param relativeToLocal - 是否相对局部空间\n   */\n  rotate(rotation: Vector3, relativeToLocal: boolean = true): void {\n    this.rotateXYZ(rotation.x, rotation.y, rotation.z, relativeToLocal);\n  }\n\n  /**\n   * 根据指定欧拉角旋转。\n   * @param x - X 轴旋转角度,单位是角度制\n   * @param y - Y 轴旋转角度,单位是角度制\n   * @param z - Z 轴旋转角度,单位是角度制\n   * @param relativeToLocal - 是否相对局部空间\n   */\n  rotateXYZ(x: number, y: number, z: number, relativeToLocal: boolean = true): void {\n    const radFactor = MathUtil.degreeToRadFactor;\n    const rotQuat = Transform._tempQuat0;\n    Quaternion.rotationEuler(x * radFactor, y * radFactor, z * radFactor, rotQuat);\n    this._rotateByQuat(rotQuat, relativeToLocal);\n  }\n\n  /**\n   * 根据指定角度围绕指定轴进行旋转。\n   * @param axis - 旋转轴\n   * @param angle - 旋转角度，单位是角度制\n   * @param relativeToLocal - 是否相对局部空间\n   */\n  rotateByAxis(axis: Vector3, angle: number, relativeToLocal: boolean = true): void {\n    const rad = angle * MathUtil.degreeToRadFactor;\n    Quaternion.rotationAxisAngle(axis, rad, Transform._tempQuat0);\n    this._rotateByQuat(Transform._tempQuat0, relativeToLocal);\n  }\n\n  /**\n   * 旋转并且保证世界前向量指向目标世界位置。\n   * @param worldPosition - 目标世界位置\n   * @param worldUp - 世界上向量，默认是 Vector3(0, 1, 0)\n   */\n  lookAt(worldPosition: Vector3, worldUp?: Vector3): void {\n    const position = this.worldPosition;\n    const EPSILON = MathUtil.zeroTolerance;\n    if (\n      Math.abs(position.x - worldPosition.x) < EPSILON &&\n      Math.abs(position.y - worldPosition.y) < EPSILON &&\n      Math.abs(position.z - worldPosition.z) < EPSILON\n    ) {\n      return;\n    }\n    const rotMat = Transform._tempMat43;\n    const worldRotationQuaternion = this._worldRotationQuaternion;\n\n    worldUp = worldUp ?? Transform._tempVec3.setValue(0, 1, 0);\n    Matrix.lookAt(position, worldPosition, worldUp, rotMat);\n    rotMat.getRotation(worldRotationQuaternion).invert();\n    this.worldRotationQuaternion = worldRotationQuaternion;\n  }\n\n  /**\n   * 注册世界变换改变标记。\n   * @returns 改变标记\n   */\n  registerWorldChangeFlag(): UpdateFlag {\n    const flag = new UpdateFlag(this._changeFlags);\n    this._changeFlags.push(flag);\n    return flag;\n  }\n\n  /**\n   * @internal\n   */\n  _parentChange(): void {\n    this._isParentDirty = true;\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * 获取 worldMatrix：会触发自身以及所有父节点的worldMatrix更新\n   * 获取 worldPosition：会触发自身 position 和自身 worldMatrix 以及所有父节点的 worldMatrix 更新\n   * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix）的脏标记为 false\n   */\n  private _updateWorldPositionFlag(): void {\n    if (!this._isContainDirtyFlags(Transform._WM_WP_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WP_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionFlag();\n      }\n    }\n  }\n\n  /**\n   * 获取worldMatrix：会触发自身以及所有父节点的worldMatrix更新\n   * 获取worldPosition：会触发自身position和自身worldMatrix以及所有父节点的worldMatrix更新\n   * 获取worldRotationQuaternion：会触发自身以及所有父节点的worldRotationQuaternion更新\n   * 获取worldRotation：会触发自身worldRotation和自身worldRotationQuaternion以及所有父节点的worldRotationQuaternion更新\n   * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix或orldRotationQuaternion）的脏标记为false\n   */\n  private _updateWorldRotationFlag() {\n    if (!this._isContainDirtyFlags(Transform._WM_WE_WQ_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WE_WQ_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag(); //父节点旋转发生变化，子节点的世界位置和旋转都需要更新\n      }\n    }\n  }\n\n  /**\n   * 获取 worldMatrix：会触发自身以及所有父节点的 worldMatrix 更新\n   * 获取 worldPosition：会触发自身 position 和自身 worldMatrix 以及所有父节点的 worldMatrix 更新\n   * 获取 worldRotationQuaternion：会触发自身以及所有父节点的 worldRotationQuaternion 更新\n   * 获取 worldRotation：会触发自身 worldRotation 和自身 worldRotationQuaternion 以及所有父节点的worldRotationQuaternion更新\n   * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix 或 worldRotationQuaternion）的脏标记为false\n   */\n  private _updateWorldPositionAndRotationFlag() {\n    if (!this._isContainDirtyFlags(Transform._WM_WP_WE_WQ_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WP_WE_WQ_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag();\n      }\n    }\n  }\n\n  /**\n   * 获取 worldMatrix：会触发自身以及所有父节点的 worldMatrix 更新\n   * 获取 worldPosition：会触发自身 position 和自身 worldMatrix 以及所有父节点的 worldMatrix 更新\n   * 获取 worldScale：会触发自身以及所有父节点的 worldMatrix 更新\n   * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix）的脏标记为 false。\n   */\n  private _updateWorldScaleFlag() {\n    if (!this._isContainDirtyFlags(Transform._WM_WS_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WS_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * 获取 worldMatrix：会触发自身以及所有父节点的 worldMatrix 更新\n   * 获取 worldPosition：会触发自身 position 和自身 worldMatrix 以及所有父节点的 worldMatrix 更新\n   * 获取 worldScale：会触发自身以及所有父节点的worldMatrix更新\n   * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix）的脏标记为 false。\n   */\n  private _updateWorldPositionAndScaleFlag(): void {\n    if (!this._isContainDirtyFlags(Transform._WM_WP_WS_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WP_WS_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * 更新所有世界标记，原理同上。\n   */\n  private _updateAllWorldFlag(): void {\n    if (!this._isContainDirtyFlags(Transform._WM_WP_WE_WQ_WS_FLAGS)) {\n      this._worldAssociatedChange(Transform._WM_WP_WE_WQ_WS_FLAGS);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateAllWorldFlag();\n      }\n    }\n  }\n\n  private _getParentTransform(): Transform | null {\n    if (!this._isParentDirty) {\n      return this._parentTransformCache;\n    }\n    let parentCache: Transform = null;\n    let parent = this._entity.parent;\n    while (parent) {\n      const transform = parent.transform;\n      if (transform) {\n        parentCache = transform;\n        break;\n      } else {\n        parent = parent.parent;\n      }\n    }\n    this._parentTransformCache = parentCache;\n    this._isParentDirty = false;\n    return parentCache;\n  }\n\n  private _getScaleMatrix(): Matrix3x3 {\n    const invRotation = Transform._tempQuat0;\n    const invRotationMat = Transform._tempMat30;\n    const worldRotScaMat = Transform._tempMat31;\n    const scaMat = Transform._tempMat32;\n    worldRotScaMat.setValueByMatrix(this.worldMatrix);\n    Quaternion.invert(this.worldRotationQuaternion, invRotation);\n    Matrix3x3.rotationQuaternion(invRotation, invRotationMat);\n    Matrix3x3.multiply(invRotationMat, worldRotScaMat, scaMat);\n    return scaMat;\n  }\n\n  private _isContainDirtyFlags(targetDirtyFlags: number): boolean {\n    return (this._dirtyFlag & targetDirtyFlags) === targetDirtyFlags;\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number) {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number) {\n    this._dirtyFlag &= ~type;\n  }\n\n  private _worldAssociatedChange(type: number): void {\n    this._dirtyFlag |= type;\n    const len = this._changeFlags.length;\n    for (let i = len - 1; i >= 0; i--) {\n      this._changeFlags[i].flag = true;\n    }\n  }\n\n  private _rotateByQuat(rotateQuat: Quaternion, relativeToLocal: boolean) {\n    if (relativeToLocal) {\n      Quaternion.multiply(this.rotationQuaternion, rotateQuat, this._rotationQuaternion);\n      this.rotationQuaternion = this._rotationQuaternion;\n    } else {\n      Quaternion.multiply(this.worldRotationQuaternion, rotateQuat, this._worldRotationQuaternion);\n      this.worldRotationQuaternion = this._worldRotationQuaternion;\n    }\n  }\n}\n","import { Matrix, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { EventDispatcher } from \"./base\";\nimport { ComponentCloner } from \"./clone/ComponentCloner\";\nimport { Component } from \"./Component\";\nimport { ComponentsDependencies } from \"./ComponentsDependencies\";\nimport { DisorderedArray } from \"./DisorderedArray\";\nimport { Engine } from \"./Engine\";\nimport { Layer } from \"./Layer\";\nimport { Scene } from \"./Scene\";\nimport { Transform } from \"./Transform\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * 实体,可作为组件的容器。\n */\nexport class Entity extends EventDispatcher {\n  private static _entitys: DisorderedArray<Entity> = new DisorderedArray();\n\n  /**\n   * 根据名字全局查找实体。\n   * @param name - 名字\n   * @returns 实体\n   */\n  static findByName(name: string): Entity {\n    const entitys = Entity._entitys;\n    const elements = entitys._elements;\n    for (let i = entitys.length - 1; i >= 0; i--) {\n      const entity = elements[i];\n      if (entity.name === name) {\n        return entity;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 根据路径全局查找实体，使用‘/’符号作为路径分割符。\n   * @deprecated use scene find by path instead.\n   * @param scene - 查找场景\n   * @param path - 路径\n   * @returns 实体\n   */\n  static findByPath(scene: Scene, path: string): Entity | null {\n    return scene.findEntityByPath(path);\n  }\n\n  /**\n   * @internal\n   */\n  static _findChildByName(root: Entity, name: string): Entity {\n    const children = root._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  static _traverseSetOwnerScene(entity: Entity, scene: Scene): void {\n    entity._scene = scene;\n    const children = entity._children;\n    for (let i = entity.childCount - 1; i >= 0; i--) {\n      this._traverseSetOwnerScene(children[i], scene);\n    }\n  }\n\n  /* 名字。*/\n  name: string;\n  /** 实体所属层级。 */\n  layer: Layer = Layer.Layer0;\n  /* 变换。*/\n  readonly transform: Transform;\n\n  /** @internal */\n  _isActiveInHierarchy: boolean = false;\n  /** @internal */\n  _components: Component[] = [];\n  /** @internal */\n  _children: Entity[] = [];\n  /** @internal */\n  _scene: Scene;\n  /** @internal */\n  _isRoot: boolean = false;\n  /** @internal */\n  _isActive: boolean = true;\n\n  private _parent: Entity = null;\n  private _activeChangedComponents: Component[];\n\n  /**\n   * 是否局部激活。\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  set isActive(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      if (value) {\n        const parent = this._parent;\n        if (parent?._isActiveInHierarchy || (this._isRoot && this._scene._isActiveInEngine)) {\n          this._processActive();\n        }\n      } else {\n        if (this._isActiveInHierarchy) {\n          this._processInActive();\n        }\n      }\n    }\n  }\n\n  /**\n   * 在层级中是否处于激活状态。\n   */\n  get isActiveInHierarchy(): boolean {\n    return this._isActiveInHierarchy;\n  }\n\n  /**\n   * 父实体。\n   */\n  get parent(): Entity {\n    return this._parent;\n  }\n\n  set parent(entity: Entity) {\n    if (entity !== this._parent) {\n      const oldParent = this._removeFromParent();\n      const newParent = (this._parent = entity);\n      if (newParent) {\n        newParent._children.push(this);\n        const parentScene = newParent._scene;\n        if (this._scene !== parentScene) {\n          Entity._traverseSetOwnerScene(this, parentScene);\n        }\n\n        if (newParent._isActiveInHierarchy) {\n          !this._isActiveInHierarchy && this._isActive && this._processActive();\n        } else {\n          this._isActiveInHierarchy && this._processInActive();\n        }\n      } else {\n        this._isActiveInHierarchy && this._processInActive();\n        if (oldParent) {\n          Entity._traverseSetOwnerScene(this, null);\n        }\n      }\n      this._setTransformDirty();\n    }\n  }\n\n  /**\n   * 子实体集合。\n   */\n  get children(): Readonly<Entity[]> {\n    return this._children;\n  }\n\n  /**\n   * 子实体数量。\n   */\n  get childCount(): number {\n    return this._children.length;\n  }\n\n  /**\n   * 所属的场景对象。\n   */\n  get scene(): Scene {\n    return this._scene;\n  }\n\n  /**\n   * 所属引擎。\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  /**\n   * 创建一个实体。\n   * @param engine - 所属 Engine\n   * @param name - 名字\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    Entity._entitys.add(this);\n    this.name = name;\n    this.transform = this.addComponent(Transform);\n    this._inverseWorldMatFlag = this.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * 根据组件类型添加组件。\n   * @param type - 组件类型\n   * @returns\t组件实例\n   */\n  addComponent<T extends Component>(type: new (entity: Entity) => T): T {\n    ComponentsDependencies._addCheck(this, type);\n    const component = new type(this);\n    this._components.push(component);\n    if (this._isActiveInHierarchy) {\n      component._setActive(true);\n    }\n    return component;\n  }\n\n  /**\n   * 根据组件类型获取组件。\n   * @param type - 组件类型\n   * @returns\t组件\n   */\n  getComponent<T extends Component>(type: new (entity: Entity) => T): T {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        return component;\n      }\n    }\n  }\n\n  /**\n   * 根据组件类型获取组件集合。\n   * @param type - 组件类型\n   * @param results - 组件集合\n   * @returns\t组件集合\n   */\n  getComponents<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * 根据组件类型获取自身和所有子实体的组件集合。\n   * @param type - 组件类型\n   * @param results - 组件集合\n   * @returns\t组件集合\n   */\n  getComponentsIncludeChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    this._getComponentsIncludeChildren<T>(type, results);\n    return results;\n  }\n\n  /**\n   * 添加子实体。\n   * @param child - 子实体\n   */\n  addChild(child: Entity): void {\n    child.parent = this;\n  }\n\n  /**\n   * 删除子实体。\n   * @param child - 子实体\n   */\n  removeChild(child: Entity): void {\n    child.parent = null;\n  }\n\n  /**\n   * 根据索引获取子实体。\n   * @param index - 索引\n   * @returns 实体\n   */\n  getChild(index: number): Entity {\n    return this._children[index];\n  }\n\n  /**\n   * 根据名字查找子实体。\n   * @param name - 名字\n   * @returns 实体\n   */\n  findByName(name: string): Entity {\n    const children = this._children;\n    const child = Entity._findChildByName(this, name);\n    if (child) return child;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      const grandson = child.findByName(name);\n      if (grandson) {\n        return grandson;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 根据路径查找实体，使用‘/’符号作为路径分割符。\n   * @param path - 路径\n   * @returns 实体\n   */\n  findByPath(path: string): Entity {\n    const splits = path.split(\"/\");\n    let entity: Entity = this;\n    for (let i = 0, length = splits.length; i < length; ++i) {\n      const split = splits[i];\n      if (split) {\n        entity = Entity._findChildByName(entity, split);\n        if (!entity) {\n          return null;\n        }\n      }\n    }\n    return entity;\n  }\n\n  /**\n   * 创建子实体。\n   * @param name - 名称\n   * @returns 子实体\n   */\n  createChild(name?: string): Entity {\n    const child = new Entity(this.engine, name);\n    child.layer = this.layer;\n    child.parent = this;\n    return child;\n  }\n\n  /**\n   * 清空子实体。\n   */\n  clearChildren(): void {\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      child._parent = null;\n      child._isActiveInHierarchy && child._processInActive();\n      Entity._traverseSetOwnerScene(child, null); // must after child._processInActive()\n    }\n    children.length = 0;\n  }\n\n  /**\n   * 克隆。\n   * @returns 克隆的实体\n   */\n  clone(): Entity {\n    const cloneEntity = new Entity(this._engine, this.name);\n\n    cloneEntity._isActive = this._isActive;\n    cloneEntity.transform.localMatrix = this.transform.localMatrix;\n\n    const children = this._children;\n    for (let i = 0, len = this._children.length; i < len; i++) {\n      const child = children[i];\n      cloneEntity.addChild(child.clone());\n    }\n\n    const components = this._components;\n    for (let i = 0, n = components.length; i < n; i++) {\n      const sourceComp = components[i];\n      if (!(sourceComp instanceof Transform)) {\n        const targetComp = cloneEntity.addComponent(<new (entity: Entity) => Component>sourceComp.constructor);\n        ComponentCloner.cloneComponent(sourceComp, targetComp);\n      }\n    }\n\n    return cloneEntity;\n  }\n\n  /**\n   * 销毁。\n   */\n  destroy(): void {\n    const abilityArray = this._components;\n    for (let i = abilityArray.length - 1; i >= 0; i--) {\n      abilityArray[i].destroy();\n    }\n    this._components.length = 0;\n\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      children[i].destroy();\n    }\n    this._children.length = 0;\n\n    if (this._parent != null) {\n      const parentChildren = this._parent._children;\n      parentChildren.splice(parentChildren.indexOf(this), 1);\n    }\n    this._parent = null;\n    Entity._entitys.delete(this);\n  }\n\n  /**\n   * @internal\n   */\n  _removeComponent(component: Component): void {\n    ComponentsDependencies._removeCheck(this, component.constructor as any);\n    const components = this._components;\n    components.splice(components.indexOf(component), 1);\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromParent(): Entity {\n    const oldParent = this._parent;\n    if (oldParent != null) {\n      const oldParentChildren = oldParent._children;\n      oldParentChildren.splice(oldParentChildren.indexOf(this), 1);\n      this._parent = null;\n    }\n    return oldParent;\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main inActive entity' active in hierarchy, if the operation is in main inActive entity or it's children script's onDisable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(true);\n  }\n\n  /**\n   * @internal\n   */\n  _processInActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main active entity' inActive in hierarchy, if the operation is in main active entity or it's children script's onEnable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setInActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(false);\n  }\n\n  private _getComponentsIncludeChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): void {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    for (let i = this._children.length - 1; i >= 0; i--) {\n      this._children[i]._getComponentsIncludeChildren<T>(type, results);\n    }\n  }\n\n  private _setActiveComponents(isActive: boolean): void {\n    const activeChangedComponents = this._activeChangedComponents;\n    for (let i = 0, length = activeChangedComponents.length; i < length; ++i) {\n      activeChangedComponents[i]._setActive(isActive);\n    }\n    this._engine._componentsManager.putActiveChangedTempList(activeChangedComponents);\n    this._activeChangedComponents = null;\n  }\n\n  private _setActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = true;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      activeChangedComponents.push(components[i]);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child: Entity = children[i];\n      child.isActive && child._setActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setInActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = false;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      activeChangedComponents.push(components[i]);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child: Entity = children[i];\n      child.isActive && child._setInActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setTransformDirty() {\n    if (this.transform) {\n      this.transform._parentChange();\n    } else {\n      for (let i = 0, len = this._children.length; i < len; i++) {\n        this._children[i]._setTransformDirty();\n      }\n    }\n  }\n\n  //--------------------------------------------------------------deprecated----------------------------------------------------------------\n  private _invModelMatrix: Matrix = new Matrix();\n  private _inverseWorldMatFlag: UpdateFlag;\n\n  /**\n   * @deprecated\n   * 请使用 transform.position 代替。\n   */\n  get position(): Vector3 {\n    return this.transform.position;\n  }\n\n  set position(val: Vector3) {\n    this.transform.position = val;\n  }\n\n  /**\n   * @deprecated\n   * 请使用 transform.worldPosition 代替\n   */\n  get worldPosition(): Vector3 {\n    return this.transform.worldPosition;\n  }\n\n  set worldPosition(val: Vector3) {\n    this.transform.worldPosition = val;\n  }\n\n  /**\n   * @deprecated\n   * 请使用 transform.rotationQuaternion 代替\n   */\n  get rotation(): Quaternion {\n    return this.transform.rotationQuaternion;\n  }\n\n  set rotation(val: Quaternion) {\n    this.transform.rotationQuaternion = val;\n  }\n\n  /**\n   * @deprecated\n   * 请使用 transform.scale 代替\n   */\n  get scale(): Vector3 {\n    return this.transform.scale;\n  }\n\n  set scale(val: Vector3) {\n    this.transform.scale = val;\n  }\n\n  /**\n   * @deprecated\n   */\n  getInvModelMatrix(): Matrix {\n    if (this._inverseWorldMatFlag.flag) {\n      Matrix.invert(this.transform.worldMatrix, this._invModelMatrix);\n      this._inverseWorldMatFlag.flag = false;\n    }\n    return this._invModelMatrix;\n  }\n}\n","import { SceneFeature } from \"./SceneFeature\";\nimport { EngineFeature } from \"./EngineFeature\";\nimport { Scene } from \"./Scene\";\nimport { Engine } from \"./Engine\";\n\n/**\n * 管理一组功能特性对象\n * @class\n */\nexport class FeatureManager<T extends EngineFeature | SceneFeature> {\n  private _features: Array<new (engine: Engine) => T> = [];\n\n  private _objects = [];\n\n  /**\n   * 注册一个功能特性\n   * @param {SceneFeature|EngineFeature} Feature\n   */\n  public registerFeature(IFeature: new () => T): void {\n    const featureArray = this._features;\n\n    // -- 按照 type 查找，避免重复添加\n    for (let i = 0, len = featureArray.length; i < len; i++) {\n      if (featureArray[i] === IFeature) {\n        return;\n      }\n    }\n\n    // -- 添加到全局数组\n    featureArray.push(IFeature);\n\n    // -- 添加到现有场景实例中\n    const objectArray = this._objects;\n    for (let i = 0, len = objectArray.length; i < len; i++) {\n      objectArray[i].features.push(new IFeature());\n    }\n  }\n\n  /**\n   * 添加一个具有功能特性的对象\n   * @param {Scene|Engine} obj\n   */\n  public addObject(obj: Scene | Engine): void {\n    obj.features = [];\n    for (let i = 0, len = this._features.length; i < len; i++) {\n      obj.features.push(new this._features[i]((<any>obj).engine ?? <any>obj) as any);\n    }\n    this._objects.push(obj);\n  }\n\n  /**\n   * 调用功能特性的指定方法\n   * @param {Scene|Engine} obj\n   * @param {string} method\n   * @param {Array} args\n   */\n  public callFeatureMethod(obj: Scene | Engine, method: string, args: any[]): void {\n    const features = obj.features;\n    const count = features.length;\n\n    for (let i = 0; i < count; i++) {\n      const feature = features[i];\n      if (feature[method]) {\n        feature[method].apply(feature, args);\n      }\n    }\n  }\n\n  /**\n   * 查找特性\n   * @param {Scene|Engine} obj\n   * @param {SceneFeature|EngineFeature} feature\n   */\n\n  public findFeature(obj: Scene | Engine, IFeature: new () => T): T {\n    const features = obj.features;\n    const count = features.length;\n\n    for (let i = 0; i < count; i++) {\n      const feature = features[i];\n      if (feature.constructor === (IFeature as any)) {\n        return feature as any;\n      }\n    }\n    return undefined;\n  }\n}\n","import { Primitive } from \"../graphic\";\nimport { SubPrimitive } from \"../graphic/SubPrimitive\";\nimport { Material } from \"../material/Material\";\nimport { RenderableComponent } from \"../RenderableComponent\";\n\n/**\n * 渲染元素。\n */\nexport class RenderElement {\n  private static _elementPoolIndex: number = 0;\n  private static _elementPool: RenderElement[] = [];\n\n  /**\n   * 从池中获取渲染元素。\n   * @remark 返回值当帧有效，下一帧会自动回收再利用。\n   */\n  static getFromPool(): RenderElement {\n    const { _elementPoolIndex: index, _elementPool: pool } = RenderElement;\n    RenderElement._elementPoolIndex++;\n    if (pool.length === index) {\n      const element = new RenderElement();\n      pool.push(element);\n      return element;\n    } else {\n      return pool[index];\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _restPool() {\n    RenderElement._elementPoolIndex = 0;\n  }\n\n  /** 可渲染组件。 */\n  component: RenderableComponent;\n  /** 图元。 */\n  primitive: Primitive;\n  /** 子图元。 */\n  subPrimitive: SubPrimitive;\n  /** 材质。 */\n  material: Material;\n\n  setValue(component: RenderableComponent, primitive: Primitive, subPrimitive: SubPrimitive, material: Material): void {\n    this.component = component;\n    this.primitive = primitive;\n    this.subPrimitive = subPrimitive;\n    this.material = material;\n  }\n}\n","import { Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { EventDispatcher, Logger, MaskList } from \"./base\";\nimport { Camera } from \"./Camera\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { FeatureManager } from \"./FeatureManager\";\nimport { SceneFeature } from \"./SceneFeature\";\n\n/**\n * 场景。\n */\nexport class Scene extends EventDispatcher {\n  static sceneFeatureManager = new FeatureManager<SceneFeature>();\n\n  /** 场景名字 */\n  name: string;\n  /**\n   * @private\n   * @deprecated\n   * @todo: migrate to camera\n   * 裁剪面，平面方程组。裁剪面以下的片元将被剔除绘制\n   * @example\n   * scene.clipPlanes = [[0,1,0,0]];\n   * */\n  clipPlanes: Vector4[] = [];\n  _activeCameras: Camera[] = [];\n  _isActiveInEngine: boolean = false;\n\n  private _destroyed: boolean = false;\n  private _rootEntities: Entity[] = [];\n\n  /**\n   * 当前的所属 Engine。\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  /**\n   * 根实体的数量。\n   */\n  get rootEntitiesCount(): number {\n    return this._rootEntities.length;\n  }\n\n  /**\n   * 根实体集合。\n   */\n  get rootEntities(): Readonly<Entity[]> {\n    return this._rootEntities;\n  }\n\n  /**\n   * 是否已销毁。\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * 创建场景。\n   * @param engine - 引擎\n   * @param name - 名称\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name || \"\";\n\n    Scene.sceneFeatureManager.addObject(this);\n  }\n\n  /**\n   * 创建根实体。\n   * @param name - 实体名称\n   * @returns 实体\n   */\n  createRootEntity(name?: string): Entity {\n    const entity = new Entity(this._engine, name);\n    this.addRootEntity(entity);\n    return entity;\n  }\n\n  /**\n   * 添加根实体。\n   * @param entity - 根实体\n   */\n  addRootEntity(entity: Entity): void {\n    const isRoot = entity._isRoot;\n\n    //let entity become root\n    if (!isRoot) {\n      entity._isRoot = true;\n      entity._removeFromParent();\n    }\n\n    //add or remove from scene's rootEntities\n    const oldScene = entity._scene;\n    if (oldScene !== this) {\n      if (oldScene && isRoot) {\n        oldScene._removeEntity(entity);\n      }\n      this._rootEntities.push(entity);\n      Entity._traverseSetOwnerScene(entity, this);\n    } else if (!isRoot) {\n      this._rootEntities.push(entity);\n    }\n\n    //process entity active/inActive\n    if (this._isActiveInEngine) {\n      !entity._isActiveInHierarchy && entity._isActive && entity._processActive();\n    } else {\n      entity._isActiveInHierarchy && entity._processInActive();\n    }\n  }\n\n  /**\n   * 移除根实体。\n   * @param entity - 根实体\n   */\n  removeRootEntity(entity: Entity): void {\n    if (entity._isRoot && entity._scene == this) {\n      this._removeEntity(entity);\n      this._isActiveInEngine && entity._processInActive();\n      Entity._traverseSetOwnerScene(entity, null);\n    }\n  }\n\n  /**\n   * 通过索引获取根实体。\n   * @param index - 索引\n   */\n  getRootEntity(index: number = 0): Entity | null {\n    return this._rootEntities[index];\n  }\n\n  /**\n   * 根据名字全局查找实体。\n   * @param name - 实体名称\n   * @returns 实体\n   */\n  findEntityByName(name: string): Entity | null {\n    const children = this._rootEntities;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      const entity = child.findByName(name);\n      if (entity) {\n        return entity;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 根据路径全局查找实体，使用‘/’符号作为路径分割符。\n   * @param path - 实体路径\n   * @returns 实体\n   */\n  findEntityByPath(path: string): Entity | null {\n    const splits = path.split(\"/\").filter(Boolean);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      let findEntity = this.getRootEntity(i);\n      if (findEntity.name != splits[0]) continue;\n      for (let j = 1, m = splits.length; j < m; ++j) {\n        findEntity = Entity._findChildByName(findEntity, splits[j]);\n        if (!findEntity) break;\n      }\n      return findEntity;\n    }\n    return null;\n  }\n\n  /**\n   * 销毁场景。\n   */\n  destroy(): void {\n    this._isActiveInEngine && (this._engine.sceneManager.activeScene = null);\n    Scene.sceneFeatureManager.callFeatureMethod(this, \"destroy\", [this]);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      this._rootEntities[i].destroy();\n    }\n    this._rootEntities.length = 0;\n    this._activeCameras.length = 0;\n    (Scene.sceneFeatureManager as any)._objects = [];\n    this._destroyed = true;\n  }\n\n  /**\n   * 向当前场景注册一个摄像机对象\n   * @param {CameraComponent} camera 摄像机对象\n   * @private\n   */\n  attachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index === -1) {\n      this._activeCameras.push(camera);\n    } else {\n      Logger.warn(\"Camera already attached.\");\n    }\n  }\n\n  /**\n   * 从当前场景移除一个摄像机对象\n   * @param {CameraComponent} camera 摄像机对象\n   * @private\n   */\n  detachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index !== -1) {\n      this._activeCameras.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(active: boolean): void {\n    this._isActiveInEngine = active;\n    const rootEntities = this._rootEntities;\n    for (let i = rootEntities.length - 1; i >= 0; i--) {\n      const entity = rootEntities[i];\n      if (entity._isActive) {\n        active ? entity._processActive() : entity._processInActive();\n      }\n    }\n  }\n\n  private _removeEntity(entity: Entity): void {\n    const oldRootEntities = this._rootEntities;\n    oldRootEntities.splice(oldRootEntities.indexOf(entity), 1);\n  }\n\n  //-----------------------------------------@deprecated-----------------------------------\n  static registerFeature(Feature: new () => SceneFeature) {\n    Scene.sceneFeatureManager.registerFeature(Feature);\n  }\n\n  findFeature<T extends SceneFeature>(Feature: { new (): T }): T {\n    return Scene.sceneFeatureManager.findFeature(this, Feature) as T;\n  }\n\n  features: SceneFeature[] = [];\n\n  /**\n   * @deprecated\n   * 射线\n   * @param ray\n   */\n  public raycast(ray: { origin: Vector3; direction: Vector3 }, outPos?: Vector3, tag?: MaskList): any {}\n}\n","import { AssetPromise } from \"./asset/AssetPromise\";\nimport { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * 场景管理员。\n */\nexport class SceneManager {\n  _activeScene: Scene;\n\n  /**\n   * 当前激活场景。\n   */\n  get activeScene(): Scene {\n    return this._activeScene;\n  }\n\n  set activeScene(scene: Scene) {\n    const oldScene = this._activeScene;\n    if (oldScene !== scene) {\n      oldScene && oldScene._processActive(false);\n      scene && scene._processActive(true);\n      this._activeScene = scene;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * 加载并激活场景。\n   * @param url - 场景路径\n   * @param destroyOldScene - 是否销毁旧场景信息\n   * @returns 场景请求\n   */\n  loadScene(url: string, destroyOldScene: boolean = true): AssetPromise<Scene> {\n    const scenePromise = this.engine.resourceManager.load<Scene>(url);\n    scenePromise.then((scene: Scene) => {\n      const oldScene: Scene = this._activeScene;\n      this.activeScene = scene;\n      if (oldScene && destroyOldScene) {\n        oldScene.destroy();\n      }\n    });\n    return scenePromise;\n  }\n\n  /**\n   * 合并场景，将源场景合并到目标场景。\n   * @remarks 合并后将使用 destScene 的全局信息,lightingMap 信息会进行合并。\n   * @param sourceScene - 源场景\n   * @param destScene - 目标场景\n   */\n  mergeScenes(sourceScene: Scene, destScene: Scene): void {\n    const oldRootEntities = sourceScene.rootEntities;\n    for (let i: number = 0, n: number = oldRootEntities.length; i < n; i++) {\n      destScene.addRootEntity(oldRootEntities[i]);\n    }\n  }\n}\n","import { ResourceManager } from \"./asset/ResourceManager\";\nimport { Event, EventDispatcher, Logger, Time } from \"./base\";\nimport { Canvas } from \"./Canvas\";\nimport { ComponentsManager } from \"./ComponentsManager\";\nimport { EngineFeature } from \"./EngineFeature\";\nimport { Entity } from \"./Entity\";\nimport { FeatureManager } from \"./FeatureManager\";\nimport { HardwareRenderer } from \"./HardwareRenderer\";\nimport { RenderElement } from \"./RenderPipeline/RenderElement\";\nimport { Scene } from \"./Scene\";\nimport { SceneManager } from \"./SceneManager\";\n\n/** todo: delete */\nconst engineFeatureManager = new FeatureManager<EngineFeature>();\n\n/**\n * 引擎。\n */\nexport class Engine extends EventDispatcher {\n  _componentsManager: ComponentsManager = new ComponentsManager();\n  _hardwareRenderer: HardwareRenderer;\n\n  protected _canvas: Canvas;\n  private _resourceManager: ResourceManager = new ResourceManager(this);\n  private _sceneManager: SceneManager = new SceneManager(this);\n  private _vSyncCount: number = 1;\n  private _targetFrameRate: number = 60;\n  private _time: Time = new Time();\n  private _isPaused: boolean = true;\n  private _requestId: number;\n  private _timeoutId: number;\n  private _loopCounter: number = 0;\n  private _targetFrameInterval: number = 1000 / 60;\n\n  private _animate = () => {\n    if (this._vSyncCount) {\n      this._requestId = requestAnimationFrame(this._animate);\n      if (this._loopCounter++ % this._vSyncCount === 0) {\n        this.update();\n        this._loopCounter = 1;\n      }\n    } else {\n      this._timeoutId = window.setTimeout(this._animate, this._targetFrameInterval);\n      this.update();\n    }\n  };\n\n  /**\n   * 渲染画布。\n   */\n  get canvas(): Canvas {\n    return this._canvas;\n  }\n\n  /**\n   * 资源管理器。\n   */\n  get resourceManager(): ResourceManager {\n    return this._resourceManager;\n  }\n\n  /**\n   * 场景管理器。\n   */\n  get sceneManager(): SceneManager {\n    return this._sceneManager;\n  }\n\n  /**\n   * 计时器。\n   */\n  get time(): Time {\n    return this._time;\n  }\n\n  /**\n   * 是否暂停。\n   */\n  get isPaused(): boolean {\n    return this._isPaused;\n  }\n\n  /**\n   * 垂直同步数量,表示执行一帧的垂直消隐数量,0表示关闭垂直同步。\n   */\n  get vSyncCount(): number {\n    return this._vSyncCount;\n  }\n\n  set vSyncCount(value: number) {\n    this._vSyncCount = Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * 目标帧率，vSyncCount = 0（即关闭垂直同步）时生效。\n   * 值越大，目标帧率越高，Number.POSITIVE_INFINIT 表示无穷大目标帧率。\n   */\n  get targetFrameRate(): number {\n    return this._targetFrameRate;\n  }\n\n  set targetFrameRate(value: number) {\n    value = Math.max(0.000001, value);\n    this._targetFrameRate = value;\n    this._targetFrameInterval = 1000 / value;\n  }\n\n  /**\n   * @deprecated\n   * 图形API渲染器。\n   */\n  get renderhardware(): HardwareRenderer {\n    return this._hardwareRenderer;\n  }\n\n  /**\n   * 创建引擎。\n   * @param canvas - 渲染画布\n   * @param hardwareRenderer - 渲染器\n   */\n  constructor(canvas: Canvas, hardwareRenderer: HardwareRenderer) {\n    super(null);\n    this._hardwareRenderer = hardwareRenderer;\n    this._hardwareRenderer.init(canvas, this);\n    this._canvas = canvas;\n    // @todo delete\n    engineFeatureManager.addObject(this);\n    this._sceneManager.activeScene = new Scene(this, \"DefaultScene\");\n  }\n\n  /**\n   * 创建实体。\n   * @param name - 名字\n   */\n  createEntity(name?: string): Entity {\n    return new Entity(this, name);\n  }\n\n  /**\n   * 暂停引擎循环。\n   */\n  pause(): void {\n    this._isPaused = true;\n    cancelAnimationFrame(this._requestId);\n    clearTimeout(this._timeoutId);\n  }\n\n  /**\n   * 恢复引擎循环。\n   */\n  resume(): void {\n    if (!this._isPaused) return;\n    this._isPaused = false;\n    this.time.reset();\n    requestAnimationFrame(this._animate);\n  }\n\n  /**\n   * 引擎手动更新，如果调用 run() 则一般无需调用该函数。\n   */\n  update(): void {\n    const time = this._time;\n    const deltaTime = time.deltaTime;\n\n    time.tick();\n    RenderElement._restPool();\n\n    engineFeatureManager.callFeatureMethod(this, \"preTick\", [this, this._sceneManager._activeScene]);\n\n    this._hardwareRenderer.beginFrame();\n\n    const scene = this._sceneManager._activeScene;\n    const componentsManager = this._componentsManager;\n    if (scene) {\n      componentsManager.callScriptOnStart();\n      componentsManager.callScriptOnUpdate(deltaTime);\n      componentsManager.callAnimationUpdate(deltaTime);\n      componentsManager.callScriptOnLateUpdate(deltaTime);\n\n      this._render(scene);\n    }\n\n    this._componentsManager.callComponentDestory();\n    this._hardwareRenderer.endFrame();\n\n    engineFeatureManager.callFeatureMethod(this, \"postTick\", [this, this._sceneManager._activeScene]);\n  }\n\n  /**\n   * 执行引擎循环。\n   */\n  run(): void {\n    // @todo: delete\n    engineFeatureManager.callFeatureMethod(this, \"preLoad\", [this]);\n    this.resume();\n    this.trigger(new Event(\"run\", this));\n  }\n\n  /**\n   * 销毁引擎。\n   */\n  destroy(): void {\n    if (this._sceneManager) {\n      // -- event\n      this.trigger(new Event(\"shutdown\", this));\n      engineFeatureManager.callFeatureMethod(this, \"shutdown\", [this]);\n\n      // -- cancel animation\n      this.pause();\n\n      this._animate = null;\n\n      this._sceneManager._activeScene.destroy();\n      this._sceneManager = null;\n      this._resourceManager.gc();\n      this._resourceManager = null;\n\n      this._canvas = null;\n\n      this.features = [];\n      this._time = null;\n\n      // todo: delete\n      (engineFeatureManager as any)._objects = [];\n    }\n  }\n\n  _render(scene: Scene): void {\n    const cameras = scene._activeCameras;\n    const componentsManager = this._componentsManager;\n    const deltaTime = this.time.deltaTime;\n    componentsManager.callRendererOnUpdate(deltaTime);\n    if (cameras.length > 0) {\n      // 针对 priority 进行排序\n      //@ts-ignore\n      cameras.sort((camera1, camera2) => camera1.priority - camera2.priority);\n      for (let i = 0, l = cameras.length; i < l; i++) {\n        const camera = cameras[i];\n        const cameraEntity = camera.entity;\n        if (camera.enabled && cameraEntity.isActiveInHierarchy) {\n          componentsManager.callCameraOnBeginRender(camera);\n          Scene.sceneFeatureManager.callFeatureMethod(scene, \"preRender\", [this, camera]); //TODO:移除\n          camera.render();\n          Scene.sceneFeatureManager.callFeatureMethod(scene, \"postRender\", [this, camera]); //TODO:移除\n          componentsManager.callCameraOnEndRender(camera);\n        }\n      }\n    } else {\n      Logger.debug(\"NO active camera.\");\n    }\n  }\n\n  //-----------------------------------------@deprecated-----------------------------------\n\n  findFeature(Feature) {\n    return engineFeatureManager.findFeature(this, Feature);\n  }\n\n  static registerFeature(Feature: new () => EngineFeature): void {\n    engineFeatureManager.registerFeature(Feature);\n  }\n\n  features: EngineFeature[] = [];\n}\n","/**\n * 系统信息。\n */\nexport class SystemInfo {\n  /**\n   * 设备的像素比。\n   */\n  static get devicePixelRatio(): number {\n    return window.devicePixelRatio;\n  }\n}\n","import { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * 引擎功能特性插件基类\n * @class\n */\nexport class EngineFeature {\n  /**\n   * 引擎主循环运行之前的回调，用来预加载资源\n   * @param {Engine} engine\n   */\n  public preLoad(engine: Engine): void {}\n\n  /**\n   * 场景 Tick 之前的回调\n   * @param {Engine} engine\n   * @param {Scene} currentScene\n   */\n  public preTick(engine: Engine, currentScene: Scene): void {}\n\n  /**\n   * 场景 Tick 完成之后的回调\n   * @param {Engine} engine\n   */\n  public postTick(engine: Engine, currentScene: Scene): void {}\n\n  /**\n   * 引擎关闭的时候调用\n   * @param {Engine} engine\n   */\n  public shutdown(engine: Engine): void {}\n}\n","import { InternalAssetType, EngineObject } from \"../base\";\n\n/**\n * 使用引用计数管理的资源对象基类\n */\nexport class AssetObject extends EngineObject {\n  public type: InternalAssetType | string;\n\n  public name: string;\n  public cacheID: number;\n  public needRecreate: boolean;\n}\n","import { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\n\n/**\n * Scene 访问者接口\n */\nexport abstract class SceneVisitor {}\n","import { Camera } from \"./Camera\";\nimport { Scene } from \"./Scene\";\n\n/**\n * 场景的功能特性插件基类\n * @class\n */\nexport abstract class SceneFeature {\n  /**\n   * 场景 Update 之前的回调\n   * @param {Scene} scene\n   */\n  public preUpdate(scene: Scene): void {}\n\n  /**\n   * 场景 Update 之后的回调\n   * @param {Scene} scene\n   */\n  public postUpdate(scene: Scene): void {}\n\n  /**\n   * 场景渲染前的回调\n   * @param scene\n   * @param camera\n   */\n  public preRender(scene: Scene, camera: Camera): void {}\n\n  /**\n   * 场景渲染后的回调\n   * @param scene\n   * @param camera\n   */\n  public postRender(scene: Scene, camera: Camera): void {}\n\n  /**\n   * 场景销毁的时候调用\n   * @param {Scene} scene\n   */\n  public destroy(scene: Scene): void {}\n}\n","import { Camera } from \"./Camera\";\nimport { ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\n\n/**\n * 脚本类，可进行逻辑编写。\n */\nexport class Script extends Component {\n  /** @internal */\n  @ignoreClone\n  _started: boolean = false;\n  /** @internal */\n  @ignoreClone\n  _onStartIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onLateUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPreRenderIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPostRenderIndex: number = -1;\n\n  /**\n   * 第一次触发可用状态时调用,只调用一次。\n   */\n  onAwake(): void {}\n\n  /**\n   * 触发为可用状态时调用。\n   */\n  onEnable(): void {}\n\n  /**\n   * 第一次执行帧级循环前调用，只调用一次。\n   */\n  onStart(): void {}\n\n  /**\n   * 主更新，逐帧调用。\n   * @param deltaTime - 帧间隔时间\n   */\n  onUpdate(deltaTime: number): void {}\n\n  /**\n   * 延迟更新，逐帧调用。\n   * @param deltaTime - 帧间隔时间\n   */\n  onLateUpdate(deltaTime: number): void {}\n\n  /**\n   * 相机渲染前调用，逐相机调用。\n   * @param camera - 当前渲染相机\n   */\n  onBeginRender(camera: Camera): void {}\n\n  /**\n   * 相机完成渲染后调用，逐相机调用。\n   * @param camera - 当前渲染相机\n   */\n  onEndRender(camera: Camera): void {}\n\n  /**\n   * 触发为禁用状态时调用。\n   */\n  onDisable(): void {}\n\n  /**\n   * 在被销毁帧的最后调用。\n   */\n  onDestroy(): void {}\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onAwake(): void {\n    this.onAwake();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onEnable(): void {\n    const componentsManager = this.engine._componentsManager;\n    const prototype = Script.prototype;\n    if (!this._started) {\n      componentsManager.addOnStartScript(this);\n    }\n    if (this.onUpdate !== prototype.onUpdate) {\n      componentsManager.addOnUpdateScript(this);\n    }\n    if (this.onLateUpdate !== prototype.onLateUpdate) {\n      componentsManager.addOnLateUpdateScript(this);\n    }\n    this.onEnable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDisable(): void {\n    const componentsManager = this.engine._componentsManager;\n    // use \"xxIndex\" is more safe\n    // when call onDisable it maybe it still not in script queue,for example write \"entity.isActive = false\" in onWake().\n    if (this._onStartIndex !== -1) {\n      componentsManager.removeOnStartScript(this);\n    }\n    if (this._onUpdateIndex !== -1) {\n      componentsManager.removeOnUpdateScript(this);\n    }\n    if (this._onLateUpdateIndex !== -1) {\n      componentsManager.removeOnLateUpdateScript(this);\n    }\n    this.onDisable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDestroy(): void {\n    this.engine._componentsManager.addDestoryComponent(this);\n  }\n}\n","import { BoundingBox, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"./Camera\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * 可渲染的组件。\n */\nexport abstract class RenderableComponent extends Component {\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _rendererIndex: number = -1;\n\n  /** @internal */\n  @ignoreClone\n  protected _overrideUpdate: boolean = false;\n\n  @ignoreClone\n  private _transformChangeFlag: UpdateFlag;\n  @deepClone\n  private _bounds: BoundingBox = new BoundingBox(new Vector3(), new Vector3());\n\n  /**\n   * 包围体。\n   */\n  get bounds(): BoundingBox {\n    const changeFlag = this._transformChangeFlag;\n    if (changeFlag.flag) {\n      this._updateBounds(this._bounds);\n      changeFlag.flag = false;\n    }\n    return this._bounds;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    const prototype = RenderableComponent.prototype;\n    this._overrideUpdate = this.update !== prototype.update;\n    this._transformChangeFlag = this.entity.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * @inheritdoc\n   */\n  destroy(): void {\n    super.destroy();\n    const flag = this._transformChangeFlag;\n    if (flag) {\n      flag.destroy();\n      this._transformChangeFlag = null;\n    }\n  }\n\n  abstract render(camera: Camera): void;\n\n  update(deltaTime: number): void {}\n\n  protected _updateBounds(worldBounds: any): void {}\n\n  _onEnable() {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.addOnUpdateRenderers(this);\n    }\n    componentsManager.addRenderer(this);\n  }\n\n  _onDisable() {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.removeOnUpdateRenderers(this);\n    }\n    componentsManager.removeRenderer(this);\n  }\n\n  _render(camera: Camera) {\n    let culled = false;\n\n    // distance cull\n    if (this.cullDistanceSq > 0) {\n      const distanceSq = Vector3.distanceSquared(\n        camera._entity.transform.worldPosition,\n        this.entity.transform.worldPosition\n      );\n      culled = this.cullDistanceSq < distanceSq;\n    }\n\n    if (!culled) {\n      this.render(camera);\n    }\n  }\n}\n","import { ClearMode, MaskList } from \"../base\";\nimport { Camera } from \"../Camera\";\nimport { Vector4 } from \"@oasis-engine/math\";\n\n/** @todo: monorepo circle dependence */\ntype RenderTarget = any;\ntype Material = any;\n\nlet passNum = 0;\n\n/**\n * RednerPass 对象\n */\nclass RenderPass {\n  public name: string;\n  public enabled: boolean;\n  public priority: number;\n  public renderTarget: RenderTarget;\n  public replaceMaterial;\n  public mask: MaskList;\n  public renderOverride: boolean;\n  public clearMode;\n  private _clearParam;\n\n  /**\n   * RenderPass 构造函数\n   * @param name 这个 Pass 的名称\n   * @param priority 优先级，小于0在默认Pass之前，大于0在默认Pass之后\n   * @param renderTarget 指定的 Render Target\n   * @param replaceMaterial 替换模型的默认材质\n   * @param mask 与 Component.renderPassFlag 进行 bit and 操作，对这个 Pass 需要渲染的对象进行筛选\n   * @param clearParam 清除renderTarget的背景颜色\n   */\n  constructor(\n    name = `RENDER_PASS${passNum++}`,\n    priority = 0,\n    renderTarget = null,\n    replaceMaterial = null,\n    mask = null,\n    clearParam = new Vector4(0, 0, 0, 0)\n  ) {\n    this.name = name;\n    this.enabled = true;\n    this.priority = priority;\n    this.renderTarget = renderTarget;\n    this.replaceMaterial = replaceMaterial;\n    this.mask = mask || MaskList.EVERYTHING;\n    this.renderOverride = false; ///< 若 renderOverride 设为了 true，则需要实现 render(camera) 方法\n\n    /**\n     * 画布清除模式，默认为 ClearMode.SOLID_COLOR\n     * @member {number}\n     */\n    this.clearMode = ClearMode.SOLID_COLOR;\n    this._clearParam = clearParam; // PASS use render target's clearParam\n  }\n\n  /**\n   * 画布清除参数，默认使用 RenderTarget 的 clearColor\n   * @type {*}\n   */\n  get clearParam() {\n    return this._clearParam;\n  }\n\n  set clearParam(v) {\n    this._clearParam = v;\n  }\n\n  /**\n   * 用于自定义的渲染过程，若 renderOverride 设为了 true 将被执行到\n   * @param {Camera} camera 相机\n   * @param {RenderQueue} opaqueQueue 不透明物体渲染队列\n   * @param {RenderQueue} transparentQueue 透明物体渲染队列\n   */\n  render(camera: Camera, opaqueQueue, transparentQueue) {}\n\n  /**\n   * Pass 渲染前调用\n   * @param {Camera} camera 相机\n   * @param {RenderQueue} opaqueQueue 不透明物体渲染队列\n   * @param {RenderQueue} transparentQueue 透明物体渲染队列\n   */\n  preRender(camera: Camera, opaqueQueue, transparentQueue) {}\n\n  /**\n   * Pass 渲染后调用\n   * @param {Camera} camera 相机\n   * @param {RenderQueue} opaqueQueue 不透明物体渲染队列\n   * @param {RenderQueue} transparentQueue 透明物体渲染队列\n   */\n  postRender(camera: Camera, opaqueQueue, transparentQueue) {}\n}\n\nexport { RenderPass };\n","import { Camera } from \"../Camera\";\nimport { Matrix, Vector4, Vector3 } from \"@oasis-engine/math\";\n\n/**\n * 渲染上下文。\n */\nexport class RenderContext {\n  private static _renderContext: RenderContext = new RenderContext();\n\n  static _getRenderContext(camera: Camera): RenderContext {\n    const context = RenderContext._renderContext;\n    context.camera = camera;\n    context.viewport = camera.viewport;\n    context.cameraPosition = camera.entity.transform.worldPosition;\n    context.inverseViewMatrix = camera.inverseViewMatrix;\n    context.inverseProjectionMatrix = camera.inverseProjectionMatrix;\n    context.viewMatrix = camera.viewMatrix;\n    context.projectionMatrix = camera.projectionMatrix;\n    Matrix.multiply(context.projectionMatrix, context.viewMatrix, context.viewProjectMatrix);\n    return this._renderContext;\n  }\n\n  camera: Camera;\n  viewMatrix: Matrix;\n  projectionMatrix: Matrix;\n  viewProjectMatrix: Matrix = new Matrix();\n  inverseViewMatrix: Matrix;\n  inverseProjectionMatrix: Matrix;\n  viewport: Vector4;\n  cameraPosition: Vector3;\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { MaskList } from \"../base\";\nimport { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { RenderableComponent } from \"../RenderableComponent\";\nimport { RenderContext } from \"./RenderContext\";\nimport { RenderElement } from \"./RenderElement\";\n\ninterface SpriteElement {\n  component: RenderableComponent;\n  positionQuad;\n  uvRect;\n  tintColor;\n  texture;\n  renderMode;\n  camera;\n}\n\n/** @todo: monorepo circle dependence */\ntype RenderTarget = any;\ntype Material = any;\n\n/**\n * 渲染队列管理。\n * @private\n */\nexport class RenderQueue {\n  private _items: (RenderElement | SpriteElement)[] = [];\n\n  constructor() {}\n\n  /**\n   * 需要渲染的对象数组\n   * @member {Object}\n   * @readonly\n   */\n  get items() {\n    return this._items;\n  }\n\n  /**\n   * 情况内部数据\n   */\n  clear() {\n    this._items = [];\n  }\n\n  /**\n   * 把一个 Primitive 对象添加进来\n   */\n  pushPrimitive(element: RenderElement) {\n    this._items.push(element);\n  }\n\n  /**\n   * 对于透明对象，按照离摄像机由远及近的顺序渲染，有助于减少视觉错误\n   * @param {Vector3} eyePos\n   */\n  sortByDistance(eyePos: Vector3) {\n    const items = this._items;\n\n    if (items.length > 1) {\n      this._items = items.sort(function (item1, item2) {\n        if (item1.component.renderPriority === item2.component.renderPriority) {\n          const pos1 = item1.component.entity.transform.worldPosition;\n          const pos2 = item2.component.entity.transform.worldPosition;\n\n          const dis = Vector3.distanceSquared(pos2, eyePos) - Vector3.distanceSquared(pos1, eyePos);\n          return dis;\n        } else {\n          return item1.component.renderPriority - item2.component.renderPriority;\n        }\n      });\n    } // end of if\n  }\n\n  /**\n   * 对于不透明对象，按照 Technique 排序，可以减少渲染状态切换，提升效率\n   */\n  sortByTechnique() {\n    const items = this._items;\n\n    if (items.length > 1) {\n      this._items = items.sort(function (item1: RenderElement, item2: RenderElement) {\n        if (item1.component.renderPriority === item2.component.renderPriority) {\n          const tech1 = item1.material.technique;\n          const tech2 = item2.material.technique;\n          if (tech1 && tech2) {\n            return tech1.name.localeCompare(tech2.name);\n          } else {\n            return 0;\n          }\n        } else {\n          return item1.component.renderPriority - item2.component.renderPriority;\n        }\n      });\n    } // end of if\n  }\n\n  /**\n   * 把一个 Sprite 绘制需要的信息传进来\n   * @param {Component} component\n   * @param {object} positionQuad  Sprite四个顶点的位置\n   * @param {object} uvRect        Sprite在texture上的纹理坐标\n   * @param {vec4}   tintColor     颜色\n   * @param {Texture}   texture    纹理信息\n   * @param {String}    renderMode    绘制方式， '2D' 或者 '3D'\n   * @param {Camera}   camera        相机信息\n   */\n  pushSprite(component: Component, positionQuad, uvRect, tintColor, texture, renderMode, camera: Camera) {\n    const element: SpriteElement = {\n      // @ts-ignore\n      component,\n      positionQuad,\n      uvRect,\n      tintColor,\n      texture,\n      renderMode,\n      camera\n    };\n    this._items.push(element);\n  }\n\n  /**\n   * 执行渲染操作\n   * @param {Camera} camera 当前的摄像机\n   * @param {Material} replaceMaterial 替换模型自身的材质\n   * @param {number} mask 渲染过滤使用的mask\n   */\n  render(camera: Camera, replaceMaterial: Material, mask: MaskList) {\n    const rhi = camera.scene.engine._hardwareRenderer;\n    const items = this._items;\n\n    // 如果没有items不需要渲染\n    if (items.length === 0) {\n      return;\n    }\n\n    this.updateMaxJointsNum(this._items, replaceMaterial);\n\n    const context = RenderContext._getRenderContext(camera);\n    const { cullingMask } = camera;\n\n    for (let i = 0, len = items.length; i < len; i++) {\n      const item = items[i];\n      const { component } = item;\n\n      //-- filter by camera culling mask\n      if (!(cullingMask & component._entity.layer)) continue;\n\n      const renderPassFlag = component.renderPassFlag;\n\n      //-- filter by mask\n      if (!(renderPassFlag & mask)) continue;\n\n      //-- draw\n      if (this._isPrimitive(item)) {\n        const element = <RenderElement>item;\n        //-- 如果有缓存的Sprite尚未绘制，则先绘制缓存的Sprite\n        rhi.flushSprite();\n\n        const material = replaceMaterial ? replaceMaterial : element.material;\n        material.preRender?.(element.component, element.primitive);\n\n        material.prepareDrawing(context, element.component, element.primitive, element.material);\n        rhi.drawPrimitive(element.primitive, element.subPrimitive, material);\n\n        material.postRender?.(element.component, element.primitive);\n      } else {\n        const spirteElement = <SpriteElement>item;\n        rhi.drawSprite(\n          spirteElement.positionQuad,\n          spirteElement.uvRect,\n          spirteElement.tintColor,\n          spirteElement.texture,\n          spirteElement.renderMode,\n          spirteElement.camera\n        );\n      }\n    } // end of for\n\n    rhi.flushSprite();\n  }\n\n  /**\n   * 更新当前 renderQueue 中各个材质的最大骨骼节点数\n   * @param items\n   * @param {Material} replaceMaterial\n   */\n  updateMaxJointsNum(items, replaceMaterial: Material) {\n    for (let i = 0, len = items.length; i < len; i++) {\n      const { component, material } = items[i];\n\n      const materialControl = replaceMaterial ? replaceMaterial : material;\n      // 仅当 component 为 SkinnedMeshRenderer 时需要计算\n      if (component.jointNodes) {\n        materialControl.maxJointsNum = Math.max(materialControl.maxJointsNum, component.jointNodes.length);\n      }\n    }\n  }\n\n  /**\n   * 判断是否是sprite\n   * @private\n   */\n  _isPrimitive(item) {\n    return !!item.primitive;\n  }\n}\n","import { ClearMode } from \"../base\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { RenderPass } from \"./RenderPass\";\n\n/**\n * Sprite 的 RenderPass，在后处理后绘制，不受后处理影响\n * @private\n */\nexport class SeparateSpritePass extends RenderPass {\n  private _spriteItems;\n\n  constructor(name = \"SeparateSprite\", priority = 10) {\n    super(name, priority);\n\n    this.clearMode = ClearMode.DONT_CLEAR;\n    this.renderOverride = true;\n\n    this._spriteItems = [];\n  }\n\n  /**\n   * 给 RenderPipeline 调用，判断是否需要绘制 Sprite\n   */\n  get isUsed() {\n    return this._spriteItems.length > 0;\n  }\n\n  preRender() {\n    this.enabled = this.isUsed;\n  }\n\n  render(camera) {\n    const rhi = camera.renderHardware;\n\n    this._sortByDistance(camera.eyePos);\n    const items = this._spriteItems;\n\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      rhi.drawSprite(item.positionQuad, item.uvRect, item.tintColor, item.texture, item.renderMode, item.camera);\n    }\n\n    items.length = 0;\n  }\n\n  postRender(camera) {\n    if (this.enabled) {\n      // 确保所有缓冲的 Sprites 都绘制到画布中\n      camera.renderHardware.flushSprite();\n    }\n  }\n\n  /**\n   * 对于透明对象，按照离摄像机由远及近的顺序渲染，有助于减少视觉错误\n   * @param {vec3} eyePos\n   */\n  _sortByDistance(eyePos) {\n    if (this._spriteItems.length > 1) {\n      this._spriteItems = this._spriteItems.sort(function (item1, item2) {\n        if (item1.component.renderPriority === item2.component.renderPriority) {\n          const pos1 = item1.component.node.worldPosition;\n          const pos2 = item2.component.node.worldPosition;\n\n          const dis = Vector3.distanceSquared(pos2, eyePos) - Vector3.distanceSquared(pos1, eyePos);\n          return dis;\n        } else {\n          return item1.component.renderPriority - item2.component.renderPriority;\n        }\n      });\n    } // end of if\n  }\n\n  /**\n   * 把一个 Sprite 绘制需要的信息传进来\n   * @param {Component} component\n   * @param {Object} positionQuad  Sprite四个顶点的位置\n   * @param {Object} uvRect        Sprite在texture上的纹理坐标\n   * @param {vec4}   tintColor     颜色\n   * @param {Texture}   texture    纹理信息\n   * @param {String}    renderMode    绘制方式， '2D' 或者 '3D'\n   * @param {Camera}   camera        相机信息\n   */\n  pushSprite(component, positionQuad, uvRect, tintColor, texture, renderMode, camera: Camera) {\n    this._spriteItems.push({\n      component,\n      positionQuad,\n      uvRect,\n      tintColor,\n      texture,\n      renderMode,\n      camera\n    });\n  }\n}\n","import { Vector4 } from \"@oasis-engine/math\";\nimport { ClearMode, MaskList, MaterialType } from \"../base\";\nimport { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { SceneVisitor } from \"../SceneVisitor\";\nimport { RenderElement } from \"./RenderElement\";\nimport { RenderPass } from \"./RenderPass\";\nimport { RenderQueue } from \"./RenderQueue\";\nimport { SeparateSpritePass } from \"./SeparateSpritePass\";\n\n/** @todo: monorepo circle dependence */\ntype RenderTarget = any;\ntype Material = any;\n\n/**\n * 使用指定的CameraComponent对象，渲染当前场景中的所有可见对象\n * @class\n */\nexport class BasicRenderPipeline extends SceneVisitor {\n  protected _camera: Camera;\n  private _opaqueQueue: RenderQueue;\n  private _transparentQueue: RenderQueue;\n  private _defaultPass: RenderPass;\n  protected _renderPassArray: Array<RenderPass>;\n  private _canvasDepthPass;\n  private _separateSpritePass;\n\n  /**\n   * 构造函数\n   * @param {Camera} camera 摄像机对象\n   */\n  constructor(camera) {\n    super();\n\n    this._camera = camera;\n    this._opaqueQueue = new RenderQueue(); // 不透明对象的渲染队列\n    this._transparentQueue = new RenderQueue(); // 透明对象的渲染队列\n\n    this._renderPassArray = [];\n    this._defaultPass = new RenderPass(\"default\", 0, null, null, 0);\n    this.addRenderPass(this._defaultPass);\n  }\n\n  /**\n   * 默认的 RenderPass\n   */\n  get defaultRenderPass() {\n    return this._defaultPass;\n  }\n\n  /**\n   * 添加一个 Render Pass\n   * @param {string|RenderPass} nameOrPass 这个 Pass 的名称或者 RenderPass 对象，当为名称时需提供以下参数\n   * @param {number} priority 优先级，小于0在默认Pass之前，大于0在默认Pass之后\n   * @param {RenderTarget} renderTarget 指定的 Render Target\n   * @param {Material} replaceMaterial 替换模型的默认材质\n   * @param {MaskList} mask 与 Component.renderPassFlag 进行 bit and 操作，对这个 Pass 需要渲染的对象进行筛选\n   * @param clearParam 清除renderTarget的背景颜色\n   */\n  addRenderPass(\n    nameOrPass: string | RenderPass,\n    priority: number = null,\n    renderTarget: RenderTarget = null,\n    replaceMaterial: Material = null,\n    mask: MaskList = null,\n    clearParam = new Vector4(0, 0, 0, 0)\n  ) {\n    if (typeof nameOrPass === \"string\") {\n      const renderPass = new RenderPass(nameOrPass, priority, renderTarget, replaceMaterial, mask, clearParam);\n      this._renderPassArray.push(renderPass);\n    } else if (nameOrPass instanceof RenderPass) {\n      this._renderPassArray.push(nameOrPass);\n    }\n\n    this._renderPassArray.sort(function (p1, p2) {\n      return p1.priority - p2.priority;\n    });\n  }\n\n  /**\n   * 通过名称或 RenderPass 对象移除 RenderPass\n   * @param {string | RenderPass} nameOrPass RenderPass 名称\n   */\n  removeRenderPass(nameOrPass: string | RenderPass): void {\n    let pass: RenderPass;\n    if (typeof nameOrPass === \"string\") pass = this.getRenderPass(nameOrPass);\n    else if (nameOrPass instanceof RenderPass) pass = nameOrPass;\n    if (pass) {\n      const idx = this._renderPassArray.indexOf(pass);\n      this._renderPassArray.splice(idx, 1);\n    }\n  }\n\n  /**\n   * 通过名称获取 RenderPass\n   * @param {string} name RenderPass 名称\n   */\n  getRenderPass(name: string) {\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      const pass = this._renderPassArray[i];\n      if (pass.name === name) return pass;\n    }\n\n    return null;\n  }\n\n  /**\n   * 不透明对象的渲染队列\n   * @member {RenderQueue}\n   * @readonly\n   */\n  get opaqueQueue(): RenderQueue {\n    return this._opaqueQueue;\n  }\n\n  /**\n   * 透明对象的渲染队列\n   * @member {RenderQueue}\n   * @readonly\n   */\n  get transparentQueue(): RenderQueue {\n    return this._transparentQueue;\n  }\n\n  /**\n   * 释放内部资源\n   */\n  destroy() {}\n\n  /**\n   * 执行场景渲染\n   */\n  render() {\n    const camera = this._camera;\n    const opaqueQueue = this._opaqueQueue;\n    const transparentQueue = this._transparentQueue;\n\n    //-- 清空内部状态\n    opaqueQueue.clear();\n    transparentQueue.clear();\n\n    camera.engine._componentsManager.callRender(camera);\n    //-- 执行渲染队列\n    opaqueQueue.sortByTechnique();\n    transparentQueue.sortByDistance(camera.entity.transform.worldPosition);\n\n    //-- 为sprite提供canvas上的深度信息\n    if (this._canvasDepthPass) this._canvasDepthPass.enabled = false;\n\n    if (this._separateSpritePass && this._separateSpritePass.isUsed) {\n      // 如果默认的rendertarget不是canvas的话，就需要在canvas上再绘制一遍确保有深度信息\n      if (this._defaultPass.renderTarget) {\n        if (!this._canvasDepthPass) {\n          this._canvasDepthPass = new RenderPass(\"CanvasDepthRenderPass\", 0, null, null, 0);\n          this._canvasDepthPass.clearMode = ClearMode.DONT_CLEAR;\n          this.addRenderPass(this._canvasDepthPass);\n        }\n        this._canvasDepthPass.enabled = true;\n      }\n    }\n\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      this._drawRenderPass(this._renderPassArray[i], camera);\n    }\n  }\n\n  private _drawRenderPass(pass: RenderPass, camera: Camera) {\n    pass.preRender(camera, this.opaqueQueue, this.transparentQueue);\n\n    const rhi = camera.scene.engine._hardwareRenderer;\n    const renderTarget = camera.renderTarget || pass.renderTarget;\n    rhi.activeRenderTarget(renderTarget, camera); // keep require rendertarget in case of GC\n\n    if (pass.enabled) {\n      rhi.clearRenderTarget(pass.clearMode, pass.clearParam);\n\n      if (pass.renderOverride) {\n        pass.render(camera, this.opaqueQueue, this.transparentQueue);\n      } else {\n        this.opaqueQueue.render(camera, pass.replaceMaterial, pass.mask);\n        this.transparentQueue.render(camera, pass.replaceMaterial, pass.mask);\n      }\n    }\n\n    rhi.blitRenderTarget(renderTarget);\n    pass.postRender(camera, this.opaqueQueue, this.transparentQueue);\n  }\n\n  /**\n   * 将一个 Primitive 对象添加到渲染队列\n   * @param {Component} component\n   * @param {Primitive} primitive\n   * @param {Material} mtl\n   */\n  pushPrimitive(element: RenderElement) {\n    if (element.material.renderType === MaterialType.TRANSPARENT) {\n      this._transparentQueue.pushPrimitive(element);\n    } else {\n      this._opaqueQueue.pushPrimitive(element);\n    }\n  }\n\n  /**\n   * 将一个 Sprite 绘制信息添加到渲染队列\n   * @param {Component} component\n   * @param {Object} positionQuad  Sprite四个顶点的位置\n   * @param {Object} uvRect        Sprite在texture上的纹理坐标\n   * @param {vec4}   tintColor     颜色\n   * @param {Texture}   texture    纹理信息\n   * @param {String}    renderMode    绘制方式， '2D' 或者 '3D'\n   * @param {Camera}   camera        相机信息\n   */\n  pushSprite(component: Component, positionQuad, uvRect, tintColor, texture, renderMode, camera: Camera) {\n    if ((component as any).separateDraw) {\n      if (!this._separateSpritePass) {\n        this._separateSpritePass = new SeparateSpritePass();\n        this.addRenderPass(this._separateSpritePass);\n      }\n\n      this._separateSpritePass.pushSprite(component, positionQuad, uvRect, tintColor, texture, renderMode, camera);\n      return;\n    }\n\n    this._transparentQueue.pushSprite(component, positionQuad, uvRect, tintColor, texture, renderMode, camera);\n  }\n}\n","import { MathUtil, Matrix, Vector2, Vector3, Vector4, Ray } from \"@oasis-engine/math\";\nimport { ClearMode, MaskList } from \"./base\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { dependencies } from \"./ComponentsDependencies\";\nimport { Entity } from \"./Entity\";\nimport { Layer } from \"./Layer\";\nimport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nimport { TextureCubeFace } from \"./texture/enums/TextureCubeFace\";\nimport { RenderTarget } from \"./texture/RenderTarget\";\nimport { Transform } from \"./Transform\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * @todo\n */\ntype Sky = {};\n\n//CM：这个类可能需要搬家\nclass MathTemp {\n  static tempMat4 = new Matrix();\n  static tempVec4 = new Vector4();\n  static tempVec3 = new Vector3();\n}\n\n/**\n * 相机的清除标记。\n */\nexport enum ClearFlags {\n  /* 清理深度和天空。*/\n  DepthSky,\n  /* 清理深度和颜色。*/\n  DepthColor,\n  /* 只清除深度。*/\n  Depth,\n  /* 不做任何清除。*/\n  None\n}\n\n/**\n * Camera 组件，作为渲染三位世界的入口。\n */\n@dependencies(Transform)\nexport class Camera extends Component {\n  /** 渲染优先级，数字越大越先渲染。*/\n  priority: number = 0;\n  /**\n   * 渲染遮罩。\n   * @remarks 位操作，对应 Entity 的 layer。\n   */\n  cullingMask: Layer = Layer.Everything;\n\n  private _isOrthographic: boolean = false;\n  private _isProjMatSetting = false;\n  private _clearMode: ClearMode = ClearMode.SOLID_COLOR;\n  private _nearClipPlane: number = 0.1;\n  private _farClipPlane: number = 100;\n  private _fieldOfView: number = 45;\n  private _orthographicSize: number = 10;\n  private _isProjectionDirty = true;\n  private _isInvProjMatDirty: boolean = true;\n  private _customAspectRatio: number | undefined = undefined;\n  private _renderTarget: RenderTarget = null;\n\n  @ignoreClone\n  _renderPipeline: BasicRenderPipeline;\n  @ignoreClone\n  private _transform: Transform;\n  @ignoreClone\n  private _isViewMatrixDirty: UpdateFlag;\n  @ignoreClone\n  private _isInvViewProjDirty: UpdateFlag;\n\n  @deepClone\n  private _projectionMatrix: Matrix = new Matrix();\n  @deepClone\n  private _viewMatrix: Matrix = new Matrix();\n  @deepClone\n  private _backgroundColor: Vector4 = new Vector4();\n  @deepClone\n  private _viewport: Vector4 = new Vector4(0, 0, 1, 1);\n  @deepClone\n  private _inverseProjectionMatrix: Matrix = new Matrix();\n  @deepClone\n  private _inverseViewMatrix: Matrix = new Matrix();\n  @deepClone\n  private _lastAspectSize: Vector2 = new Vector2(0, 0);\n  @deepClone\n  private _invViewProjMat: Matrix = new Matrix();\n\n  /**\n   * 近裁剪平面。\n   */\n  get nearClipPlane(): number {\n    return this._nearClipPlane;\n  }\n\n  set nearClipPlane(value: number) {\n    this._nearClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * 远裁剪平面。\n   */\n  get farClipPlane(): number {\n    return this._farClipPlane;\n  }\n\n  set farClipPlane(value: number) {\n    this._farClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * 视场，单位是角度制，透视投影时生效。\n   */\n  get fieldOfView(): number {\n    return this._fieldOfView;\n  }\n\n  set fieldOfView(value: number) {\n    this._fieldOfView = value;\n    this._projMatChange();\n  }\n\n  /**\n   * 横纵比，默认由视口的宽高比自动计算，如果手动设置会保持手动值，调用resetAspectRatio()可恢复。\n   */\n  get aspectRatio(): number {\n    const canvas = this._entity.engine.canvas;\n    return this._customAspectRatio ?? (canvas.width * this._viewport.z) / (canvas.height * this._viewport.w);\n  }\n\n  set aspectRatio(value: number) {\n    this._customAspectRatio = value;\n    this._projMatChange();\n  }\n\n  /**\n   * 视口，归一化表达，左上角为（0，0），右下角为（1，1）。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get viewport(): Vector4 {\n    return this._viewport;\n  }\n\n  set viewport(value: Vector4) {\n    if (value !== this._viewport) {\n      value.cloneTo(this._viewport);\n    }\n    this._projMatChange();\n  }\n\n  /**\n   * 是否正交，默认是 false。true 会使用正交投影，false 使用透视投影。\n   */\n  get isOrthographic(): boolean {\n    return this._isOrthographic;\n  }\n\n  set isOrthographic(value: boolean) {\n    this._isOrthographic = value;\n    this._projMatChange();\n  }\n\n  /**\n   * 正交模式下相机的一半尺寸。\n   */\n  get orthographicSize(): number {\n    return this._orthographicSize;\n  }\n\n  set orthographicSize(value: number) {\n    this._orthographicSize = value;\n    this._projMatChange();\n  }\n\n  /**\n   * 背景清除标记。\n   */\n  get clearFlags(): ClearFlags {\n    throw \"not implemented\";\n  }\n\n  /**\n   * @todo 天空盒重构\n   */\n  set clearFlags(value: ClearFlags) {\n    throw \"not implemented\";\n  }\n\n  /**\n   * 清除视口的背景颜色，当 clearFlags 为 DepthColor 时生效。\n   */\n  get backgroundColor(): Vector4 {\n    return this._backgroundColor;\n  }\n\n  set backgroundColor(value: Vector4) {\n    this.setClearMode(this._clearMode, value);\n  }\n\n  /**\n   * 清除视口的背景天空，当 clearFlags 为 DepthSky 时生效。\n   * @todo 渲染管线修改\n   */\n  get backgroundSky(): Sky {\n    throw new Error(\"接口未实现\");\n  }\n\n  /**\n   * 视图矩阵。\n   */\n  get viewMatrix(): Readonly<Matrix> {\n    //CM:相机的视图矩阵一般会移除缩放,避免在shader运算出一些奇怪的问题\n    if (this._isViewMatrixDirty.flag) {\n      this._isViewMatrixDirty.flag = false;\n      Matrix.invert(this._transform.worldMatrix, this._viewMatrix);\n    }\n    return this._viewMatrix;\n  }\n\n  /**\n   * 投影矩阵,默认由相机的相关参数计算计算，如果手动设置会保持手动值，调用resetProjectionMatrix()可恢复。\n   */\n  set projectionMatrix(value: Matrix) {\n    this._projectionMatrix = value;\n    this._isProjMatSetting = true;\n    this._projMatChange();\n  }\n\n  get projectionMatrix(): Matrix {\n    const canvas = this._entity.engine.canvas;\n    if (\n      (!this._isProjectionDirty || this._isProjMatSetting) &&\n      this._lastAspectSize.x === canvas.width &&\n      this._lastAspectSize.y === canvas.height\n    ) {\n      return this._projectionMatrix;\n    }\n    this._isProjectionDirty = false;\n    this._lastAspectSize.x = canvas.width;\n    this._lastAspectSize.y = canvas.height;\n    const aspectRatio = this.aspectRatio;\n    if (!this._isOrthographic) {\n      Matrix.perspective(\n        MathUtil.degreeToRadian(this._fieldOfView),\n        aspectRatio,\n        this._nearClipPlane,\n        this._farClipPlane,\n        this._projectionMatrix\n      );\n    } else {\n      const width = this._orthographicSize * aspectRatio;\n      const height = this._orthographicSize;\n      Matrix.ortho(-width, width, -height, height, this._nearClipPlane, this._farClipPlane, this._projectionMatrix);\n    }\n    return this._projectionMatrix;\n  }\n\n  /**\n   * 是否开启HDR。\n   * @todo 渲染管线修改\n   */\n  get enableHDR(): boolean {\n    console.log(\"not implemention\");\n    return false;\n  }\n\n  set enableHDR(value: boolean) {\n    console.log(\"not implemention\");\n  }\n\n  /**\n   * 渲染目标，设置后会渲染到渲染目标上，如果为空则渲染到主画布。\n   */\n  get renderTarget(): RenderTarget | null {\n    return this._renderTarget;\n  }\n\n  set renderTarget(value: RenderTarget | null) {\n    this._renderTarget = value;\n  }\n\n  /**\n   * 创建 Camera 组件。\n   * @param entity 实体\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    this._transform = this.entity.transform;\n    this._isViewMatrixDirty = this._transform.registerWorldChangeFlag();\n    this._isInvViewProjDirty = this._transform.registerWorldChangeFlag();\n    this._renderPipeline = new BasicRenderPipeline(this);\n\n    // 默认设置\n    this.setClearMode();\n  }\n\n  /**\n   * 恢复通过 fieldOfView、nearClipPlane 和 farClipPlane 自动计算投影矩阵。\n   */\n  resetProjectionMatrix(): void {\n    this._isProjMatSetting = false;\n    this._projMatChange();\n  }\n\n  /**\n   * 恢复通过视口宽高比自动计算横纵比。\n   */\n  resetAspectRatio(): void {\n    this._customAspectRatio = undefined;\n    this._projMatChange();\n  }\n\n  /**\n   * 将一个点从世界空间变换到视口空间。\n   * @param point - 世界空间中的点\n   * @param out - 视口空间的点，X 和 Y 为视口空间坐标，Z 为视口深度，近裁剪面为 0，远裁剪面为 1，W 为距离相机的世界单位距离\n   * @returns 视口空间的点\n   */\n  worldToViewportPoint(point: Vector3, out: Vector4): Vector4 {\n    Matrix.multiply(this.projectionMatrix, this.viewMatrix, MathTemp.tempMat4);\n    MathTemp.tempVec4.setValue(point.x, point.y, point.z, 1.0);\n    Vector4.transform(MathTemp.tempVec4, MathTemp.tempMat4, MathTemp.tempVec4);\n\n    const w = MathTemp.tempVec4.w;\n    const nx = MathTemp.tempVec4.x / w;\n    const ny = MathTemp.tempVec4.y / w;\n    const nz = MathTemp.tempVec4.z / w;\n\n    // 坐标轴转换\n    out.x = (nx + 1.0) * 0.5;\n    out.y = (1.0 - ny) * 0.5;\n    out.z = nz;\n    out.w = w;\n    return out;\n  }\n\n  /**\n   * 将一个点从视口空间变换到世界空间。\n   * @param point - X 和 Y 为视口空间坐标，Z 为视口深度，近裁剪面为 0，远裁剪面为 1\n   * @param out - 世界空间中的点\n   * @returns 世界空间中的点\n   */\n  viewportToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    const invViewProjMat = this.invViewProjMat;\n    return this._innerViewportToWorldPoint(point, invViewProjMat, out);\n  }\n\n  /**\n   * 通过视口空间点的点获取射线，生成射线的起点在相机的近裁面并穿过点的 X 和 Y 坐标。\n   * @param point 视口空间中的点\n   * @param out - 射线\n   * @returns 射线\n   */\n  viewportPointToRay(point: Vector2, out: Ray): Ray {\n    const clipPoint = MathTemp.tempVec3;\n    // 使用近裁面的交点作为 origin\n    clipPoint.setValue(point.x, point.y, 0);\n    const origin = this.viewportToWorldPoint(clipPoint, out.origin);\n    // 使用远裁面的交点作为 origin\n    clipPoint.z = 1.0;\n    const farPoint: Vector3 = this._innerViewportToWorldPoint(clipPoint, this._invViewProjMat, clipPoint);\n    Vector3.subtract(farPoint, origin, out.direction);\n    out.direction.normalize();\n\n    return out;\n  }\n\n  /**\n   * 将一个点的X和Y坐标从屏幕空间变换到视口空间\n   * @param point - 屏幕空间点\n   * @param out - 视口空间点\n   * @returns 射线\n   */\n  screenToViewportPoint<T extends Vector2 | Vector3>(point: Vector3 | Vector2, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (point.x / canvas.width - viewport.x) / viewport.z;\n    out.y = (point.y / canvas.height - viewport.y) / viewport.w;\n    return out;\n  }\n\n  /**\n   * 将一个点的X和Y坐标从视口空间变换到屏幕空间。\n   * @param point - 视口空间的点\n   * @param out - 屏幕空间的点\n   * @returns 射线\n   */\n  viewportToScreenPoint<T extends Vector2 | Vector3 | Vector4>(point: T, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (viewport.x + point.x * viewport.z) * canvas.width;\n    out.y = (viewport.y + point.y * viewport.w) * canvas.height;\n    return out;\n  }\n\n  /**\n   * 将一个点从世界空间变换到屏幕空间。\n   * @param point - 世界空间中的点\n   * @param out - 屏幕空间的点\n   * @returns 屏幕空间的点\n   */\n  worldToScreenPoint(point: Vector3, out: Vector4): Vector4 {\n    this.worldToViewportPoint(point, out);\n    return this.viewportToScreenPoint(out, out);\n  }\n\n  /**\n   * 将一个点从屏幕空间变换到世界空间。\n   * @param point - 屏幕空间点\n   * @param out - 世界空间中的点\n   * @returns 世界空间中的点\n   */\n  screenToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    this.screenToViewportPoint(point, out);\n    return this.viewportToWorldPoint(out, out);\n  }\n\n  /**\n   * 手动调用相机的渲染。\n   * @param cubeFaces - 立方体的渲染面集合,如果设置了renderTarget并且renderTarget.isCube=true时生效\n   */\n  render(cubeFaces?: TextureCubeFace): void {\n    this._renderPipeline.render();\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onActive() {\n    this.entity.scene.attachRenderCamera(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onInActive() {\n    this.entity.scene.detachRenderCamera(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onDestroy() {\n    this._renderPipeline?.destroy();\n    this._isInvViewProjDirty.destroy();\n    this._isViewMatrixDirty.destroy();\n  }\n\n  private _projMatChange() {\n    this._isProjectionDirty = true;\n    this._isInvProjMatDirty = true;\n    this._isInvViewProjDirty.flag = true;\n  }\n\n  private _innerViewportToWorldPoint(point: Vector3, invViewProjMat: Matrix, out: Vector3): Vector3 {\n    // depth 是归一化的深度，0 是 nearPlane，1 是 farClipPlane\n    const depth = point.z * 2 - 1;\n    // 变换到裁剪空间矩阵\n    const clipPoint = MathTemp.tempVec4;\n    clipPoint.setValue(point.x * 2 - 1, 1 - point.y * 2, depth, 1);\n    Vector4.transform(clipPoint, invViewProjMat, clipPoint);\n    const invW = 1.0 / clipPoint.w;\n    out.x = clipPoint.x * invW;\n    out.y = clipPoint.y * invW;\n    out.z = clipPoint.z * invW;\n    return out;\n  }\n\n  /**\n   * @private\n   * 视图投影矩阵逆矩阵\n   */\n  get invViewProjMat(): Matrix {\n    if (this._isInvViewProjDirty.flag) {\n      this._isInvViewProjDirty.flag = false;\n      Matrix.multiply(this.inverseViewMatrix, this.inverseProjectionMatrix, this._invViewProjMat);\n    }\n    return this._invViewProjMat;\n  }\n\n  /**\n   * @private\n   * 投影矩阵逆矩阵。\n   */\n  get inverseProjectionMatrix(): Readonly<Matrix> {\n    if (this._isInvProjMatDirty) {\n      this._isInvProjMatDirty = false;\n      Matrix.invert(this.projectionMatrix, this._inverseProjectionMatrix);\n    }\n    return this._inverseProjectionMatrix;\n  }\n\n  //-------------------------------------------------deprecated---------------------------------------------------\n\n  /**\n   * @deprecated\n   * 视图矩阵逆矩阵。\n   */\n  get inverseViewMatrix(): Readonly<Matrix> {\n    this._transform.worldMatrix.cloneTo(this._inverseViewMatrix);\n    return this._inverseViewMatrix;\n  }\n\n  /**\n   * @deprecated\n   * @todo 涉及渲染管线修改 rhi.clearRenderTarget 方法\n   * @param clearMode\n   * @param backgroundColor\n   */\n  setClearMode(\n    clearMode: ClearMode = ClearMode.SOLID_COLOR,\n    backgroundColor: Vector4 = new Vector4(0.25, 0.25, 0.25, 1)\n  ): void {\n    this._clearMode = clearMode;\n    this._backgroundColor = backgroundColor;\n    this._renderPipeline.defaultRenderPass.clearParam = backgroundColor;\n    this._renderPipeline.defaultRenderPass.clearMode = clearMode;\n  }\n}\n","import { AssetPromise } from \"./AssetPromise\";\n\nconst mimeType = {\n  json: \"json\",\n  gltf: \"json\",\n  mtl: \"json\",\n  prefab: \"json\",\n  txt: \"text\",\n  bin: \"arraybuffer\",\n  png: \"image\",\n  webp: \"image\",\n  jpg: \"image\"\n};\n\nconst defaultRetryCount = 4;\nconst defaultTimeout = 15000;\nconst defaultInterval = 500;\n\nexport type RequestConfig = {\n  type?: XMLHttpRequestResponseType | \"image\";\n  retryCount?: number;\n  retryInterval?: number;\n  timeout?: number;\n} & RequestInit;\n\n/**\n * web端 请求\n * @param url 链接\n * @param config 加载配置\n */\nexport function request<T>(url: string, config: RequestConfig = {}): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const retryCount = config.retryCount ?? defaultRetryCount;\n    const retryInterval = config.retryInterval ?? defaultInterval;\n    config.timeout = config.timeout ?? defaultTimeout;\n    config.type = config.type ?? getMimeTypeFromUrl(url);\n    const realRequest = config.type === \"image\" ? requestImage : requestRes;\n    let lastError: Error;\n    const executor = new MultiExecutor(\n      () => {\n        return realRequest<T>(url, config)\n          .onProgress(setProgress)\n          .then((res) => {\n            resolve(res);\n            executor.stop();\n          })\n          .catch((err) => (lastError = err));\n      },\n      retryCount,\n      retryInterval\n    );\n    executor.start(() => {\n      reject(lastError);\n    });\n  });\n}\n\nfunction requestImage<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject) => {\n    const { timeout } = config;\n    const img = new Image();\n    const onerror = () => {\n      reject(new Error(`request ${url} fail`));\n    };\n    img.onerror = onerror;\n\n    img.onabort = onerror;\n\n    const timeoutId = setTimeout(() => {\n      reject(new Error(`request ${url} timeout`));\n    }, timeout);\n\n    img.onload = ((timeoutId) => {\n      return () => {\n        // Call requestAnimationFrame to avoid iOS's bug.\n        requestAnimationFrame(() => {\n          //@ts-ignore\n          resolve(img);\n        });\n        clearTimeout(timeoutId);\n      };\n    })(timeoutId);\n\n    img.crossOrigin = \"anonymous\";\n\n    img.src = url;\n  });\n}\n\nfunction requestRes<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = config.timeout;\n    config.method = config.method ?? \"get\";\n    xhr.onload = () => {\n      if (xhr.status < 200 || xhr.status >= 300) {\n        reject(new Error(`request failed from: ${url}`));\n        return;\n      }\n      const result = xhr.response ?? xhr.responseText;\n      resolve(result);\n    };\n    xhr.onerror = () => {\n      reject(new Error(`request failed from: ${url}`));\n    };\n    xhr.ontimeout = () => {\n      reject(new Error(`request timeout from: ${url}`));\n    };\n    xhr.onprogress = (e) => {\n      setProgress(e.loaded / e.total);\n    };\n    xhr.open(config.method, url, true);\n    xhr.withCredentials = config.credentials === \"include\";\n    //@ts-ignore\n    xhr.responseType = config.type;\n    const headers = config.headers;\n    if (headers) {\n      Object.keys(headers).forEach((name) => {\n        xhr.setRequestHeader(name, headers[name]);\n      });\n    }\n    xhr.send(config.body);\n  });\n}\n\nfunction getMimeTypeFromUrl(url: string) {\n  const extname = url.substring(url.lastIndexOf(\".\") + 1);\n  return mimeType[extname];\n}\n\nexport class MultiExecutor {\n  private _timeoutId: number = -100;\n  private _currentCount = 0;\n  constructor(\n    private execFunc: (count?: number) => Promise<any>,\n    private totalCount: number,\n    private interval: number\n  ) {\n    this.exec = this.exec.bind(this);\n  }\n\n  private done: Function;\n  start(done?: Function): void {\n    this.done = done;\n    this.exec();\n  }\n\n  stop(): void {\n    clearTimeout(this._timeoutId);\n  }\n\n  private exec(): void {\n    if (this._currentCount >= this.totalCount) {\n      this.done && this.done();\n      return;\n    }\n    this._currentCount++;\n    this.execFunc(this._currentCount).then(() => {\n      //@ts-ignore\n      this._timeoutId = setTimeout(this.exec, this.interval);\n    });\n  }\n}\n","import { LoadItem } from \"./LoadItem\";\nimport { AssetPromise } from \"./AssetPromise\";\nimport { RequestConfig, request } from \"./request\";\nimport { ResourceManager } from \"./ResourceManager\";\n/**\n * loader 抽象类。\n */\nexport abstract class Loader<T> {\n  request: <U>(url: string, config: RequestConfig) => AssetPromise<U> = request;\n  abstract load(item: LoadItem, resouceManager: ResourceManager): AssetPromise<T>;\n  constructor(public readonly useCache: boolean) {}\n}\n","/**\n * 资产类型。\n */\nexport enum AssetType {\n  /**\n   * 文本。\n   * @remarks 在资源管理器中不会根据 url 缓存。\n   */\n  Text = 0,\n  /**\n   * JSON。\n   * @remarks 在资源管理器中不会根据 url 缓存。\n   */\n  JSON = 1,\n  /**\n   * 缓冲。\n   * @remarks 在资源管理器中不会根据 url 缓存。\n   */\n  Buffer = 2,\n  /** 2D纹理。*/\n  Texture2D = 3,\n  /** 立方纹理。*/\n  TextureCube = 4,\n  /** 材质。*/\n  Material = 5,\n  /** 网格。*/\n  Mesh = 6,\n  /** 动画文件。*/\n  AnimationClip = 7,\n  /** 预设。*/\n  Perfab = 8, // 先走 GLTFLoader\n  /** 压缩纹理。*/\n  KTX = 9,\n  /** 立方压缩纹理。*/\n  KTXCube = 10\n  /** @todo 场景。*/\n  // Scene = 9\n}\n","import { EngineObject } from \"../base/EngineObject\";\nimport { removeFromArray } from \"../base/Util\";\nimport { Engine } from \"../Engine\";\n\n/**\n * 资产的基类，具有引用计数能力。\n */\nexport abstract class RefObject extends EngineObject {\n  /** 是否忽略垃圾回收的检查,如果为 true 则不受 ResourceManager.gc() 影响。*/\n  isGCIgnored: boolean = false;\n\n  private _refCount: number = 0;\n  private _refChildren: RefObject[] = [];\n  private _refParent: RefObject = null;\n  private _destroyed: boolean = false;\n\n  /**\n   * 被有效引用计数。\n   */\n  get refCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * 是否已销毁。\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  protected constructor(engine: Engine) {\n    super(engine);\n    engine.resourceManager._addRefObject(this.instanceId, this);\n  }\n\n  /**\n   * 销毁。\n   * @param force - 是否强制销毁,如果为 fasle 则 refCount = 0 可释放成功\n   * @returns 是否释放成功\n   */\n  destroy(force: boolean = false): boolean {\n    if (this._destroyed) return true;\n    if (!force && this._refCount !== 0) return false;\n    const resourceManager = this._engine.resourceManager;\n    // resourceManager maybe null,because engine has destroyed.\n    // TODO:the right way to fix this is to ensure destroy all when call engine.destroy,thus don't need to add this project.\n    if (resourceManager) {\n      resourceManager._deleteAsset(this);\n      resourceManager._deleteRefObject(this.instanceId);\n    }\n    if (this._refParent) {\n      removeFromArray(this._refParent._refChildren, this);\n    }\n    this._engine = null;\n    this._onDestroy();\n    this._destroyed = true;\n    return true;\n  }\n\n  /**\n   * @internal\n   * 把当前资源添加到资源管理中。\n   */\n  _addToResourceManager(path: string): void {\n    this._engine.resourceManager._addAsset(path, this);\n  }\n\n  /**\n   * @internal\n   * 添加资源引用数\n   */\n  _addRefCount(refCount: number): void {\n    this._refCount += refCount;\n    const refChildren = this._refChildren;\n    for (const item of refChildren) {\n      item._addRefCount(refCount);\n    }\n  }\n\n  /**\n   * @internal\n   * 添加引用资源。\n   */\n  _addRefChild(obj: RefObject): void {\n    this._refChildren.push(obj);\n    obj._refParent = this;\n    obj._addRefCount(this._refCount);\n  }\n\n  /**\n   * @internal\n   * 移出引用资源。\n   */\n  _removeRefChild(obj: RefObject): void {\n    const refChildren = this._refChildren;\n    if (removeFromArray(refChildren, obj)) {\n      obj._refParent = null;\n      obj._addRefCount(-this._refCount);\n    }\n  }\n\n  /**\n   * 当资源销毁时调用。\n   * 子类可重写该函数。\n   */\n  protected abstract _onDestroy(): void;\n}\n","import { Matrix, Vector3 } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { LightFeature } from \"./LightFeature\";\n\nconst _tempVec3 = new Vector3(0, 1, 0);\n\n/**\n * 灯光基类\n */\nexport abstract class Light extends Component {\n  protected _viewMat: Matrix;\n  protected _modelMat: Matrix;\n\n  /**\n   * 将灯光参数绑定到指定的材质对象上\n   * @param {Material} mtl 材质对象\n   * @param {string} uniformName 材质对象\n   * @private\n   */\n  abstract bindMaterialValues(mtl, uniformName: string);\n\n  /**\n   * 生成 Technique 所需的 uniform 定义\n   * @example\n   * const name = `u_pointLights[0]`;\n   * const lgtUniforms = APointLight.getUniformDefine(name)\n   * @param {string} uniformName\n   */\n  static getUniformDefine(uniformName: string) {\n    return {};\n  }\n\n  /**\n   * @param {Entity} entity 节点对象\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    entity.addEventListener(\"removedFromScene\", this._onDisable.bind(this));\n  }\n\n  /** 在对象Enable的时候，挂载到当前的Scene\n   * @private\n   */\n  _onEnable() {\n    this.scene.findFeature(LightFeature).attachRenderLight(this);\n  }\n\n  /** 在对象Disable的时候，从当前的Scene移除\n   * @private\n   */\n  _onDisable() {\n    this.scene.findFeature(LightFeature).detachRenderLight(this);\n  }\n\n  /**\n   * View 矩阵\n   * @member {Matrix}\n   * @readonly\n   */\n  get viewMatrix() {\n    if (!this._viewMat) this._viewMat = new Matrix();\n    Matrix.invert(this.inverseViewMatrix, this._viewMat);\n    return this._viewMat;\n  }\n\n  /**\n   * View 矩阵的逆矩阵\n   * @member {Matrix}\n   * @readonly\n   */\n  get inverseViewMatrix() {\n    if (!this._modelMat) this._modelMat = new Matrix();\n    Matrix.rotateAxisAngle(this.entity.transform.worldMatrix, _tempVec3, Math.PI, this._modelMat);\n\n    return this._modelMat;\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { DataType } from \"../base/Constant\";\nimport { Light } from \"./Light\";\n\n/**\n * 环境光创建类\n */\nexport class AmbientLight extends Light {\n  private _lightColor: Vector3;\n  public color: Vector3;\n  public intensity: number;\n\n  /**\n   * 生成 Technique 所需的 uniform 定义\n   * @param {string} uniformName\n   */\n  static getUniformDefine(uniformName: string) {\n    return {\n      [uniformName + \".color\"]: {\n        name: uniformName + \".color\",\n        type: DataType.FLOAT_VEC3\n      },\n      [uniformName + \".lightColor\"]: {\n        name: uniformName + \".lightColor\",\n        type: DataType.FLOAT_VEC3\n      },\n      [uniformName + \".intensity\"]: {\n        name: uniformName + \".intensity\",\n        type: DataType.FLOAT\n      }\n    };\n  }\n\n  /**\n   * @param {Entity} entity 节点对象\n   */\n  constructor(entity) {\n    super(entity);\n    this.color = new Vector3(1, 1, 1);\n    this.intensity = 1.0;\n\n    this._lightColor = new Vector3();\n  }\n\n  /** 获取环境光最终颜色\n   * @return {Vector3} 颜色\n   * @readonly\n   */\n  get lightColor() {\n    Vector3.scale(this.color, this.intensity, this._lightColor);\n    return this._lightColor;\n  }\n\n  /**\n   * 将灯光参数值提交到材质对象\n   */\n  bindMaterialValues(mtl, uniformName) {\n    mtl.setValue(uniformName + \".color\", this.color);\n    mtl.setValue(uniformName + \".lightColor\", this.lightColor);\n    mtl.setValue(uniformName + \".intensity\", this.intensity);\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { DataType } from \"../base/Constant\";\nimport { Light } from \"./Light\";\n\n/**\n * 方向光创建类\n */\nexport class DirectLight extends Light {\n  private _forward: Vector3 = new Vector3();\n  private _lightColor: Vector3;\n  private _reverseDirection: Vector3;\n  public color: Vector3;\n  public intensity: number;\n\n  /**\n   * @param {Entity} entity 节点对象\n   */\n  constructor(entity) {\n    super(entity);\n    this.color = new Vector3(1, 1, 1);\n    this.intensity = 1.0;\n    this._lightColor = new Vector3();\n    this._reverseDirection = new Vector3();\n  }\n\n  /** 获取方向光方向\n   * @return {Vector3} 方向向量\n   * @readonly\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /** 获取方向光最终颜色\n   * @return {Vector3} 颜色\n   * @readonly\n   */\n  get lightColor(): Vector3 {\n    Vector3.scale(this.color, this.intensity, this._lightColor);\n    return this._lightColor;\n  }\n\n  /** 方向光方向的反方向\n   * @return {Vector3} 方向向量\n   * @readonly\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._reverseDirection);\n    return this._reverseDirection;\n  }\n\n  /**\n   * 生成 Technique 所需的 uniform 定义\n   * @param {string} uniformName\n   */\n  static getUniformDefine(uniformName) {\n    /**\n     *   struct DirectLight {\n     *    vec3 color;\n     *    float intensity;\n     *    vec3 direction;\n     *    };\n     */\n    const uniforms = {};\n\n    uniforms[uniformName + \".color\"] = {\n      name: uniformName + \".color\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".lightColor\"] = {\n      name: uniformName + \".lightColor\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".intensity\"] = {\n      name: uniformName + \".intensity\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".direction\"] = {\n      name: uniformName + \".direction\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    return uniforms;\n  }\n\n  /**\n   * 将灯光参数值提交到材质对象\n   */\n  bindMaterialValues(mtl, uniformName) {\n    mtl.setValue(uniformName + \".color\", this.color);\n    mtl.setValue(uniformName + \".lightColor\", this.lightColor);\n    mtl.setValue(uniformName + \".intensity\", this.intensity);\n    mtl.setValue(uniformName + \".direction\", this.direction);\n  }\n}\n","import { Matrix3x3, Vector3 } from \"@oasis-engine/math\";\nimport { DataType } from \"../base/Constant\";\nimport { Light } from \"./Light\";\n\nconst cacheMat3 = new Matrix3x3();\n\n/**\n * 环境光源\n */\nexport class EnvironmentMapLight extends Light {\n  public diffuseMap;\n  public specularMap;\n  public diffuse: Vector3;\n  public specular: Vector3;\n  public diffuseIntensity;\n  public specularIntensity;\n\n  /**\n   * 生成 Technique 所需的 uniform 定义\n   * @param {string} uniformName\n   */\n  static getUniformDefine(uniformName) {\n    const uniforms = {};\n\n    uniforms[\"u_env_diffuseSampler\"] = {\n      name: \"u_env_diffuseSampler\",\n      type: DataType.SAMPLER_CUBE\n    };\n\n    uniforms[\"u_env_specularSampler\"] = {\n      name: \"u_env_specularSampler\",\n      type: DataType.SAMPLER_CUBE\n    };\n\n    uniforms[uniformName + \".diffuse\"] = {\n      name: uniformName + \".diffuse\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".specular\"] = {\n      name: uniformName + \".specular\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".mipMapLevel\"] = {\n      name: uniformName + \".mipMapLevel\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".transformMatrix\"] = {\n      name: uniformName + \".transformMatrix\",\n      type: DataType.FLOAT_MAT3\n    };\n\n    uniforms[uniformName + \".diffuseIntensity\"] = {\n      name: uniformName + \".diffuseIntensity\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".specularIntensity\"] = {\n      name: uniformName + \".specularIntensity\",\n      type: DataType.FLOAT\n    };\n\n    return uniforms;\n  }\n\n  /**\n   * 环境光源\n   * @param {Entity} entity 节点对象\n   */\n  constructor(entity) {\n    super(entity);\n    this.diffuse = new Vector3(0.3, 0.3, 0.3);\n    this.specular = new Vector3(0.5, 0.5, 0.5);\n    this.diffuseIntensity = 1;\n    this.specularIntensity = 1;\n  }\n\n  /**\n   * 是否使用diffuse贴图\n   * @private\n   * @returns {Boolean}\n   */\n  get useDiffuseMap() {\n    return !!this.diffuseMap;\n  }\n\n  /**\n   * 是否使用Specular贴图\n   * @private\n   * @returns {Boolean}\n   */\n  get useSpecularMap() {\n    return !!this.specularMap;\n  }\n\n  /**\n   * 将灯光参数绑定到指定的材质对象上\n   */\n  bindMaterialValues(mtl, uniformName) {\n    mtl.setValue(uniformName + \".diffuseIntensity\", this.diffuseIntensity);\n    mtl.setValue(uniformName + \".specularIntensity\", this.specularIntensity);\n\n    if (this.useDiffuseMap) {\n      mtl.setValue(\"u_env_diffuseSampler\", this.diffuseMap);\n    } else {\n      mtl.setValue(uniformName + \".diffuse\", this.diffuse);\n    }\n\n    if (this.useSpecularMap) {\n      mtl.setValue(\"u_env_specularSampler\", this.specularMap);\n      mtl.setValue(uniformName + \".mipMapLevel\", this.specularMap.mipmapCount);\n    } else {\n      mtl.setValue(uniformName + \".specular\", this.specular);\n    }\n\n    // 支持旋转\n    const transformMatrix = this.entity.transform.worldMatrix;\n    cacheMat3.setValueByMatrix(transformMatrix);\n    mtl.setValue(uniformName + \".transformMatrix\", cacheMat3);\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { DataType } from \"../base/Constant\";\nimport { Light } from \"./Light\";\n\n/**\n * 点光源创建类\n * @extends Light\n */\nexport class PointLight extends Light {\n  public color: Vector3 = new Vector3(1, 1, 1);\n  public intensity: number = 1.0;\n  public distance: number = 0;\n  public decay: number = 0;\n  private _lightColor: Vector3 = new Vector3();\n\n  /** 获取点光源位置\n   * @return {Vector3} 位置坐标\n   * @readonly\n   */\n  get position(): Vector3 {\n    return this.entity.worldPosition;\n  }\n\n  /** 获取点光源最终颜色\n   * @return {Vector3} 光源最终颜色\n   * @readonly\n   */\n  get lightColor(): Vector3 {\n    Vector3.scale(this.color, this.intensity, this._lightColor);\n    return this._lightColor;\n  }\n\n  /**\n   * 生成 Technique 所需的 uniform 定义\n   * @param {string} uniformName\n   */\n  static getUniformDefine(uniformName) {\n    /**\n      struct PointLight {\n        vec3 position;\n        vec3 color;\n        float intensity;\n        float distance;\n        float decay;\n      };\n     */\n    const uniforms = {};\n\n    uniforms[uniformName + \".position\"] = {\n      name: uniformName + \".position\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".color\"] = {\n      name: uniformName + \".color\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".lightColor\"] = {\n      name: uniformName + \".lightColor\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".intensity\"] = {\n      name: uniformName + \".intensity\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".distance\"] = {\n      name: uniformName + \".distance\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".decay\"] = {\n      name: uniformName + \".decay\",\n      type: DataType.FLOAT\n    };\n\n    return uniforms;\n  }\n\n  /**\n   * 将灯光参数值提交到材质对象\n   */\n  bindMaterialValues(mtl, uniformName) {\n    mtl.setValue(uniformName + \".position\", this.position);\n    mtl.setValue(uniformName + \".color\", this.color);\n    mtl.setValue(uniformName + \".lightColor\", this.lightColor);\n    mtl.setValue(uniformName + \".intensity\", this.intensity);\n    mtl.setValue(uniformName + \".distance\", this.distance);\n    mtl.setValue(uniformName + \".decay\", this.decay);\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { DataType } from \"../base/Constant\";\nimport { Light } from \"./Light\";\n\n/**\n * 聚光灯创建类\n * @extends Light\n */\nexport class SpotLight extends Light {\n  private _forward: Vector3 = new Vector3();\n\n  private _lightColor: Vector3;\n  private _inverseDirection: Vector3;\n  public color: Vector3 = new Vector3(1, 1, 1);\n  public penumbra: number = 0;\n  public distance: number = 0;\n  public intensity: number = 1.0;\n  public decay: number = 0;\n  public angle: number = Math.PI / 6;\n  /**\n   * @constructor\n   * @param {Entity} entity 节点对象\n   */\n  constructor(entity) {\n    super(entity);\n\n    this._lightColor = new Vector3();\n    this._inverseDirection = new Vector3();\n  }\n\n  /** 获取聚光灯位置\n   * @return {Vector3} 位置坐标\n   * @readonly\n   */\n  get position(): Vector3 {\n    return this.entity.worldPosition;\n  }\n\n  /** 获取聚光灯方向\n   * @return {Vector3} 方向向量\n   * @readonly\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /** 获取聚光灯方向的反方向\n   * @return {Vector3} 方向向量\n   * @readonly\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._inverseDirection);\n    return this._inverseDirection;\n  }\n\n  /** 最终光照颜色\n   * @return {Vector3} 最终光照颜色\n   * @readonly\n   */\n  get lightColor(): Vector3 {\n    Vector3.scale(this.color, this.intensity, this._lightColor);\n    return this._lightColor;\n  }\n\n  /**\n   * 生成 Technique 所需的 uniform 定义\n   * @param {string} uniformName\n   */\n  static getUniformDefine(uniformName) {\n    /**\n      struct SpotLight {\n        vec3 position;\n        vec3 direction;\n        vec3 color;\n        float intensity;\n        float distance;\n        float decay;\n        float angle;\n        float penumbra;\n      };\n     */\n    const uniforms = {};\n\n    uniforms[uniformName + \".position\"] = {\n      name: uniformName + \".position\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".direction\"] = {\n      name: uniformName + \".direction\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".color\"] = {\n      name: uniformName + \".color\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".lightColor\"] = {\n      name: uniformName + \".lightColor\",\n      type: DataType.FLOAT_VEC3\n    };\n\n    uniforms[uniformName + \".intensity\"] = {\n      name: uniformName + \".intensity\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".distance\"] = {\n      name: uniformName + \".distance\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".decay\"] = {\n      name: uniformName + \".decay\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".angle\"] = {\n      name: uniformName + \".angle\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".penumbra\"] = {\n      name: uniformName + \".penumbra\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".coneCos\"] = {\n      name: uniformName + \".coneCos\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".penumbraCos\"] = {\n      name: uniformName + \".penumbraCos\",\n      type: DataType.FLOAT\n    };\n\n    return uniforms;\n  }\n\n  /**\n   * 将灯光参数值提交到材质对象\n   */\n  bindMaterialValues(mtl, uniformName) {\n    mtl.setValue(uniformName + \".position\", this.position);\n    mtl.setValue(uniformName + \".direction\", this.direction);\n    mtl.setValue(uniformName + \".color\", this.color);\n    mtl.setValue(uniformName + \".lightColor\", this.lightColor);\n    mtl.setValue(uniformName + \".intensity\", this.intensity);\n    mtl.setValue(uniformName + \".distance\", this.distance);\n    mtl.setValue(uniformName + \".decay\", this.decay);\n    mtl.setValue(uniformName + \".angle\", this.angle);\n    mtl.setValue(uniformName + \".penumbra\", this.penumbra);\n    mtl.setValue(uniformName + \".coneCos\", Math.cos(this.angle));\n    mtl.setValue(uniformName + \".penumbraCos\", Math.cos(this.angle * (1 - this.penumbra)));\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { SceneFeature } from \"../SceneFeature\";\nimport { AmbientLight } from \"./AmbientLight\";\nimport { DirectLight } from \"./DirectLight\";\nimport { EnvironmentMapLight } from \"./EnvironmentMapLight\";\nimport { Light } from \"./Light\";\nimport { PointLight } from \"./PointLight\";\nimport { SpotLight } from \"./SpotLight\";\n\n/**\n * 判断场景中是否有灯光\n * @returns {boolean}\n * @private\n */\nexport function hasLight() {\n  return this.findFeature(LightFeature).visibleLights.length > 0;\n}\n\n/**\n * Scene Feature：在场景中添加灯光特性\n * @extends SceneFeature\n * @private\n */\nexport class LightFeature extends SceneFeature {\n  public visibleLights: Light[];\n\n  /**\n   * 获取光源种类的相应数量\n   * */\n  get lightSortAmount(): {\n    ambientLightCount: number;\n    directLightCount: number;\n    pointLightCount: number;\n    spotLightCount: number;\n    envMapLightCount: number;\n    useDiffuseEnv: boolean;\n    useSpecularEnv: boolean;\n  } {\n    let ambientLightCount = 0;\n    let directLightCount = 0;\n    let pointLightCount = 0;\n    let spotLightCount = 0;\n    let envMapLightCount = 0;\n    let useDiffuseEnv = false;\n    let useSpecularEnv = false;\n\n    let lights = this.visibleLights;\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const light = lights[i];\n      if (light instanceof AmbientLight) {\n        ambientLightCount++;\n      } else if (light instanceof DirectLight) {\n        directLightCount++;\n      } else if (light instanceof PointLight) {\n        pointLightCount++;\n      } else if (light instanceof SpotLight) {\n        spotLightCount++;\n      } else if (light instanceof EnvironmentMapLight) {\n        envMapLightCount++;\n        useDiffuseEnv = light.useDiffuseMap;\n        useSpecularEnv = light.useSpecularMap;\n      }\n    }\n    return {\n      ambientLightCount,\n      directLightCount,\n      pointLightCount,\n      spotLightCount,\n      envMapLightCount,\n      useDiffuseEnv,\n      useSpecularEnv\n    };\n  }\n\n  constructor() {\n    super();\n    this.visibleLights = [];\n  }\n\n  /**\n   * 向当前场景注册一个灯光对象\n   * @param {Light} light 灯光对象\n   * @private\n   */\n  attachRenderLight(light: Light) {\n    const index = this.visibleLights.indexOf(light);\n    if (index == -1) {\n      this.visibleLights.push(light);\n    } else {\n      Logger.warn(\"Light already attached.\");\n    }\n  }\n\n  /**\n   * 从当前场景移除一个灯光对象\n   * @param {Light} light 灯光对象\n   * @private\n   */\n  detachRenderLight(light: Light) {\n    const index = this.visibleLights.indexOf(light);\n    if (index != -1) {\n      this.visibleLights.splice(index, 1);\n    }\n  }\n\n  /**\n   * 将灯光数据绑定到指定的材质中（指定 Uniform 的值）\n   * @param {Material} mtl 材质对象\n   * @private\n   */\n  bindMaterialValues(mtl) {\n    /**\n     * ambientLight 和 envMapLight 在 scene 中只用最后一个\n     * */\n    let ambientLightCount = 0;\n    let directLightCount = 0;\n    let pointLightCount = 0;\n    let spotLightCount = 0;\n    let envMapLightCount = 0;\n\n    let lights = this.visibleLights;\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const light = lights[i];\n      if (light instanceof AmbientLight) {\n        light.bindMaterialValues(mtl, `u_ambientLight`);\n        ambientLightCount++;\n      } else if (light instanceof DirectLight) {\n        light.bindMaterialValues(mtl, `u_directLights[${directLightCount++}]`);\n      } else if (light instanceof PointLight) {\n        light.bindMaterialValues(mtl, `u_pointLights[${pointLightCount++}]`);\n      } else if (light instanceof SpotLight) {\n        light.bindMaterialValues(mtl, `u_spotLights[${spotLightCount++}]`);\n      } else if (light instanceof EnvironmentMapLight) {\n        light.bindMaterialValues(mtl, `u_envMapLight`);\n        envMapLightCount++;\n      }\n    }\n  }\n\n  /**\n   * 生成 Technique 所需的全部 uniform 定义\n   */\n  getUniformDefine() {\n    let uniforms = {};\n    let ambientLightCount = 0;\n    let directLightCount = 0;\n    let pointLightCount = 0;\n    let spotLightCount = 0;\n    let envMapLightCount = 0;\n\n    let lights = this.visibleLights;\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const light = lights[i];\n      if (light instanceof AmbientLight && !ambientLightCount++) {\n        uniforms = { ...uniforms, ...AmbientLight.getUniformDefine(`u_ambientLight`) };\n      } else if (light instanceof DirectLight) {\n        uniforms = { ...uniforms, ...DirectLight.getUniformDefine(`u_directLights[${directLightCount++}]`) };\n      } else if (light instanceof PointLight) {\n        uniforms = { ...uniforms, ...PointLight.getUniformDefine(`u_pointLights[${pointLightCount++}]`) };\n      } else if (light instanceof SpotLight) {\n        uniforms = { ...uniforms, ...SpotLight.getUniformDefine(`u_spotLights[${spotLightCount++}]`) };\n      } else if (light instanceof EnvironmentMapLight && !envMapLightCount++) {\n        uniforms = { ...uniforms, ...EnvironmentMapLight.getUniformDefine(`u_envMapLight`) };\n      }\n    }\n    return uniforms;\n  }\n}\n","import { SceneFeature } from \"../SceneFeature\";\nimport { Collider } from \"./Collider\";\n\nexport class ColliderFeature extends SceneFeature {\n  colliders: Collider[];\n  constructor() {\n    super();\n\n    this.colliders = [];\n  }\n\n  /**\n   * 添加一个 Collider 组件\n   * @param {Collider} collider 碰撞体对象\n   * @private\n   */\n  attachCollider(collider: Collider) {\n    this.colliders.push(collider);\n  }\n\n  /**\n   * 移除一个Collider组件\n   * @param {Collider} collider 碰撞体对象\n   * @private\n   */\n  detachCollider(collider: Collider) {\n    const index = this.colliders.indexOf(collider);\n    if (index != -1) {\n      this.colliders.splice(index, 1);\n    }\n  }\n}\n","import { MaskList } from \"../base/Constant\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { ColliderFeature } from \"./ColliderFeature\";\n\n/**\n * 碰撞体组件的基类, 定义碰撞体的数据\n */\nexport class Collider extends Component {\n  /**\n   * collider flg\n   */\n  tag: MaskList = MaskList.EVERYTHING;\n\n  /**\n   * @param {Entity} entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  /** 事件回调：在对象Enable的时候，挂载到当前的Scene\n   * @private\n   */\n  _onEnable(): void {\n    this.scene.findFeature(ColliderFeature).attachCollider(this);\n  }\n\n  /** 事件回调：在对象Disable的时候，从当前的Scene移除\n   * @private\n   */\n  _onDisable(): void {\n    this.scene.findFeature(ColliderFeature).detachCollider(this);\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\n\n/**\n * 轴对齐的包围盒（AABBox）碰撞体组件\n * @extends Collider\n */\nexport class ABoxCollider extends Collider {\n  private static _tempVec3: Vector3 = new Vector3();\n\n  public boxMin: Vector3;\n  public boxMax: Vector3;\n  private _corners: Array<Vector3> = [];\n  private _cornerFlag: boolean = false;\n\n  /**\n   * 构造函数\n   * @param {Entity} entity 对象所在节点\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this.boxMin = new Vector3(-0.5, -0.5, -0.5);\n    this.boxMax = new Vector3(0.5, 0.5, 0.5);\n  }\n\n  /**\n   * 使用范围坐标，设置包围盒\n   * @param {Vector3} min 最小坐标\n   * @param {Vector3} max 最大坐标\n   */\n  setBoxMinMax(min: Vector3, max: Vector3) {\n    this.boxMin = min;\n    this.boxMax = max;\n\n    this._cornerFlag = true;\n  }\n\n  /**\n   * 使用中心点和Size的方式设置包围盒\n   * @param {Vector3} center 包围盒的中心点\n   * @param {Vector3} size 包围盒的3个轴向的大小\n   */\n  setBoxCenterSize(center: Vector3, size: Vector3) {\n    const halfSize = ABoxCollider._tempVec3;\n    Vector3.scale(size, 0.5, halfSize);\n    Vector3.add(center, halfSize, this.boxMax);\n    Vector3.subtract(center, halfSize, this.boxMin);\n\n    this._cornerFlag = true;\n  }\n\n  /**\n   * 取得八个顶点的位置\n   */\n  getCorners(): Vector3[] {\n    if (this._cornerFlag) {\n      const minX = this.boxMin.x;\n      const minY = this.boxMin.y;\n      const minZ = this.boxMin.z;\n      const w = this.boxMax.x - minX;\n      const h = this.boxMax.y - minY;\n      const d = this.boxMax.z - minZ;\n\n      if (this._corners.length === 0) {\n        for (let i = 0; i < 8; ++i) {\n          this._corners.push(new Vector3());\n        }\n      }\n\n      this._corners[0].setValue(minX + w, minY + h, minZ + d);\n      this._corners[1].setValue(minX, minY + h, minZ + d);\n      this._corners[2].setValue(minX, minY, minZ + d);\n      this._corners[3].setValue(minX + w, minY, minZ + d);\n      this._corners[4].setValue(minX + w, minY + h, minZ);\n      this._corners[5].setValue(minX, minY + h, minZ);\n      this._corners[6].setValue(minX, minY, minZ);\n      this._corners[7].setValue(minX + w, minY, minZ);\n\n      this._cornerFlag = false;\n    }\n\n    return this._corners;\n  }\n}\n","import { Collider } from \"./Collider\";\nimport { Ray, RaycastHit, Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\n/**\n * 球型碰撞体组件\n * @extends Collider\n */\nexport class ASphereCollider extends Collider {\n  center: Vector3;\n\n  radius: number;\n  /**\n   * @constructor\n   * @param {Entity} entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    /**\n     * 球心的坐标(在Local坐标系)\n     * @member {Vector3}\n     */\n    this.center = new Vector3();\n\n    /**\n     * 球体的半径\n     * @member {float}\n     */\n    this.radius = 1;\n  }\n\n  /**\n   * 射线检测\n   * @param ray - 射线\n   * @param hit - 碰撞信息\n   */\n  raycast(ray: Ray, hit: RaycastHit) {}\n\n  /**\n   * 设置球体的属性数据\n   * @param {Vector3} center 球心坐标\n   * @param {number} radius 球的半径\n   */\n  setSphere(center: Vector3, radius: number) {\n    this.center = center;\n    this.radius = radius;\n  }\n}\n","import { Collider } from \"./Collider\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\n\n/**\n * 平面（无限大）碰撞体组件，平面的位置和朝向与SceneObject一致\n * @extends Collider\n */\nexport class PlaneCollider extends Collider {\n  planePoint: Vector3;\n\n  normal: Vector3;\n  /**\n   * @constructor\n   * @param {Entity} entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    /**\n     * 平面经过点的坐标(在Local坐标系)\n     * @member {Vector3}\n     */\n    this.planePoint = new Vector3();\n\n    /**\n     * 平面法线的方向\n     * @member {Vector3}\n     */\n    this.normal = new Vector3(0, 1, 0);\n  }\n\n  /**\n   * 使用Local坐标，设置point\n   * @param {Vector3} point 平面上的一个点：(p-p0)·n = 0\n   * @param {Vector3} normal 平面的法线\n   */\n  setPlane(point: Vector3, normal: Vector3) {\n    this.planePoint = point;\n    this.normal = normal;\n  }\n}\n","import { Vector3, Matrix, Ray, RaycastHit } from \"@oasis-engine/math\";\nimport { MaskList } from \"../base/Constant\";\nimport { Scene } from \"../Scene\";\nimport { ColliderFeature } from \"../collider/ColliderFeature\";\nimport { ABoxCollider } from \"../collider/ABoxCollider\";\nimport { ASphereCollider } from \"../collider/ASphereCollider\";\nimport { PlaneCollider } from \"../collider/PlaneCollider\";\n\n/**\n * 对场景中所有 Collider 进行射线检测，返回离射线起点最近的一个\n * @param {Ray} _ray 使用的射线，对于点击拾取，这个设想可以调用 CameraComponent.screenPointToRay() 方法获得\n * @param {Vector3} _outPos 射线和碰撞体的交点\n * @return {ACollider} 射线检测结果\n */\n(Scene.prototype as any).raycast = function (_ray, _outPos: Vector3, tag: MaskList = MaskList.EVERYTHING) {\n  const ray = new Ray(_ray.origin, _ray.direction);\n  const cf = this.findFeature(ColliderFeature);\n  const colliders = cf.colliders;\n\n  let nearestHit = new RaycastHit();\n\n  for (let i = 0, len = colliders.length; i < len; i++) {\n    const collider = colliders[i];\n    if (!collider.entity.isActiveInHierarchy) {\n      continue;\n    }\n\n    if (!(collider.tag & tag)) {\n      continue;\n    }\n    const hit = new RaycastHit();\n    if (collider.raycast(ray, hit)) {\n      if (hit.distance < nearestHit.distance) {\n        nearestHit = hit;\n      }\n    }\n  } // end of for\n\n  if (_outPos && nearestHit.collider) {\n    nearestHit.point.cloneTo(_outPos);\n  }\n\n  return nearestHit.collider;\n};\n\n/**\n * 执行射线检测\n * @param {Ray} ray\n * @param {RaycastHit} hit\n */\n(ABoxCollider.prototype as any).raycast = function (ray, hit) {\n  const localRay = _getLocalRay(this, ray);\n  const intersect = localRay.intersectAABB(this.boxMax, this.boxMin);\n  if (intersect) {\n    _updateHitResult(this, localRay, intersect, hit, ray.origin);\n    return true;\n  } else {\n    return false;\n  } // end of else\n};\n\n(ASphereCollider.prototype as any).raycast = function (ray, hit) {\n  const localRay = _getLocalRay(this, ray);\n  const intersect = localRay.intersectSphere(this.center, this.radius);\n  if (intersect) {\n    _updateHitResult(this, localRay, intersect, hit, ray.origin);\n    return true;\n  } else {\n    return false;\n  } // end of else\n};\n\n(PlaneCollider.prototype as any).raycast = function (ray, hit) {\n  const localRay = _getLocalRay(this, ray);\n  const intersect = localRay.intersectPlane(this.planePoint, this.normal);\n  if (intersect) {\n    _updateHitResult(this, localRay, intersect, hit, ray.origin);\n    return true;\n  } else {\n    return false;\n  } // end of else\n};\n\n/**\n * 计算世界坐标系中的碰撞点\n * @param {Ray} ray\n * @param {number} distance\n * @param {RaycastHit} outHit\n * @private\n */\nfunction _updateHitResult(collider, ray: Ray, distance: number, outHit: RaycastHit, origin: Vector3) {\n  const hitPos = ray.getPoint(distance);\n  Vector3.transformCoordinate(hitPos, collider.entity.transform.worldMatrix, hitPos);\n\n  outHit.distance = Vector3.distance(origin, hitPos);\n  outHit.collider = collider;\n  outHit.point = hitPos;\n}\n\n/**\n * transform ray to local space\n * @param {Ray} ray\n * @private\n */\n\nfunction _getLocalRay(collider, ray) {\n  const worldToLocal = collider.entity.getInvModelMatrix();\n\n  // o = worldToLocal * vec4(ray.origin, 1)\n  const o = new Vector3();\n  Vector3.transformCoordinate(ray.origin, worldToLocal, o);\n\n  // d = worldToLocal * vec4(ray.direction, 0)\n  const d = new Vector3();\n  _transformDirection(d, ray.direction, worldToLocal);\n\n  return new Ray(o, d);\n}\n\n// a: vec3\n// m: mat4\n// return m * vec3(a, 0)\nfunction _transformDirection(out: Vector3, a: Vector3, m: Matrix) {\n  const x = a.x;\n  const y = a.y;\n  const z = a.z;\n  const e = m.elements;\n  out.x = x * e[0] + y * e[4] + z * e[8];\n  out.y = x * e[1] + y * e[5] + z * e[9];\n  out.z = x * e[2] + y * e[6] + z * e[10];\n  return out;\n}\n","import { BoundingBox, Vector3 } from \"@oasis-engine/math\";\nimport { Engine, EngineObject } from \"..\";\nimport { Primitive } from \"../graphic/Primitive\";\nimport { SubPrimitive } from \"../graphic/SubPrimitive\";\n\n/**\n * Mesh Asset Object\n */\nexport class Mesh extends EngineObject {\n  /** 名称。*/\n  name: string;\n  primitives: Primitive[] = [];\n  groups: SubPrimitive[] = [];\n  weights: number[];\n  readonly bounds: BoundingBox = new BoundingBox(new Vector3(), new Vector3());\n\n  /**\n   * 构造函数\n   * @param {string} name 名称\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n  }\n\n  updatePrimitiveWeightsIndices(weightsIndices: number[]) {\n    // this.primitives.forEach((primitive) => {\n    //   primitive.updateWeightsIndices(weightsIndices);\n    // });\n  }\n\n  destroy() {\n    this.primitives = null;\n  }\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { AssetObject } from \"../asset/AssetObject\";\n\nlet skinID = 0;\n\n/**\n * mesh skin data, equal glTF skins define\n * @class\n */\nexport class Skin extends AssetObject {\n  public inverseBindMatrices: Matrix[];\n  public joints: string[];\n  public skeleton: string;\n  /**\n   * 构造函数\n   * @param {string} name 名称\n   */\n  constructor(name) {\n    super(null);\n\n    this.inverseBindMatrices = []; // inverse bind matrix array, element type: gl-matrix.mat4\n    this.joints = []; // joints name array, element type: string\n    this.skeleton = \"none\"; // root bone name\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { ignoreClone, shallowClone } from \"../clone/CloneManager\";\nimport { Entity } from \"../Entity\";\nimport { Material } from \"../material/Material\";\nimport { RenderableComponent } from \"../RenderableComponent\";\nimport { RenderElement } from \"../RenderPipeline/RenderElement\";\nimport { Mesh } from \"./Mesh\";\n\n// TODO 硬编码，后续添加到 RenderableComponent 内\nfunction addPrimitivesRefCount(mesh: Mesh, refCount: number): void {\n  const primitives = mesh.primitives;\n  for (let i = 0, l = primitives.length; i < l; i++) {\n    primitives[i]._addRefCount(refCount);\n  }\n}\n\n/**\n * 负责渲染一个Mesh对象的组件\n */\nexport class MeshRenderer extends RenderableComponent {\n  private _mesh: Mesh;\n  @ignoreClone\n  private _instanceMaterials: Material[] = [];\n  @shallowClone\n  private _sharedMaterials: Material[] = [];\n\n  constructor(entity: Entity) {\n    super(entity);\n\n    this._mesh = null; // Mesh Asset Object\n  }\n\n  /**\n   * 当前绑定的 Mesh 对象\n   */\n  get mesh() {\n    return this._mesh;\n  }\n\n  /**\n   * 指定需要渲染的Mesh对象；多个MeshRenderer对象可以引用同一个Mesh对象\n   * @param {Mesh} mesh Mesh 对象\n   */\n  set mesh(mesh: Mesh) {\n    if (this._mesh) {\n      // TODO 硬编码，后续添加到 RenderableComponent 内\n      addPrimitivesRefCount(this._mesh, -1);\n    }\n    // TODO 硬编码，后续添加到 RenderableComponent 内\n    addPrimitivesRefCount(mesh, 1);\n    this._mesh = mesh;\n    this._sharedMaterials = [];\n    this._instanceMaterials = [];\n  }\n\n  /**\n   * 指定一个Primitive所使用的材质（替代Primitive的默认材质）\n   * @param {number} primitiveIndex Primitive 的名称\n   * @param {Material} material 材质对象\n   */\n  setSharedMaterial(primitiveIndex: number, material: Material) {\n    if (this._sharedMaterials[primitiveIndex]) {\n      this._sharedMaterials[primitiveIndex]._addRefCount(-1);\n    }\n    material._addRefCount(1);\n    this._sharedMaterials[primitiveIndex] = material;\n  }\n\n  /**\n   * 指定一个Primitive所使用的材质（替代Primitive的默认材质）\n   * @param {number} primitiveIndex Primitive 的名称\n   * @param {Material} material 材质对象\n   */\n  setMaterial(primitiveIndex: number, material: Material) {\n    if (this._instanceMaterials[primitiveIndex]) {\n      this._instanceMaterials[primitiveIndex]._addRefCount(-1);\n    }\n    material._addRefCount(1);\n    this._instanceMaterials[primitiveIndex] = material;\n  }\n\n  /**\n   * 取得这个组件独有的材质对象\n   * @param {number} primitiveIndex 索引值\n   * @return {Material}\n   */\n  getInstanceMaterial(primitiveIndex: number): Material {\n    return this._instanceMaterials[primitiveIndex];\n  }\n\n  /**\n   * 取得共享的Primitive的材质对象\n   * @param {number} primitiveIndex 索引值\n   * @return {Material}\n   */\n  getSharedMaterial(primitiveIndex: number): Material {\n    return this._sharedMaterials[primitiveIndex];\n  }\n\n  /**\n   * 执行渲染\n   * @param {CameraComponent} camera\n   */\n  render(camera: Camera) {\n    const mesh = this._mesh;\n    if (!mesh) {\n      return;\n    }\n\n    const renderPipeline = camera._renderPipeline;\n    const { primitives, groups } = mesh;\n\n    //-- render every primitive\n    for (let i = 0, len = primitives.length; i < len; i++) {\n      const primitive = primitives[i];\n      const material = this._instanceMaterials[i] || this._sharedMaterials[i];\n      if (material) {\n        const element = RenderElement.getFromPool();\n        element.setValue(this, primitive, groups[i], material);\n        renderPipeline.pushPrimitive(element);\n      } else {\n        Logger.error(\"Primitive has no material: \" + primitive.name);\n      }\n    } // end of for\n  }\n\n  /**\n   * 释放资源\n   */\n  destroy() {\n    super.destroy();\n\n    //-- release mesh\n    this._mesh = null;\n\n    //-- materials\n    this._instanceMaterials = [];\n    this._sharedMaterials = [];\n\n    // 删除引用计数\n    for (let i = 0; i < this._instanceMaterials.length; i++) {\n      this._instanceMaterials[i]._addRefCount(-1);\n    }\n\n    // 删除引用计数\n    for (let i = 0; i < this._sharedMaterials.length; i++) {\n      this._sharedMaterials[i]._addRefCount(-1);\n    }\n\n    if (this._mesh) {\n      addPrimitivesRefCount(this._mesh, -1);\n    }\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: any): void {\n    const localBounds: any = this.mesh.bounds;\n    const worldMatrix: any = this._entity.transform.worldMatrix;\n    Vector3.transformCoordinate(localBounds.min, worldMatrix, worldBounds.min); //TODO:简单模式，有漏洞，待AABB重构\n    Vector3.transformCoordinate(localBounds.max, worldMatrix, worldBounds.max);\n  }\n}\n","/**\n * 纹理的过滤模式。\n */\nexport enum TextureFilterMode {\n  /** 点过滤。*/\n  Point = 0,\n  /** 双线性过滤。*/\n  Bilinear = 1,\n  /** 三线性过滤。*/\n  Trilinear = 2\n}\n","/**\n * 纹理格式枚举。\n */\nexport enum TextureFormat {\n  /** RGB格式，每通道8 bits。*/\n  R8G8B8,\n  /** RGBA格式，每通道8 bits。*/\n  R8G8B8A8,\n  /** RGBA格式,每通道4 bits*/\n  R4G4B4A4,\n  /** RGBA格式,R通道5 bits，G通道5 bits，B通道5 bits， A通道1 bit。*/\n  R5G5B5A1,\n  /** RGB格式,R通道5 bits，G通道6 bits，B通道5 bits。*/\n  R5G6B5,\n  /** 透明格式，8 bits。*/\n  Alpha8,\n  /** RGBA格式，每个通道32 bits。*/\n  R32G32B32A32,\n  /** RGB压缩格式的压缩格式。*/\n  DXT1,\n  /** RGBA压缩格式的压缩格式。*/\n  DXT5,\n  /** RGB压缩格式，4 bits每像素。*/\n  ETC1_RGB,\n  /** RGB压缩格式，4 bits每像素。*/\n  ETC2_RGB,\n  /** RGBA压缩格式，5 bits每像素,RGB 4 bit,Alpha 1 bit。*/\n  ETC2_RGBA5,\n  /** RGB压缩格式，8 bits每像素。*/\n  ETC2_RGBA8,\n  /** RGB压缩格式，2 bits每像素。*/\n  PVRTC_RGB2,\n  /** RGBA压缩格式，2 bits每像素。*/\n  PVRTC_RGBA2,\n  /** RGB压缩格式，4 bits每像素。*/\n  PVRTC_RGB4,\n  /** RGBA压缩格式，4 bits每像素。*/\n  PVRTC_RGBA4,\n  /** RGB(A)压缩格式，128 bits 每4x4像素块。*/\n  ASTC_4x4,\n  /** RGB(A)压缩格式，128 bits 每5x5像素块。*/\n  ASTC_5x5,\n  /** RGB(A)压缩格式，128 bits 每6x6像素块。*/\n  ASTC_6x6,\n  /** RGB(A)压缩格式，128 bits 每8x8像素块。*/\n  ASTC_8x8,\n  /** RGB(A)压缩格式，128 bits 每10x10像素块。*/\n  ASTC_10x10,\n  /** RGB(A)压缩格式，128 bits 每12x12像素块。*/\n  ASTC_12x12\n}\n","/**\n * 纹理的循环模式。\n */\nexport enum TextureWrapMode {\n  /** 截取模式，超过纹理边界使用边缘像素的颜色。 */\n  Clamp = 0,\n  /** 重复模式，超过纹理边界会循环平铺。*/\n  Repeat = 1,\n  /** 镜像重复模式，超过纹理边界会镜像循环平铺。*/\n  Mirror = 2\n}\n","import { DataType, UniformSemantic } from \"../base/Constant\";\n\nexport interface RenderTargetConfig {\n  width?: number;\n  height?: number;\n  clearColor?;\n  enableDepthTexture?: boolean;\n  isCube?: boolean;\n  /** WebGL2 时，可以开启硬件层的 MSAA */\n  samples?: number;\n  isMulti?: boolean;\n  /** color Buffer 输出是否要 float 浮点类型 */\n  colorBufferFloat?: boolean;\n}\n\nexport type Rect = { x: number; y: number; width: number; height: number };\n\nexport type TechniqueStates = {\n  enable?: GLenum[];\n  disable?: GLenum[];\n  functions?: {\n    [key: string]: any;\n  };\n};\n\nexport interface Attributes {\n  [key: string]: {\n    name: string;\n    semantic: string;\n    type: DataType;\n  };\n}\n\nexport interface Uniforms {\n  [key: string]: {\n    name: string;\n    semantic?: UniformSemantic | string;\n    type: DataType;\n  };\n}\n\nexport interface TextureFormatDetail {\n  internalFormat: GLint;\n  baseFormat?: GLenum;\n  dataType?: GLenum;\n  isCompressed: boolean;\n  attachment?: GLenum;\n}\n\n/**\n * @deprecated\n */\nexport enum GLCompressedTextureInternalFormat {\n  // astc\n  RGBA_ASTC_4X4_KHR = 0x93b0,\n  RGBA_ASTC_5X4_KHR = 0x93b1,\n  RGBA_ASTC_5X5_KHR = 0x93b2,\n  RGBA_ASTC_6X5_KHR = 0x93b3,\n  RGBA_ASTC_6X6_KHR = 0x93b4,\n  RGBA_ASTC_8X5_KHR = 0x93b5,\n  RGBA_ASTC_8X6_KHR = 0x93b6,\n  RGBA_ASTC_8X8_KHR = 0x93b7,\n  RGBA_ASTC_10X5_KHR = 0x93b8,\n  RGBA_ASTC_10X6_KHR = 0x93b9,\n  RGBA_ASTC_10X8_KHR = 0x93ba,\n  RGBA_ASTC_10X10_KHR = 0x93bb,\n  RGBA_ASTC_12X10_KHR = 0x93bc,\n  RGBA_ASTC_12X12_KHR = 0x93bd,\n  SRGB8_ALPHA8_ASTC_4X4_KHR = 0x93d0,\n  SRGB8_ALPHA8_ASTC_5X4_KHR = 0x93d1,\n  SRGB8_ALPHA8_ASTC_5X5_KHR = 0x93d2,\n  SRGB8_ALPHA8_ASTC_6X5_KHR = 0x93d3,\n  SRGB8_ALPHA8_ASTC_6X6_KHR = 0x93d4,\n  SRGB8_ALPHA8_ASTC_8X5_KHR = 0x93d5,\n  SRGB8_ALPHA8_ASTC_8X6_KHR = 0x93d6,\n  SRGB8_ALPHA8_ASTC_8X8_KHR = 0x93d7,\n  SRGB8_ALPHA8_ASTC_10X5_KHR = 0x93d8,\n  SRGB8_ALPHA8_ASTC_10X6_KHR = 0x93d9,\n  SRGB8_ALPHA8_ASTC_10X8_KHR = 0x93da,\n  SRGB8_ALPHA8_ASTC_10X10_KHR = 0x93db,\n  SRGB8_ALPHA8_ASTC_12X10_KHR = 0x93dc,\n  SRGB8_ALPHA8_ASTC_12X12_KHR = 0x93dd,\n\n  // etc1\n  RGB_ETC1_WEBGL = 0x8d64,\n\n  // etc2\n  R11_EAC = 0x9270,\n  SIGNED_R11_EAC = 0x9271,\n  RG11_EAC = 0x9272,\n  SIGNED_RG11_EAC = 0x9273,\n  RGB8_ETC2 = 0x9274,\n  SRGB8_ETC2 = 0x9275,\n  RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\n  SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\n  RGBA8_ETC2_EAC = 0x9278,\n  SRGB8_ALPHA8_ETC2_EAC = 0x9279,\n\n  // pvrtc\n  RGB_PVRTC_4BPPV1_IMG = 0x8c00,\n  RGB_PVRTC_2BPPV1_IMG = 0x8c01,\n  RGBA_PVRTC_4BPPV1_IMG = 0x8c02,\n  RGBA_PVRTC_2BPPV1_IMG = 0x8c03,\n\n  // s3tc\n  RGB_S3TC_DXT1_EXT = 0x83f0,\n  RGBA_S3TC_DXT1_EXT = 0x83f1,\n  RGBA_S3TC_DXT3_EXT = 0x83f2,\n  RGBA_S3TC_DXT5_EXT = 0x83f3\n}\n","/**\n * 渲染缓冲颜色格式枚举。\n */\nexport enum RenderBufferColorFormat {\n  /** RGB格式，每通道8 bits。*/\n  R8G8B8,\n  /** RGBA格式，每通道8 bits。*/\n  R8G8B8A8,\n  /** RGBA格式,每通道4 bits*/\n  R4G4B4A4,\n  /** RGBA格式,R通道5 bits，G通道5 bits，B通道5 bits， A通道1 bit。*/\n  R5G5B5A1,\n  /** RGB格式,R通道5 bits，G通道6 bits，B通道5 bits。*/\n  R5G6B5,\n  /** 透明格式，8 bits。*/\n  Alpha8,\n  /** RGBA格式,每通道16 bits。*/\n  R16G16B16A16,\n  /** RGBA格式，每个通道32 bits。*/\n  R32G32B32A32\n}\n","/**\n * 渲染缓冲深度格式枚举。\n */\nexport enum RenderBufferDepthFormat {\n  /** 深度缓冲，自动选择精度 */\n  Depth = 0,\n  /** 深度模版缓冲，自动选择精度 */\n  DepthStencil = 1,\n  /** 模板缓冲 */\n  Stencil = 2,\n\n  /** 强制16位深度缓冲 */\n  Depth16 = 3,\n  /** 强制24位深度缓冲 */\n  Depth24 = 4,\n  /** 强制32位深度缓冲 */\n  Depth32 = 5,\n  /** 强制24位深度缓冲+8位模版缓冲 */\n  Depth24Stencil8 = 6,\n  /** 强制32位深度缓冲+8位模版缓冲 */\n  Depth32Stencil8 = 7\n}\n","import { RefObject } from \"../asset/RefObject\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { GLCompressedTextureInternalFormat, TextureFormatDetail } from \"../material/type\";\nimport { RenderBufferColorFormat } from \"./enums/RenderBufferColorFormat\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\n\n/**\n * 纹理的基类，包含了纹理相关类的一些公共功能。\n */\nexport abstract class Texture extends RefObject {\n  /** @internal */\n  static _readFrameBuffer: WebGLFramebuffer = null;\n\n  /** @internal */\n  static _isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * @internal\n   * 根据 TextureFormat 获取具体信息。\n   */\n  static _getFormatDetail(\n    format: TextureFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case TextureFormat.R8G8B8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB8 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R8G8B8A8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA8 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R4G4B4A4:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA4 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_4_4_4_4,\n          isCompressed: false\n        };\n      case TextureFormat.R5G5B5A1:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB5_A1 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_5_5_5_1,\n          isCompressed: false\n        };\n      case TextureFormat.R5G6B5:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB565 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_SHORT_5_6_5,\n          isCompressed: false\n        };\n      case TextureFormat.Alpha8:\n        return {\n          internalFormat: gl.ALPHA,\n          baseFormat: gl.ALPHA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R32G32B32A32:\n        return {\n          internalFormat: gl.RGBA32F,\n          baseFormat: gl.RGBA,\n          dataType: gl.FLOAT,\n          isCompressed: false\n        };\n      case TextureFormat.DXT1:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT,\n          isCompressed: true\n        };\n      case TextureFormat.DXT5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT,\n          isCompressed: true\n        };\n      case TextureFormat.ETC1_RGB:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGB:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB8_ETC2,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGBA5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGBA8:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA8_ETC2_EAC,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGB2:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_PVRTC_2BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGBA2:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGB4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGBA4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_PVRTC_4BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_4x4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_5x5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_5X5_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_6x6:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_6X6_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_8x8:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_8X8_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_10x10:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_10X10_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_12x12:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR,\n          isCompressed: true\n        };\n      default:\n        throw new Error(`this TextureFormat is not supported in Oasis Engine: ${format}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getRenderBufferColorFormatDetail(\n    format: RenderBufferColorFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case RenderBufferColorFormat.R8G8B8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB8 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R8G8B8A8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA8 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R4G4B4A4:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA4 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_4_4_4_4,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R5G5B5A1:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB5_A1 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_5_5_5_1,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R5G6B5:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB565 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_SHORT_5_6_5,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.Alpha8:\n        return {\n          internalFormat: gl.ALPHA,\n          baseFormat: gl.ALPHA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R16G16B16A16:\n        return {\n          internalFormat: gl.RGBA16F,\n          baseFormat: gl.RGBA,\n          dataType: gl.HALF_FLOAT,\n          isCompressed: false\n        };\n      case RenderBufferColorFormat.R32G32B32A32:\n        return {\n          internalFormat: gl.RGBA32F,\n          baseFormat: gl.RGBA,\n          dataType: gl.FLOAT,\n          isCompressed: false\n        };\n      default:\n        throw new Error(`this RenderBufferColorFormat is not supported in Oasis Engine: ${format}`);\n    }\n  }\n\n  /**\n   * @internal\n   * In WebGL 1, internalformat must be the same as baseFormat when call texImage2D\n   */\n  static _getRenderBufferDepthFormatDetail(\n    format: RenderBufferDepthFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case RenderBufferDepthFormat.Depth:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT32F : gl.DEPTH_COMPONENT16,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: isWebGL2 ? gl.FLOAT : gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.DepthStencil:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Stencil:\n        return {\n          internalFormat: gl.STENCIL_INDEX8,\n          baseFormat: gl.STENCIL_ATTACHMENT,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false,\n          attachment: gl.STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth16:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT16 : gl.DEPTH_COMPONENT16,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth24:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT24,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth32:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT32F,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.FLOAT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth24Stencil8:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth32Stencil8:\n        return {\n          internalFormat: gl.DEPTH32F_STENCIL8,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.FLOAT_32_UNSIGNED_INT_24_8_REV,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      default:\n        throw new Error(`this RenderBufferDepthFormat is not supported in Oasis Engine: ${format}`);\n    }\n  }\n\n  /**\n   * @internal\n   * 检测是否支持相应纹理格式。\n   */\n  static _supportTextureFormat(format: TextureFormat, rhi): boolean {\n    let isSupported = true;\n\n    switch (format) {\n      case TextureFormat.R32G32B32A32:\n        {\n          if (!rhi.canIUse(GLCapabilityType.textureFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n    }\n\n    return isSupported;\n  }\n\n  /**\n   * @internal\n   */\n  static _supportRenderBufferColorFormat(format: RenderBufferColorFormat, rhi): boolean {\n    let isSupported = true;\n\n    switch (format) {\n      case RenderBufferColorFormat.R32G32B32A32:\n        {\n          if (!rhi.canIUse(GLCapabilityType.colorBufferFloat) || !rhi.canIUse(GLCapabilityType.textureFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n      case RenderBufferColorFormat.R16G16B16A16:\n        {\n          if (!rhi.canIUse(GLCapabilityType.colorBufferHalfFloat) || !rhi.canIUse(GLCapabilityType.textureHalfFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n    }\n\n    return isSupported;\n  }\n\n  /**\n   * @internal\n   */\n  static _supportRenderBufferDepthFormat(format: RenderBufferDepthFormat, rhi, isTexture: boolean): boolean {\n    const isWebGL2: boolean = rhi.isWebGL2;\n    let isSupported = true;\n\n    if (isTexture && !rhi.canIUse(GLCapabilityType.depthTexture)) {\n      return false;\n    }\n\n    switch (format) {\n      case RenderBufferDepthFormat.Stencil:\n        {\n          isSupported = false;\n        }\n        break;\n      case RenderBufferDepthFormat.Depth24:\n      case RenderBufferDepthFormat.Depth32:\n      case RenderBufferDepthFormat.Depth32Stencil8:\n        {\n          if (!isWebGL2) {\n            isSupported = false;\n          }\n        }\n        break;\n    }\n\n    return isSupported;\n  }\n\n  /** 名称。*/\n  name: string;\n\n  public _glTexture: WebGLTexture;\n\n  /** @internal */\n  public _formatDetail: TextureFormatDetail;\n\n  protected _width: number;\n  protected _height: number;\n\n  /** @internal */\n  protected _rhi;\n  /** @internal */\n  protected _target: GLenum;\n  /** @internal */\n  protected _mipmap: boolean;\n  /** @internal */\n  protected _mipmapCount: number;\n\n  private _wrapModeU: TextureWrapMode;\n  private _wrapModeV: TextureWrapMode;\n  private _filterMode: TextureFilterMode;\n  private _anisoLevel: number = 1;\n\n  /**\n   * 纹理宽。\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * 纹理高。\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * 纹理坐标 U 的循环模式。\n   */\n  get wrapModeU(): TextureWrapMode {\n    return this._wrapModeU;\n  }\n\n  set wrapModeU(value: TextureWrapMode) {\n    if (value === this._wrapModeU) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    this._wrapModeU = value;\n\n    this._bind();\n    this._setWrapMode(value, gl.TEXTURE_WRAP_S);\n    this._unbind();\n  }\n\n  /**\n   * 纹理坐标 V 的循环模式。\n   */\n  get wrapModeV(): TextureWrapMode {\n    return this._wrapModeV;\n  }\n\n  set wrapModeV(value: TextureWrapMode) {\n    if (value === this._wrapModeV) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    this._wrapModeV = value;\n\n    this._bind();\n    this._setWrapMode(value, gl.TEXTURE_WRAP_T);\n    this._unbind();\n  }\n\n  /**\n   * 多级纹理的数量。\n   */\n  get mipmapCount(): number {\n    return this._mipmapCount;\n  }\n\n  /**\n   * 纹理的过滤模式。\n   */\n  get filterMode(): TextureFilterMode {\n    return this._filterMode;\n  }\n\n  set filterMode(value: TextureFilterMode) {\n    if (value === this._filterMode) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    this._filterMode = value;\n\n    this._bind();\n    switch (value) {\n      case TextureFilterMode.Point:\n        gl.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, this._mipmap ? gl.NEAREST_MIPMAP_NEAREST : gl.NEAREST);\n        break;\n      case TextureFilterMode.Bilinear:\n        gl.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, this._mipmap ? gl.LINEAR_MIPMAP_NEAREST : gl.LINEAR);\n        break;\n      case TextureFilterMode.Trilinear:\n        gl.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, this._mipmap ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);\n        break;\n    }\n    this._unbind();\n  }\n\n  /**\n   * 各向异性过滤等级。\n   */\n  get anisoLevel(): number {\n    return this._anisoLevel;\n  }\n\n  set anisoLevel(value: number) {\n    const max = this._rhi.capability.maxAnisoLevel;\n\n    if (value > max) {\n      Logger.warn(`anisoLevel:${value}, exceeds the limit and is automatically downgraded to:${max}`);\n      value = max;\n    }\n\n    if (value < 1) {\n      Logger.warn(`anisoLevel:${value}, must be greater than 0, and is automatically downgraded to 1`);\n      value = 1;\n    }\n\n    if (value === this._anisoLevel) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext & EXT_texture_filter_anisotropic = this._rhi.gl;\n\n    this._anisoLevel = value;\n\n    this._bind();\n    gl.texParameterf(this._target, gl.TEXTURE_MAX_ANISOTROPY_EXT, value);\n    this._unbind();\n  }\n\n  /**\n   * 根据第0级数据生成多级纹理。\n   */\n  public generateMipmaps(): void {\n    if (!this._mipmap) return;\n\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    this._bind();\n    gl.generateMipmap(this._target);\n    this._unbind();\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy() {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    gl.deleteTexture(this._glTexture);\n    this._glTexture = null;\n    this._formatDetail = null;\n    // TODO: delete\n    this._rhi = null;\n  }\n\n  /** @internal */\n  public _bind(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    gl.bindTexture(this._target, this._glTexture);\n  }\n\n  /** @internal */\n  public _unbind(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    gl.bindTexture(this._target, null);\n  }\n\n  /**\n   * @internal\n   * 根据指定区域获得像素颜色缓冲。\n   * @param face - 如果是立方体纹理，可以选择读取第几个面\n   * @param x - 区域起始X坐标\n   * @param y - 区域起始Y坐标\n   * @param width - 区域宽\n   * @param height - 区域高\n   * @param out - 颜色数据缓冲\n   */\n  protected _getPixelBuffer(\n    face: TextureCubeFace | null,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    if (!Texture._readFrameBuffer) {\n      Texture._readFrameBuffer = gl.createFramebuffer();\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, Texture._readFrameBuffer);\n\n    if (face != null) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n        this._glTexture,\n        0\n      );\n    } else {\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._glTexture, 0);\n    }\n    gl.readPixels(x, y, width, height, baseFormat, dataType, out);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  /**\n   * @internal\n   * 预开辟 mipmap 显存\n   */\n  protected _initMipmap(isCube: boolean): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2 = this._rhi.isWebGL2;\n    let { internalFormat, baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n\n    if (isWebGL2) {\n      gl.texStorage2D(this._target, this._mipmapCount, internalFormat, this._width, this._height);\n    } else {\n      // In WebGL 1, internalformat must be the same as baseFormat\n      if (baseFormat !== internalFormat) {\n        internalFormat = baseFormat;\n      }\n\n      if (!isCube) {\n        for (let i = 0; i < this._mipmapCount; i++) {\n          const width = Math.max(1, this._width >> i);\n          const height = Math.max(1, this._height >> i);\n\n          gl.texImage2D(this._target, i, internalFormat, width, height, 0, baseFormat, dataType, null);\n        }\n      } else {\n        for (let i = 0; i < this._mipmapCount; i++) {\n          const size = Math.max(1, this._width >> i);\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            gl.texImage2D(\n              gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\n              i,\n              internalFormat,\n              size,\n              size,\n              0,\n              baseFormat,\n              dataType,\n              null\n            );\n          }\n        }\n      }\n    }\n\n    this._unbind();\n  }\n\n  /**\n   * @internal\n   * 获取相应size的最大mip级别,rounding down\n   * http://download.nvidia.com/developer/Papers/2005/NP2_Mipmapping/NP2_Mipmap_Creation.pdf\n   */\n  protected _getMaxMiplevel(size: number): number {\n    return Math.floor(Math.log2(size));\n  }\n\n  /**\n   * @internal\n   */\n  protected _getMipmapCount(): number {\n    return this._mipmap ? Math.floor(Math.log2(Math.max(this._width, this._height))) + 1 : 1;\n  }\n\n  /**\n   * @internal\n   */\n  private _setWrapMode(value: TextureWrapMode, pname: GLenum): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n\n    if (\n      !isWebGL2 &&\n      value !== TextureWrapMode.Clamp &&\n      (!Texture._isPowerOf2(this._width) || !Texture._isPowerOf2(this._height))\n    ) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for REPEAT or MIRRORED_REPEAT in WebGL1,and has automatically downgraded to CLAMP_TO_EDGE\"\n      );\n      value = TextureWrapMode.Clamp;\n    }\n\n    switch (value) {\n      case TextureWrapMode.Clamp:\n        gl.texParameteri(this._target, pname, gl.CLAMP_TO_EDGE);\n        break;\n      case TextureWrapMode.Repeat:\n        gl.texParameteri(this._target, pname, gl.REPEAT);\n        break;\n      case TextureWrapMode.Mirror:\n        gl.texParameteri(this._target, pname, gl.MIRRORED_REPEAT);\n        break;\n    }\n  }\n\n  // TODO: delete\n  constructor(engine: Engine) {\n    super(engine);\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * 2D纹理。\n */\nexport class Texture2D extends Texture {\n  private _format: TextureFormat;\n  /** 向下兼容 WebGL1.0。 */\n  private _compressedMipFilled: number = 0;\n\n  /**\n   * 纹理的格式。\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * 构建一个2D纹理。\n   * @param engine - 所属引擎\n   * @param width - 宽\n   * @param height - 高\n   * @param format - 格式，默认值 `TextureFormat.R8G8B8A8`\n   * @param mipmap - 是否使用多级纹理\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: TextureFormat = TextureFormat.R8G8B8A8,\n    mipmap: boolean = true\n  ) {\n    super(engine);\n    const rhi = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n    const isWebGL2: boolean = rhi.isWebGL2;\n\n    if (!Texture._supportTextureFormat(format, rhi)) {\n      throw new Error(`Texture format is not supported:${TextureFormat[format]}`);\n    }\n\n    if (mipmap && !isWebGL2 && (!Texture._isPowerOf2(width) || !Texture._isPowerOf2(height))) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n      mipmap = false;\n    }\n\n    const formatDetail = Texture._getFormatDetail(format, gl, isWebGL2);\n\n    this._glTexture = gl.createTexture();\n    this._formatDetail = formatDetail;\n    this._rhi = rhi;\n    this._target = gl.TEXTURE_2D;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    (formatDetail.isCompressed && !isWebGL2) || this._initMipmap(false);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Repeat;\n  }\n\n  /**\n   * 通过颜色缓冲数据、指定区域和纹理层级设置像素，同样适用于压缩格式。\n   * @remarks 如果为WebGL1.0平台且纹理格式为压缩格式，第一次上传必须填满纹理。\n   * @param pixelBuffer - 颜色缓冲数据\n   * @param mipLevel - 纹理层级\n   * @param x - 数据起始X坐标\n   * @param y - 数据起始Y坐标\n   * @param width - 数据宽度。如果为空的话 width 为 mipLevel 对应的宽度减去 x , mipLevel 对应的宽度为 Math.max(1, this.width >> mipLevel)\n   * @param height - 数据高度。如果为空的话 height 为 mipLevel 对应的高度减去 y , mipLevel 对应的高度为 Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x?: number,\n    y?: number,\n    width?: number,\n    height?: number\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const { internalFormat, baseFormat, dataType, isCompressed } = this._formatDetail;\n    const mipWidth = Math.max(1, this._width >> mipLevel);\n    const mipHeight = Math.max(1, this._height >> mipLevel);\n\n    x = x || 0;\n    y = y || 0;\n    width = width || mipWidth - x;\n    height = height || mipHeight - y;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isCompressed) {\n      const mipBit = 1 << mipLevel;\n      if (isWebGL2 || this._compressedMipFilled & mipBit) {\n        gl.compressedTexSubImage2D(this._target, mipLevel, x, y, width, height, internalFormat, colorBuffer);\n      } else {\n        gl.compressedTexImage2D(this._target, mipLevel, internalFormat, width, height, 0, colorBuffer);\n        this._compressedMipFilled |= mipBit;\n      }\n    } else {\n      gl.texSubImage2D(this._target, mipLevel, x, y, width, height, baseFormat, dataType, colorBuffer);\n    }\n\n    this._unbind();\n  }\n\n  /**\n   * 通过图源、指定区域和纹理层级设置像素。\n   * @param imageSource - 纹理源\n   * @param mipLevel - 多级纹理层级\n   * @param flipY - 是否翻转Y轴\n   * @param premultiplyAlpha - 是否预乘透明通道\n   * @param x - 区域起始X坐标\n   * @param y - 区域起始Y坐标\n   */\n  setImageSource(\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x?: number,\n    y?: number\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);\n    gl.texSubImage2D(this._target, mipLevel, x || 0, y || 0, baseFormat, dataType, imageSource);\n    this._unbind();\n  }\n\n  /**\n   * 根据指定区域获得像素颜色缓冲。\n   * @param x - 区域起始X坐标\n   * @param y - 区域起始Y坐标\n   * @param width - 区域宽\n   * @param height - 区域高\n   * @param out - 颜色数据缓冲\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, out: ArrayBufferView): void {\n    if (this._formatDetail.isCompressed) {\n      throw new Error(\"Unable to read compressed texture\");\n    }\n    super._getPixelBuffer(null, x, y, width, height, out);\n  }\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { assignmentClone, ignoreClone } from \"../clone/CloneManager\";\nimport { Entity } from \"../Entity\";\nimport { TextureFilterMode } from \"../texture/enums/TextureFilterMode\";\nimport { TextureFormat } from \"../texture/enums/TextureFormat\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { MeshRenderer } from \"./MeshRenderer\";\nimport { Skin } from \"./Skin\";\n\n/**\n * 负责渲染一个 Skinned Mesh 的组件\n * @extends MeshRenderer\n */\nexport class SkinnedMeshRenderer extends MeshRenderer {\n  @ignoreClone\n  public matrixPalette: Float32Array;\n  @ignoreClone\n  public jointNodes: Entity[];\n  @ignoreClone\n  public jointTexture: Texture2D;\n\n  @ignoreClone\n  private _hasInitJoints: boolean = false;\n  @ignoreClone\n  private _mat: Matrix;\n  @ignoreClone\n  private _weights: number[];\n  @ignoreClone\n  private weightsIndices: number[] = [];\n  @ignoreClone\n  /** 当超过设备最大骨骼数时，自动使用骨骼纹理技术，该技术能提高骨骼上限，但是性能会下降 */\n  private _useJointTexture: boolean = false;\n\n  private _skin: Skin;\n\n  /**\n   * constructor\n   * @param entity\n   * @param props\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._mat = new Matrix();\n    this._weights = null;\n    this._skin = null;\n  }\n\n  /**\n   * set morph target weights\n   * @param {Number|Vec} weights 权重参数\n   */\n  setWeights(weights: number[]) {\n    this._weights = weights;\n    if (!weights) {\n      return;\n    }\n    const len = weights.length;\n    for (let i = 0; i < len; i++) {\n      this.weightsIndices[i] = i;\n    }\n\n    const weightsIndices = this.weightsIndices;\n\n    // 冒泡排序，对 weights 进行大小排序，weightsIndices 根据 weights 顺序而调换顺序\n    for (let i = 0; i < len - 1; i++) {\n      for (let j = i + 1; j < len; j++) {\n        if (weights[j] > weights[i]) {\n          let t = weights[i];\n          weights[i] = weights[j];\n          weights[j] = t;\n          t = weightsIndices[i];\n          weightsIndices[i] = weightsIndices[j];\n          weightsIndices[j] = t;\n        }\n      }\n    }\n    this.mesh.updatePrimitiveWeightsIndices(weightsIndices);\n  }\n\n  /**\n   * 当前绑定的 Skin 对象\n   */\n  get skin() {\n    return this._skin;\n  }\n\n  /**\n   * 绑定 Skin 对象\n   */\n  set skin(skin) {\n    this._skin = skin;\n    // this._started = false; // force onStart callback\n  }\n\n  get weights() {\n    return this._weights;\n  }\n\n  _initJoints() {\n    if (!this._skin) return;\n    const skin = this._skin;\n    //-- init\n\n    const joints = skin.joints;\n    const jointNodes = [];\n    for (let i = joints.length - 1; i >= 0; i--) {\n      jointNodes[i] = this.findByNodeName(this.entity, joints[i]);\n    } // end of for\n    this.matrixPalette = new Float32Array(jointNodes.length * 16);\n    this.jointNodes = jointNodes;\n\n    /** 是否使用骨骼纹理 */\n    const rhi = this.entity.engine._hardwareRenderer;\n    if (!rhi) return;\n    const maxAttribUniformVec4 = rhi.renderStates.getParameter(rhi.gl.MAX_VERTEX_UNIFORM_VECTORS);\n    const maxJoints = Math.floor((maxAttribUniformVec4 - 20) / 4);\n    if (joints.length > maxJoints && rhi.canIUseMoreJoints) {\n      this._useJointTexture = true;\n    }\n  }\n\n  private findByNodeName(entity: Entity, nodeName: string) {\n    if (!entity) return null;\n\n    const n = entity.findByName(nodeName);\n\n    if (n) return n;\n\n    return this.findByNodeName(entity.parent, nodeName);\n  }\n\n  /**\n   * 在SceneGraph的树形结构中中向上查找\n   * @param {SceneNode} entity\n   * @param {string} nodeName\n   * @private\n   */\n  _findParent(entity: Entity, nodeName: string) {\n    if (entity) {\n      const parent = entity.parent;\n      if (!parent) return null;\n      if (parent.name === nodeName) return parent;\n\n      const brother = parent.findByName(nodeName);\n      if (brother) return brother;\n\n      return this._findParent(parent, nodeName);\n    }\n    return null;\n  }\n\n  /**\n   * TODO 渲染之前\n   * update matrix palette\n   * @private\n   */\n  update() {\n    if (!this._hasInitJoints) {\n      this._initJoints();\n      this._hasInitJoints = true;\n    }\n    if (this._skin) {\n      const joints = this.jointNodes;\n      const ibms = this._skin.inverseBindMatrices;\n      const matrixPalette = this.matrixPalette;\n      const worldToLocal = this.entity.getInvModelMatrix();\n\n      const mat = this._mat;\n      for (let i = joints.length - 1; i >= 0; i--) {\n        mat.identity();\n        if (joints[i]) {\n          Matrix.multiply(joints[i].transform.worldMatrix, ibms[i], mat);\n        } else {\n          ibms[i].cloneTo(mat);\n        }\n        Matrix.multiply(worldToLocal, mat, mat);\n        matrixPalette.set(mat.elements, i * 16);\n      } // end of for\n      if (this._useJointTexture) {\n        this.createJointTexture();\n      }\n    }\n  }\n\n  /**\n   * 生成骨骼纹理，将 matrixPalette 存储到 u_jointSampler 中\n   * 格式：(4 * RGBA) * jointCont\n   * */\n  createJointTexture() {\n    if (!this.jointTexture) {\n      const engine = this.engine;\n      const rhi = engine._hardwareRenderer;\n      if (!rhi) return;\n      this.jointTexture = new Texture2D(engine, 4, this.jointNodes.length, TextureFormat.R32G32B32A32, false);\n      this.jointTexture.filterMode = TextureFilterMode.Point;\n    }\n    this.jointTexture.setPixelBuffer(this.matrixPalette);\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { RenderableComponent } from \"../RenderableComponent\";\n\n/**\n * 离散 LOD 层级渲染控制：根据对象占用屏幕高度的百分比，切换不同的 Renderer\n */\nexport class LODGroup extends RenderableComponent {\n  private _lods = [];\n\n  /**\n   * 添加一个 LOD 层级\n   * @param {number} distance 对象距离Camera的距离\n   * @param {Component} rendererAbility 当前 LOD 层级激活时的 Renderer 组件对象，可以是 MeshRenderer 或者 SkinnedMeshRenderer 等\n   */\n  addLod(distance, rendererAbility) {\n    // 关闭原因的 Render，由 ALODGroup 接手\n    rendererAbility.enabled = false;\n\n    this._lods.push({\n      distance,\n      rendererAbility\n    });\n\n    this._lods.sort((a, b) => b.distance - a.distance);\n  }\n\n  /**\n   * 计算当前的激活的LOD层级，并调用它的渲染\n   */\n  render(camera) {\n    if (this._lods.length <= 0) return;\n\n    const dist = Vector3.distance(camera.eyePos, this.entity.worldPosition);\n\n    const lods = this._lods;\n    let activeLevel = 0;\n    for (let i = lods.length - 1; i >= 0; i--) {\n      const lod = lods[i];\n      if (dist < lod.distance) {\n        activeLevel = i;\n        break;\n      }\n    } // end of for\n\n    const lod = lods[activeLevel];\n    lod.rendererAbility.render(camera);\n  }\n}\n","import { Matrix, Matrix3x3 } from \"@oasis-engine/math\";\nimport { RefObject } from \"../asset/RefObject\";\nimport { MaterialType, UniformSemantic } from \"../base/Constant\";\nimport { ObjectValues, Util } from \"../base/Util\";\nimport { Engine } from \"../Engine\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Texture } from \"../texture/Texture\";\nimport { RenderTechnique } from \"./RenderTechnique\";\n\n/**\n * 材质对象：RenderTechniqe + 实例化参数，对应 glTF 中的 material 对象\n */\nexport class Material extends RefObject {\n  /**\n   * 名称\n   * @member {string}\n   */\n  name: string;\n  /**\n   * 材质类型：透明 or 不透明\n   * @member {MaterialType}\n   */\n  renderType: MaterialType;\n  /**\n   * 是否受到全局雾效影响\n   * @member {boolean}\n   */\n  useFog: boolean;\n  /**\n   * 最大骨骼关节数\n   * @member {number}\n   */\n  maxJointsNum: number;\n\n  protected _technique: RenderTechnique;\n  protected _values;\n\n  /**\n   * 构造函数\n   * @param {string} name 名称\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n\n    this.renderType = MaterialType.OPAQUE;\n\n    this.useFog = true;\n\n    this.maxJointsNum = 0;\n\n    this._technique = null;\n    this._values = {};\n  }\n\n  /** 创建一个本材质对象的深拷贝对象\n   * @param {string} name - 复制的材质名字\n   * @param {boolean} cloneTexture - 是否复制纹理，默认 false,共用纹理\n   * // todo: texture.clone()\n   * */\n  clone(name: string = this.name, cloneTexture: boolean = false) {\n    const newMtl = new (this.constructor as any)(name);\n\n    newMtl.renderType = this.renderType;\n    newMtl.useFog = this.useFog;\n\n    for (const name in this._values) {\n      if (this._values.hasOwnProperty(name)) {\n        const val = this._values[name];\n        if (val instanceof Texture) {\n          newMtl.setValue(name, val);\n        } else {\n          newMtl.setValue(name, Util.clone(val));\n        }\n      }\n    } // end of for\n\n    return newMtl;\n  }\n\n  /**\n   * 是否透明\n   * @member {boolean}\n   */\n  get transparent(): boolean {\n    return this.renderType === MaterialType.TRANSPARENT;\n  }\n\n  set transparent(val: boolean) {\n    this.renderType = val ? MaterialType.TRANSPARENT : MaterialType.OPAQUE;\n  }\n\n  /**\n   * 获取所引用的RenderTechnique对象\n   * @member {RenderTechnique}\n   */\n  get technique(): RenderTechnique {\n    return this._technique;\n  }\n\n  /**\n   * 设置所引用的RenderTechnique对象\n   */\n  set technique(tech: RenderTechnique) {\n    this._technique = tech;\n\n    //-- 重新加载材质参数\n    this._values = {};\n  }\n\n  /**\n   * 设定材质参数值\n   * 当 texture 发生 无 <-> 有 变化时，需要重新编译\n   * TODO: 重构成不需要重新编译 technique 的机制\n   * @param {string} name 参数名称\n   * @param {*} value 参数值\n   */\n  setValue(name: string, value) {\n    const oriValue = this.getValue(name);\n    const oriIsTexture = oriValue instanceof Texture;\n    const curIsTexture = value instanceof Texture;\n    if (oriIsTexture) {\n      this._removeRefChild(oriValue);\n    }\n    if (curIsTexture) {\n      this._addRefChild(value);\n    }\n\n    if ((this as any)._generateTechnique && oriIsTexture !== curIsTexture) {\n      this._technique = null;\n    }\n    if (value != null) {\n      this._values[name] = value;\n    } else {\n      this.delValue(name);\n    }\n  }\n\n  /**\n   * 删除材质参数值\n   * @param {string} name\n   * */\n  delValue(name: string) {\n    delete this._values[name];\n  }\n\n  /**\n   * 取得某个参数的当前值\n   * @param {string} name 参数名称\n   * @return {*} 参数的当前值\n   */\n  getValue(name: string): any {\n    return this._values[name];\n  }\n\n  /**\n   * 开始渲染指定对象\n   * @param {CameraComponent} camera 当前摄像机\n   * @param {Component} component 当前渲染的对象\n   * @param {Primitive} primitive 几何对象\n   * @param {Material} originalMaterial 物体本来的材质，用于renderPass使用replaceMaterial时的识别\n   * @private\n   */\n  prepareDrawing(context, component, primitive, originalMaterial?: Material) {\n    const camera = context.camera;\n    // 设置Unifroms\n    const uniforms = this._technique.uniforms;\n    for (const name in uniforms) {\n      const uniform = uniforms[name];\n      this._updateValueBySemantic(uniform, context, component);\n    }\n\n    const scene = camera.scene;\n    if (scene.hasFogFeature) {\n      scene.bindFogToMaterial(this);\n    }\n\n    this._technique.compile(camera, component, primitive, this);\n  }\n\n  /** 编译前钩子，在编译前可以自定义替换tech的shader,customMacros等配置\n   * @param {RenderTechnique} tech - technique\n   * @example\n   *  tech.fragmentShader=tech.fragmentShader.replace(**,**);\n   *  tech.fragmentPrecision='highp'\n   * */\n  preCompile(tech: RenderTechnique) {}\n\n  /**\n   * 编译后钩子\n   * */\n  postCompile(tech: RenderTechnique) {}\n\n  /**\n   * 材质渲染前钩子\n   * @param {Component} component\n   * @param {Primitive} primitive\n   * */\n  preRender(component, primitive) {}\n\n  /**\n   * 材质渲染后钩子\n   * */\n  postRender(component, primitive) {}\n\n  /**\n   * 按照Uniform的Semantic，自动更新部分参数值\n   * @param {object} uniform\n   * @param {CameraComponent} camera\n   * @param {Component} component\n   * @private\n   */\n  _updateValueBySemantic(uniform, context: RenderContext, component) {\n    const values = this._values;\n\n    switch (uniform.semantic) {\n      // Transforms from the node's coordinate system to its parent's.\n      case UniformSemantic.LOCAL: {\n        values[uniform.name] = component._entity.transform.localMatrix;\n        break;\n      }\n      // Transforms from model to world coordinates\n      case UniformSemantic.MODEL:\n        values[uniform.name] = component._entity.transform.worldMatrix;\n        break;\n      // Transforms from world to view coordinates\n      case UniformSemantic.VIEW:\n        values[uniform.name] = context.viewMatrix;\n        break;\n      //Transforms from view to clip\n      case UniformSemantic.PROJECTION:\n        values[uniform.name] = context.projectionMatrix;\n        break;\n      // Combined MODEL and VIEW.\n      case UniformSemantic.MODELVIEW: {\n        const view = context.viewMatrix;\n        const model = component._entity.transform.worldMatrix;\n        let modelView = values[uniform.name];\n        if (!modelView) modelView = new Matrix();\n        Matrix.multiply(view, model, modelView);\n        values[uniform.name] = modelView;\n        break;\n      }\n      // Combined VIEW and PROJECTION.\n      case UniformSemantic.VIEWPROJECTION: {\n        const viewProj = context.viewProjectMatrix;\n        values[uniform.name] = viewProj;\n        break;\n      }\n      // Combined MODEL, VIEW, and PROJECTION\n      case UniformSemantic.MODELVIEWPROJECTION: {\n        const viewProj = context.viewProjectMatrix;\n        const model = component._entity.transform.worldMatrix;\n        let MVP = values[uniform.name];\n        if (!MVP) MVP = new Matrix();\n        Matrix.multiply(viewProj, model, MVP);\n        values[uniform.name] = MVP;\n        break;\n      }\n      // Inverse of MODEL\n      case UniformSemantic.MODELINVERSE:\n        values[uniform.name] = component.invModelMatrixs;\n        break;\n      // Inverse of VIEW\n      case UniformSemantic.VIEWINVERSE:\n        values[uniform.name] = context.inverseViewMatrix;\n        break;\n      // Inverse of PROJECTION\n      case UniformSemantic.PROJECTIONINVERSE:\n        values[uniform.name] = context.inverseProjectionMatrix;\n        break;\n      // Inverse of MODELVIEW\n      case UniformSemantic.MODELVIEWINVERSE: {\n        const view = context.viewMatrix;\n        const model = component._entity.transform.worldMatrix;\n        let invMV = values[uniform.name];\n        if (!invMV) invMV = new Matrix();\n        Matrix.multiply(view, model, invMV);\n        Matrix.invert(invMV, invMV);\n        values[uniform.name] = invMV;\n        break;\n      }\n      // Inverse of MODELVIEWPROJECTION\n      case UniformSemantic.MODELVIEWPROJECTIONINVERSE: {\n        const viewProj = context.viewProjectMatrix;\n        const model = component._entity.transform.worldMatrix;\n        let invMVP = values[uniform.name];\n        if (!invMVP) invMVP = new Matrix();\n        Matrix.multiply(viewProj, model, invMVP);\n        Matrix.invert(invMVP, invMVP);\n        values[uniform.name] = invMVP;\n        break;\n      }\n      // The inverse-transpose of MODEL without the translation\n      case UniformSemantic.MODELINVERSETRANSPOSE: {\n        let modelIT = values[uniform.name];\n        if (!modelIT) modelIT = new Matrix3x3();\n        Matrix3x3.normalMatrix(component._entity.transform.worldMatrix, modelIT);\n        values[uniform.name] = modelIT;\n        break;\n      }\n      // The inverse-transpose of MODELVIEW without the translation.\n      case UniformSemantic.MODELVIEWINVERSETRANSPOSE: {\n        let modelViewIT = values[uniform.name];\n        if (!modelViewIT) modelViewIT = new Matrix();\n        Matrix.multiply(context.viewMatrix, component._entity.transform.worldMatrix, modelViewIT);\n        Matrix.invert(modelViewIT, modelViewIT);\n        Matrix.transpose(modelViewIT, modelViewIT);\n        values[uniform.name] = modelViewIT;\n        break;\n      }\n      // The viewport's x, y, width, and height properties stored in the x, y, z, and w components, respectively.\n      case UniformSemantic.VIEWPORT:\n        values[uniform.name] = context.viewport;\n        break;\n      // Transforms mesh coordinates for a particular joint for skinning and animation.\n      case UniformSemantic.JOINTMATRIX:\n        values[uniform.name] = component.matrixPalette;\n        break;\n      case UniformSemantic.JOINTTEXTURE:\n        values[uniform.name] = component.jointTexture;\n        break;\n      case UniformSemantic.JOINTCOUNT:\n        values[uniform.name] = component.jointNodes?.length;\n        break;\n      case UniformSemantic.MORPHWEIGHTS:\n        values[uniform.name] = component.weights;\n        break;\n\n      // Camera 的世界坐标位置\n      case UniformSemantic.EYEPOS:\n        values[uniform.name] = context.cameraPosition;\n        break;\n      // 页面启动之后的总时长，单位：秒\n      case UniformSemantic.TIME:\n        values[uniform.name] = component.engine.time.timeSinceStartup * 0.001;\n        break;\n    } // end of switch\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy() {\n    // TODO: 待材质重构\n    if (this._technique) {\n      const values = ObjectValues(this._values);\n      for (let i = 0, len = values.length; i < len; i++) {\n        const value = values[i];\n        if (value instanceof Texture) {\n          value._addRefCount(-1);\n        }\n      }\n\n      this._technique._finalize();\n      this._technique = null;\n    }\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { Material } from \"./Material\";\n\n/**\n * 管理多个 Technique, 根据渲染的需要自动切换内部的 Technique 对象\n * @remarks 典型应用：Shadow Mapping 算法中，场景使用一个统一的 replace material 渲染深度贴图\n */\nexport class ComplexMaterial extends Material {\n  private _techniquePool;\n\n  /**\n   * 构造函数\n   * @param {string} name 名称\n   */\n  constructor(engine: Engine, name) {\n    super(engine, name);\n\n    this._techniquePool = {}; // technique pool: [key]->value\n  }\n\n  /**\n   * 在绘制之前，准备好内部的 Technique 对象\n   */\n  prepareDrawing(context, component, primitive) {\n    const camera = context.camera;\n    const tech = this._requireTechnique(camera, component, primitive);\n\n    if (tech) {\n      this._technique = tech;\n      super.prepareDrawing(context, component, primitive);\n    }\n  }\n\n  /**\n   * 清空所有Technique。\n   */\n  clearTechniques() {\n    this._techniquePool = {};\n  }\n\n  /**\n   * 根据当前对象的渲染需求，取得一个可用的 Technique\n   */\n  _requireTechnique(camera, component, primitive) {\n    const key = this._getTechniqueKey(camera, component, primitive);\n    let tech = this._techniquePool[key];\n    if (!tech) {\n      tech = this._generateTechnique(camera, component, primitive);\n      this._techniquePool[key] = tech;\n    }\n\n    return tech;\n  }\n\n  /**\n   * 由派生类去实现，针对某个特定的对象，生成一个新的它所需要的 Technique 对象\n   */\n  _generateTechnique(camera, component, primitive) {}\n\n  /**\n   * 按照当前对象是否为 skin、骨骼个数，生成一个 Technique 的索引字符串\n   */\n  _getTechniqueKey(camera, component, primitive) {\n    const isSkin = component.skin != null;\n    const jontCount = isSkin ? component.skin.joints.length : 0;\n\n    let key = isSkin ? \"skin_\" : \"static_\";\n    if (isSkin) {\n      key += \"jont\" + jontCount;\n    }\n\n    return key;\n  }\n}\n","/**\n * 缓冲的用途。\n */\nexport enum BufferUsage {\n  /** 缓冲区的内容修改一次，使用多次。*/\n  Static,\n  /** 缓冲区的内容经常被修改，使用多次。*/\n  Dynamic,\n  /** 缓冲区的内容修改一次，使用几次。*/\n  Stream\n}\n","/**\n * 顶点元素格式。\n */\nexport enum VertexElementFormat {\n  /** 32-bit 浮点数。*/\n  Float,\n  /** 二维 32-bit 浮点数。*/\n  Vector2,\n  /** 三维 32-bit 浮点数。*/\n  Vector3,\n  /** 四维 32-bit 浮点数。*/\n  Vector4,\n  /** 四维 8-bit 整型,范围是 [-128,127]。*/\n  Byte4,\n  /** 四维 8-bit 无符号整型，范围是 [0,255]。*/\n  UByte4,\n  /** 四维 8-bit 归一化整型，范围是 [-1,1]。*/\n  NormalizedByte4,\n  /** 四维 8-bit 归一化无符号整型，范围是 [0,1]。*/\n  NormalizedUByte4,\n  /** 二维 16-bit 整型，范围是 [-32768, 32767]。*/\n  Short2,\n  /** 二维 16-bit 无符号整型，范围是 [0, 65535]。*/\n  UShort2,\n  /** 二维 16-bit 归一化整型，范围是 [-1, 1]。*/\n  NormalizedShort2,\n  /** 二维 16-bit 归一化无符号整型，范围是 [0, 1]。*/\n  NormalizedUShort2,\n  /** 四维 16-bit 整型，范围是 [-32768, 32767]。*/\n  Short4,\n  /** 四维 16-bit 无符号整型，范围是 [0, 65535]。*/\n  UShort4,\n  /** 四维 16-bit 归一化整型，范围是 [-1, 1]。*/\n  NormalizedShort4,\n  /** 四维 16-bit 归一化无符号整型，范围是 [0, 1]。*/\n  NormalizedUShort4\n}\n","/**\n * 索引格式。\n */\nexport enum IndexFormat {\n  /** 8 位。*/\n  UInt8,\n  /** 16 位。*/\n  UInt16,\n  /** 32 位。*/\n  UInt32\n}\n","import { BufferUsage } from \"./enums/BufferUsage\";\nimport { VertexElementFormat } from \"./enums/VertexElementFormat\";\nimport { DataType } from \"../base/Constant\";\nimport { IndexFormat } from \"./enums/IndexFormat\";\n\nexport interface ElementInfo {\n  size: number;\n  type: DataType;\n}\n\nexport class BufferUtil {\n  /**\n   * @internal\n   */\n  static _getGLBufferUsage(gl: WebGLRenderingContext, bufferUsage: BufferUsage): number {\n    switch (bufferUsage) {\n      case BufferUsage.Static:\n        return gl.STATIC_DRAW;\n      case BufferUsage.Dynamic:\n        return gl.DYNAMIC_DRAW;\n      case BufferUsage.Stream:\n        return gl.STREAM_DRAW;\n    }\n  }\n\n  static _getGLIndexType(indexFormat: IndexFormat): DataType {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return DataType.UNSIGNED_BYTE;\n      case IndexFormat.UInt16:\n        return DataType.UNSIGNED_SHORT;\n      case IndexFormat.UInt32:\n        return DataType.UNSIGNED_INT;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getElementInfo(format: VertexElementFormat): ElementInfo {\n    let size: number;\n    let type: DataType;\n    switch (format) {\n      case VertexElementFormat.Float:\n        size = 1;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector2:\n        size = 2;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector3:\n        size = 3;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector4:\n        size = 4;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Byte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        break;\n      case VertexElementFormat.Short2:\n        size = 2;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.Short4:\n        size = 4;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.UShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      default:\n        break;\n    }\n    return { size, type };\n  }\n}\n","/**\n * 缓冲绑定标记。\n */\nexport enum BufferBindFlag {\n  /** 顶点缓冲。 */\n  VertexBuffer,\n  /** 索引缓冲。 */\n  IndexBuffer\n}\n","/**\n * 定义 Buffer 在 SetData 时如何刷新。\n */\nexport enum SetDataOptions {\n  /** 可覆盖部分 GPU 正在使用的数据，并保证正确的渲染效果。*/\n  None,\n  /** 完全丢弃之前的缓冲，返回一块新的缓冲块并不影响之前使用缓冲的渲染。*/\n  Discard\n  ///** 需要保证不会覆盖 GPU 正在使用的数据，setData 后可立即返回并不中断渲染。*/\n  //NoOverwrite\n}\n","import { RefObject } from \"../asset/RefObject\";\nimport { Engine } from \"../Engine\";\nimport { HardwareRenderer } from \"../HardwareRenderer\";\nimport { BufferUtil } from \"./BufferUtil\";\nimport { BufferBindFlag } from \"./enums/BufferBindFlag\";\nimport { BufferUsage } from \"./enums/BufferUsage\";\nimport { SetDataOptions } from \"./enums/SetDataOptions\";\n\n/**\n * 缓冲。\n */\nexport class Buffer extends RefObject {\n  _glBindTarget: number;\n  _glBufferUsage: number;\n  _nativeBuffer: WebGLBuffer;\n\n  private _hardwareRenderer: HardwareRenderer;\n  private _type: BufferBindFlag;\n  private _byteLength: number;\n  private _bufferUsage: BufferUsage;\n\n  /**\n   * 引擎。\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  /**\n   * 缓冲类型。\n   */\n  get type(): BufferBindFlag {\n    return this._type;\n  }\n\n  /**\n   * 长度,以字节为单位。\n   */\n  get byteLength(): number {\n    return this._byteLength;\n  }\n\n  /**\n   * 缓冲用途\n   */\n  get bufferUsage(): BufferUsage {\n    return this._bufferUsage;\n  }\n\n  /**\n   * 创建缓冲。\n   * @param engine - 引擎\n   * @param type - 缓冲类型\n   * @param byteLength - 长度，字节为单位\n   * @param bufferUsage - 缓冲用途\n   */\n  constructor(engine: Engine, type: BufferBindFlag, byteLength: number, bufferUsage?: BufferUsage);\n\n  /**\n   * 创建缓冲。\n   * @param engine - 引擎\n   * @param type - 缓冲类型\n   * @param data - 数据\n   * @param bufferUsage - 缓冲用途\n   */\n  constructor(engine: Engine, type: BufferBindFlag, data: ArrayBuffer | ArrayBufferView, bufferUsage?: BufferUsage);\n\n  constructor(\n    engine: Engine,\n    type: BufferBindFlag,\n    byteLengthOrData: number | ArrayBuffer | ArrayBufferView,\n    bufferUsage: BufferUsage = BufferUsage.Static\n  ) {\n    super(engine);\n    this._engine = engine;\n    this._type = type;\n    this._bufferUsage = bufferUsage;\n\n    const hardwareRenderer = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = hardwareRenderer.gl;\n    const glBufferUsage = BufferUtil._getGLBufferUsage(gl, bufferUsage);\n    const glBindTarget = type === BufferBindFlag.VertexBuffer ? gl.ARRAY_BUFFER : gl.ELEMENT_ARRAY_BUFFER;\n\n    this._nativeBuffer = gl.createBuffer();\n    this._hardwareRenderer = hardwareRenderer;\n    this._glBufferUsage = glBufferUsage;\n    this._glBindTarget = glBindTarget;\n\n    this.bind();\n    if (typeof byteLengthOrData === \"number\") {\n      this._byteLength = byteLengthOrData;\n      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);\n    } else {\n      this._byteLength = byteLengthOrData.byteLength;\n      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  /**\n   * 绑定。\n   */\n  bind(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bindBuffer(this._glBindTarget, this._nativeBuffer);\n  }\n\n  /**\n   * 设置缓冲数据。\n   * @param data - 数据\n   */\n  setData(data: ArrayBuffer | ArrayBufferView): void;\n\n  /**\n   * 设置缓冲数据。\n   * @param data - 数据\n   * @param bufferByteOffset - 缓冲写入偏移，以字节为单位\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * 设置缓冲数据。\n   * @param data - 数据\n   * @param bufferByteOffset - 缓冲写入偏移，以字节为单位\n   * @param dataOffset - 数据偏移\n   * @param dataLength - 数据长度\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength?: number): void;\n\n  /**\n   * 设置缓冲数据。\n   * @param data - 数据\n   * @param bufferByteOffset - 缓冲写入偏移，以字节为单位\n   * @param dataOffset - 数据偏移\n   * @param dataLength - 数据长度\n   * @param options - 操作选项\n   */\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number,\n    dataOffset: number,\n    dataLength: number,\n    options: SetDataOptions\n  ): void;\n\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number = 0,\n    dataOffset: number = 0,\n    dataLength?: number,\n    options: SetDataOptions = SetDataOptions.None\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n    const glBindTarget: number = this._glBindTarget;\n    this.bind();\n\n    if (options === SetDataOptions.Discard) {\n      gl.bufferData(glBindTarget, this._byteLength, this._glBufferUsage);\n    }\n\n    // TypeArray is BYTES_PER_ELEMENT, unTypeArray is 1\n    const byteSize = (<Uint8Array>data).BYTES_PER_ELEMENT || 1;\n    const dataByteLength = dataLength ? byteSize * dataLength : data.byteLength;\n\n    if (dataOffset !== 0 || dataByteLength < data.byteLength) {\n      const isArrayBufferView = (<ArrayBufferView>data).byteOffset !== undefined;\n      if (isWebGL2 && isArrayBufferView) {\n        gl.bufferSubData(glBindTarget, bufferByteOffset, <ArrayBufferView>data, dataOffset, dataByteLength / byteSize);\n      } else {\n        const subData = new Uint8Array(\n          isArrayBufferView ? (<ArrayBufferView>data).buffer : <ArrayBuffer>data,\n          dataOffset * byteSize,\n          dataByteLength\n        );\n        gl.bufferSubData(glBindTarget, bufferByteOffset, subData);\n      }\n    } else {\n      gl.bufferSubData(glBindTarget, bufferByteOffset, data);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  /**\n   * 获取缓冲数据。\n   * @param data - 缓冲输出数据\n   */\n  getData(data: ArrayBufferView): void;\n\n  /**\n   * 获取缓冲数据。\n   * @param data - 缓冲输出数据\n   * @param bufferByteOffset - 缓冲读取偏移，以字节为单位\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * 获取缓冲数据。\n   * @param data - 缓冲输出数据\n   * @param bufferByteOffset - 缓冲读取偏移，以字节为单位\n   * @param dataOffset - 输出偏移\n   * @param dataLength - 输出长度\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength: number): void;\n\n  getData(data: ArrayBufferView, bufferByteOffset: number = 0, dataOffset: number = 0, dataLength?: number): void {\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n\n    if (isWebGL2) {\n      const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n      this.bind();\n      gl.getBufferSubData(this._glBindTarget, bufferByteOffset, data, dataOffset, dataLength);\n    } else {\n      throw \"Buffer is write-only on WebGL1.0 platforms.\";\n    }\n  }\n\n  /**\n   * @override\n   * 销毁。\n   */\n  _onDestroy() {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.deleteBuffer(this._nativeBuffer);\n    this._nativeBuffer = null;\n    this._hardwareRenderer = null;\n  }\n\n  /**\n   * @deprecated\n   */\n  resize(dataLength: number) {\n    this.bind();\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bufferData(this._glBindTarget, dataLength, this._glBufferUsage);\n    this._byteLength = dataLength;\n  }\n}\n","/**\n * 绘制基元拓扑。\n */\nexport enum PrimitiveTopology {\n  /** 绘制一系列点。*/\n  Points = 0,\n  /** 绘制一系列单独线段，每两个点作为一条线段的端点。*/\n  Lines = 1,\n  /** 绘制一系列线段，上一点连接下一点，并且最后一点与第一个点相连。*/\n  LineLoop = 2,\n  /** 绘制一系列线段，上一点连接下一点。*/\n  LineStrip = 3,\n  /** 绘制一系列三角形, 每三个点绘制一个三角形。*/\n  Triangles = 4,\n  /** 绘制一个三角带。*/\n  TriangleStrip = 5,\n  /** 绘制一个三角扇。*/\n  TriangleFan = 6\n}\n","import { IndexFormat } from \"./enums/IndexFormat\";\nimport { Buffer } from \"./Buffer\";\n\n/**\n * 索引缓冲绑定。\n */\nexport class IndexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _format: IndexFormat;\n\n  /**\n   * 索引缓冲。\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * 索引格式。\n   */\n  get format(): IndexFormat {\n    return this._format;\n  }\n\n  /**\n   * 创建索引缓冲绑定。\n   * @param buffer - 索引缓冲\n   * @param format - 索引格式\n   */\n  constructor(buffer: Buffer, format: IndexFormat) {\n    this._buffer = buffer;\n    this._format = format;\n  }\n}\n","import { Buffer } from \"./Buffer\";\n\n/**\n * 顶点缓冲绑定。\n */\nexport class VertexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _stride: number;\n\n  /**\n   * 顶点缓冲。\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * 顶点跨度。\n   */\n  get stride(): number {\n    return this._stride;\n  }\n\n  /**\n   * 创建顶点缓冲绑定。\n   * @param buffer - 顶点缓冲\n   * @param stride - 顶点跨度\n   */\n  constructor(buffer: Buffer, stride: number) {\n    this._buffer = buffer;\n    this._stride = stride;\n  }\n}\n","import { BoundingSphere, OBB } from \"@oasis-engine/math\";\nimport { Engine } from \"..\";\nimport { RefObject } from \"../asset/RefObject\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { IPlatformPrimitive } from \"../renderingHardwareInterface\";\nimport { BufferUtil } from \"./BufferUtil\";\nimport { IndexFormat } from \"./enums/IndexFormat\";\nimport { IndexBufferBinding } from \"./IndexBufferBinding\";\nimport { SubPrimitive } from \"./SubPrimitive\";\nimport { VertexBufferBinding } from \"./VertexBufferBinding\";\nimport { VertexElement } from \"./VertexElement\";\n\n/**\n * @private\n */\nexport class Primitive extends RefObject {\n  /** 名称。*/\n  name: string;\n  /** 实例数量，0 表示关闭实例渲染。*/\n  instanceCount: number = 0;\n\n  _vertexElementMap: object = {};\n  _glIndexType: number;\n  _platformPrimitive: IPlatformPrimitive;\n\n  private _vertexBufferBindings: VertexBufferBinding[] = [];\n  private _indexBufferBinding: IndexBufferBinding = null;\n  private _vertexElements: VertexElement[] = [];\n\n  /**\n   * 顶点缓冲绑定信息集合。\n   */\n  get vertexBufferBindings(): Readonly<VertexBufferBinding[]> {\n    return this._vertexBufferBindings;\n  }\n\n  /**\n   * 顶点元素集合。\n   */\n  get vertexElements(): Readonly<VertexElement[]> {\n    return this._vertexElements;\n  }\n\n  /**\n   * 索引缓冲绑定信息。\n   */\n  get indexBufferBinding(): IndexBufferBinding {\n    return this._indexBufferBinding;\n  }\n\n  targets: any[] = [];\n  boundingBox: OBB = null;\n  boundingSphere: BoundingSphere = null;\n  isInFrustum: boolean = true;\n\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this._platformPrimitive = this._engine._hardwareRenderer.createPlatformPrimitive(this);\n  }\n\n  /**\n   * 设置顶点缓冲绑定。\n   * @param vertexBuffer - 顶点缓冲\n   * @param stride - 顶点缓冲跨度\n   * @param firstIndex - 顶点缓冲绑定索引,默认值为 0\n   */\n  setVertexBufferBinding(vertexBuffer: Buffer, stride: number, firstIndex?: number): void;\n\n  /**\n   * 设置顶点缓冲绑定。\n   * @param vertexBufferBinding - 顶点缓冲绑定\n   * @param firstIndex - 顶点缓冲绑定索引,默认值为 0\n   */\n  setVertexBufferBinding(vertexBufferBinding: VertexBufferBinding, firstIndex?: number): void;\n\n  setVertexBufferBinding(\n    bufferOrBinding: Buffer | VertexBufferBinding,\n    strideOrFirstIndex: number = 0,\n    firstIndex: number = 0\n  ): void {\n    let binding = <VertexBufferBinding>bufferOrBinding;\n    const isBinding = binding.buffer !== undefined;\n    isBinding || (binding = new VertexBufferBinding(<Buffer>bufferOrBinding, strideOrFirstIndex));\n\n    const bindings = this._vertexBufferBindings;\n    bindings.length <= firstIndex && (bindings.length = firstIndex + 1);\n    this._setVertexBufferBinding(isBinding ? strideOrFirstIndex : firstIndex, binding);\n  }\n\n  /**\n   * 设置顶点缓冲绑定信息。\n   * @param bufferBindings - 缓冲绑定集合\n   * @param firstIndex - 第一个绑定索引\n   */\n  setVertexBufferBindings(bufferBindings: VertexBufferBinding[], firstIndex: number = 0): void {\n    const bindings = this._vertexBufferBindings;\n    const multiBindings = <VertexBufferBinding[]>bufferBindings;\n    const count = multiBindings.length;\n    const needLength = firstIndex + count;\n    bindings.length < needLength && (bindings.length = needLength);\n    for (let i = 0; i < count; i++) {\n      this._setVertexBufferBinding(firstIndex + i, multiBindings[i]);\n    }\n  }\n\n  /**\n   * 设置索引缓冲绑定。\n   * @param buffer - 索引缓冲\n   * @param format - 索引缓冲格式\n   */\n  setIndexBufferBinding(buffer: Buffer, format: IndexFormat): void;\n\n  /**\n   * 设置索引缓冲绑定。\n   * @param bufferBinding - 索引缓冲绑定\n   */\n  setIndexBufferBinding(bufferBinding: IndexBufferBinding): void;\n\n  setIndexBufferBinding(bufferOrBinding: Buffer | IndexBufferBinding, format?: IndexFormat): void {\n    let binding = <IndexBufferBinding>bufferOrBinding;\n    const isBinding = binding.buffer !== undefined;\n    isBinding || (binding = new IndexBufferBinding(<Buffer>bufferOrBinding, format));\n    this._indexBufferBinding = binding;\n    this._glIndexType = BufferUtil._getGLIndexType(binding.format);\n  }\n\n  /**\n   * 设置顶点元素集合。\n   * @param elements - 顶点元素集合\n   */\n  setVertexElements(elements: VertexElement[]): void {\n    this._clearVertexElements();\n    for (let i = 0, n = elements.length; i < n; i++) {\n      this._addVertexElement(elements[i]);\n    }\n  }\n\n  /**\n   * 绘制。\n   */\n  draw(tech: any, subPrimitive: SubPrimitive): void {\n    this._platformPrimitive.draw(tech, subPrimitive);\n  }\n\n  /**\n   * @override\n   * 销毁。\n   */\n  _onDestroy() {\n    this._vertexBufferBindings = null;\n    this._indexBufferBinding = null;\n    this._vertexElements = null;\n    this._vertexElementMap = null;\n    this._platformPrimitive.destroy();\n  }\n\n  private _clearVertexElements(): void {\n    this._vertexElements.length = 0;\n    const vertexElementMap = this._vertexElementMap;\n    for (var k in vertexElementMap) {\n      delete vertexElementMap[k];\n    }\n  }\n\n  private _addVertexElement(element: VertexElement): void {\n    this._vertexElementMap[element.semantic] = element;\n    this._vertexElements.push(element);\n  }\n\n  private _setVertexBufferBinding(index: number, buffer: VertexBufferBinding): void {\n    const originBufferBinding = this._vertexBufferBindings[index];\n    if (originBufferBinding) {\n      this._removeRefChild(originBufferBinding._buffer);\n    }\n    this._addRefChild(buffer._buffer);\n    this._vertexBufferBindings[index] = buffer;\n  }\n}\n","import { VertexElementFormat } from \"./enums/VertexElementFormat\";\nimport { ElementInfo, BufferUtil } from \"./BufferUtil\";\n\n/**\n * 顶点元素。\n */\nexport class VertexElement {\n  public readonly normalized = false;\n\n  _glElementInfo: ElementInfo;\n\n  private _semantic: string;\n  private _offset: number;\n  private _format: VertexElementFormat;\n  private _bindingIndex: number;\n  private _instanceStepRate: number;\n\n  /**\n   * 顶点输入签名。\n   */\n  get semantic(): string {\n    return this._semantic;\n  }\n\n  /**\n   * 顶点的偏移，以字节为单位。\n   */\n  get offset(): number {\n    return this._offset;\n  }\n\n  /**\n   * 顶点元素格式。\n   */\n  get format(): VertexElementFormat {\n    return this._format;\n  }\n\n  /**\n   * 顶点缓冲绑定索引。\n   */\n  get bindingIndex(): number {\n    return this._bindingIndex;\n  }\n\n  /**\n   * 实例步频，在缓冲中每前进一个顶点绘制的实例数量，非实例元素必须为 0。\n   */\n  get instanceStepRate(): number {\n    return this._instanceStepRate;\n  }\n\n  /**\n   * 构造顶点元素。\n   * @param semantic - 顶点着色器输入签名\n   * @param offset - 顶点的偏移，以字节为单位\n   * @param format - 顶点元素格式\n   * @param bindingIndex - 顶点缓冲绑定索引\n   * @param instanceStepRate - 实例步频，在缓冲中每前进一个顶点绘制的实例数量，非实例元素必须为 0\n   */\n  constructor(\n    semantic: string,\n    offset: number,\n    format: VertexElementFormat,\n    bindingIndex: number,\n    instanceStepRate: number = 0\n  ) {\n    this._semantic = semantic;\n    this._offset = offset;\n    this._format = format;\n    this._bindingIndex = bindingIndex;\n    this._glElementInfo = BufferUtil._getElementInfo(this.format);\n    this._instanceStepRate = Math.floor(instanceStepRate);\n  }\n\n  /**\n   * @deprecated\n   */\n  get elementInfo(): ElementInfo {\n    return this._glElementInfo;\n  }\n}\n","import { PrimitiveTopology } from \"./enums/PrimitiveTopology\";\n\n/**\n * 子图元。\n */\nexport class SubPrimitive {\n  /** 起始绘制偏移。*/\n  start: number;\n  /** 绘制数量。*/\n  count: number;\n  /** 图元拓扑。*/\n  topology: PrimitiveTopology;\n\n  /**\n   * 创建子图元。\n   * @param start - 起始绘制偏移\n   * @param count - 数量\n   * @param topology - 图元拓扑\n   */\n  constructor(start: number = 0, count: number = 0, topology: PrimitiveTopology = PrimitiveTopology.Triangles) {\n    this.start = start;\n    this.count = count;\n    this.topology = topology;\n  }\n}\n","import pbr_common_frag_define from \"./common_frag_define.glsl\";\nimport pbr_util_frag_define from \"./util_frag_define.glsl\";\n\n/** IBL define */\nimport pbr_envmap_light_frag_define from \"./envmap_light_frag_define.glsl\";\n\n/** prop & texture */\nimport pbr_base_frag_define from \"./base_frag_define.glsl\";\nimport pbr_texture_frag_define from \"./texture_frag_define.glsl\";\n\n/** runtime context */\nimport pbr_runtime_frag_define from \"./runtime_frag_define.glsl\";\n\n// todo: generalize\nimport pbr_normal_frag_define from \"./normal_frag_define.glsl\";\n\n// todo: BxDF\nimport pbr_brdf_cook_torrance_frag_define from \"./brdf_cook_torrance_frag_define.glsl\";\n\n/** direct + IBL */\nimport pbr_direct_irradiance_frag_define from \"./direct_irradiance_frag_define.glsl\";\nimport pbr_ibl_specular_frag_define from \"./ibl_specular_frag_define.glsl\";\nimport pbr_ibl_diffuse_frag_define from \"./ibl_diffuse_frag_define.glsl\";\n\nimport pbr_begin_frag from \"./begin_frag.glsl\";\nimport pbr_direct_irradiance_frag from \"./direct_irradiance_frag.glsl\";\nimport pbr_ibl_diffuse_frag from \"./ibl_diffuse_frag.glsl\";\nimport pbr_ibl_specular_frag from \"./ibl_specular_frag.glsl\";\nimport pbr_end_frag from \"./end_frag.glsl\";\n\nexport default {\n  pbr_common_frag_define,\n  pbr_util_frag_define,\n\n  pbr_envmap_light_frag_define,\n\n  pbr_base_frag_define,\n  pbr_texture_frag_define,\n\n  pbr_runtime_frag_define,\n\n  pbr_normal_frag_define,\n\n  pbr_brdf_cook_torrance_frag_define,\n\n  pbr_direct_irradiance_frag_define,\n  pbr_ibl_specular_frag_define,\n  pbr_ibl_diffuse_frag_define,\n\n  pbr_begin_frag,\n  pbr_direct_irradiance_frag,\n  pbr_ibl_diffuse_frag,\n  pbr_ibl_specular_frag,\n  pbr_end_frag\n};\n","import common from \"./common.glsl\";\nimport common_vert from \"./common_vert.glsl\";\nimport common_frag from \"./common_frag.glsl\";\n\nimport color_share from \"./color_share.glsl\";\nimport normal_share from \"./normal_share.glsl\";\nimport uv_share from \"./uv_share.glsl\";\nimport worldpos_share from \"./worldpos_share.glsl\";\nimport shadow_share from \"./shadow_share.glsl\";\nimport fog_share from \"./fog_share.glsl\";\n\nimport begin_normal_vert from \"./begin_normal_vert.glsl\";\nimport begin_position_vert from \"./begin_position_vert.glsl\";\n\nimport morph_target_vert from \"./morph_target_vert.glsl\";\n\nimport position_vert from \"./position_vert.glsl\";\nimport color_vert from \"./color_vert.glsl\";\nimport normal_vert from \"./normal_vert.glsl\";\nimport skinning_vert from \"./skinning_vert.glsl\";\nimport uv_vert from \"./uv_vert.glsl\";\nimport worldpos_vert from \"./worldpos_vert.glsl\";\nimport shadow_vert from \"./shadow_vert.glsl\";\nimport morph_vert from \"./morph_vert.glsl\";\nimport fog_vert from \"./fog_vert.glsl\";\n\nimport ambient_light_frag from \"./ambient_light_frag.glsl\";\nimport direct_light_frag from \"./direct_light_frag.glsl\";\nimport point_light_frag from \"./point_light_frag.glsl\";\nimport spot_light_frag from \"./spot_light_frag.glsl\";\nimport mobile_material_frag from \"./mobile_material_frag.glsl\";\nimport fog_frag from \"./fog_frag.glsl\";\n\nimport begin_mobile_frag from \"./begin_mobile_frag.glsl\";\nimport begin_normal_frag from \"./begin_normal_frag.glsl\";\nimport begin_viewdir_frag from \"./begin_viewdir_frag.glsl\";\n\nimport mobile_blinnphong_frag from \"./mobile_blinnphong_frag.glsl\";\nimport mobile_lambert_frag from \"./mobile_lambert_frag.glsl\";\n\nimport noise_common from \"./noise_common.glsl\";\nimport noise_cellular_2D from \"./noise_cellular_2D.glsl\";\nimport noise_cellular_2x2 from \"./noise_cellular_2x2.glsl\";\nimport noise_cellular_2x2x2 from \"./noise_cellular_2x2x2.glsl\";\nimport noise_cellular_3D from \"./noise_cellular_3D.glsl\";\nimport noise_cellular from \"./noise_cellular.glsl\";\nimport noise_perlin_2D from \"./noise_perlin_2D.glsl\";\nimport noise_perlin_3D from \"./noise_perlin_3D.glsl\";\nimport noise_perlin_4D from \"./noise_perlin_4D.glsl\";\nimport noise_perlin from \"./noise_perlin.glsl\";\nimport noise_psrd_2D from \"./noise_psrd_2D.glsl\";\nimport noise_simplex_2D from \"./noise_simplex_2D.glsl\";\nimport noise_simplex_3D_grad from \"./noise_simplex_3D_grad.glsl\";\nimport noise_simplex_3D from \"./noise_simplex_3D.glsl\";\nimport noise_simplex_4D from \"./noise_simplex_4D.glsl\";\nimport noise_simplex from \"./noise_simplex.glsl\";\n\nimport perturbation_share from \"./perturbation_share.glsl\";\nimport perturbation_frag from \"./perturbation_frag.glsl\";\nimport refraction_share from \"./refraction_share.glsl\";\nimport refraction_frag from \"./refraction_frag.glsl\";\n\nimport clipPlane_vert_define from \"./clipPlane_vert_define.glsl\";\nimport clipPlane_vert from \"./clipPlane_vert.glsl\";\nimport clipPlane_frag_define from \"./clipPlane_frag_define.glsl\";\nimport clipPlane_frag from \"./clipPlane_frag.glsl\";\n\nimport gamma_frag from \"./gamma_frag.glsl\";\n\nimport PBRShaderLib from \"./pbr\";\nimport oit_frag from \"./oit/oit_frag.glsl\";\nimport oit_frag_define from \"./oit/oit_frag_define.glsl\";\n\nexport const ShaderLib = {\n  common,\n  common_vert,\n  common_frag,\n\n  color_share,\n  normal_share,\n  uv_share,\n  worldpos_share,\n  shadow_share,\n  fog_share,\n\n  begin_normal_vert,\n  begin_position_vert,\n\n  morph_target_vert,\n\n  position_vert,\n  color_vert,\n  normal_vert,\n  skinning_vert,\n  uv_vert,\n  worldpos_vert,\n  shadow_vert,\n  morph_vert,\n  fog_vert,\n\n  ambient_light_frag,\n  direct_light_frag,\n  point_light_frag,\n  spot_light_frag,\n  mobile_material_frag,\n  fog_frag,\n\n  begin_mobile_frag,\n  begin_normal_frag,\n  begin_viewdir_frag,\n\n  mobile_blinnphong_frag,\n  mobile_lambert_frag,\n\n  noise_common,\n  noise_cellular_2D,\n  noise_cellular_2x2,\n  noise_cellular_2x2x2,\n  noise_cellular_3D,\n  noise_cellular,\n  noise_perlin_2D,\n  noise_perlin_3D,\n  noise_perlin_4D,\n  noise_perlin,\n  noise_psrd_2D,\n  noise_simplex_2D,\n  noise_simplex_3D_grad,\n  noise_simplex_3D,\n  noise_simplex_4D,\n  noise_simplex,\n\n  perturbation_share,\n  perturbation_frag,\n  refraction_share,\n  refraction_frag,\n\n  clipPlane_vert_define,\n  clipPlane_vert,\n  clipPlane_frag_define,\n  clipPlane_frag,\n\n  gamma_frag,\n\n  oit_frag,\n  oit_frag_define,\n\n  ...PBRShaderLib\n};\n\nexport function InjectShaderSlices(obj) {\n  Object.assign(ShaderLib, obj);\n}\n","import { ShaderLib, InjectShaderSlices } from \"./ShaderLib\";\nimport { Logger } from \"../base/Logger\";\n\nclass ShaderFactory {\n  /**\n   * GLSL 版本\n   * @param {string} version - \"100\" | \"300 es\"\n   * */\n  static parseVersion(version: string = \"100\") {\n    return `#version ${version}\\n`;\n  }\n\n  static parsePrecision(vertP: string, fragP: string, compileVert?: boolean) {\n    const downgrade = \"mediump\";\n\n    return `\n        #ifdef GL_FRAGMENT_PRECISION_HIGH\n          precision ${compileVert ? vertP : fragP} float;\n          precision ${compileVert ? vertP : fragP} int;\n\n          #define O3_VERTEX_PRECISION ${vertP}\n          #define O3_FRAGMENT_PRECISION ${fragP}\n        #else\n          precision ${downgrade} float;\n          precision ${downgrade} int;\n\n          #define O3_VERTEX_PRECISION ${downgrade}\n          #define O3_FRAGMENT_PRECISION ${downgrade}\n        #endif\n      `;\n  }\n\n  static parseShaderName(name) {\n    return `#define O3_SHADER_NAME ${name}\\n`;\n  }\n\n  static parseAttributeMacros(macros) {\n    return (\n      \"#define O3_ATTRIBUTE_MACROS_START\\n\" +\n      macros.map((m) => `#define ${m}\\n`).join(\"\") +\n      \"#define O3_ATTRIBUTE_MACROS_END\\n\"\n    );\n  }\n\n  static parseCustomMacros(macros) {\n    return (\n      \"#define O3_CUSTOM_MACROS_START\\n\" +\n      macros.map((m) => `#define ${m}\\n`).join(\"\") +\n      \"#define O3_CUSTOM_MACROS_END\\n\"\n    );\n  }\n\n  static parseShader(src) {\n    return ShaderFactory.parseIncludes(src);\n  }\n\n  static parseIncludes(src) {\n    const regex = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n    function replace(match, slice) {\n      var replace = ShaderLib[slice];\n\n      if (replace === undefined) {\n        Logger.error(`Shader slice \"${match.trim()}\" not founded.`);\n        return \"\";\n      }\n\n      return ShaderFactory.parseIncludes(replace);\n    }\n\n    return src.replace(regex, replace);\n  }\n\n  static InjectShaderSlices(slices) {\n    InjectShaderSlices(slices);\n  }\n\n  /**\n   * 相应版本的 extension\n   * @param {string[]} extensions - such as [\"GL_EXT_shader_texture_lod\"]\n   * */\n  static parseExtension(extensions: string[]) {\n    return (\n      `#define O3_EXTENSION_START\\n` +\n      extensions.map((e) => `#extension ${e} : enable\\n`).join(\"\") +\n      `#define O3_EXTENSION_END\\n`\n    );\n  }\n\n  /**\n   * 切换低版本 GLSL 到 GLSL 300 es\n   * @param {string} shader - code\n   * @param {boolean} isFrag - 是否为片元着色器。\n   * */\n  static convertTo300(shader: string, isFrag?: boolean) {\n    const isGLSL300 = shader.includes(\"#version 300 es\");\n\n    // 如果本来就是新版本着色器，则无需转换。\n    if (isGLSL300) return shader;\n\n    /** 替换版本 */\n    shader = shader.replace(/#version 100/, \"#version 300 es\");\n    /** 修饰符替换 */\n    shader = shader.replace(/\\battribute\\b/g, \"in\");\n    shader = shader.replace(/\\bvarying\\b/g, isFrag ? \"in\" : \"out\");\n\n    /** 内置变量替换 */\n    shader = shader.replace(/\\btexture(2D|Cube)\\s*\\(/g, \"texture(\");\n    shader = shader.replace(/\\btexture(2D|Cube)LodEXT\\s*\\(/g, \"textureLod(\");\n    if (isFrag) {\n      const isMRT = /\\bgl_FragData\\[.+?\\]/g.test(shader);\n      if (isMRT) {\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"gl_FragData[0]\");\n        const result = shader.match(/\\bgl_FragData\\[.+?\\]/g);\n        shader = this.replaceMRTShader(shader, result);\n      } else {\n        shader = shader.replace(/void\\s+?main\\s*\\(/g, `out vec4 glFragColor;\\nvoid main(`);\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"glFragColor\");\n      }\n    }\n\n    return shader;\n  }\n\n  /**\n   * 返回相应 shaderCode 中的 draw buffer 长度\n   * @param shader - shader code\n   */\n  static getMaxDrawBuffers(shader: string): number {\n    const mrtIndexSet = new Set();\n    const result = shader.match(/\\bgl_FragData\\[.+?\\]/g) || [];\n\n    for (let i = 0; i < result.length; i++) {\n      const res = result[i].match(/\\bgl_FragData\\[(.+?)\\]/);\n      mrtIndexSet.add(res[1]);\n    }\n\n    return mrtIndexSet.size;\n  }\n\n  /**\n   * 1. 兼容 gl_FragColor 和 gl_FragData 同时存在的报错\n   * */\n  static compatible(fragmentShader: string) {\n    const hasFragData = /\\bgl_FragData\\[.+?\\]/g.test(fragmentShader);\n    if (hasFragData) {\n      fragmentShader = fragmentShader.replace(/\\bgl_FragColor\\b/g, \"gl_FragData[0]\");\n    }\n    return fragmentShader;\n  }\n\n  private static replaceMRTShader(shader: string, result: string[]): string {\n    let declaration = \"\";\n    const mrtIndexSet = new Set();\n\n    for (let i = 0; i < result.length; i++) {\n      const res = result[i].match(/\\bgl_FragData\\[(.+?)\\]/);\n      mrtIndexSet.add(res[1]);\n    }\n\n    mrtIndexSet.forEach((index) => {\n      declaration += `layout(location=${index}) out vec4 fragOutColor${index};\\n`;\n    });\n    declaration += `void main(`;\n\n    shader = shader.replace(/\\bgl_FragData\\[(.+?)\\]/g, \"fragOutColor$1\");\n\n    shader = shader.replace(/void\\s+?main\\s*\\(/g, declaration);\n    return shader;\n  }\n}\n\nexport { ShaderFactory };\n","import { AssetObject } from \"../asset/AssetObject\";\nimport { DataType, UniformSemantic } from \"../base/Constant\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { Primitive, VertexElement, VertexElementFormat } from \"../graphic\";\nimport { ShaderFactory } from \"../shaderlib/ShaderFactory\";\nimport { Material } from \"./Material\";\nimport { Attributes, TechniqueStates, Uniforms } from \"./type\";\n\n/**\n * 渲染单个对象所需的控制对象，作为 Material 的模块使用。对应 glTF 里面的 technique 对象\n */\nexport class RenderTechnique extends AssetObject {\n  // 是否可用\n  public _glTechnique: any;\n  // 是否可用\n  public isValid: boolean = false;\n  // Unifrom记录数组\n  private _uniforms: Uniforms = RenderTechnique.commonUniforms;\n  // Attribute记录对象\n  private _attributes: Attributes = RenderTechnique.commonAttributes;\n  /**\n   * 渲染状态控制对象\n   * {\n   *  enable:[],\n   *  disable:[],\n   *  functions:{\n   *    \"func_name\":[]\n   *  }\n   * }\n   *\n   * function name: \"blendColor\", \"blendEquationSeparate\", \"blendFuncSeparate\",\n   * \"colorMask\", \"cullFace\", \"depthFunc\", \"depthMask\", \"depthRange\", \"frontFace\",\n   * \"lineWidth\", \"polygonOffset\", and \"scissor\"\n   * @member {object}\n   */\n  public states: TechniqueStates = null;\n  /**\n   * Vertex Shader 代码\n   * @member {string}\n   */\n  public vertexShader: string = \"\";\n  /**\n   * Fragment Shader 代码\n   * @member {string}\n   */\n  public fragmentShader: string = \"\";\n\n  /**\n   * GLSL 原始版本\n   * 若 autoConvert = true, WebGL 2 时着色器为旧版本，则升级到 300 版本\n   * @member {String} - \"100\" | \"300 es\"\n   */\n  public version = \"100\";\n\n  /** 自动转换 GLSL 版本 */\n  public autoConvert = true;\n\n  /**\n   * Vertex Shader 的精度\n   * @member {String}\n   */\n  public vertexPrecision = \"highp\";\n  /**\n   * Fragment Shader 的精度\n   * @member {String}\n   */\n  public fragmentPrecision = \"mediump\";\n  /**\n   * 自定义宏\n   * @member {Array}\n   */\n  public customMacros = [];\n\n  /**\n   * WebGL 1.0 时着色器中使用的拓展\n   * @member {Array}\n   */\n  public shaderExtension100 = [\"GL_EXT_shader_texture_lod\", \"GL_OES_standard_derivatives\", \"GL_EXT_draw_buffers\"];\n\n  /**\n   * WebGL 2.0 时着色器中使用的拓展\n   * @member {Array}\n   */\n  public shaderExtension300 = [];\n\n  public _needCompile = true;\n\n  private _recreateHeader: boolean;\n  private _vsHeader: string;\n  private _vsCode: string;\n  private _fsHeader: string;\n  private _fsCode: string;\n  private _fogMacro: string;\n  public attribLocSet: any;\n\n  /**\n   * 构造函数\n   * @param {string} name 名称\n   */\n  constructor(public name: string) {\n    super(null);\n  }\n\n  get attributes() {\n    return this._attributes;\n  }\n\n  set attributes(v) {\n    this._attributes = Object.assign({}, RenderTechnique.commonAttributes, v);\n  }\n\n  get uniforms() {\n    return this._uniforms;\n  }\n\n  set uniforms(v) {\n    this._uniforms = Object.assign({}, RenderTechnique.commonUniforms, v);\n  }\n\n  compile(camera: Camera, component, primitive: Primitive, material: Material) {\n    this.parseFog(camera);\n\n    if (this._needCompile) {\n      const rhi = camera.engine._hardwareRenderer;\n      const isWebGL2 = rhi?.isWebGL2;\n\n      material.preCompile?.(this);\n\n      const attribMacros = this.getAttributeDefines(camera, component, primitive, material);\n\n      if (this._recreateHeader) {\n        // reset configs\n        this.attributes = this.attributes;\n        this.uniforms = this.uniforms;\n      }\n\n      if (!this._vsHeader || this._recreateHeader)\n        this._vsHeader =\n          ShaderFactory.parseVersion(this.version) +\n          ShaderFactory.parseShaderName((this.name || \"VOID\").toUpperCase() + \"_VERT\") +\n          \"\\n\" +\n          ShaderFactory.parsePrecision(this.vertexPrecision, this.fragmentPrecision, true) +\n          \"\\n\" +\n          ShaderFactory.parseAttributeMacros(attribMacros) +\n          \"\\n\" +\n          ShaderFactory.parseCustomMacros(this.customMacros) +\n          \"\\n\";\n\n      if (!this._vsCode) this._vsCode = ShaderFactory.parseShader(this.vertexShader);\n\n      this.vertexShader = this._vsHeader + this._vsCode;\n\n      if (!this._fsHeader || this._recreateHeader)\n        this._fsHeader =\n          ShaderFactory.parseVersion(this.version) +\n          ShaderFactory.parseShaderName((this.name || \"VOID\").toUpperCase() + \"_FRAG\") +\n          \"\\n\" +\n          ShaderFactory.parseExtension(isWebGL2 ? this.shaderExtension300 : this.shaderExtension100) +\n          ShaderFactory.parsePrecision(this.vertexPrecision, this.fragmentPrecision) +\n          \"\\n\" +\n          ShaderFactory.parseAttributeMacros(attribMacros) +\n          \"\\n\" +\n          ShaderFactory.parseCustomMacros(this.customMacros) +\n          \"\\n\";\n\n      if (!this._fsCode) this._fsCode = ShaderFactory.parseShader(this.fragmentShader);\n\n      this.fragmentShader = this._fsHeader + this._fsCode;\n\n      /**\n       * 若 autoConvert = true,  WebGL 2 时着色器为旧版本，则升级到 300 版本\n       * 若 WebGL1,兼容 gl_FragColor 和 gl_FragData 同时存在的报错\n       * */\n      if (this.autoConvert && isWebGL2 && this.version !== \"300 es\") {\n        const maxDrawBuffers = rhi.capability.maxDrawBuffers;\n        const shaderMaxDrawBuffers = ShaderFactory.getMaxDrawBuffers(this.fragmentShader);\n\n        if (shaderMaxDrawBuffers <= maxDrawBuffers) {\n          this.vertexShader = ShaderFactory.convertTo300(this.vertexShader);\n          this.fragmentShader = ShaderFactory.convertTo300(this.fragmentShader, true);\n        }\n      } else if (!isWebGL2 && this.version !== \"300es\") {\n        this.fragmentShader = ShaderFactory.compatible(this.fragmentShader);\n      }\n\n      this._needCompile = false;\n      this._recreateHeader = false;\n\n      material.postCompile?.(this);\n    }\n  }\n\n  getAttributeDefines(camera: Camera, component, primitive: Primitive, material) {\n    const rhi = camera.scene.engine._hardwareRenderer;\n    const gl = rhi.gl;\n    const _macros = [];\n    if (!primitive) return _macros;\n\n    const attribNames = Object.keys(primitive._vertexElementMap);\n\n    if (attribNames.indexOf(\"TEXCOORD_0\") > -1) _macros.push(\"O3_HAS_UV\");\n    if (attribNames.indexOf(\"NORMAL\") > -1) _macros.push(\"O3_HAS_NORMAL\");\n    if (attribNames.indexOf(\"TANGENT\") > -1) _macros.push(\"O3_HAS_TANGENT\");\n    if (attribNames.indexOf(\"JOINTS_0\") > -1) {\n      _macros.push(\"O3_HAS_SKIN\");\n      if (component.jointNodes?.length) {\n        const maxAttribUniformVec4 = rhi.renderStates.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        const maxJoints = Math.floor((maxAttribUniformVec4 - 20) / 4);\n        const joints = component.jointNodes.length;\n\n        if (joints > maxJoints) {\n          /** 是否使用骨骼纹理 */\n          if (rhi.canIUseMoreJoints) {\n            _macros.push(\"O3_USE_JOINT_TEXTURE\");\n          } else {\n            Logger.error(\n              `component's joints count(${joints}) greater than device's MAX_VERTEX_UNIFORM_VECTORS number ${maxAttribUniformVec4}, suggest joint count less than ${maxJoints}.`,\n              component\n            );\n          }\n        } else if (material.maxJointsNum > 0) {\n          // 使用最大关节数，保证所有 SkinnedMeshRenderer 都可以共用材质\n          _macros.push(`O3_JOINTS_NUM ${material.maxJointsNum}`);\n        }\n      }\n    }\n    if (attribNames.indexOf(\"COLOR_0\") > -1) {\n      _macros.push(\"O3_HAS_VERTEXCOLOR\");\n      if ((<VertexElement>primitive._vertexElementMap[\"COLOR_0\"]).format === VertexElementFormat.Vector4)\n        _macros.push(\"O3_HAS_VERTEXALPHA\");\n    }\n\n    // if (component.weights) {\n    //   const maxAttribs = rhi.renderStates.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    //   if (attribNames.length > maxAttribs) {\n    //     Logger.warn(`too many morph targets, beyond the MAX_VERTEX_ATTRIBS limit ${maxAttribs}`);\n    //   }\n    //   const targetNum = component.weights.length;\n    //   _macros.push(\"O3_HAS_MORPH\");\n    //   _macros.push(`O3_MORPH_NUM ${targetNum}`);\n\n    //   if (attribNames.indexOf(\"POSITION_0\") > -1) _macros.push(\"O3_MORPH_POSITION\");\n    //   if (attribNames.indexOf(\"NORMAL_0\") > -1) _macros.push(\"O3_MORPH_NORMAL\");\n    //   if (attribNames.indexOf(\"TANGENT_0\") > -1) _macros.push(\"O3_MORPH_TANGENT\");\n\n    //   this._attributes = Object.assign(this.attributes, this.createMorphConfig(primitive, targetNum));\n    //   this._uniforms.u_morphWeights = {\n    //     name: \"u_morphWeights\",\n    //     semantic: UniformSemantic.MORPHWEIGHTS,\n    //     type: DataType.FLOAT\n    //   };\n    //   // }\n    // }\n\n    const scene = camera.scene as any;\n    if (scene.hasFogFeature) {\n      _macros.push(...scene.getFogMacro());\n    }\n\n    return _macros;\n  }\n\n  parseFog(camera) {\n    const scene = camera.scene;\n    if (scene.hasFogFeature) {\n      const fogMacro = scene.getFogMacro();\n      if (this._fogMacro !== fogMacro) {\n        this._needCompile = true;\n        this._recreateHeader = true;\n        this._fogMacro = fogMacro;\n      }\n    }\n  }\n\n  createMorphConfig(primitive: Primitive, targetNum: number) {\n    const attributes = Object.keys(primitive._vertexElementMap);\n    const morphConfig = {};\n    for (let i = 0; i < targetNum; i++) {\n      if (attributes.indexOf(`POSITION_${i}`) > -1)\n        morphConfig[`a_position${i}`] = {\n          name: `a_position${i}`,\n          semantic: `POSITION_${i}`,\n          type: DataType.FLOAT_VEC3\n        };\n\n      if (attributes.indexOf(`NORMAL_${i}`) > -1)\n        morphConfig[`a_normal${i}`] = {\n          name: `a_normal${i}`,\n          semantic: `NORMAL_${i}`,\n          type: DataType.FLOAT_VEC3\n        };\n\n      if (attributes.indexOf(`TANGENT_${i}`) > -1)\n        morphConfig[`a_tangent${i}`] = {\n          name: `a_tangent${i}`,\n          semantic: `TANGENT_${i}`,\n          type: DataType.FLOAT_VEC3\n        };\n    }\n\n    return morphConfig;\n  }\n\n  static commonAttributes = {\n    a_position: {\n      name: \"a_position\",\n      semantic: \"POSITION\",\n      type: DataType.FLOAT_VEC3\n    },\n    a_uv: {\n      name: \"a_uv\",\n      semantic: \"TEXCOORD_0\",\n      type: DataType.FLOAT_VEC2\n    },\n    a_normal: {\n      name: \"a_noraml\",\n      semantic: \"NORMAL\",\n      type: DataType.FLOAT_VEC3\n    },\n    a_tangent: {\n      name: \"a_tangent\",\n      semantic: \"TANGENT\",\n      type: DataType.FLOAT_VEC4\n    },\n    a_color: {\n      name: \"a_color\",\n      semantic: \"COLOR_0\",\n      type: DataType.FLOAT_VEC4\n    },\n    a_joint: {\n      name: \"a_joint\",\n      semantic: \"JOINTS_0\",\n      type: DataType.FLOAT_VEC4\n    },\n    a_weight: {\n      name: \"a_weight\",\n      semantic: \"WEIGHTS_0\",\n      type: DataType.FLOAT_VEC4\n    }\n  };\n\n  static commonUniforms = {\n    u_localMat: {\n      name: \"u_localMat\",\n      semantic: UniformSemantic.LOCAL,\n      type: DataType.FLOAT_MAT4\n    },\n    u_modelMat: {\n      name: \"u_modelMat\",\n      semantic: UniformSemantic.MODEL,\n      type: DataType.FLOAT_MAT4\n    },\n    u_viewMat: {\n      name: \"u_viewMat\",\n      semantic: UniformSemantic.VIEW,\n      type: DataType.FLOAT_MAT4\n    },\n    u_projMat: {\n      name: \"u_projMat\",\n      semantic: UniformSemantic.PROJECTION,\n      type: DataType.FLOAT_MAT4\n    },\n    u_MVMat: {\n      name: \"u_MVMat\",\n      semantic: UniformSemantic.MODELVIEW,\n      type: DataType.FLOAT_MAT4\n    },\n    u_MVPMat: {\n      name: \"u_MVPMat\",\n      semantic: UniformSemantic.MODELVIEWPROJECTION,\n      type: DataType.FLOAT_MAT4\n    },\n    u_normalMat: {\n      name: \"u_normalMat\",\n      semantic: UniformSemantic.MODELINVERSETRANSPOSE,\n      type: DataType.FLOAT_MAT3\n    },\n    u_cameraPos: {\n      name: \"u_cameraPos\",\n      type: DataType.FLOAT_VEC3,\n      semantic: UniformSemantic.EYEPOS\n    },\n    u_time: {\n      name: \"u_time\",\n      type: DataType.FLOAT,\n      semantic: UniformSemantic.TIME\n    },\n    u_jointMatrix: {\n      name: \"u_jointMatrix\",\n      semantic: UniformSemantic.JOINTMATRIX,\n      type: DataType.FLOAT_MAT4_ARRAY\n    },\n    u_jointSampler: {\n      name: \"u_jointSampler\",\n      semantic: UniformSemantic.JOINTTEXTURE,\n      type: DataType.SAMPLER_2D\n    },\n    u_jointCount: {\n      name: \"u_jointCount\",\n      semantic: UniformSemantic.JOINTCOUNT,\n      type: DataType.FLOAT\n    },\n    u_fogColor: {\n      name: \"u_fogColor\",\n      type: DataType.FLOAT_VEC3\n    },\n    u_fogDensity: {\n      name: \"u_fogDensity\",\n      type: DataType.FLOAT\n    },\n    u_fogNear: {\n      name: \"u_fogNear\",\n      type: DataType.FLOAT\n    },\n    u_fogFar: {\n      name: \"u_fogFar\",\n      type: DataType.FLOAT\n    }\n  };\n\n  _finalize(): void {\n    if (this._glTechnique) {\n      this._glTechnique.finalize(true);\n      this._glTechnique = null;\n    }\n  }\n}\n","/**\n * 立方体纹理面。\n */\nexport enum TextureCubeFace {\n  /** X轴正方向。 */\n  PositiveX = 0,\n  /** X轴负方向。 */\n  NegativeX = 1,\n  /** Y轴正方向。 */\n  PositiveY = 2,\n  /** Y轴负方向。 */\n  NegativeY = 3,\n  /** Z轴正方向。 */\n  PositiveZ = 4,\n  /** Z轴负方向。 */\n  NegativeZ = 5\n}\n","import { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * 立方体纹理。\n * @todo 日后调整为TextureCube命名\n */\nexport class TextureCubeMap extends Texture {\n  private _format: TextureFormat;\n  /** 向下兼容 WebGL1.0 */\n  private _compressedFaceFilled: number[] = [0, 0, 0, 0, 0, 0];\n\n  /**\n   * 纹理的格式。\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * 创建立方体纹理。\n   * @param engine - 所属引擎\n   * @param size - 尺寸\n   * @param format - 格式，默认 TextureFormat.R8G8B8A8\n   * @param mipmap - 是否使用多级纹理\n   */\n  constructor(engine: Engine, size: number, format: TextureFormat = TextureFormat.R8G8B8A8, mipmap: boolean = true) {\n    super(engine);\n    const rhi = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n    const isWebGL2: boolean = rhi.isWebGL2;\n\n    if (!Texture._supportTextureFormat(format, rhi)) {\n      throw new Error(`Texture format is not supported:${TextureFormat[format]}`);\n    }\n\n    if (mipmap && !isWebGL2 && !Texture._isPowerOf2(size)) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n      mipmap = false;\n    }\n\n    const formatDetail = Texture._getFormatDetail(format, gl, isWebGL2);\n\n    this._glTexture = gl.createTexture();\n    this._formatDetail = formatDetail;\n    this._rhi = rhi;\n    this._target = gl.TEXTURE_CUBE_MAP;\n    this._mipmap = mipmap;\n    this._width = size;\n    this._height = size;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    (formatDetail.isCompressed && !isWebGL2) || this._initMipmap(true);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * 通过指定立方体面、像素缓冲数据、区域和纹理层级设置像素，同样适用于压缩格式。\n   * 压缩纹理在 WebGL1 时必须先填满纹理，才能写子区域\n   * @param face - 立方体面\n   * @param colorBuffer - 颜色缓冲\n   * @param mipLevel - 多级纹理层级\n   * @param x - 区域起始X坐标\n   * @param y - 区域起始Y坐标\n   * @param width - 区域宽。如果为空的话 width 为 mipLevel 对应的宽度减去 x , mipLevel 对应的宽度为 Math.max(1, this.width >> mipLevel)\n   * @param height - 区域高。如果为空的话 height 为 mipLevel 对应的高度减去 y , mipLevel 对应的高度为 Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    face: TextureCubeFace,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x?: number,\n    y?: number,\n    width?: number,\n    height?: number\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const { internalFormat, baseFormat, dataType, isCompressed } = this._formatDetail;\n    const mipSize = Math.max(1, this._width >> mipLevel);\n\n    x = x || 0;\n    y = y || 0;\n    width = width || mipSize - x;\n    height = height || mipSize - y;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isCompressed) {\n      const mipBit = 1 << mipLevel;\n      if (isWebGL2 || this._compressedFaceFilled[face] & mipBit) {\n        gl.compressedTexSubImage2D(\n          gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n          mipLevel,\n          x,\n          y,\n          width,\n          height,\n          internalFormat,\n          colorBuffer\n        );\n      } else {\n        gl.compressedTexImage2D(\n          gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n          mipLevel,\n          internalFormat,\n          width,\n          height,\n          0,\n          colorBuffer\n        );\n        this._compressedFaceFilled[face] |= mipBit;\n      }\n    } else {\n      gl.texSubImage2D(\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n        mipLevel,\n        x,\n        y,\n        width,\n        height,\n        baseFormat,\n        dataType,\n        colorBuffer\n      );\n    }\n\n    this._unbind();\n  }\n\n  /**\n   * 通过指定立方体面、图源、区域和纹理层级设置像素。\n   * @param face - 立方体面\n   * @param imageSource - 纹理源\n   * @param mipLevel - 多级纹理层级\n   * @param flipY - 是否翻转Y轴\n   * @param premultipltAlpha - 是否预乘透明通道\n   * @param x - 区域起始X坐标\n   * @param y - 区域起始Y坐标\n   */\n  setImageSource(\n    face: TextureCubeFace,\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x?: number,\n    y?: number\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);\n    gl.texSubImage2D(\n      gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n      mipLevel,\n      x || 0,\n      y || 0,\n      baseFormat,\n      dataType,\n      imageSource\n    );\n    this._unbind();\n  }\n\n  /**\n   * 根据立方体面和指定区域获得像素颜色缓冲。\n   * @param face - 可以选择读取第几个面\n   * @param x - 区域起始X坐标\n   * @param y - 区域起始Y坐标\n   * @param width - 区域宽\n   * @param height - 区域高\n   * @param out - 颜色数据缓冲\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void {\n    if (this._formatDetail.isCompressed) {\n      throw new Error(\"Unable to read compressed texture\");\n    }\n    super._getPixelBuffer(face, x, y, width, height, out);\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * 类应用于渲染深度纹理。\n */\nexport class RenderDepthTexture extends Texture {\n  /** @internal */\n  public _isCube: boolean = false;\n\n  private _format: RenderBufferDepthFormat;\n  private _autoMipmap: boolean = false;\n\n  /**\n   * 格式。\n   */\n  get format(): RenderBufferDepthFormat {\n    return this._format;\n  }\n\n  /**\n   * 是否自动生成多级纹理。\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoMipmap;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoMipmap = value;\n  }\n\n  /**\n   * 构造渲染深度纹理。\n   * @param engine - 所属引擎\n   * @param width - 宽\n   * @param height - 高\n   * @param format - 格式。默认 RenderBufferDepthFormat.Depth,深度纹理,自动选择精度\n   * @param mipmap - 是否使用多级纹理\n   * @param isCube - 是否为立方体模式\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: RenderBufferDepthFormat = RenderBufferDepthFormat.Depth,\n    mipmap: boolean = false,\n    isCube: boolean = false\n  ) {\n    super(engine);\n    const rhi = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n    const isWebGL2: boolean = rhi.isWebGL2;\n\n    if (!Texture._supportRenderBufferDepthFormat(format, rhi, true)) {\n      throw new Error(`RenderBufferDepthFormat is not supported:${RenderBufferDepthFormat[format]}`);\n    }\n\n    if (isCube && width !== height) {\n      throw new Error(\"The cube texture must have the same width and height\");\n    }\n    if (mipmap && !isWebGL2 && (!Texture._isPowerOf2(width) || !Texture._isPowerOf2(height))) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n      mipmap = false;\n    }\n\n    this._glTexture = gl.createTexture();\n    this._formatDetail = Texture._getRenderBufferDepthFormatDetail(format, gl, isWebGL2);\n    this._isCube = isCube;\n    this._rhi = rhi;\n    this._target = isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._initMipmap(isCube);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n}\n","import { EngineObject } from \"../base\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { RenderColorTexture } from \"./RenderColorTexture\";\nimport { RenderDepthTexture } from \"./RenderDepthTexture\";\nimport { Texture } from \"./Texture\";\n\n/**\n * 用于离屏幕渲染的渲染目标。\n */\nexport class RenderTarget extends EngineObject {\n  public _frameBuffer: WebGLFramebuffer;\n  public _MSAAFrameBuffer: WebGLFramebuffer | null;\n\n  private _rhi;\n  private _width: number;\n  private _height: number;\n  private _antiAliasing: number;\n  private _colorTextures: RenderColorTexture[];\n  private _depthTexture: RenderDepthTexture | null;\n  private _depthRenderBuffer: WebGLRenderbuffer | null;\n  private _MSAAColorRenderBuffers: WebGLRenderbuffer[] = [];\n  private _MSAADepthRenderBuffer: WebGLRenderbuffer | null;\n  private _oriDrawBuffers: GLenum[];\n  private _blitDrawBuffers: GLenum[] | null;\n\n  /** 渲染目标宽。 */\n  get width(): number {\n    return this._width;\n  }\n\n  /** 渲染目标高。 */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * 颜色纹理数量。\n   */\n  get colorTextureCount(): number {\n    return this._colorTextures.length;\n  }\n\n  /**\n   * 深度纹理。\n   */\n  get depthTexture(): RenderDepthTexture | null {\n    return this._depthTexture;\n  }\n\n  /**\n   * 抗锯齿级别。\n   * 如果设置的抗锯齿级别大于硬件支持的最大级别，将使用硬件的最大级别。\n   */\n  get antiAliasing(): number {\n    return this._antiAliasing;\n  }\n\n  /**\n   * 通过颜色纹理和深度格式创建渲染目标，使用内部深度缓冲，无法获取深度纹理。\n   * @param engine - 所属引擎\n   * @param width - 宽\n   * @param height - 高\n   * @param colorTexture - 颜色纹理\n   * @param depthFormat - 深度格式,默认 RenderBufferDepthFormat.Depth,自动选择精度\n   * @param antiAliasing - 抗锯齿级别,默认 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: RenderColorTexture,\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number\n  );\n\n  /**\n   * 通过颜色纹理和深度纹理创建渲染目标。不传颜色纹理时，只生成深度纹理。\n   * @param engine - 所属引擎\n   * @param width - 宽\n   * @param height - 高\n   * @param colorTexture - 颜色纹理\n   * @param depthTexture - 深度纹理\n   * @param antiAliasing - 抗锯齿级别,默认 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: RenderColorTexture | null,\n    depthTexture: RenderDepthTexture,\n    antiAliasing?: number\n  );\n\n  /**\n   * 通过颜色纹理数组和深度格式创建渲染目标，使用内部深度缓冲，无法获取深度纹理。\n   * @param engine - 所属引擎\n   * @param width - 宽\n   * @param height - 高\n   * @param colorTextures - 颜色纹理数组\n   * @param depthFormat - 深度格式,默认 RenderBufferDepthFormat.Depth,自动选择精度\n   * @param antiAliasing - 抗锯齿级别,默认 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: RenderColorTexture[],\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number\n  );\n\n  /**\n   * 通过颜色纹理数组和深度纹理创建渲染目标。\n   * @param engine - 所属引擎\n   * @param width - 宽\n   * @param height - 高\n   * @param colorTextures - 颜色纹理数组\n   * @param depthTexture - 深度纹理\n   * @param antiAliasing - 抗锯齿级别,默认 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: RenderColorTexture[],\n    depthTexture: RenderDepthTexture,\n    antiAliasing?: number\n  );\n\n  /**\n   * @internal\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    renderTexture: RenderColorTexture | Array<RenderColorTexture> | null,\n    depth: RenderDepthTexture | RenderBufferDepthFormat | null = RenderBufferDepthFormat.Depth,\n    antiAliasing: number = 1\n  ) {\n    super(engine);\n    const rhi = engine._hardwareRenderer;\n\n    /** todo\n     * MRT + Cube + [,MSAA]\n     * MRT + MSAA\n     */\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n\n    if (!(depth instanceof RenderDepthTexture) && !Texture._supportRenderBufferDepthFormat(depth, rhi, false)) {\n      throw new Error(`RenderBufferDepthFormat is not supported:${RenderBufferDepthFormat[depth]}`);\n    }\n\n    if ((renderTexture as RenderColorTexture[])?.length > 1 && !rhi.canIUse(GLCapabilityType.drawBuffers)) {\n      throw new Error(\"MRT is not supported\");\n    }\n\n    // handle this._colorTextures\n    if (renderTexture) {\n      this._colorTextures = renderTexture instanceof Array ? renderTexture.slice() : [renderTexture];\n    } else {\n      this._colorTextures = [];\n    }\n\n    if (this._colorTextures.some((v: RenderColorTexture) => v.width !== width || v.height !== height)) {\n      throw new Error(\"RenderColorTexture's size must as same as RenderTarget\");\n    }\n\n    if (depth instanceof RenderDepthTexture && (depth.width !== width || depth.height !== height)) {\n      throw new Error(\"RenderDepthTexture's size must as same as RenderTarget\");\n    }\n\n    // todo: necessary to support MRT + Cube + [,MSAA] ?\n    if (this._colorTextures.length > 1 && this._colorTextures.some((v: RenderColorTexture) => v._isCube)) {\n      throw new Error(\"MRT+Cube+[,MSAA] is not supported\");\n    }\n\n    const maxAntiAliasing = rhi.capability.maxAntiAliasing;\n    if (antiAliasing > maxAntiAliasing) {\n      Logger.warn(`MSAA antiAliasing exceeds the limit and is automatically downgraded to:${maxAntiAliasing}`);\n      antiAliasing = maxAntiAliasing;\n    }\n\n    this._rhi = rhi;\n    this._width = width;\n    this._height = height;\n    this._frameBuffer = gl.createFramebuffer();\n    this._antiAliasing = antiAliasing;\n\n    if (depth instanceof RenderDepthTexture) {\n      this._depthTexture = depth;\n    }\n\n    // 绑定主 FBO\n    this._bindMainFBO(depth);\n\n    // 绑定 MSAA FBO\n    if (antiAliasing > 1) {\n      this._MSAAFrameBuffer = gl.createFramebuffer();\n      this._bindMSAAFBO(depth);\n    }\n  }\n\n  /**\n   * 通过索引获取颜色纹理。\n   * @param index\n   */\n  public getColorTexture(index: number = 0): RenderColorTexture | null {\n    return this._colorTextures[index];\n  }\n\n  /**\n   * 销毁。\n   */\n  public destroy(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    gl.deleteFramebuffer(this._frameBuffer);\n    this._depthRenderBuffer && gl.deleteRenderbuffer(this._depthRenderBuffer);\n    this._MSAAFrameBuffer && gl.deleteFramebuffer(this._MSAAFrameBuffer);\n    this._MSAADepthRenderBuffer && gl.deleteRenderbuffer(this._MSAADepthRenderBuffer);\n\n    for (let i = 0; i < this._colorTextures.length; i++) {\n      this._colorTextures[i].destroy();\n    }\n\n    for (let i = 0; i < this._MSAAColorRenderBuffers.length; i++) {\n      gl.deleteRenderbuffer(this._MSAAColorRenderBuffers[i]);\n    }\n\n    this._depthTexture && this._depthTexture.destroy();\n\n    this._frameBuffer = null;\n    this._colorTextures.length = 0;\n    this._depthTexture = null;\n    this._depthRenderBuffer = null;\n    this._MSAAFrameBuffer = null;\n    this._MSAAColorRenderBuffers.length = 0;\n    this._MSAADepthRenderBuffer = null;\n  }\n\n  /**\n   * 激活 RenderTarget 对象\n   * 如果开启 MSAA,则激活 MSAA FBO,后续进行 this._blitRenderTarget() 进行交换 FBO\n   * 如果未开启 MSAA,则激活主 FBO\n   */\n  public _activeRenderTarget(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n\n    if (this._MSAAFrameBuffer) {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._MSAAFrameBuffer);\n    } else {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n    }\n  }\n\n  /**\n   * 设置渲染到立方体纹理的哪个面\n   * @param faceIndex - 立方体纹理面\n   */\n  public _setRenderTargetFace(faceIndex: TextureCubeFace): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const colorTexture = this._colorTextures[0];\n    const depthTexture = this._depthTexture;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n\n    // 绑定颜色纹理\n    if (colorTexture?._isCube) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\n        colorTexture._glTexture,\n        0\n      );\n    }\n\n    // 绑定深度纹理\n    if (depthTexture?._isCube) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        depthTexture._formatDetail.attachment,\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\n        depthTexture._glTexture,\n        0\n      );\n    }\n\n    // 还原当前激活的 FBO\n    this._activeRenderTarget();\n  }\n\n  /**\n   * Blit FBO.\n   */\n  public _blitRenderTarget(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const mask = gl.COLOR_BUFFER_BIT | (this._depthTexture ? gl.DEPTH_BUFFER_BIT : 0);\n    const colorTextureLength = this._colorTextures.length;\n\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this._MSAAFrameBuffer);\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this._frameBuffer);\n\n    for (let textureIndex = 0; textureIndex < colorTextureLength; textureIndex++) {\n      const attachment = gl.COLOR_ATTACHMENT0 + textureIndex;\n\n      this._blitDrawBuffers[textureIndex] = attachment;\n\n      gl.readBuffer(attachment);\n      gl.drawBuffers(this._blitDrawBuffers);\n      gl.blitFramebuffer(0, 0, this._width, this._height, 0, 0, this._width, this._height, mask, gl.NEAREST);\n\n      this._blitDrawBuffers[textureIndex] = gl.NONE;\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  /**\n   * 绑定主 FBO\n   */\n  private _bindMainFBO(renderDepth: RenderDepthTexture | RenderBufferDepthFormat | null): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const colorTextureLength = this._colorTextures.length;\n    const drawBuffers = new Array(colorTextureLength);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n\n    /** color render buffer */\n    for (let i = 0; i < colorTextureLength; i++) {\n      const colorTexture = this._colorTextures[i];\n      const attachment = gl.COLOR_ATTACHMENT0 + i;\n\n      drawBuffers[i] = attachment;\n\n      // 立方体纹理请调用 _setRenderTargetFace()\n      if (!colorTexture._isCube) {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, colorTexture._glTexture, 0);\n      }\n    }\n\n    if (colorTextureLength > 1) {\n      gl.drawBuffers(drawBuffers);\n    }\n    this._oriDrawBuffers = drawBuffers;\n\n    /** depth render buffer */\n    if (renderDepth !== null) {\n      if (renderDepth instanceof RenderDepthTexture) {\n        // 立方体纹理请调用 _setRenderTargetFace()\n        if (!renderDepth._isCube) {\n          gl.framebufferTexture2D(\n            gl.FRAMEBUFFER,\n            renderDepth._formatDetail.attachment,\n            gl.TEXTURE_2D,\n            renderDepth._glTexture,\n            0\n          );\n        }\n      } else if (this._antiAliasing <= 1) {\n        const { internalFormat, attachment } = Texture._getRenderBufferDepthFormatDetail(renderDepth, gl, isWebGL2);\n        const depthRenderBuffer = gl.createRenderbuffer();\n\n        this._depthRenderBuffer = depthRenderBuffer;\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, this._width, this._height);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, depthRenderBuffer);\n      }\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  }\n\n  /**\n   * 绑定 MSAA FBO\n   */\n  private _bindMSAAFBO(renderDepth: RenderDepthTexture | RenderBufferDepthFormat | null): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const MSAADepthRenderBuffer = gl.createRenderbuffer();\n    const colorTextureLength = this._colorTextures.length;\n\n    this._blitDrawBuffers = new Array(colorTextureLength);\n    this._MSAADepthRenderBuffer = MSAADepthRenderBuffer;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._MSAAFrameBuffer);\n\n    // prepare MRT+MSAA color RBOs\n    for (let i = 0; i < colorTextureLength; i++) {\n      const MSAAColorRenderBuffer = gl.createRenderbuffer();\n\n      this._MSAAColorRenderBuffers[i] = MSAAColorRenderBuffer;\n      this._blitDrawBuffers[i] = gl.NONE;\n\n      gl.bindRenderbuffer(gl.RENDERBUFFER, MSAAColorRenderBuffer);\n      gl.renderbufferStorageMultisample(\n        gl.RENDERBUFFER,\n        this._antiAliasing,\n        this._colorTextures[i]._formatDetail.internalFormat,\n        this._width,\n        this._height\n      );\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, MSAAColorRenderBuffer);\n    }\n    gl.drawBuffers(this._oriDrawBuffers);\n\n    // prepare MSAA depth RBO\n    if (renderDepth !== null) {\n      const { internalFormat, attachment } =\n        renderDepth instanceof RenderDepthTexture\n          ? renderDepth._formatDetail\n          : Texture._getRenderBufferDepthFormatDetail(renderDepth, gl, isWebGL2);\n\n      gl.bindRenderbuffer(gl.RENDERBUFFER, MSAADepthRenderBuffer);\n      gl.renderbufferStorageMultisample(gl.RENDERBUFFER, this._antiAliasing, internalFormat, this._width, this._height);\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, MSAADepthRenderBuffer);\n    }\n\n    this._checkFrameBuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  }\n\n  /**\n   * 检查 FBO\n   */\n  private _checkFrameBuffer(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._rhi.gl;\n    const isWebGL2: boolean = this._rhi.isWebGL2;\n    const e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n    switch (e) {\n      case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n        throw new Error(\n          \"The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete\"\n        );\n      case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n        throw new Error(\"There is no attachment\");\n      case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n        throw new Error(\" Height and width of the attachment are not the same.\");\n      case gl.FRAMEBUFFER_UNSUPPORTED:\n        throw new Error(\n          \"The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer\"\n        );\n    }\n\n    if (isWebGL2 && e === gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE) {\n      throw new Error(\n        \"The values of gl.RENDERBUFFER_SAMPLES are different among attached renderbuffers, or are non-zero if the attached images are a mix of renderbuffers and textures.\"\n      );\n    }\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { Engine } from \"../Engine\";\nimport { RenderBufferColorFormat } from \"./enums/RenderBufferColorFormat\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * 类应用于渲染颜色纹理。\n */\nexport class RenderColorTexture extends Texture {\n  /** @internal */\n  public _isCube: boolean = false;\n\n  private _format: RenderBufferColorFormat;\n  private _autoMipmap: boolean = false;\n\n  /**\n   * 格式。\n   */\n  get format(): RenderBufferColorFormat {\n    return this._format;\n  }\n\n  /**\n   * 是否自动生成多级纹理。\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoMipmap;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoMipmap = value;\n  }\n\n  /**\n   * 构造渲染纹理。\n   * @param engine - 所属引擎\n   * @param width - 宽\n   * @param height - 高\n   * @param format - 格式，默认 RenderBufferColorFormat.R8G8B8A8\n   * @param mipmap - 是否使用多级纹理\n   * @param isCube - 是否为立方体模式\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: RenderBufferColorFormat = RenderBufferColorFormat.R8G8B8A8,\n    mipmap: boolean = false,\n    isCube: boolean = false\n  ) {\n    super(engine);\n    const rhi = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = rhi.gl;\n    const isWebGL2: boolean = rhi.isWebGL2;\n\n    if (!Texture._supportRenderBufferColorFormat(format, rhi)) {\n      throw new Error(`RenderBufferColorFormat is not supported:${RenderBufferColorFormat[format]}`);\n    }\n\n    if (isCube && width !== height) {\n      throw new Error(\"The cube texture must have the same width and height\");\n    }\n    if (mipmap && !isWebGL2 && (!Texture._isPowerOf2(width) || !Texture._isPowerOf2(height))) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n      mipmap = false;\n    }\n\n    this._glTexture = gl.createTexture();\n    this._formatDetail = Texture._getRenderBufferColorFormatDetail(format, gl, isWebGL2);\n    this._isCube = isCube;\n    this._rhi = rhi;\n    this._target = isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._initMipmap(isCube);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * 根据立方体面和指定区域获得颜色像素缓冲。\n   * @param face - 如果是立方体纹理，可以选择读取第几个面;立方体纹理读取面，isCube=true时生效\n   * @param x - 区域起始X坐标\n   * @param y - 区域起始Y坐标\n   * @param width - 区域宽\n   * @param height - 区域高\n   * @param out - 颜色像素缓冲\n   */\n  public getPixelBuffer(\n    face: TextureCubeFace | null,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void {\n    super._getPixelBuffer(face, x, y, width, height, out);\n  }\n}\n","import { Matrix, Quaternion, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { Entity } from \"../Entity\";\nimport { RenderableComponent } from \"../RenderableComponent\";\nimport { Texture2D } from \"../texture/Texture2D\";\n\ninterface IUvRect {\n  u: number;\n  v: number;\n  width: number;\n  height: number;\n}\n\ninterface IRect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\ninterface IPositionQuad {\n  leftTop: Vector3;\n  leftBottom: Vector3;\n  rightTop: Vector3;\n  rightBottom: Vector3;\n}\n\n/**\n * Sprite渲染管理器\n * @class\n */\nexport class SpriteRenderer extends RenderableComponent {\n  private static _tempVec40: Vector4 = new Vector4();\n  private static _tempVec41: Vector4 = new Vector4();\n  private static _tempVec42: Vector4 = new Vector4();\n  private static _tempVec43: Vector4 = new Vector4();\n\n  private _uvRect: IUvRect;\n  private _worldSize: number[] = [];\n  private _positionQuad: IPositionQuad;\n  private _rotationAngle: number = 0;\n  private _anchor: number[];\n  protected _texture: Texture2D;\n  protected _rect: IRect;\n  private _worldSizeFactor: number;\n\n  /**\n   * 渲染方式，2D或3D，默认是2D。TODO: 3D\n   */\n  renderMode: string = \"2D\";\n  /**\n   * 调节色，控制 Sprite 颜色变化\n   */\n  public tintColor: Vector4 = new Vector4(1, 1, 1, 1);\n  public transformMatrix: Matrix;\n\n  /**\n   * 构造函数\n   * @param {Entity} entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._worldSizeFactor = 100;\n\n    this.setTexture(undefined);\n    this.setRect(undefined);\n    this.setAnchor(undefined);\n    this.setUvRect();\n    this.setWorldSize();\n\n    this._positionQuad = {\n      leftTop: new Vector3(),\n      leftBottom: new Vector3(),\n      rightTop: new Vector3(),\n      rightBottom: new Vector3()\n    };\n  }\n\n  set texture(v) {\n    this.setTexture(v);\n    this.setRect();\n    this.setUvRect();\n    this.setWorldSize();\n  }\n\n  get texture() {\n    return this._texture;\n  }\n\n  set anchor(v) {\n    this._anchor = v || [0.5, 0.5];\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  set rect(v) {\n    this.setRect(v);\n    this.setUvRect();\n    this.setWorldSize();\n  }\n\n  get rect() {\n    return this._rect;\n  }\n\n  protected setTexture(texture) {\n    // TODO：临时兼容Resource\n    if (texture && texture.asset) {\n      texture = texture.asset;\n    }\n\n    this._texture = texture;\n  }\n\n  /**\n   * 旋转角度\n   * @member {Vector4}\n   */\n  get rotationAngle() {\n    return this._rotationAngle;\n  }\n\n  set rotationAngle(v) {\n    this._rotationAngle = v;\n  }\n\n  protected setRect(rect?) {\n    let rectObject;\n    try {\n      if (rect) {\n        rectObject = JSON.parse(rect);\n      }\n    } catch (error) {\n      Logger.warn(\"Rect is not valid JSON format\");\n    }\n\n    this._rect = rect || {\n      x: 0,\n      y: 0,\n      width: this._texture?.width ?? 0,\n      height: this._texture?.height ?? 0\n    };\n  }\n\n  protected setAnchor(anchor) {\n    this._anchor = anchor || [0.5, 0.5];\n  }\n\n  protected setWorldSize() {\n    const { _worldSizeFactor } = this;\n    this._worldSize = [this._rect.width / _worldSizeFactor, this._rect.height / _worldSizeFactor];\n  }\n\n  protected setUvRect() {\n    let w, h;\n\n    if (this._texture) {\n      w = this._texture.width;\n      h = this._texture.height;\n    } else {\n      w = this._rect.width;\n      h = this._rect.height;\n    }\n    this._uvRect = {\n      u: this._rect.x / w,\n      v: this._rect.y / h,\n      width: this._rect.width / w,\n      height: this._rect.height / h\n    };\n  }\n\n  /**\n   * 更新位置，将数据对象加入渲染队列\n   * @param {Camera} camera\n   */\n  render(camera: Camera) {\n    this._updatePositionQuad(camera);\n    this._transformByMatrix();\n    camera._renderPipeline.pushSprite(\n      this,\n      this._positionQuad,\n      this._uvRect,\n      this.tintColor,\n      this.texture,\n      this.renderMode,\n      camera\n    );\n  }\n\n  _transformByMatrix() {\n    if (!this.transformMatrix) return;\n    const matrix = this.transformMatrix;\n\n    let temp: Vector3 = this._positionQuad.leftTop;\n    const leftTop: Vector4 = SpriteRenderer._tempVec40;\n    leftTop.setValue(temp.x, temp.y, temp.z, 1);\n\n    temp = this._positionQuad.leftBottom;\n    const leftBottom: Vector4 = SpriteRenderer._tempVec41;\n    leftBottom.setValue(temp.x, temp.y, temp.z, 1);\n\n    temp = this._positionQuad.rightTop;\n    const rightTop: Vector4 = SpriteRenderer._tempVec42;\n    rightTop.setValue(temp.x, temp.y, temp.z, 1);\n\n    temp = this._positionQuad.rightBottom;\n    const rightBottom: Vector4 = SpriteRenderer._tempVec43;\n    rightBottom.setValue(temp.x, temp.y, temp.z, 1);\n\n    Vector4.transform(leftTop, matrix, leftTop);\n    Vector4.transform(leftBottom, matrix, leftBottom);\n    Vector4.transform(rightTop, matrix, rightTop);\n    Vector4.transform(rightBottom, matrix, rightBottom);\n\n    this._positionQuad.leftTop.setValue(leftTop.x, leftTop.y, leftTop.z);\n    this._positionQuad.leftBottom.setValue(leftBottom.x, leftBottom.y, leftBottom.z);\n    this._positionQuad.rightTop.setValue(rightTop.x, rightTop.y, rightTop.z);\n    this._positionQuad.rightBottom.setValue(rightBottom.x, rightBottom.y, rightBottom.z);\n  }\n\n  /**\n   * 更新顶点位置\n   * @param {Camera} camera\n   * @private\n   */\n  _updatePositionQuad(camera: Camera) {\n    if (this.renderMode === \"2D\") {\n      const m = camera.viewMatrix.elements;\n      const vx = new Vector3(m[0], m[4], m[8]);\n      const vy = new Vector3(m[1], m[5], m[9]);\n      //-- center pos\n      const c: Vector3 = this.entity.worldPosition.clone();\n      const s = this._worldSize;\n      const ns = this.entity.scale;\n\n      vx.scale(s[0] * ns.x);\n      vy.scale(s[1] * ns.y);\n\n      if (this._rotationAngle !== 0) {\n        const vz = new Vector3(m[2], m[6], m[10]);\n\n        const rotation: Quaternion = new Quaternion();\n        Quaternion.rotationAxisAngle(vz, this._rotationAngle, rotation);\n\n        Vector3.transformByQuat(vx, rotation, vx);\n        Vector3.transformByQuat(vy, rotation, vy);\n      }\n\n      const cx: Vector3 = new Vector3();\n      const cy: Vector3 = new Vector3();\n      Vector3.scale(vx, (this.anchor[0] - 0.5) * 2, cx);\n      Vector3.scale(vy, (this.anchor[1] - 0.5) * 2, cy);\n\n      c.subtract(cx).add(cy);\n\n      //-- quad pos\n      const leftTop: Vector3 = this._positionQuad.leftTop;\n      Vector3.subtract(c, vx, leftTop);\n      leftTop.add(vy);\n\n      const leftBottom: Vector3 = this._positionQuad.leftBottom;\n      Vector3.subtract(c, vx, leftBottom);\n      leftBottom.subtract(vy);\n\n      const rightBottom: Vector3 = this._positionQuad.rightBottom;\n      Vector3.add(c, vx, rightBottom);\n      rightBottom.subtract(vy);\n\n      const rightTop: Vector3 = this._positionQuad.rightTop;\n      Vector3.add(c, vx, rightTop);\n      rightTop.add(vy);\n    } else {\n      // TODO: 3D\n    }\n  }\n}\n","/**\n * 动画循环播放模式\n * @readonly\n */\nexport enum WrapMode {\n  /** 只播放一次 */\n  ONCE = 0,\n  /** 循环播放 */\n  LOOP = 1\n  // FOREVER: 2,\n  // PINGPONG: 3\n}\n\n/**\n * 动画事件类型\n * @readonly\n */\nexport enum AnimationEventType {\n  /** 播放模式为 WrapMode.ONCE，结束后触发 */\n  FINISHED = 0,\n  /** 播放模式为 WrapMode.LOOP，每次循环结束后触发 */\n  LOOP_END = 1,\n  /** 动画播放到距离开始的某个时间点后，触发的事件 */\n  FRAME_EVENT = 2\n}\n\n/**\n * 动画插值方式\n * @readonly\n */\nexport enum InterpolationType {\n  /** 线性插值 */\n  LINEAR = 0,\n  /** 三次贝塞尔曲线插值 */\n  CUBICSPLINE = 1,\n  /** 步进插值 */\n  STEP = 2\n}\n","import { InterpolationType } from \"./AnimationConst\";\nimport { IChannel, ISample, List, Value } from \"./types\";\nimport { AssetObject } from \"../asset/AssetObject\";\n\nexport enum TagetType {\n  position = 0,\n  rotation = 1,\n  scale = 2,\n  other = 3\n}\n\n/**\n * Data for an animation, set of Samples and Channels\n * @extends AssetObject\n */\nexport class AnimationClip extends AssetObject {\n  private static _tagetTypeMap: Object = {\n    position: TagetType.position,\n    rotation: TagetType.rotation,\n    scale: TagetType.scale\n  };\n\n  public duration: number;\n\n  public durationIndex: number;\n\n  public samplers: ISample[];\n\n  public channels: IChannel[];\n  /**\n   * @constructor\n   * @param {string} name\n   */\n  constructor(public readonly name: string) {\n    super(null);\n\n    /** @member {Array} */\n    this.samplers = [];\n\n    /** @member {Array} */\n    this.channels = [];\n  }\n\n  /**\n   * 添加一个 sampler\n   * @param {Float32Array} _input\n   * @param {Float32Array} _output\n   * @param {number} _outputSize\n   * @param {constant} _interpolation\n   */\n  public addSampler(\n    _input: List,\n    _output: List,\n    _outputSize: number,\n    _interpolation: InterpolationType = InterpolationType.LINEAR\n  ) {\n    // FIXME - adapt old error animation export file\n    if (_interpolation === InterpolationType.CUBICSPLINE) {\n      if (_outputSize <= 4) {\n        _interpolation = InterpolationType.LINEAR;\n      } else {\n        _outputSize /= 3;\n      }\n    }\n\n    // sampler object, defines an curve\n    const sampler = {\n      input: _input,\n      output: _output,\n      outputSize: _outputSize,\n      interpolation: _interpolation\n    };\n    this.samplers.push(sampler);\n  }\n\n  /**\n   * 添加 channel\n   * @param {number} samplerIndex\n   * @param {string} targetID, Entity name\n   * @param {string} targetPath, Transform property name: position, rotation, scale\n   */\n  public addChannel(samplerIndex: number, targetID: string, targetPath: string) {\n    const bindSampler = this.samplers[samplerIndex];\n\n    let tagetType: TagetType = AnimationClip._tagetTypeMap[targetPath];\n    // channel object, bind a Sample to an Object property\n    const channel = {\n      sampler: bindSampler,\n      target: {\n        id: targetID,\n        path: targetPath,\n        pathType: tagetType ?? TagetType.other\n      }\n    };\n\n    this.channels.push(channel);\n  }\n\n  /**\n   * 取得 channel 的总数\n   * @return {number} number of channels\n   */\n  public getChannelCount(): number {\n    return this.channels.length;\n  }\n\n  /**\n   * 取得 channel 的作用的 object\n   * @return channel objects\n   * @param {number} channelIndex\n   */\n  public getChannelObject(channelIndex: number) {\n    return this.channels[channelIndex];\n  }\n\n  /**\n   * 取得 channel 的 frame count\n   * @return channel frame count\n   * @param {number} channelIndex\n   */\n  public getFrameCount(channelIndex: number): number {\n    const sampler = this.channels[channelIndex].sampler;\n    return sampler.input.length;\n  }\n\n  /**\n   * 取得 channel 的 frame time\n   * @return channel frame time\n   * @param {number} channelIndex\n   * @param {number} frameIndex\n   */\n  public getFrameTime(channelIndex: number, frameIndex: number): number {\n    const sampler = this.channels[channelIndex].sampler;\n    return sampler.input[frameIndex];\n  }\n\n  /**\n   * 取得 channel 的时间长度\n   * @return channel time length\n   * @param {number} channelIndex\n   */\n  public getChannelTimeLength(channelIndex: number): number {\n    const sampler = this.channels[channelIndex].sampler;\n    const frameCount = sampler.input.length;\n    return sampler.input[frameCount - 1];\n  }\n\n  /**\n   * 取得 channel 的值\n   * @return channel value\n   * @param {number} channelIndex\n   */\n  public createChannelValue(channelIndex: number): number | Float32Array | number[] {\n    const sampler = this.channels[channelIndex].sampler;\n\n    return new Float32Array(sampler.outputSize);\n  }\n\n  /**\n   * @private\n   * @param {Value} outValue\n   * @param {number} channelIndex\n   * @param {number} frameIndex\n   * @param {number} nextFrameIndex\n   * @param {number} alpha\n   */\n  public evaluate(\n    outValue: Value,\n    channelIndex: number,\n    frameIndex: number,\n    nextFrameIndex: number,\n    alpha: number\n  ): Value {\n    const channel = this.channels[channelIndex];\n    const output = channel.sampler.output;\n    const outputSize = channel.sampler.outputSize;\n\n    switch (channel.sampler.interpolation) {\n      case InterpolationType.CUBICSPLINE:\n        this.evaluateCubicSpline(outValue, output, outputSize, frameIndex, nextFrameIndex, alpha);\n        break;\n      case InterpolationType.LINEAR:\n        this.evaluateLinear(outValue, output, outputSize, frameIndex, nextFrameIndex, alpha);\n        break;\n    }\n\n    return outValue;\n  }\n\n  public evaluateCubicSpline(\n    outValue: Value,\n    output: List,\n    outputSize: number,\n    frameIndex: number,\n    nextFrameIndex: number,\n    alpha: number\n  ) {\n    const squared = alpha * alpha;\n    const cubed = alpha * squared;\n    const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    const part2 = -2.0 * cubed + 3.0 * squared;\n    const part3 = cubed - 2.0 * squared + alpha;\n    const part4 = cubed - squared;\n\n    for (let i = outputSize; i >= 0; i--) {\n      const t1 = output[frameIndex * outputSize * 3 + i];\n      const v1 = output[frameIndex * outputSize * 3 + outputSize + i];\n      const t2 = output[frameIndex * outputSize * 3 + outputSize * 2 + i];\n      const v2 = output[nextFrameIndex * outputSize * 3 + outputSize + i];\n\n      outValue[i] = v1 * part1 + v2 * part2 + t1 * part3 + t2 * part4;\n    }\n  }\n\n  public evaluateLinear(\n    outValue: Value,\n    output: List,\n    outputSize: number,\n    frameIndex: number,\n    nextFrameIndex: number,\n    alpha: number\n  ) {\n    switch (outputSize) {\n      case 1:\n        outValue[0] = output[frameIndex] * (1 - alpha) + output[nextFrameIndex] * alpha;\n        break;\n      case 4:\n        // const start = new Quaternion(\n        //   output[frameIndex * outputSize],\n        //   output[frameIndex * outputSize + 1],\n        //   output[frameIndex * outputSize + 2],\n        //   output[frameIndex * outputSize + 3]\n        // );\n        // const end = new Quaternion(\n        //   output[nextFrameIndex * outputSize],\n        //   output[nextFrameIndex * outputSize + 1],\n        //   output[nextFrameIndex * outputSize + 2],\n        //   output[nextFrameIndex * outputSize + 3]\n        // );\n        // Quaternion.slerp(start, end, alpha, <Quaternion>outValue);\n        this._quaSlerp(outValue, output, frameIndex * outputSize, output, nextFrameIndex * outputSize, alpha);\n        break;\n      default:\n        for (let i = outputSize; i >= 0; i--) {\n          outValue[i] =\n            output[frameIndex * outputSize + i] * (1 - alpha) + output[nextFrameIndex * outputSize + i] * alpha;\n        }\n        break;\n    } // end of switch\n  }\n\n  private _quaSlerp(out, a, aIndex, b, bIndex, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0 + aIndex],\n      ay = a[1 + aIndex],\n      az = a[2 + aIndex],\n      aw = a[3 + aIndex];\n    let bx = b[0 + bIndex],\n      by = b[1 + bIndex],\n      bz = b[2 + bIndex],\n      bw = b[3 + bIndex];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n      // standard case (slerp)\n      omega = Math.acos(cosom);\n      sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n  }\n}\n","import { Event } from \"../base/Event\";\nimport { EventDispatcher } from \"../base/EventDispatcher\";\nimport { Logger } from \"../base/Logger\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { SkinnedMeshRenderer } from \"../mesh/SkinnedMeshRenderer\";\nimport { AnimationClip } from \"./AnimationClip\";\nimport { AnimationEventType, WrapMode } from \"./AnimationConst\";\nimport { AnimationOptions, IChannelState, IChannelTarget } from \"./types\";\n\n/**\n * AnimationClip playback\n * @extends EventDispatcher\n * @see class AnimationClip\n * @private\n */\nexport class AnimationLayer extends EventDispatcher {\n  /**\n   * @return is playing˝\n   */\n  get isPlaying(): boolean {\n    return this._animClip && this._isPlaying;\n  }\n\n  public layerWeight: number;\n\n  public mixTagetLayer: AnimationLayer;\n\n  public isFading: number;\n\n  public fadeDeltaTime: number;\n\n  public crossFadeDuration: number;\n\n  public fadeDuration: number;\n\n  public crossFadeDeltaTime: number;\n\n  public isMixLayer: boolean;\n\n  public hasMixLayer: boolean;\n\n  public mixEntity: Entity;\n\n  private _activedEvents: Event[];\n\n  private _animClip: AnimationClip;\n\n  private _isPlaying: boolean;\n\n  private _wrapMode: WrapMode;\n\n  private _channelStates: IChannelState[];\n\n  private _animClipLength: number;\n\n  private _frameEvents: any[];\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null);\n\n    this.layerWeight = 1.0;\n\n    this._activedEvents = [];\n  }\n\n  /**\n   * @param {AnimationClip} nextAnimClip, anim clip to playback next\n   * @param {Entity} rootEntity\n   * @return can mix with current AnimationClip\n   */\n  public canMix(nextAnimClip: AnimationClip, rootEntity: Entity): boolean {\n    if (!this._animClip || !this._isPlaying || this.isMixLayer || this.isFading) {\n      return false;\n    }\n\n    if (this._animClip.getChannelCount() !== nextAnimClip.getChannelCount()) {\n      return false;\n    }\n\n    const count = this._animClip.getChannelCount();\n    for (let i = count - 1; i >= 0; i--) {\n      const curChannel = this._animClip.getChannelObject(i);\n      const curTargetObject = this._findChannelTarget(rootEntity, curChannel.target);\n\n      const nextChannel = nextAnimClip.getChannelObject(i);\n      const nextTargetObject = this._findChannelTarget(rootEntity, nextChannel.target);\n\n      if (curTargetObject !== nextTargetObject) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * mix animClip with target animationLayer\n   * @param {AnimationClip} animClip, anim clip to mix\n   * @param {AnimationLayer} targetLayer, target animationLayer\n   * @param {Entity} rootEntity, root node of skeleton animation\n   * @param {Entity} mixNode, mix bone node\n   * @param {AnimationOptions} options, animation events options\n   */\n  public mix(\n    animClip: AnimationClip,\n    targetLayer: AnimationLayer,\n    rootEntity: Entity,\n    mixEntity: Entity,\n    options: { wrapMode?: WrapMode } = {}\n  ) {\n    this._isPlaying = targetLayer.isPlaying;\n    this._animClip = animClip;\n    this._wrapMode = typeof options.wrapMode !== \"undefined\" ? options.wrapMode : targetLayer._wrapMode;\n\n    this._addEvents(options);\n\n    this._channelStates = [];\n    this._animClipLength = 0;\n\n    // -- create new state object\n    if (this._isPlaying) {\n      const targetChannelStates = targetLayer._channelStates;\n      const count = this._animClip.getChannelCount();\n      for (let i = count - 1; i >= 0; i--) {\n        const channel = this._animClip.getChannelObject(i);\n        const targetObject = this._findChannelTarget(mixEntity, channel.target);\n        this._channelStates[i] = {\n          frameTime: 0.0,\n          currentFrame: 0,\n          currentValue: this._animClip.createChannelValue(i),\n          mixWeight: targetObject ? 1 : 0\n        };\n\n        targetChannelStates[i].mixWeight =\n          targetChannelStates[i].mixWeight === undefined ? 1 : targetChannelStates[i].mixWeight;\n        if (targetChannelStates[i].mixWeight === 1) {\n          targetChannelStates[i].mixWeight = targetObject ? 0 : 1;\n        }\n\n        const channelTimeLength = this._animClip.getChannelTimeLength(i);\n        this._animClipLength = this._animClipLength > channelTimeLength ? this._animClipLength : channelTimeLength;\n      } // end of for\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public removeMixWeight() {\n    const count = this._channelStates.length;\n    for (let i = count - 1; i >= 0; i--) {\n      if (this._channelStates[i].mixWeight === 1) {\n        this.mixTagetLayer._channelStates[i].mixWeight = 1;\n      }\n    }\n  }\n\n  /**\n   * play specify anim clip\n   * @param {AnimationClip} animClip, anim clip to playback\n   * @param {Entity} rootEntity, root node of Skeleton Animation\n   * @param {AnimationOptions} options\n   */\n  public play(\n    animClip: AnimationClip,\n    rootEntity: Entity,\n    options: AnimationOptions = { wrapMode: WrapMode.LOOP }\n  ): false | IChannelTarget[] {\n    this._isPlaying = !!animClip;\n    this._animClip = animClip;\n    this._wrapMode = typeof options.wrapMode !== \"undefined\" ? options.wrapMode : WrapMode.LOOP;\n\n    this._addEvents(options);\n\n    this._channelStates = [];\n    this._animClipLength = 0;\n\n    // -- create new state object\n    if (this._isPlaying) {\n      const count = this._animClip.getChannelCount();\n      const channelTargets: IChannelTarget[] = [];\n      for (let i = count - 1; i >= 0; i--) {\n        const channel = this._animClip.getChannelObject(i);\n        const targetObject = this._findChannelTarget(rootEntity, channel.target);\n        if (!targetObject) {\n          Logger.warn(\"Can not find channel target:\" + channel.target.id);\n        }\n        this._channelStates[i] = {\n          frameTime: 0.0,\n          currentFrame: 0,\n          currentValue: this._animClip.createChannelValue(i)\n        };\n\n        channelTargets[i] = {\n          targetObject,\n          path: channel.target.path,\n          pathType: channel.target.pathType,\n          outputSize: channel.sampler.outputSize\n        };\n\n        const channelTimeLength = this._animClip.getChannelTimeLength(i);\n        this._animClipLength = this._animClipLength > channelTimeLength ? this._animClipLength : channelTimeLength;\n      } // end of for\n\n      return channelTargets;\n    }\n\n    return false;\n  }\n\n  /**\n   * stop play anim clip\n   * @param {boolean} rightnow stop it immediately, or it will stop at the end of the clip\n   */\n  public stop(rightnow: boolean) {\n    if (!this._animClip || !this._isPlaying) {\n      return;\n    }\n\n    if (rightnow) {\n      this._isPlaying = false;\n    } else {\n      this._wrapMode = WrapMode.ONCE;\n    }\n  }\n\n  /**\n   * update animation states only\n   * @param {number} deltaTime\n   */\n  public updateState(deltaTime: number) {\n    if (!this._animClip || !this._isPlaying) {\n      return;\n    }\n\n    // 更新Animation Layer 的权重\n    if (this.isFading) {\n      this.fadeDeltaTime += deltaTime;\n      this.layerWeight = 1.0 - this.fadeDeltaTime / this.fadeDuration;\n      if (this.layerWeight <= 0) {\n        this._isPlaying = false;\n      }\n    } else if (this.crossFadeDuration) {\n      this.crossFadeDeltaTime += deltaTime;\n      this.layerWeight = this.crossFadeDeltaTime / this.crossFadeDuration;\n      if (this.layerWeight >= 1.0) {\n        this.layerWeight = 1.0;\n        delete this.crossFadeDuration;\n      }\n    }\n\n    deltaTime = deltaTime / 1000;\n    this._activeEvents(deltaTime);\n\n    // -- update channelStates\n    const count = this._animClip.getChannelCount();\n    let playingCount = 0;\n    for (let i = count - 1; i >= 0; i--) {\n      if (this._updateChannelState(deltaTime, i)) {\n        playingCount++;\n      }\n    }\n\n    if (playingCount === 0) {\n      this._isPlaying = false;\n\n      if (this.isMixLayer) {\n        this.removeMixWeight();\n      }\n    }\n  }\n\n  /**\n   * @return channel layer weight\n   * @param {number} channelIndex\n   */\n  public getChannelLayerWeight(channelIndex: number): number {\n    if ((this.hasMixLayer || this.isMixLayer) && channelIndex < this._channelStates.length) {\n      const mixWeight = this._channelStates[channelIndex].mixWeight;\n      const layerWeight = this.isMixLayer ? this.mixTagetLayer.layerWeight : this.layerWeight;\n      return mixWeight * layerWeight;\n    }\n    return this.layerWeight;\n  }\n\n  /**\n   * @return channel value\n   * @param {number} channelIndex\n   */\n  public getChannelValue(channelIndex: number) {\n    return this._channelStates[channelIndex].currentValue;\n  }\n\n  /**\n   * 触发动画事件\n   */\n  public triggerEvents() {\n    this._activedEvents &&\n      this._activedEvents.forEach((event) => {\n        this.trigger(event);\n      });\n\n    this._activedEvents.length = 0;\n  }\n\n  /**\n   * 跳转到某一帧\n   * @param {number} frameTime\n   */\n  public jumpToFrame(frameTime: number) {\n    const count = this._animClip.getChannelCount();\n    for (let i = count - 1; i >= 0; i--) {\n      // 1. - clear pre frameTime\n      const channelState = this._channelStates[i];\n      channelState.frameTime = 0;\n\n      // 2. - update new frameTime\n      this._updateChannelState(frameTime, i);\n    }\n  }\n\n  /**\n   * update state and value of channel\n   * @param {float} deltaTime\n   * @param {number} channelIndex\n   * @private\n   */\n  public _updateChannelState(deltaTime, channelIndex) {\n    const animClip = this._animClip;\n    const channelState = this._channelStates[channelIndex];\n    const animClipLength = animClip.getChannelTimeLength(channelIndex);\n\n    channelState.frameTime += deltaTime;\n    if (channelState.frameTime > animClipLength) {\n      switch (this._wrapMode) {\n        case WrapMode.ONCE:\n          channelState.frameTime = animClipLength;\n          break;\n        case WrapMode.LOOP:\n          channelState.frameTime = channelState.frameTime % this._animClipLength;\n          break;\n        default:\n          Logger.error(\"Unknown Anim wrap Mode: \" + this._wrapMode);\n      }\n    } // end of if\n\n    if (channelState.mixWeight && channelState.mixWeight === 0) {\n      return true;\n    }\n\n    const frameTime = Math.min(channelState.frameTime, animClipLength);\n    const lerpState = this._getKeyAndAlpha(animClip.getChannelObject(channelIndex), frameTime);\n    channelState.currentValue = animClip.evaluate(\n      channelState.currentValue,\n      channelIndex,\n      lerpState.currentKey,\n      lerpState.nextKey,\n      lerpState.alpha\n    );\n\n    if (this._wrapMode === WrapMode.ONCE && channelState.frameTime >= animClipLength) {\n      return false;\n    }\n    return true;\n  }\n  // -- private ----------------------------------------------------------\n  /**\n   * @param {Object} add animation events\n   * @private\n   */\n  private _addEvents(options: any) {\n    this.removeAllEventListeners();\n\n    this._frameEvents = [];\n    if (options.events) {\n      let frameEventIndex = 0;\n      for (let i = options.events.length - 1; i >= 0; i--) {\n        const event = options.events[i];\n        let eventType = event.type;\n        if (event.type === AnimationEventType.FRAME_EVENT) {\n          eventType = \"frameEvent\" + frameEventIndex;\n          frameEventIndex++;\n          this._frameEvents.push({\n            eventType,\n            triggerTime: event.triggerTime,\n            triggered: false\n          });\n        }\n        this.addEventListener(eventType, (e) => {\n          event.callback();\n        });\n      } // end of for\n    } // end of if\n  }\n\n  /**\n   * 激活动画事件\n   * @param {number} deltaTime\n   * @private\n   */\n  private _activeEvents(deltaTime: number) {\n    // 触发Frame Event\n    const index = this._animClip.durationIndex;\n\n    if (this._frameEvents.length > 0 && this._channelStates.length > 0) {\n      const curFrameTime = this._channelStates[index].frameTime + deltaTime;\n      for (let i = this._frameEvents.length - 1; i >= 0; i--) {\n        const frameEvent = this._frameEvents[i];\n        if (!frameEvent.triggered && curFrameTime > frameEvent.triggerTime) {\n          this._activedEvents.push(new Event(frameEvent.eventType, this));\n          frameEvent.triggered = true;\n        }\n      }\n    }\n\n    if (this._channelStates.length > 0 && this._channelStates[index].frameTime + deltaTime >= this._animClip.duration) {\n      if (this._wrapMode === WrapMode.LOOP) {\n        // 重置Frame Event状态\n        if (this._frameEvents.length > 0) {\n          for (let i = this._frameEvents.length - 1; i >= 0; i--) {\n            this._frameEvents[i].triggered = false;\n          }\n        }\n        // 激活Loop End Event\n        // @ts-ignore\n        if (this.hasEvent(AnimationEventType.LOOP_END)) {\n          this._activedEvents.push(new Event(AnimationEventType.LOOP_END, this));\n        }\n        // @ts-ignore\n      } else if (this.hasEvent(AnimationEventType.FINISHED)) {\n        // 激活Finish Event\n        this._activedEvents.push(new Event(AnimationEventType.FINISHED, this));\n      }\n    }\n  }\n\n  /**\n   * update state of channel\n   * @param {Entity} rootNode\n   * @param {object} target\n   * @private\n   */\n  private _findChannelTarget(rootNode: Entity, target: any): Entity | Component {\n    const targetID = target.id;\n    let targetSceneObject: Entity = null;\n    if (rootNode.name === targetID) {\n      targetSceneObject = rootNode;\n    } else {\n      targetSceneObject = rootNode.findByName(targetID);\n    }\n\n    if (target.path === \"weights\") {\n      return targetSceneObject.getComponent(SkinnedMeshRenderer);\n    } else {\n      return targetSceneObject;\n    }\n  }\n\n  /**\n   * @return current and next key id, current alpha\n   * @param {number} channel\n   * @param {float} time\n   * @private\n   */\n  private _getKeyAndAlpha(channel, time: number) {\n    let keyTime = 0;\n    let currentKey = 0;\n    let nextKey = 0;\n\n    const timeKeys = channel.sampler.input;\n    const numKeys = timeKeys.length;\n    for (let i = numKeys - 1; i >= 0; i--) {\n      if (time > timeKeys[i]) {\n        keyTime = time - timeKeys[i];\n        currentKey = i;\n        break;\n      }\n    }\n\n    nextKey = currentKey + 1;\n    if (nextKey >= numKeys) {\n      switch (this._wrapMode) {\n        case WrapMode.ONCE:\n          nextKey = numKeys - 1;\n          break;\n        case WrapMode.LOOP:\n          nextKey = 0;\n          break;\n      }\n    }\n\n    const keyLength = timeKeys[nextKey] - timeKeys[currentKey];\n    const alpha = nextKey === currentKey || keyLength < 0.00001 ? 1 : keyTime / keyLength;\n\n    return {\n      currentKey,\n      nextKey,\n      alpha\n    };\n  }\n}\n","import { Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { ignoreClone, shallowClone } from \"../clone/CloneManager\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { SkinnedMeshRenderer } from \"../mesh/SkinnedMeshRenderer\";\nimport { AnimationClip, TagetType } from \"./AnimationClip\";\nimport { AnimationLayer } from \"./AnimationLayer\";\nimport { AnimationOptions, IChannelTarget } from \"./types\";\n/**\n * 播放动画片段，动画片段所引用的对象必须是此组件的 Entity 及其子物体\n */\nexport class Animation extends Component {\n  /**\n   * 缩放播放速度\n   * @member {number}\n   */\n  get timeScale(): number {\n    return this._timeScale;\n  }\n  /**\n   * 设置播放速度\n   */\n  set timeScale(val: number) {\n    if (val > 0) {\n      this._timeScale = val;\n    }\n  }\n\n  /**\n   * @param {Float32Array | number} outValue\n   * @param {number} startValue\n   * @param {number} endValue\n   * @param {number} outputSize\n   * @param {number} alpha\n   * @private\n   */\n  public static lerp(\n    outValue: number | Float32Array,\n    startValue: number | Float32Array,\n    endValue: number | Float32Array,\n    alpha: number,\n    outputSize: number\n  ): number | Float32Array {\n    switch (outputSize) {\n      case 1:\n        outValue = <number>startValue * (1 - alpha) + <number>endValue * alpha;\n        break;\n      case 4:\n        const start = new Quaternion(...(startValue as Float32Array));\n        const end = new Quaternion(...(endValue as Float32Array));\n        const quat = new Quaternion();\n        Quaternion.slerp(start, end, alpha, quat);\n        outValue[0] = quat.x;\n        outValue[1] = quat.y;\n        outValue[2] = quat.z;\n        outValue[3] = quat.w;\n        break;\n      default:\n        for (let i = outputSize; i >= 0; i--) {\n          outValue[i] = startValue[i] * (1 - alpha) + endValue[i] * alpha;\n        }\n        break;\n    } // end of switch\n\n    return outValue;\n  }\n\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n\n  @shallowClone\n  private _animSet = {};\n\n  @ignoreClone\n  private _animLayers: AnimationLayer[] = [new AnimationLayer()];\n  @ignoreClone\n  private _timeScale: number = 1.0;\n  @ignoreClone\n  private _channelTargets: IChannelTarget[] | false;\n\n  /**\n   * @param {Entity} entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  /**\n   * 动画更新计算\n   * @param {number} deltaTime\n   * @private\n   */\n  public update(deltaTime: number) {\n    if (!this.isPlaying()) {\n      return;\n    }\n\n    deltaTime = deltaTime * this._timeScale;\n\n    // update state\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      const animLayer = this._animLayers[i];\n      animLayer.updateState(deltaTime);\n    }\n\n    // update value\n    this._updateValues();\n\n    // trigger events and destroy no use layer\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      const animLayer = this._animLayers[i];\n      animLayer.triggerEvents();\n      if (!animLayer.isPlaying && (animLayer.isFading || animLayer.isMixLayer)) {\n        this._animLayers.splice(i, 1);\n        this._removeRefMixLayers(animLayer);\n      }\n    }\n  }\n\n  /**\n   * 加载一个animClip\n   * @param {AnimationClip} animClip 动画片段对象\n   * @param {string} name 动画片段名称\n   */\n  public addAnimationClip(animClip: AnimationClip, name: string) {\n    this._animSet[name] = animClip;\n  }\n\n  /**\n   * 移除一个animClip\n   * @param {string} name 动画片段的名称\n   */\n  public removeAnimationClip(name: string) {\n    const animClip = this._animSet[name];\n    if (animClip) {\n      delete this._animSet[name];\n    }\n  }\n\n  /**\n   * 取得指定的 AnimationClip 的时间长度\n   * @param {string} name 动画片段的名称\n   * @return {number}\n   */\n  public getAnimationClipLength(name: string): number {\n    const animClip = this._animSet[name];\n    if (animClip) {\n      return animClip.getChannelTimeLength(0);\n    } else {\n      return 0.0;\n    }\n  }\n\n  /**\n   * 取得指定的 AnimationClip\n   * @param {string} name 动画片段的名称\n   * @return {number}\n   */\n  public getAnimationClip(name: string): AnimationClip {\n    return this._animSet[name] || null;\n  }\n\n  /**\n   * 是否正在播放\n   * @return {boolean}\n   */\n  public isPlaying(): boolean {\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (this._animLayers[i].isPlaying) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * 动画事件参数\n   * @typedef {Object} AnimationEventOpt\n   * @param {AnimationEvent} type 动画事件类型\n   * @param {function} callback 回调\n   * @param {float} triggerTime 触发时间，只有type === AnimationEvent.FRAME_EVENT 时配置\n   */\n\n  /**\n   * 配置动画播放的参数\n   * @typedef {Object} AnimationOptions\n   * @param {WrapMode} wrapMode 动画播放方式，LOOP：循环，ONCE：仅一次\n   * @param {AnimationEventOpt[]} events 动画事件\n   */\n\n  /**\n   * 播放动画\n   * @param {String} name 动画片段的名称\n   * @param {AnimationOptions} options 动画参数\n   */\n  public playAnimationClip(name: string, options?: AnimationOptions) {\n    const animClip = this._animSet[name];\n    if (!animClip) {\n      Logger.error(\"can not find anim clip: \" + name);\n      return;\n    }\n\n    let animLayer: AnimationLayer = null;\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (!this._animLayers[i].isFading && !this._animLayers[i].isMixLayer) {\n        animLayer = this._animLayers[i];\n        break;\n      }\n    }\n\n    if (!animLayer) {\n      animLayer = new AnimationLayer();\n      this._animLayers.push(animLayer);\n    }\n    this._removeRefMixLayers(animLayer);\n    this._channelTargets = animLayer.play(animClip, this.entity, options);\n  }\n\n  /**\n   * 动画混合过渡，因为动画混合过渡是一个比较消耗性能的操作，这里使用单独的接口crossFade\n   * @param {string} name 动画片段的名称\n   * @param {number} crossFadeDuration 动画切换需要的毫秒数\n   * @param {AnimationOptions} options 动画参数\n   */\n  public crossFade(name: string, crossFadeDuration: number, options: AnimationOptions) {\n    const animClip = this._animSet[name];\n    if (!animClip) {\n      Logger.error(\"can not find anim clip: \" + name);\n      return;\n    }\n\n    if (!crossFadeDuration || crossFadeDuration < 0) {\n      Logger.error(\"crossFadeDuration can not less than 0!\");\n      return;\n    }\n\n    // 寻找可以进行混合的目标\n    let targetAnimLayer = null;\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (this._animLayers[i].canMix(animClip, this.entity)) {\n        targetAnimLayer = this._animLayers[i];\n        break;\n      }\n    }\n\n    if (targetAnimLayer) {\n      // 先清除还未结束的crossFading动作\n      for (let i = this._animLayers.length - 1; i >= 0; i--) {\n        if (this._animLayers[i].isFading) {\n          this._animLayers.splice(i, 1);\n        }\n      }\n\n      targetAnimLayer.isFading = true;\n      targetAnimLayer.fadeDuration = crossFadeDuration;\n      targetAnimLayer.fadeDeltaTime = 0;\n\n      const animLayer = new AnimationLayer();\n      animLayer.crossFadeDuration = crossFadeDuration;\n      animLayer.crossFadeDeltaTime = 0;\n      animLayer.play(animClip, this.entity, options);\n      this._animLayers.push(animLayer);\n    } else {\n      this.playAnimationClip(name, options);\n    }\n  }\n\n  /**\n   * 动画混合切换，因为动画混合是一个比较消耗性能的操作，这里使用单独的接口mix\n   * @param {string} name 混合动画片段的名称\n   * @param {string} mixBoneName 混合动画对名为mixBoneName的骨骼以及附属在其上的子骨骼生效\n   * @param {AnimationOptions} options 动画参数\n   */\n  public mix(name: string, mixBoneName: string, options: AnimationOptions) {\n    const animClip = this._animSet[name];\n    if (!animClip) {\n      Logger.error(\"can not find anim clip: \" + name);\n      return;\n    }\n\n    const mixNode = this.entity.findByName(mixBoneName);\n    if (!mixNode) {\n      Logger.error(\"can not find mix bone!\");\n      return;\n    }\n\n    // 寻找可以进行混合的目标\n    let targetAnimLayer = null;\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (this._animLayers[i].canMix(animClip, this.entity)) {\n        targetAnimLayer = this._animLayers[i];\n        break;\n      }\n    }\n\n    if (targetAnimLayer) {\n      this._removeRefMixLayers(null, mixNode);\n\n      targetAnimLayer.hasMixLayer = true;\n\n      const animLayer = new AnimationLayer();\n      animLayer.isMixLayer = true;\n      animLayer.mixTagetLayer = targetAnimLayer;\n      animLayer.mixEntity = mixNode;\n      animLayer.mix(animClip, targetAnimLayer, this.entity, mixNode, options);\n      this._animLayers.push(animLayer);\n    }\n  }\n\n  /**\n   * 停止播放\n   * @param {boolean} rightnow, stop it immediately, or it will stop at the end of the clip\n   */\n  public stop(rightnow: boolean) {\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      if (this._animLayers[i].isFading) {\n        this._animLayers.splice(i, 1);\n      } else {\n        this._animLayers[i].stop(rightnow);\n      }\n    }\n  }\n\n  /**\n   * 跳转到动画的某一帧，立刻生效\n   * @param {float} frameTime\n   */\n  public jumpToFrame(frameTime: number) {\n    frameTime = frameTime / 1000;\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      this._animLayers[i].jumpToFrame(frameTime);\n    }\n\n    this._updateValues();\n  }\n\n  // -- private ----------------------------------------------------------\n  /**\n   * 移除和mixTargetLayer关联的混合动画\n   * @param {AnimationLayer} mixTargetLayer\n   * @private\n   */\n  public _removeRefMixLayers(targetLayer: AnimationLayer, mixNode?) {\n    if (targetLayer && targetLayer.hasMixLayer) {\n      for (let i = this._animLayers.length - 1; i >= 0; i--) {\n        const animLayer = this._animLayers[i];\n        if (animLayer.isMixLayer && animLayer.mixTagetLayer === targetLayer) {\n          animLayer.removeMixWeight();\n          this._animLayers.splice(i, 1);\n        }\n      }\n    }\n\n    if (mixNode) {\n      for (let i = this._animLayers.length - 1; i >= 0; i--) {\n        const animLayer = this._animLayers[i];\n        if (\n          animLayer.isMixLayer &&\n          (animLayer.mixEntity === mixNode ||\n            animLayer.mixEntity.findByName(mixNode) ||\n            mixNode.findByName(animLayer.mixEntity))\n        ) {\n          animLayer.removeMixWeight();\n          this._animLayers.splice(i, 1);\n        }\n      }\n    }\n  }\n\n  /**\n   * update animation value\n   * @private\n   */\n  public _updateValues() {\n    if (this._animLayers.length === 0 || !this._channelTargets) {\n      return;\n    }\n\n    for (let i = this._channelTargets.length - 1; i >= 0; i--) {\n      const channelTarget = this._channelTargets[i];\n      const val = this._getChannelValue(i, channelTarget.outputSize);\n      const targetObject = channelTarget.targetObject;\n      const path = channelTarget.path;\n\n      if (path === \"weights\") {\n        // SkinnedMeshRenderer\n        (targetObject as SkinnedMeshRenderer).setWeights(val as any);\n      } else {\n        const v = val as Float32Array;\n        //CM: 临时优化 val 应该为Vector3/Quaternion类型，避免转换开销\n        //CM: 未来Animation统一所有动画系统后 非常用pathType为other，继续走反射\n        //CM: 由于pathType种类比较少，未来可以通过预分类避免switch开销，比如骨骼动画就三种类型\n        const transform = (<Entity>targetObject).transform;\n        switch (channelTarget.pathType) {\n          case TagetType.position:\n            const position: Vector3 = transform.position;\n            position.setValue(v[0], v[1], v[2]);\n            transform.position = position;\n            break;\n          case TagetType.rotation:\n            const rotation: Quaternion = transform.rotationQuaternion;\n            rotation.setValue(v[0], v[1], v[2], v[3]);\n            transform.rotationQuaternion = rotation;\n            break;\n          case TagetType.scale:\n            const scale: Vector3 = transform.scale;\n            scale.setValue(v[0], v[1], v[2]);\n            transform.scale = scale;\n            break;\n          default:\n            targetObject[path] = val;\n        }\n      }\n    } // end of for\n  }\n\n  /**\n   * @return channel value\n   * @param {number} channelIndex\n   * @param {number} outputSize\n   * @private\n   */\n  public _getChannelValue(channelIndex: number, outputSize: number): number | boolean | Float32Array {\n    const weights = [];\n    const values = [];\n    for (let i = this._animLayers.length - 1; i >= 0; i--) {\n      const weight = this._animLayers[i].getChannelLayerWeight(channelIndex);\n      if (weight > 0) {\n        weights.push(weight);\n        values.push(this._animLayers[i].getChannelValue(channelIndex));\n      }\n    }\n\n    if (values.length === 1) {\n      // 一个值生效，直接返回结果\n      return values[0];\n    } else if (values.length === 2) {\n      // 两个值生效，插值返回\n      return Animation.lerp(values[0], values[0], values[1], weights[1], outputSize);\n    }\n\n    // 其他情况，是暂时处理不了的\n    Logger.error(\"Can not get channel value!\");\n    return false;\n  }\n\n  /**\n   * 被激活时调用\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    this.engine._componentsManager.addOnUpdateAnimations(this);\n  }\n\n  /**\n   * entity inActiveInHierarchy时 或 组件销毁前调用\n   * @override\n   * @internal\n   */\n  _onDisable(): void {\n    this.engine._componentsManager.removeOnUpdateAnimations(this);\n  }\n}\n","import { Vector4 } from \"@oasis-engine/math\";\nimport { DataType } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { Material } from \"../material/Material\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport { TechniqueStates } from \"../material/type\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport VertexShader from \"./shader/Vertex.glsl\";\n\n/**\n * 材质的通用参数管理，其他常用材质的基类\n * @class\n */\nexport abstract class CommonMaterial extends Material {\n  private _ambientLightCount: number;\n  public renderStates: TechniqueStates = {\n    enable: [],\n    disable: [],\n    functions: {}\n  };\n\n  protected abstract _generateTechnique();\n\n  constructor(engine: Engine, name: string) {\n    super(engine, name);\n\n    this.emission = new Vector4(0, 0, 0, 1);\n\n    this.ambient = new Vector4(0, 0, 0, 1);\n\n    /**\n     * Technique 渲染状态控制\n     * @member {object}\n     */\n    this.renderStates = {};\n  }\n\n  /**\n   * 自发光属性\n   * @member {Vector4|Texture2D}\n   */\n  get emission(): Vector4 {\n    return this.getValue(\"u_emission\");\n  }\n\n  set emission(val: Vector4) {\n    this.setValue(\"u_emission\", val);\n  }\n\n  /**\n   * 环境光反射属性\n   * @member {vec4|Texture2D}\n   */\n  get ambient(): Vector4 {\n    return this.getValue(\"u_ambient\");\n  }\n\n  set ambient(val: Vector4) {\n    this.setValue(\"u_ambient\", val);\n  }\n\n  prepareDrawing(context, component, primitive) {\n    const camera = context.camera;\n    const lightMgr = camera.scene.findFeature(LightFeature);\n\n    /** 光源 uniform values */\n    lightMgr.bindMaterialValues(this);\n\n    const { ambientLightCount } = lightMgr.lightSortAmount;\n\n    if (!this._technique || this._ambientLightCount !== ambientLightCount) {\n      this._ambientLightCount = ambientLightCount;\n      this._generateTechnique();\n      this.bindLightUniformDefine(camera);\n    }\n    super.prepareDrawing(context, component, primitive);\n  }\n\n  /**\n   * 绑定灯光相关 Uniform Define\n   * */\n  bindLightUniformDefine(camera) {\n    const lightMgr = camera.scene.findFeature(LightFeature);\n    this._technique.uniforms = {\n      ...lightMgr.getUniformDefine(),\n      ...this._technique.uniforms\n    };\n  }\n\n  /**\n   * 生成内部的 Technique 对象\n   * @private\n   */\n  _internalGenerate(name, fragmentShader) {\n    const customMacros = this._generateMacros();\n    const uniforms = this._generateFragmentUniform();\n\n    //--\n    const tech = new RenderTechnique(name);\n    tech.isValid = true;\n    tech.uniforms = uniforms;\n    tech.attributes = {};\n    tech.states = this.renderStates;\n    tech.customMacros = customMacros;\n    tech.vertexShader = VertexShader;\n    tech.fragmentShader = fragmentShader;\n\n    //-- set default values\n    this._technique = tech;\n  }\n\n  _generateMacros() {\n    const macros = [];\n\n    if (this.emission instanceof Texture2D) macros.push(\"O3_EMISSION_TEXTURE\");\n\n    if (this.ambient instanceof Texture2D) macros.push(\"O3_AMBIENT_TEXTURE\");\n\n    if (this._ambientLightCount) {\n      macros.push(\"O3_HAS_AMBIENT_LIGHT\");\n    }\n    return macros;\n  }\n\n  /**\n   * 根据自身的参数类型，生成相应的 Fragment Shader 所需的 Uniform 定义\n   * @private\n   */\n  _generateFragmentUniform() {\n    const fragmentUniform = {\n      u_emission: {\n        name: \"u_emission\",\n        type: DataType.FLOAT_VEC4\n      },\n      u_ambient: {\n        name: \"u_ambient\",\n        type: DataType.FLOAT_VEC4\n      }\n    };\n\n    if (this.emission instanceof Texture2D) {\n      fragmentUniform.u_emission.type = DataType.SAMPLER_2D;\n    }\n    if (this.ambient instanceof Texture2D) {\n      fragmentUniform.u_ambient.type = DataType.SAMPLER_2D;\n    }\n\n    return fragmentUniform;\n  }\n}\n","import { CommonMaterial } from \"./CommonMaterial\";\nimport ConstantShader from \"./shader/Constant.glsl\";\n\n/**\n * 显示固定颜色（不计算光照）的材质\n * color = <emission> + <ambient> * al\n */\nexport class ConstantMaterial extends CommonMaterial {\n  /**\n   * 生成内部所使用的 Technique 对象\n   * @private\n   */\n  _generateTechnique() {\n    this._internalGenerate(\"ConstantMaterial\", ConstantShader);\n  }\n}\n","import { Vector4 } from \"@oasis-engine/math\";\nimport { DataType } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { CommonMaterial } from \"./CommonMaterial\";\nimport LambertShader from \"./shader/Lambert.glsl\";\n\n/**\n * 实现 Lambert 光照模型的材质\n * color = <emission> + <ambient> * al + <diffuse> * max(N * L, 0)\n */\nexport class LambertMaterial extends CommonMaterial {\n  private _directLightCount;\n\n  /**\n   * Lambert 光照模型材质\n   * @param {String} name 名称\n   */\n  constructor(engine: Engine, name) {\n    super(engine, name);\n\n    this._directLightCount = 0;\n\n    this.diffuse = new Vector4(1, 1, 1, 1);\n  }\n\n  /**\n   * 环境光反射颜色\n   * @member {Vector4|Texture2D}\n   */\n  get diffuse() {\n    return this.getValue(\"u_diffuse\");\n  }\n\n  set diffuse(val) {\n    this.setValue(\"u_diffuse\", val);\n  }\n\n  /**\n   * 生成内部的 Technique 对象\n   * @private\n   */\n  _generateTechnique() {\n    this._internalGenerate(\"LambertMaterial\", LambertShader);\n  }\n\n  /**\n   * 重写基类方法，添加方向光计算\n   * @private\n   */\n  prepareDrawing(context, component, primitive) {\n    const camera = context.camera;\n    const scene = camera.scene;\n    const lightMgr = scene.findFeature(LightFeature);\n    const { directLightCount } = lightMgr.lightSortAmount;\n\n    if (this._technique === null || this._directLightCount != directLightCount) {\n      this._directLightCount = directLightCount;\n      this._generateTechnique();\n      this.bindLightUniformDefine(camera);\n    }\n\n    super.prepareDrawing(context, component, primitive);\n  }\n\n  /**\n   * 添加方向光相关的 uniform 定义\n   * @private\n   */\n  _generateFragmentUniform() {\n    let uniforms: any = {};\n\n    if (this.diffuse instanceof Texture2D) {\n      uniforms.u_diffuse = {\n        name: \"u_diffuse\",\n        type: DataType.SAMPLER_2D\n      };\n    } else {\n      uniforms.u_diffuse = {\n        name: \"u_diffuse\",\n        type: DataType.FLOAT_VEC4\n      };\n    }\n\n    const baseUniforms = super._generateFragmentUniform();\n    return Object.assign(baseUniforms, uniforms);\n  }\n\n  /**\n   * 根据方向光的个数，添加相应的宏定义\n   * @private\n   */\n  _generateMacros() {\n    const macros = super._generateMacros();\n\n    macros.push(\"O3_NEED_WORLDPOS\");\n\n    if (this._directLightCount > 0) macros.push(`O3_DIRECT_LIGHT_COUNT ${this._directLightCount}`);\n\n    if (this.diffuse instanceof Texture2D) macros.push(\"O3_DIFFUSE_TEXTURE\");\n\n    return macros;\n  }\n}\n","import { Vector4 } from \"@oasis-engine/math\";\nimport { DataType } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { CommonMaterial } from \"./CommonMaterial\";\nimport BlinnPhongShader from \"./shader/BlinnPhong.glsl\";\n\n/**\n * 实现 Blinn 光照模型的材质\n * https://dl.acm.org/citation.cfm?id=563893\n * color = <emission> + <ambient> * al + <diffuse> * max(N * L, 0) + <specular> * max(H * N, 0)^<shininess>\n */\nexport class BlinnPhongMaterial extends CommonMaterial {\n  private _directLightCount;\n  private _spotLightCount;\n  private _pointLightCount;\n\n  /**\n   * 实现 Blinn 光照模型的材质\n   * @param {String} name 名称\n   */\n  constructor(engine: Engine, name) {\n    super(engine, name);\n\n    this._directLightCount = 0;\n    this._pointLightCount = 0;\n    this._spotLightCount = 0;\n\n    this.diffuse = new Vector4(1, 1, 1, 1);\n\n    this.specular = new Vector4(1, 1, 1, 1);\n\n    this.shininess = 16.0;\n  }\n\n  /**\n   * 环境光反射颜色\n   * @member {Vector4|Texture2D}\n   */\n  get diffuse() {\n    return this.getValue(\"u_diffuse\");\n  }\n\n  set diffuse(val) {\n    this.setValue(\"u_diffuse\", val);\n  }\n\n  /**\n   * 高光反射颜色\n   * @member {Vector4|Texture2D}\n   */\n  get specular() {\n    return this.getValue(\"u_specular\");\n  }\n\n  set specular(val) {\n    this.setValue(\"u_specular\", val);\n  }\n\n  /**\n   * 高光系数，值越大高光效果越聚拢\n   * @member {float}\n   */\n  get shininess() {\n    return this.getValue(\"u_shininess\");\n  }\n\n  set shininess(val) {\n    this.setValue(\"u_shininess\", val);\n  }\n\n  /**\n   * 生成内部的 Technique 对象\n   * @private\n   */\n  _generateTechnique() {\n    this._internalGenerate(\"BlinnPhongMaterial\", BlinnPhongShader);\n  }\n\n  /**\n   * 获取宏\n   * @private\n   */\n  _generateMacros() {\n    const macros = super._generateMacros();\n\n    macros.push(\"O3_NEED_WORLDPOS\");\n\n    if (this.diffuse instanceof Texture2D) macros.push(\"O3_DIFFUSE_TEXTURE\");\n    if (this.specular instanceof Texture2D) macros.push(\"O3_SPECULAR_TEXTURE\");\n    if (this._directLightCount > 0) macros.push(`O3_DIRECT_LIGHT_COUNT ${this._directLightCount}`);\n    if (this._pointLightCount > 0) macros.push(`O3_POINT_LIGHT_COUNT ${this._pointLightCount}`);\n    if (this._spotLightCount > 0) macros.push(`O3_SPOT_LIGHT_COUNT ${this._spotLightCount}`);\n\n    return macros;\n  }\n\n  /**\n   * 重写基类方法，添加方向光计算\n   * @private\n   */\n  prepareDrawing(context, component, primitive) {\n    const camera = context.camera;\n    const scene = camera.scene;\n    const lightMgr = scene.findFeature(LightFeature);\n    const { directLightCount, pointLightCount, spotLightCount } = lightMgr.lightSortAmount;\n\n    if (\n      this._technique === null ||\n      this._directLightCount != directLightCount ||\n      this._pointLightCount != pointLightCount ||\n      this._spotLightCount != spotLightCount\n    ) {\n      this._directLightCount = directLightCount;\n      this._pointLightCount = pointLightCount;\n      this._spotLightCount = spotLightCount;\n\n      this._generateTechnique();\n      this.bindLightUniformDefine(camera);\n    }\n\n    super.prepareDrawing(context, component, primitive);\n  }\n\n  /**\n   * 添加方向光相关的 uniform 定义\n   * @private\n   */\n  _generateFragmentUniform() {\n    let uniforms: any = {};\n\n    if (this.diffuse instanceof Texture2D) {\n      uniforms.u_diffuse = {\n        name: \"u_diffuse\",\n        type: DataType.SAMPLER_2D\n      };\n    } else {\n      uniforms.u_diffuse = {\n        name: \"u_diffuse\",\n        type: DataType.FLOAT_VEC4\n      };\n    }\n\n    if (this.specular instanceof Texture2D) {\n      uniforms.u_specular = {\n        name: \"u_specular\",\n        type: DataType.SAMPLER_2D\n      };\n    } else {\n      uniforms.u_specular = {\n        name: \"u_specular\",\n        type: DataType.FLOAT_VEC4\n      };\n    }\n\n    uniforms.u_shininess = {\n      name: \"u_shininess\",\n      type: DataType.FLOAT\n    };\n\n    const baseUniforms = super._generateFragmentUniform();\n    return Object.assign(baseUniforms, uniforms);\n  }\n}\n","import { DataType, RenderState } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { CommonMaterial } from \"./CommonMaterial\";\nimport FRAG_SHADER from \"./shader/Texture.glsl\";\n\n/**\n * 无光照贴图材质\n */\nexport class TextureMaterial extends CommonMaterial {\n  static TECH_NAME = \"Texture\";\n\n  /**\n   * 构造函数\n   * @param {string} name 名称\n   */\n  constructor(engine: Engine, name) {\n    super(engine, name || \"TextureMaterial\");\n  }\n\n  _generateTechnique() {\n    this._internalGenerate(\"Texture\", FRAG_SHADER);\n  }\n\n  /**\n   * 设定材质参数值\n   * @param {string} name 参数名称\n   * @param {*} value 参数值\n   */\n  setValue(name, value) {\n    if (name === \"doubleSided\") {\n      this._setDoubleSidedDisplay(value);\n    }\n\n    super.setValue(name, value);\n  }\n\n  /**\n   * 纹理贴图\n   * @member {Texture2D}\n   */\n  set texture(v) {\n    this.setValue(\"u_diffuse\", v);\n  }\n  get texture() {\n    return this.getValue(\"u_diffuse\");\n  }\n\n  /**\n   * 是否双面显示\n   * @member {boolean}\n   */\n  set doubleSided(v) {\n    this.setValue(\"doubleSided\", v);\n  }\n  get doubleSided() {\n    return this.getValue(\"doubleSided\");\n  }\n\n  /**\n   * 添加 uniform 定义\n   * @private\n   */\n  _generateFragmentUniform() {\n    const uniforms: any = {};\n\n    if (this.texture instanceof Texture2D) {\n      uniforms.u_diffuse = {\n        name: \"u_diffuse\",\n        paramName: \"_MainTex\",\n        type: DataType.SAMPLER_2D\n      };\n    }\n    return {\n      ...super._generateFragmentUniform(),\n      ...uniforms\n    };\n  }\n\n  _generateMacros() {\n    const macros = super._generateMacros();\n\n    if (this.texture instanceof Texture2D) macros.push(\"O3_DIFFUSE_TEXTURE\");\n\n    return macros;\n  }\n\n  /**\n   * 设置材质是否双面显示\n   * @private\n   */\n  _setDoubleSidedDisplay(value) {\n    this._technique.states.disable = [];\n\n    if (value) {\n      this._technique.states.disable.push(RenderState.CULL_FACE);\n    }\n  }\n}\n","import { BlendFunc, DataType, MaterialType, RenderState } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { CommonMaterial } from \"./CommonMaterial\";\nimport FRAG_SHADER from \"./shader/Texture.glsl\";\n\n/**\n * 支持透明的无光照贴图材质\n */\nexport class TransparentMaterial extends CommonMaterial {\n  static TECH_NAME = \"Transparent\";\n\n  /**\n   * 构造函数\n   * @param {string} name 名称\n   */\n  constructor(engine: Engine, name) {\n    super(engine, name || \"TransparentMaterial\");\n  }\n\n  _generateTechnique() {\n    this.renderStates = {\n      enable: [RenderState.BLEND],\n      disable: [RenderState.CULL_FACE],\n      functions: {\n        blendFunc: [BlendFunc.SRC_ALPHA, BlendFunc.ONE_MINUS_SRC_ALPHA],\n        depthMask: [false]\n      }\n    };\n    this.renderType = MaterialType.TRANSPARENT;\n\n    this._internalGenerate(\"Transparent\", FRAG_SHADER);\n  }\n\n  /**\n   * 纹理贴图\n   * @member {Texture2D}\n   */\n  set texture(v) {\n    this.setValue(\"u_diffuse\", v);\n  }\n\n  get texture() {\n    return this.getValue(\"u_diffuse\");\n  }\n\n  /**\n   * 添加 uniform 定义\n   * @private\n   */\n  _generateFragmentUniform() {\n    const uniforms: any = {};\n    if (this.texture instanceof Texture2D) {\n      uniforms.u_diffuse = {\n        name: \"u_diffuse\",\n        paramName: \"_MainTex\",\n        type: DataType.SAMPLER_2D\n      };\n    }\n    return {\n      ...super._generateFragmentUniform(),\n      ...uniforms\n    };\n  }\n\n  _generateMacros() {\n    const macros = super._generateMacros();\n\n    if (this.texture instanceof Texture2D) macros.push(\"O3_DIFFUSE_TEXTURE\");\n\n    return macros;\n  }\n}\n","import { BlendFunc, DataType, RenderState, UniformSemantic } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport { TechniqueStates } from \"../material/type\";\nimport { DisableConfig, EnableConfig, FunctionConfig } from \"./type\";\n\nexport class ShaderMaterial extends Material {\n  // Vertex Shader 代码\n  public vertexShader: string = \"\";\n  // Fragment Shader 代码\n  public fragmentShader: string = \"\";\n  // 是否可用\n  public isValid: boolean = true;\n  // Attribute记录对象\n  public attributes = {};\n  // Unifrom记录数组\n  private _uniforms = ShaderMaterial.commonUniforms;\n  // 渲染状态控制对象\n  private _renderStates: TechniqueStates = {\n    enable: [],\n    disable: [],\n    functions: {}\n  };\n  // 渲染状态控制对象中的 enable 配置项\n  private _enableConfig: EnableConfig = [];\n  // 渲染状态控制对象中的 disable 配置项\n  private _disableConfig: DisableConfig = [];\n  // 渲染状态控制对象中的 function 配置项\n  private _functionsConfig: FunctionConfig = {\n    blendFunc: [BlendFunc.SRC_ALPHA, BlendFunc.ONE_MINUS_SRC_ALPHA]\n  };\n\n  constructor(engine: Engine, name) {\n    super(engine, name);\n  }\n\n  // 开始渲染指定对象\n  prepareDrawing(context, component, primitive) {\n    const camera = context.camera;\n    if (!this._technique) {\n      const tech = this._generateTechnique(camera, component, primitive);\n      this._technique = tech;\n    }\n    super.prepareDrawing(context, component, primitive);\n  }\n\n  // 更新technique\n  updateTechnique() {\n    this._technique = null;\n  }\n\n  // 生成内部的 Technique 对象\n  _generateTechnique(camera, component, primitive) {\n    const tech = new RenderTechnique(\"ShaderMaterial\");\n\n    tech.isValid = this.isValid;\n    tech.uniforms = this.uniforms;\n    tech.attributes = this.attributes;\n    tech.states = this.renderStates;\n    tech.vertexShader = this.vertexShader;\n    tech.fragmentShader = this.fragmentShader;\n    return tech;\n  }\n\n  addState(key: string, state: Array<any>) {\n    this.renderStates[key] = union(this.renderStates[key], state);\n  }\n\n  removeState(key: string, state: any) {\n    this.renderStates[key] = this.renderStates[key].filter((value) => value !== state);\n  }\n\n  get renderStates() {\n    return this._renderStates;\n  }\n\n  set renderStates(value) {\n    const { enable = [], disable = [], functions = {} } = value;\n    // 为了防止冲突，把预置的几个属性放在_enableConfig里面，此处需过滤掉\n    const enableState = enable.filter((value) => ShaderMaterial.commonEnable.indexOf(value) < 0);\n    const disableState = disable.filter((value) => ShaderMaterial.commonDisable.indexOf(value) < 0);\n    this._renderStates.enable = union(enableState, this._enableConfig);\n    this._renderStates.disable = union(disableState, this._disableConfig);\n    this._renderStates.functions = Object.assign({}, functions, this._functionsConfig);\n  }\n\n  get uniforms() {\n    return this._uniforms;\n  }\n\n  set uniforms(value) {\n    this._uniforms = Object.assign({}, ShaderMaterial.commonUniforms, value);\n  }\n\n  // 是否开启片元的颜色融合计算\n  set blend(value: boolean) {\n    if (value) {\n      this._enableConfig = union(this._enableConfig, [RenderState.BLEND]);\n    } else {\n      this._enableConfig = this._enableConfig.filter((state) => state !== RenderState.BLEND);\n      this.removeState(\"enable\", RenderState.BLEND);\n    }\n    this.renderStates = this._renderStates;\n  }\n\n  // 混合源因子\n  set blendSrcFactor(value: string) {\n    this._functionsConfig.blendFunc[0] = value;\n    this.renderStates = this._renderStates;\n  }\n\n  // 混合目标因子\n  set blendDstFactor(value: string) {\n    this._functionsConfig.blendFunc[1] = value;\n    this.renderStates = this._renderStates;\n  }\n\n  // 是否双面显示\n  set doubleSide(value: boolean) {\n    if (value) {\n      this._disableConfig = union(this._disableConfig, [RenderState.CULL_FACE]);\n    } else {\n      this._disableConfig = this._disableConfig.filter((state) => state !== RenderState.CULL_FACE);\n      this.removeState(\"disable\", RenderState.CULL_FACE);\n    }\n    this.renderStates = this._renderStates;\n  }\n\n  // 是否开启深度测试\n  set depthTest(value: boolean) {\n    if (!value) {\n      this._disableConfig = union(this._disableConfig, [RenderState.DEPTH_TEST]);\n    } else {\n      this._disableConfig = this._disableConfig.filter((state) => state !== RenderState.DEPTH_TEST);\n      this.removeState(\"disable\", RenderState.DEPTH_TEST);\n    }\n    this.renderStates = this._renderStates;\n  }\n\n  static commonUniforms = {\n    matModelViewProjection: {\n      name: \"matModelViewProjection\",\n      semantic: UniformSemantic.MODELVIEWPROJECTION,\n      type: DataType.FLOAT_MAT4\n    },\n    matModelView: {\n      name: \"matModelView\",\n      semantic: UniformSemantic.MODELVIEW,\n      type: DataType.FLOAT_MAT4\n    }\n  };\n\n  static commonEnable = [RenderState.BLEND];\n  static commonDisable = [RenderState.CULL_FACE, RenderState.DEPTH_TEST];\n}\n\nexport function union(arr1: Array<any>, arr2: Array<any>): Array<any> {\n  return arr1.concat(arr2.filter((v) => !(arr1.indexOf(v) > -1)));\n}\n","import { BoundingBox } from \"@oasis-engine/math\";\nimport { EngineObject } from \"../base\";\nimport { Engine } from \"../Engine\";\nimport { PrimitiveTopology, SubPrimitive } from \"../graphic\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { IndexBufferBinding } from \"../graphic/IndexBufferBinding\";\nimport { Primitive } from \"../graphic/Primitive\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\n\n/**\n * 缓冲几何体。\n */\nexport class BufferGeometry extends EngineObject {\n  /** 名称。*/\n  name: string;\n\n  /** @internal */\n  _primitive: Primitive;\n\n  private _bounds: BoundingBox;\n  private _subGeometries: SubPrimitive[] = [];\n\n  /**\n   * 顶点缓冲绑定信息集合。\n   */\n  get vertexBufferBindings(): Readonly<VertexBufferBinding[]> {\n    return this._primitive.vertexBufferBindings;\n  }\n\n  /**\n   * 索引缓冲绑定信息。\n   */\n  get indexBufferBinding(): IndexBufferBinding {\n    return this._primitive.indexBufferBinding;\n  }\n\n  /**\n   * 顶点元素集合。\n   */\n  get vertexElements(): Readonly<VertexElement[]> {\n    return this._primitive.vertexElements;\n  }\n\n  /**\n   * 首个子几何体,使用第一个材质渲染,设置多个几何体组详见 subGeometrys 属性。\n   */\n  get subGeometry(): SubPrimitive | null {\n    return this._subGeometries[0] || null;\n  }\n\n  /**\n   * 子几何体集合,每个子几何体可以使用独立的材质渲染。\n   */\n  get subGeometries(): Readonly<SubPrimitive[]> {\n    return this._subGeometries;\n  }\n\n  /**\n   * 实例数量,0 表示关闭。\n   */\n  get instanceCount(): number {\n    return this._primitive.instanceCount;\n  }\n\n  set instanceCount(count: number) {\n    this._primitive.instanceCount = count;\n  }\n\n  /**\n   * 包围体。\n   */\n  get bounds(): any {\n    return this._bounds;\n  }\n\n  set bounds(value: any) {\n    this._bounds = value;\n  }\n\n  /**\n   * 创建几何体缓冲。\n   * @param engine - 所属引擎\n   * @param name - 名称\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this._primitive = new Primitive(engine);\n    this.name = name;\n  }\n\n  /**\n   * 设置顶点缓冲绑定。\n   * @param vertexBufferBindings - 顶点缓冲绑定\n   * @param firstIndex - 第一个顶点缓冲索引，默认值为 0\n   */\n  setVertexBufferBinding(vertexBufferBindings: VertexBufferBinding, firstIndex?: number): void;\n\n  /**\n   * 设置顶点缓冲绑定。\n   * @param vertexBuffer - 顶点缓冲\n   * @param stride - 顶点缓冲跨度\n   * @param firstIndex - 第一个顶点缓冲索引，默认值为 0\n   */\n  setVertexBufferBinding(vertexBuffer: Buffer, stride: number, firstIndex?: number): void;\n\n  setVertexBufferBinding(\n    bufferOrBinding: Buffer | VertexBufferBinding,\n    stride: number = 0,\n    firstIndex: number = 0\n  ): void {\n    this._primitive.setVertexBufferBinding(<Buffer>bufferOrBinding, stride, firstIndex);\n  }\n\n  /**\n   * 设置顶点缓冲集合。\n   * @param vertexBufferBindings - 顶点缓冲绑定集合\n   * @param firstIndex - 第一个顶点缓冲索引,默认值为 0\n   */\n  setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[], firstIndex: number = 0): void {\n    this._primitive.setVertexBufferBindings(vertexBufferBindings, firstIndex);\n  }\n\n  /**\n   * 设置索引缓冲绑定。\n   * @param buffer - 索引缓冲\n   * @param format - 索引缓冲格式\n   */\n  setIndexBufferBinding(buffer: Buffer, format: IndexFormat): void;\n\n  /**\n   * 设置索引缓冲绑定。\n   * @param bufferBinding - 索引缓冲绑定\n   */\n  setIndexBufferBinding(bufferBinding: IndexBufferBinding): void;\n\n  setIndexBufferBinding(bufferOrBinding: Buffer | IndexBufferBinding, format?: IndexFormat): void {\n    this._primitive.setIndexBufferBinding(<Buffer>bufferOrBinding, format);\n  }\n\n  /**\n   * 设置顶点元素集合。\n   * @param elements - 顶点元素集合。\n   */\n  setVertexElements(elements: VertexElement[]): void {\n    this._primitive.setVertexElements(elements);\n  }\n\n  /**\n   * 添加子几何体，每一个子几何体可对应独立的材质。\n   * @param start - 起始绘制偏移，如果设置了索引缓冲则表示在索引缓冲的偏移，如果没有设置则表示在顶点缓冲中的偏移\n   * @param count - 绘制数量，如果设置了索引缓冲则表示在索引缓冲的数量，如果没有设置则表示在顶点缓冲中的数量\n   * @param topology - 几何体拓扑，默认值是 PrimitiveTopology.Triangles\n   */\n  addSubGeometry(\n    start: number,\n    count: number,\n    topology: PrimitiveTopology = PrimitiveTopology.Triangles\n  ): SubPrimitive {\n    const subGeometry = new SubPrimitive(start, count, topology);\n    this._subGeometries.push(subGeometry);\n    return subGeometry;\n  }\n\n  /**\n   * 移除子几何体。\n   * @param subGeometry - 子几何体\n   */\n  removeSubGeometry(subGeometry: SubPrimitive): void {\n    const subGeometries = this._subGeometries;\n    const index = subGeometries.indexOf(subGeometry);\n    if (index !== -1) {\n      subGeometries.splice(index, 1);\n    }\n  }\n\n  /**\n   * 清空子几何体。\n   */\n  clearSubGeometry(): void {\n    this._subGeometries.length = 0;\n  }\n\n  /**\n   * 销毁。\n   */\n  destroy(): void {\n    if (this._primitive) {\n      this._primitive.destroy();\n      this._primitive = null;\n    }\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { Material } from \"../material/Material\";\nimport { RenderableComponent } from \"../RenderableComponent\";\nimport { RenderElement } from \"../RenderPipeline/RenderElement\";\nimport { BufferGeometry } from \"./BufferGeometry\";\n\n/**\n * 几何体渲染器。\n */\nexport class GeometryRenderer extends RenderableComponent {\n  _material: Material;\n\n  /** 缓冲几何体。*/\n  private _geometry: BufferGeometry;\n\n  /**\n   * 几何体\n   */\n  set geometry(value: BufferGeometry) {\n    if (this._geometry) {\n      this._geometry._primitive._addRefCount(-1);\n    }\n    value._primitive._addRefCount(1);\n    this._geometry = value;\n  }\n\n  get geometry(): BufferGeometry {\n    return this._geometry;\n  }\n\n  /**\n   * 材质。\n   */\n  set material(value: Material) {\n    if (this._material) {\n      this._material._addRefCount(-1);\n    }\n    value._addRefCount(1);\n    this._material = value;\n  }\n\n  get material(): Material {\n    return this._material;\n  }\n\n  render(camera: Camera) {\n    const geometry = this.geometry;\n    if (geometry) {\n      const subGeometries = geometry.subGeometries;\n      const renderPipeline = camera._renderPipeline;\n      const material = this._material;\n      for (let i = 0, n = subGeometries.length; i < n; i++) {\n        if (material) {\n          const element = RenderElement.getFromPool();\n          element.setValue(this, geometry._primitive, subGeometries[i], material); // CM: need to support multi material\n          renderPipeline.pushPrimitive(element);\n        }\n      }\n    } else {\n      Logger.error(\"geometry is null.\");\n    }\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: any): void {\n    const localBounds: any = this._geometry.bounds;\n    if (localBounds) {\n      const worldMatrix: any = this._entity.transform.worldMatrix;\n      Vector3.transformCoordinate(localBounds.min, worldMatrix, worldBounds.min); //TODO:简单模式，有漏洞，待AABB重构\n      Vector3.transformCoordinate(localBounds.max, worldMatrix, worldBounds.max);\n    } else {\n      worldBounds.min.setValue(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n      worldBounds.max.setValue(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n    }\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { BufferGeometry } from \"../geometry/BufferGeometry\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\n\n/**\n * 基本形状几何体。\n */\nexport class ShapeGeometry extends BufferGeometry {\n  /**\n   * @internal\n   */\n  _initialize(engine: Engine, vertices: Float32Array, indices: Uint16Array) {\n    const vertexStride = 32;\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"NORMAL\", 12, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 24, VertexElementFormat.Vector2, 0)\n    ];\n\n    this._initBuffer(engine, vertices, indices, vertexStride, vertexElements);\n  }\n\n  _initBuffer(\n    engine: Engine,\n    vertices: Float32Array,\n    indices: Uint16Array,\n    vertexStride: number,\n    vertexElements: VertexElement[]\n  ) {\n    const positionElement = vertexElements[0];\n    const vertexBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, vertices, BufferUsage.Static);\n    const indexBuffer = new Buffer(engine, BufferBindFlag.IndexBuffer, indices, BufferUsage.Static);\n\n    this.setVertexBufferBinding(vertexBuffer, vertexStride);\n    this.setIndexBufferBinding(indexBuffer, IndexFormat.UInt16);\n    this.setVertexElements(vertexElements);\n    this.addSubGeometry(0, indices.length);\n\n    this._computeBounds(positionElement, vertices);\n  }\n\n  private _computeBounds(positionElement: VertexElement, vertices: ArrayBuffer | Float32Array): void {\n    const vertexElement = positionElement;\n    const bufferIndex = vertexElement.bindingIndex;\n    const vertexBufferBinding = this._primitive.vertexBufferBindings[bufferIndex];\n    const stride = vertexBufferBinding.stride;\n    const offset = vertexElement.offset;\n    const vertexCount = vertexBufferBinding.buffer.byteLength / stride;\n    let arrayBuffer: ArrayBuffer = vertices;\n    if (!(arrayBuffer instanceof ArrayBuffer)) {\n      arrayBuffer = (<Float32Array>arrayBuffer).buffer;\n    }\n    const dataView = new DataView(arrayBuffer, offset);\n\n    let min = new Vector3(Infinity, Infinity, Infinity);\n    let max = new Vector3(-Infinity, -Infinity, -Infinity);\n    for (let i = 0; i < vertexCount; i++) {\n      const base = offset + stride * i;\n      const position = new Vector3(\n        dataView.getFloat32(base, true),\n        dataView.getFloat32(base + 4, true),\n        dataView.getFloat32(base + 8, true)\n      );\n      Vector3.min(min, position, min);\n      Vector3.max(max, position, max);\n    }\n\n    let bounds = this.bounds;\n    if (bounds) {\n      min.cloneTo(bounds.min);\n      max.cloneTo(bounds.max);\n    } else {\n      bounds = { min: min, max: max };\n      this.bounds = bounds;\n    }\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { ShapeGeometry } from \"./ShapeGeometry\";\n\n/**\n * 长方体\n */\nexport class CuboidGeometry extends ShapeGeometry {\n  /**\n   * 创建长方体。\n   * @param engine - 引擎\n   * @param width - 宽\n   * @param height - 高\n   * @param depth - 深\n   */\n  constructor(engine: Engine, width: number = 1, height: number = 1, depth: number = 1) {\n    super(engine);\n\n    const halfWidth: number = width / 2;\n    const halfHeight: number = height / 2;\n    const halfDepth: number = depth / 2;\n\n    // prettier-ignore\n    const vertices: Float32Array = new Float32Array([\n    \t// up\n    \t-halfWidth, halfHeight, -halfDepth, 0, 1, 0, 0, 0, halfWidth, halfHeight, -halfDepth, 0, 1, 0, 1, 0, halfWidth, halfHeight, halfDepth, 0, 1, 0, 1, 1, -halfWidth, halfHeight, halfDepth, 0, 1, 0, 0, 1,\n    \t// down\n    \t-halfWidth, -halfHeight, -halfDepth, 0, -1, 0, 0, 1, halfWidth, -halfHeight, -halfDepth, 0, -1, 0, 1, 1, halfWidth, -halfHeight, halfDepth, 0, -1, 0, 1, 0, -halfWidth, -halfHeight, halfDepth, 0, -1, 0, 0, 0,\n    \t// left\n    \t-halfWidth, halfHeight, -halfDepth, -1, 0, 0, 0, 0, -halfWidth, halfHeight, halfDepth, -1, 0, 0, 1, 0, -halfWidth, -halfHeight, halfDepth, -1, 0, 0, 1, 1, -halfWidth, -halfHeight, -halfDepth, -1, 0, 0, 0, 1,\n    \t// right\n    \thalfWidth, halfHeight, -halfDepth, 1, 0, 0, 1, 0, halfWidth, halfHeight, halfDepth, 1, 0, 0, 0, 0, halfWidth, -halfHeight, halfDepth, 1, 0, 0, 0, 1, halfWidth, -halfHeight, -halfDepth, 1, 0, 0, 1, 1,\n    \t// fornt\n    \t-halfWidth, halfHeight, halfDepth, 0, 0, 1, 0, 0, halfWidth, halfHeight, halfDepth, 0, 0, 1, 1, 0, halfWidth, -halfHeight, halfDepth, 0, 0, 1, 1, 1, -halfWidth, -halfHeight, halfDepth, 0, 0, 1, 0, 1,\n    \t// back\n    \t-halfWidth, halfHeight, -halfDepth, 0, 0, -1, 1, 0, halfWidth, halfHeight, -halfDepth, 0, 0, -1, 0, 0, halfWidth, -halfHeight, -halfDepth, 0, 0, -1, 0, 1, -halfWidth, -halfHeight, -halfDepth, 0, 0, -1, 1, 1]);\n\n    // prettier-ignore\n    const indices: Uint16Array = new Uint16Array([\n    \t// up\n    \t0, 2, 1, 2, 0, 3,\n    \t// donw\n    \t4, 6, 7, 6, 4, 5,\n    \t// left\n    \t8, 10, 9, 10, 8, 11,\n    \t// right\n    \t12, 14, 15, 14, 12, 13,\n    \t// fornt\n    \t16, 18, 17, 18, 16, 19,\n    \t// back\n    \t20, 22, 23, 22, 20, 21]);\n    this._initialize(engine, vertices, indices);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { ShapeGeometry } from \"./ShapeGeometry\";\n\n/**\n * SphereGeometry 球体创建类\n */\nexport class SphereGeometry extends ShapeGeometry {\n  private _parameters;\n  private _thetaEnd;\n\n  /**\n   * @param  radius - 半径\n   * @param  horizontalSegments - 水平分段数\n   * @param  verticalSegments - 垂直分段数\n   * @param  alphaStart - 水平开始角度\n   * @param  alphaRange - 水平角度范围\n   * @param  thetaStart - 垂直开始角度\n   * @param  thetaRange - 垂直角度范围\n   */\n  constructor(\n    engine: Engine,\n    radius: number = 1,\n    horizontalSegments: number = 8,\n    verticalSegments: number = 6,\n    alphaStart: number = 0,\n    alphaRange: number = Math.PI * 2,\n    thetaStart: number = 0,\n    thetaRange: number = Math.PI\n  ) {\n    super(engine);\n    this._parameters = {\n      radius: radius || 1,\n      horizontalSegments: Math.max(3, Math.floor(horizontalSegments)),\n      verticalSegments: Math.max(2, Math.floor(verticalSegments)),\n      alphaStart: alphaStart,\n      alphaRange: alphaRange,\n      thetaStart: thetaStart,\n      thetaRange: thetaRange\n    };\n    this._thetaEnd = this._parameters.thetaStart + this._parameters.thetaRange;\n    this.initialize(engine);\n  }\n\n  /**\n   * 构造球体数据\n   * @private\n   */\n  initialize(engine: Engine) {\n    const { verticalSegments, horizontalSegments } = this._parameters;\n    // 生成经纬线上的几何体顶点的数据\n    let index = 0;\n    const grid = [];\n    const vertices: Float32Array = new Float32Array((verticalSegments + 1) * (horizontalSegments + 1) * 8);\n    const indices = [];\n    // const positions = [];\n    for (let iy = 0; iy <= verticalSegments; iy++) {\n      const verticesRow = [];\n      const v = iy / verticalSegments;\n      for (let ix = 0; ix <= horizontalSegments; ix++) {\n        const u = ix / horizontalSegments;\n        let posX =\n          -this._parameters.radius *\n          Math.cos(this._parameters.alphaStart + u * this._parameters.alphaRange) *\n          Math.sin(this._parameters.thetaStart + v * this._parameters.thetaRange);\n        let posY = this._parameters.radius * Math.cos(this._parameters.thetaStart + v * this._parameters.thetaRange);\n        let posZ =\n          this._parameters.radius *\n          Math.sin(this._parameters.alphaStart + u * this._parameters.alphaRange) *\n          Math.sin(this._parameters.thetaStart + v * this._parameters.thetaRange);\n        posX = Math.abs(posX) < 1e-6 ? 0 : posX;\n        posY = Math.abs(posY) < 1e-6 ? 0 : posY;\n        posZ = Math.abs(posZ) < 1e-6 ? 0 : posZ;\n\n        const offset = index * 8;\n        // POSITION\n        vertices[offset] = posX;\n        vertices[offset + 1] = posY;\n        vertices[offset + 2] = posZ;\n        // NORMAL\n        vertices[offset + 3] = posX;\n        vertices[offset + 4] = posY;\n        vertices[offset + 5] = posZ;\n        // TEXCOORD_0\n        vertices[offset + 6] = u;\n        vertices[offset + 7] = 1 - v;\n\n        verticesRow.push(index++);\n      }\n      grid.push(verticesRow);\n    }\n\n    // 生成所有三角形顶点序号\n    for (let iy = 0; iy < verticalSegments; iy++) {\n      for (let ix = 0; ix < horizontalSegments; ix++) {\n        const a = grid[iy][ix + 1];\n        const b = grid[iy][ix];\n        const c = grid[iy + 1][ix];\n        const d = grid[iy + 1][ix + 1];\n\n        if (iy !== 0 || this._parameters.thetaStart > 0) indices.push(a, b, d);\n        if (iy !== verticalSegments - 1 || this._thetaEnd < Math.PI) indices.push(b, c, d);\n      }\n    }\n\n    this._initialize(engine, vertices, Uint16Array.from(indices));\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { ShapeGeometry } from \"./ShapeGeometry\";\n\n/**\n * CubeGeometry 平面创建类\n */\nexport class PlaneGeometry extends ShapeGeometry {\n  private _parameters;\n  private halfWidth;\n  private halfHeight;\n\n  /**\n   * @param engine - 所属引擎\n   * @param width 宽\n   * @param height 高\n   * @param horizontalSegments 水平分段数\n   * @param verticalSegments 垂直分段数\n   */\n  constructor(\n    engine: Engine,\n    width: number = 1,\n    height: number = 1,\n    horizontalSegments: number = 1,\n    verticalSegments: number = 1\n  ) {\n    super(engine);\n    this._parameters = {\n      width: width,\n      height: height,\n      horizontalSegments: Math.floor(horizontalSegments),\n      verticalSegments: Math.floor(verticalSegments)\n    };\n\n    this.halfWidth = this._parameters.width / 2;\n    this.halfHeight = this._parameters.height / 2;\n    this.initialize(engine);\n  }\n\n  initialize(engine: Engine) {\n    const { verticalSegments, horizontalSegments } = this._parameters;\n    // 生成经纬线上的几何体顶点的数据\n    let index = 0;\n    let offset = 0;\n    const grid = [];\n    const vertices: Float32Array = new Float32Array((verticalSegments + 1) * (horizontalSegments + 1) * 8);\n    const indices: Uint16Array = new Uint16Array(verticalSegments * horizontalSegments * 6);\n\n    for (let iy = 0; iy <= verticalSegments; iy++) {\n      const verticesRow = [];\n      const v = iy / verticalSegments;\n      for (let ix = 0; ix <= horizontalSegments; ix++) {\n        const u = ix / horizontalSegments;\n        const posX = u * this._parameters.width - this.halfWidth;\n        const posY = v * this._parameters.height - this.halfHeight;\n\n        // POSITION\n        vertices[offset++] = posX;\n        vertices[offset++] = posY;\n        vertices[offset++] = 0;\n        // NORMAL\n        vertices[offset++] = 0;\n        vertices[offset++] = 0;\n        vertices[offset++] = 1;\n        // TEXCOORD_0\n        vertices[offset++] = u;\n        vertices[offset++] = 1 - v;\n\n        verticesRow.push(index++);\n      }\n      grid.push(verticesRow);\n    }\n\n    // 生成所有三角形顶点序号\n    index = 0;\n    for (let iy = 0; iy < verticalSegments; iy++) {\n      for (let ix = 0; ix < horizontalSegments; ix++) {\n        const a = grid[iy][ix + 1];\n        const b = grid[iy][ix];\n        const c = grid[iy + 1][ix];\n        const d = grid[iy + 1][ix + 1];\n\n        indices[index++] = a;\n        indices[index++] = c;\n        indices[index++] = b;\n        indices[index++] = a;\n        indices[index++] = d;\n        indices[index++] = c;\n      }\n    }\n\n    this._initialize(engine, vertices, indices);\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { FrontFace } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { ShapeGeometry } from \"./ShapeGeometry\";\n\n/**\n * SphereGeometry 球体创建类\n */\nexport class CylinderGeometry extends ShapeGeometry {\n  public FrontFace;\n  public index;\n  public indexArray;\n  public halfHeight;\n  private _parameters;\n  private _vertices;\n  private _indices;\n\n  /**\n   * @param  engine - 所属引擎\n   * @param  radiusTop - 顶部圆柱的半径。 默认值为1。\n   * @param  radiusBottom - 底部圆柱的半径。 默认值为1。\n   * @param  height - 圆柱的高度 。 默认值为1。\n   * @param  radialSegments - 圆柱体圆周周围的分割面数。 默认值为8\n   * @param  heightSegments - 沿圆柱高度的面的行数。 默认值为1。\n   * @param  openEnded - 一个布尔值，指示圆柱的末端是打开还是加盖。 默认值为false，表示上限。\n   * @param  thetaStart - 第一段的起始角度，默认= 0（三点钟位置）。\n   * @param  thetaLength - 圆形扇区的中心角，通常称为theta。 默认值为2 * Pi，这样可以获得完整的柱面。\n   */\n  constructor(\n    engine: Engine,\n    radiusTop: number = 1,\n    radiusBottom: number = 1,\n    height: number = 1,\n    radialSegments: number = 8,\n    heightSegments: number = 1,\n    openEnded: boolean = false,\n    thetaStart: number = 0,\n    thetaLength: number = 2 * Math.PI,\n    frontFace: FrontFace = FrontFace.CCW\n  ) {\n    super(engine);\n    this.FrontFace = frontFace;\n    this._parameters = {\n      radiusTop: radiusTop,\n      radiusBottom: radiusBottom,\n      height: height,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments,\n      openEnded: openEnded,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n\n    this._vertices = [];\n    this._indices = [];\n\n    this.index = 0;\n    this.indexArray = [];\n    this.halfHeight = this._parameters.height / 2;\n\n    this.generateTorso();\n\n    if (this._parameters.openEnded === false) {\n      if (this._parameters.radiusTop > 0) this.generateCap(true);\n      if (this._parameters.radiusBottom > 0) this.generateCap(false);\n    }\n\n    this._initialize(engine, Float32Array.from(this._vertices), Uint16Array.from(this._indices));\n  }\n\n  generateTorso() {\n    const { radialSegments, heightSegments, radiusBottom, radiusTop, height } = this._parameters;\n    let x, y;\n    const normal: Vector3 = new Vector3();\n    const slope = (radiusBottom - radiusTop) / height;\n    for (y = 0; y <= heightSegments; y++) {\n      const indexRow = [];\n      const v = y / heightSegments;\n      const radius = v * (radiusBottom - radiusTop) + radiusTop;\n      for (x = 0; x <= radialSegments; x++) {\n        const u = x / radialSegments;\n        const theta = u * this._parameters.thetaLength + this._parameters.thetaStart;\n        const sinTheta = Math.sin(theta);\n        const cosTheta = Math.cos(theta);\n\n        // vertex\n        const vertX = radius * sinTheta;\n        const vertY = -v * height + this.halfHeight;\n        const vertZ = radius * cosTheta;\n        this._vertices.push(vertX, vertY, vertZ);\n\n        // normal\n        normal.setValue(sinTheta, slope, cosTheta);\n        normal.normalize();\n        this._vertices.push(normal.x, normal.y, normal.z);\n\n        // uv\n        if (this.FrontFace === FrontFace.CCW) {\n          this._vertices.push(u, v);\n        } else {\n          this._vertices.push(1 - u, v);\n        }\n\n        indexRow.push(this.index++);\n      }\n\n      this.indexArray.push(indexRow);\n    }\n\n    for (x = 0; x < radialSegments; x++) {\n      for (y = 0; y < heightSegments; y++) {\n        var a = this.indexArray[y][x];\n        var b = this.indexArray[y + 1][x];\n        var c = this.indexArray[y + 1][x + 1];\n        var d = this.indexArray[y][x + 1];\n\n        // faces\n        this._indices.push(a, b, d);\n        this._indices.push(b, c, d);\n      }\n    }\n  }\n\n  generateCap(isTop) {\n    const { radialSegments } = this._parameters;\n    let x;\n    const radius = isTop === true ? this._parameters.radiusTop : this._parameters.radiusBottom;\n    const sign = isTop === true ? 1 : -1;\n    const centerIndexStart = this.index;\n\n    for (x = 1; x <= radialSegments; x++) {\n      // vertex\n      this._vertices.push(0, this.halfHeight * sign, 0);\n\n      // normal\n      this._vertices.push(0, sign, 0);\n\n      // uv\n      this._vertices.push(0.5, 0.5);\n\n      // increase index\n      this.index++;\n    }\n    const centerIndexEnd = this.index;\n\n    for (x = 0; x <= radialSegments; x++) {\n      const u = x / radialSegments;\n      const theta = u * this._parameters.thetaLength + this._parameters.thetaStart;\n      const cosTheta = Math.cos(theta);\n      const sinTheta = Math.sin(theta);\n\n      // vertex\n      const vertexX = radius * sinTheta;\n      const vertexY = this.halfHeight * sign;\n      const vertexZ = radius * cosTheta;\n      this._vertices.push(vertexX, vertexY, vertexZ);\n\n      // normal\n      this._vertices.push(0, sign, 0);\n\n      // uv\n      const uvX = cosTheta * 0.5 + 0.5;\n      const uvY = sinTheta * 0.5 * sign + 0.5;\n      this._vertices.push(uvX, uvY);\n\n      // increase index\n      this.index++;\n    }\n\n    for (x = 0; x < radialSegments; x++) {\n      var c = centerIndexStart + x;\n      var i = centerIndexEnd + x;\n      if (isTop === true) {\n        // face top\n        this._indices.push(i, i + 1, c);\n      } else {\n        // face bottom\n        this._indices.push(i + 1, i, c);\n      }\n    }\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { ShapeGeometry } from \"./ShapeGeometry\";\n\ninterface CircleGeometryOptions {\n  radius?: number;\n  segments?: number;\n  thetaStart?: number;\n  thetaLength?: number;\n}\nexport class CircleGeometry extends ShapeGeometry {\n  /**\n   * 顶点\n   */\n  private radius: number = 1;\n  private segments: number = 16;\n  private thetaStart: number = 0;\n  private thetaLength: number = Math.PI * 2;\n\n  /**\n   * @param engien - 所属引擎\n   * @param radius - 半径\n   */\n  constructor(engine: Engine, options: CircleGeometryOptions = {}) {\n    super(engine);\n\n    this.radius = options.radius || this.radius;\n    this.segments = options.segments || this.segments;\n    this.thetaStart = options.thetaStart || this.thetaStart;\n    this.thetaLength = options.thetaLength || this.thetaLength;\n    const { segments, radius } = this;\n\n    // init with center point\n    const vertices: Float32Array = new Float32Array((segments + 2) * 8);\n    // POSITION NORMAL TEXCOORD_0\n    vertices.set([0, 0, 0, 0, 0, 1, 0.5, 0.5]);\n\n    let index = 8;\n    for (let s = 0; s <= segments; s++) {\n      let segment = this.thetaStart + (s / segments) * this.thetaLength;\n      const x = radius * Math.cos(segment);\n      const y = radius * Math.sin(segment);\n\n      // POSITION\n      vertices[index++] = x;\n      vertices[index++] = y;\n      vertices[index++] = 0;\n      // NORMAL\n      vertices[index++] = 0;\n      vertices[index++] = 0;\n      vertices[index++] = 1;\n      // TEXCOORD_0\n      vertices[index++] = (x / radius + 1) * 0.5;\n      vertices[index++] = (y / radius + 1) * 0.5;\n    }\n\n    const indices: Uint16Array = new Uint16Array(segments * 3);\n    index = 0;\n    for (let i = 1; i <= segments; i++) {\n      indices[index++] = i;\n      indices[index++] = i + 1;\n      indices[index++] = 0;\n    }\n\n    this._initialize(engine, vertices, indices);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { PrimitiveTopology } from \"../graphic/enums/PrimitiveTopology\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { ShapeGeometry } from \"./ShapeGeometry\";\n\n/**\n * 覆盖整个屏幕的一个矩形\n * @private\n */\nexport class ScreenQuadGeometry extends ShapeGeometry {\n  constructor(engine: Engine) {\n    super(engine);\n    const vertices: Float32Array = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\n\n    const indices: Uint16Array = new Uint16Array([0, 1, 2, 3]);\n\n    this._initialize(engine, vertices, indices);\n    this.subGeometry.topology = PrimitiveTopology.TriangleFan;\n  }\n\n  _initialize(engine: Engine, vertices: Float32Array, indices: Uint16Array) {\n    const vertexStride = 20;\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0)\n    ];\n    this._initBuffer(engine, vertices, indices, vertexStride, vertexElements);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { ShapeGeometry } from \"./ShapeGeometry\";\n\nexport class TorusGeometry extends ShapeGeometry {\n  constructor(\n    private parameters: {\n      radius?: number;\n      tube?: number;\n      radialSegments?: number;\n      tubularSegments?: number;\n      arc?: number;\n    } = {},\n    engine: Engine\n  ) {\n    super(engine);\n\n    const radius = this.parameters.radius || 1;\n    const tube = this.parameters.tube || 0.4;\n    const radialSegments = Math.floor(this.parameters.radialSegments) || 8;\n    const tubularSegments = Math.floor(this.parameters.tubularSegments) || 6;\n    const arc = this.parameters.arc || Math.PI * 2;\n\n    // buffers\n    const vertices: Float32Array = new Float32Array((radialSegments + 1) * (tubularSegments + 1) * 3);\n    const indices: Uint16Array = new Uint16Array(radialSegments * tubularSegments * 6);\n\n    // generate vertices, normals and uvs\n    let index = 0;\n    for (let j = 0; j <= radialSegments; j++) {\n      for (let i = 0; i <= tubularSegments; i++) {\n        const u = (i / tubularSegments) * arc;\n        const v = (j / radialSegments) * Math.PI * 2;\n\n        // POSITION\n        vertices[index++] = (radius + tube * Math.cos(v)) * Math.cos(u);\n        vertices[index++] = (radius + tube * Math.cos(v)) * Math.sin(u);\n        vertices[index++] = tube * Math.sin(v);\n      }\n    }\n\n    // generate indices\n    index = 0;\n    for (let j = 1; j <= radialSegments; j++) {\n      for (let i = 1; i <= tubularSegments; i++) {\n        // indices\n        const a = (tubularSegments + 1) * j + i - 1;\n        const b = (tubularSegments + 1) * (j - 1) + i - 1;\n        const c = (tubularSegments + 1) * (j - 1) + i;\n        const d = (tubularSegments + 1) * j + i;\n\n        // faces\n        indices[index++] = a;\n        indices[index++] = b;\n        indices[index++] = d;\n        indices[index++] = b;\n        indices[index++] = c;\n        indices[index++] = d;\n      }\n    }\n    this._initialize(engine, vertices, indices);\n  }\n\n  _initialize(engine: Engine, vertices: Float32Array, indices: Uint16Array) {\n    const vertexStride = 12;\n    const vertexElements = [new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0)];\n\n    this._initBuffer(engine, vertices, indices, vertexStride, vertexElements);\n  }\n}\n","import { Entity } from \"../Entity\";\nimport { GeometryRenderer } from \"../geometry/GeometryRenderer\";\nimport { BlinnPhongMaterial } from \"../mobile-material/BlinnPhongMaterial\";\nimport { CuboidGeometry } from \"./CuboidGeometry\";\nimport { CylinderGeometry } from \"./CylinderGeometry\";\nimport { PlaneGeometry } from \"./PlaneGeometry\";\nimport { SphereGeometry } from \"./SphereGeometry\";\n\n// 只给编辑器用 TODO\nexport class Model extends GeometryRenderer {\n  private _props: any;\n  private _geometryType: GeometryType;\n\n  set geometryType(value: GeometryType) {\n    switch (value) {\n      case \"Sphere\":\n        const {\n          sphereRadius,\n          sphereHorizontalSegments,\n          sphereVerticalSegments,\n          sphereAlphaStart,\n          sphereAlphaRange,\n          sphereThetaStart,\n          sphereThetaRange\n        } = this._props as any;\n        this.geometry = new SphereGeometry(\n          this.engine,\n          sphereRadius,\n          sphereHorizontalSegments,\n          sphereVerticalSegments,\n          sphereAlphaStart,\n          sphereAlphaRange,\n          sphereThetaStart,\n          sphereThetaRange\n        );\n        break;\n\n      case \"Cylinder\":\n        const {\n          cylinderRadiusTop,\n          cylinderRadiusBottom,\n          cylinderHeight,\n          cylinderRadialSegments,\n          cylinderHeightSegments,\n          cylinderOpenEnded\n        } = this._props as any;\n        this.geometry = new CylinderGeometry(\n          this.engine,\n          cylinderRadiusTop,\n          cylinderRadiusBottom,\n          cylinderHeight,\n          cylinderRadialSegments,\n          cylinderHeightSegments,\n          cylinderOpenEnded,\n          undefined,\n          undefined,\n          undefined\n        );\n        break;\n\n      case \"Plane\":\n        const { planeWidth, planeHeight, planeHorizontalSegments, planeVerticalSegments } = this._props as any;\n        this.geometry = new PlaneGeometry(\n          this.engine,\n          planeWidth,\n          planeHeight,\n          planeHorizontalSegments,\n          planeVerticalSegments\n        );\n        break;\n\n      case \"Box\":\n        var { boxWidth, boxHeight, boxDepth } = this._props as any;\n        this.geometry = new CuboidGeometry(this.engine, boxWidth, boxHeight, boxDepth);\n        break;\n    }\n\n    this._geometryType = value;\n  }\n\n  get geometryType() {\n    return this._geometryType;\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  get material(): any {\n    return this._material;\n  }\n\n  set material(mtl: any) {\n    if (!mtl) {\n      this._material = new BlinnPhongMaterial(this.engine, \"mtl\");\n    } else {\n      this._material = mtl;\n    }\n  }\n\n  init(props: any) {\n    this._props = props;\n\n    const { geometryType = GeometryType.Box } = props;\n    this.material = props.material;\n    this.geometryType = geometryType;\n  }\n\n  setProp(key: string, value: any) {\n    this._props[key] = value;\n\n    if (key === \"material\") {\n      this.material = value;\n    } else {\n      this.geometryType = this._props.geometryType;\n    }\n  }\n}\n\nenum GeometryType {\n  Box = \"Box\",\n  Cylinder = \"Cylinder\",\n  Plane = \"Plane\",\n  Sphere = \"Sphere\"\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { CompFunc, DataType, RenderState } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport fs from \"./skybox.fs.glsl\";\nimport vs from \"./skybox.vs.glsl\";\n\n/**\n * 天空盒材质\n */\nexport class SkyBoxMaterial extends Material {\n  private _cacheMat1: Matrix;\n  private _cacheMat2: Matrix;\n  private modelMatrix: Matrix;\n\n  constructor(engine: Engine, name = SkyBoxMaterial.defaultName) {\n    super(engine, name);\n  }\n\n  public setModel(modelMatrix: Matrix) {\n    this.modelMatrix = modelMatrix;\n  }\n\n  /**\n   * 渲染前调用\n   * @private\n   */\n  prepareDrawing(context, component) {\n    if (this._technique === null) {\n      this._generateTechnique();\n    }\n\n    if (!this._cacheMat1) {\n      this._cacheMat1 = new Matrix();\n      this._cacheMat2 = new Matrix();\n    }\n    const view = context.viewMatrix;\n    const proj = context.projectionMatrix;\n\n    Matrix.multiply(view, this.modelMatrix, this._cacheMat1);\n    const e = this._cacheMat1.elements;\n    e[12] = e[13] = e[14] = 0;\n    Matrix.multiply(proj, this._cacheMat1, this._cacheMat2);\n    this.setValue(\"u_mvpNoscale\", this._cacheMat2);\n\n    super.prepareDrawing(context, component, undefined);\n  }\n\n  /**\n   * 创建Technique\n   * @private\n   */\n  _generateTechnique() {\n    const tech = new RenderTechnique(SkyBoxMaterial.techniqueName);\n    tech.isValid = true;\n    tech.uniforms = SkyBoxMaterial.techniqueConfig.uniforms;\n    tech.attributes = SkyBoxMaterial.techniqueConfig.attributes;\n    tech.states = SkyBoxMaterial.techniqueConfig.states;\n    tech.vertexShader = SkyBoxMaterial.vertexShader;\n    tech.fragmentShader = SkyBoxMaterial.fragmentShader;\n\n    this._technique = tech;\n  }\n\n  static defaultName = \"SKY_BOX_MATERIAL\";\n  static techniqueName = \"SKY_BOX_TECHNIQUE\";\n  static vertexShader = vs;\n  static fragmentShader = fs;\n  static techniqueConfig = {\n    attributes: {},\n    uniforms: {\n      u_mvpNoscale: {\n        name: \"u_mvpNoscale\",\n        type: DataType.FLOAT_MAT4\n      },\n      u_cube: {\n        name: \"u_cube\",\n        type: DataType.SAMPLER_CUBE\n      }\n    },\n    states: {\n      disable: [RenderState.CULL_FACE],\n      functions: {\n        depthFunc: CompFunc.LEQUAL\n      }\n    }\n  };\n}\n","import { CuboidGeometry } from \"../geometry-shape/CuboidGeometry\";\nimport { GeometryRenderer } from \"../geometry/GeometryRenderer\";\nimport { SkyBoxMaterial } from \"./SkyBoxMaterial\";\n\n/**\n * 天空盒组件\n * @class\n */\nexport class SkyBox extends GeometryRenderer {\n  private _skyBoxMap: any;\n\n  /**\n   * 天空盒组件\n   * @param {Entity} entity 挂载节点\n   */\n  constructor(entity) {\n    super(entity);\n    this.geometry = new CuboidGeometry(this.engine, 2, 2, 2);\n    this.material = new SkyBoxMaterial(this.engine);\n  }\n\n  update() {\n    (this.material as SkyBoxMaterial).setModel(this.entity.transform.worldMatrix);\n  }\n\n  render(camera) {\n    if (!this._skyBoxMap) return;\n    super.render(camera);\n  }\n\n  /**\n   * 天空盒贴图\n   * @type {TextureCubeMap}\n   */\n  get skyBoxMap() {\n    return this._skyBoxMap;\n  }\n\n  set skyBoxMap(v) {\n    this._skyBoxMap = v;\n    this.material.setValue(\"u_cube\", v);\n  }\n}\n","import { Matrix, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { BlendFunc, CullFace, DataType, GLCapabilityType, MaterialType, RenderState, Side } from \"../base/Constant\";\nimport { Util } from \"../base/Util\";\nimport { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { Engine } from \"../Engine\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { Material } from \"../material/Material\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Texture } from \"../texture/Texture\";\nimport fs from \"./pbr.fs.glsl\";\nimport vs from \"./pbr.vs.glsl\";\n/**\n * PBR（Physically-Based Rendering）材质\n */\nclass PBRMaterial extends Material {\n  private _uniformObj;\n  private _stateObj;\n  private _ambientLightCount: number;\n  private _envMapLightCount: number;\n  private _spotLightCount: number;\n  private _directLightCount: number;\n  private _pointLightCount: number;\n  private _useDiffuseEnv: boolean;\n  private _useSpecularEnv: boolean;\n  private _clipPlaneCount: number;\n  private _useOIT: boolean;\n\n  /**\n   * PBR 材质\n   * @param {String} [name='PBR_MATERIAL'] 材质名\n   * @param {Object} [props] 包含以下参数\n   * @param {Vector4} [props.baseColorFactor=[1, 1, 1, 1]] 基础颜色因子\n   * @param {Texture2D} [props.baseColorTexture] 基础颜色纹理\n   * @param {Number} [props.metallicFactor=1] 金属度\n   * @param {Number} [props.roughnessFactor=1] 粗糙度\n   * @param {Texture2D} [props.metallicTexture] 金属纹理\n   * @param {Texture2D} [props.roughnessTexture] 粗糙度纹理\n   * @param {Texture2D} [props.metallicRoughnessTexture] 金属粗糙度纹理\n   * @param {Texture2D} [props.normalTexture] 法线纹理\n   * @param {Number} [props.normalScale=1] 法线缩放量\n   * @param {Texture2D} [props.emissiveTexture] 发散光纹理\n   * @param {Vector3} [props.emissiveFactor=[0, 0, 0]] 发散光因子\n   * @param {Texture2D} [props.occlusionTexture] 遮蔽纹理\n   * @param {Number} [props.occlusionStrength=1] 遮蔽强度\n   * @param {Number} [props.alphaCutoff=0.5] alpha裁剪值\n   * @param {String} [props.alphaMode='OPAQUE'] alpha混合模式\n   * @param {Boolean} [props.doubleSided=false] 是否显示双面\n   * @param {Side} [props.side=Side.Front] 显示哪一个面，向下兼容doubleSided\n   * @param {Boolean} [props.unlit=false] 是否不使用光照\n   * @param {Boolean} [props.srgb=false] 是否为 SRGB 色彩空间\n   * @param {Boolean} [props.srgbFast=true] sRGB线性校正是否使用近似快速算法\n   * @param {Boolean} [props.gamma=false] 是否使用 Gamma 纠正\n   * @param {Number} [props.opacity=1] 透明度\n   * @param {Texture2D} [props.opacityTexture] 透明度贴图\n   * @param {boolean} [props.getOpacityFromRGB=false] true:取透明度贴图的rgb亮度，false:取alpha通道\n   *\n   * @param {boolean} [props.isMetallicWorkflow=true] ture:金属粗糙度模式，false：高光光泽度模式\n   * @param {Vector3} [props.specularFactor=[1，1，1]] 高光度因子\n   * @param {number} [props.glossinessFactor=0] 光泽度\n   * @param {Texture2D} [props.specularGlossinessTexture] 高光光泽度纹理\n   *\n   * @param {number} [props.envMapIntensity] 反射模式时的反射强度；\n   *\n   *  todo: IOR 更加符合材质的属性，但是需要增加额外的属性来表示非真空折射率，如摄像机在水中等情况。\n   * @param {number} [props.refractionRatio] 折射模式时的折射率的比例，如真空折射率/水折射率=1/1.33;\n   * @param {boolean} [props.envMapModeRefract=false] 全局环境贴图使用 反射或者折射 模式;\n   * @param {Texture2D} [props.refractionTexture] 局部 折射纹理;\n   * @param {number} [props.refractionDepth] 局部 折射纹理 深度值，用来模拟折射距离;\n   *\n   * @param {Texture2D} [props.perturbationTexture] 扰动纹理\n   * @param {number} [props.perturbationUOffset] 扰动纹理U偏移\n   * @param {number} [props.perturbationVOffset] 扰动纹理V偏移\n   *\n   * @param {TextureCubeMap} [props.reflectionTexture] 局部反射贴图，可以覆盖 AEnvironmentMapLight\n   *\n   */\n  constructor(engine: Engine, name = PBRMaterial.MATERIAL_NAME, props = {}) {\n    super(engine, name);\n\n    this.createDefaulteValues();\n    this.setUniforms(props);\n    this.setStates(props);\n  }\n\n  /**\n   * 创建默认的参数值\n   * @private\n   */\n  createDefaulteValues() {\n    this._uniformObj = {\n      baseColorFactor: new Vector4(1.0, 1.0, 1.0, 1.0),\n      metallicFactor: 1,\n      roughnessFactor: 1,\n      metallicRoughness: new Vector2(1.0, 1.0),\n      normalScale: 1,\n      emissiveFactor: new Vector3(0.0, 0.0, 0.0),\n      occlusionStrength: 1,\n      alphaCutoff: 0.5,\n\n      // specular-glossiness workflow\n      specularFactor: new Vector3(1.0, 1.0, 1.0),\n      glossinessFactor: 0,\n\n      // reflect,refract\n      envMapIntensity: 1,\n      refractionRatio: 1 / 1.33,\n      refractionDepth: 1,\n\n      // perturbation\n      perturbationUOffset: 0,\n      perturbationVOffset: 0\n    };\n\n    this._stateObj = {\n      alphaMode: \"OPAQUE\",\n      doubleSided: false,\n      side: Side.FRONT,\n      unlit: false,\n      srgb: false,\n      srgbFast: false,\n      gamma: false,\n      blendFunc: [],\n      blendFuncSeparate: [BlendFunc.SRC_ALPHA, BlendFunc.ONE_MINUS_SRC_ALPHA, BlendFunc.ONE, BlendFunc.ONE],\n      depthMask: [false],\n      getOpacityFromRGB: false,\n      isMetallicWorkflow: true,\n      envMapModeRefract: false\n    };\n\n    Object.keys(this._uniformObj).forEach((k) => this.setValueByParamName(k, this._uniformObj[k]));\n  }\n\n  /**\n   * 设置使用到的Uniform信息\n   * @param {Object} obj 使用到的Uniform信息\n   * @private\n   */\n  setUniforms(obj) {\n    Object.keys(obj).forEach((key) => {\n      switch (key) {\n        case \"baseColorFactor\":\n          this.baseColorFactor = obj[key];\n          break;\n        case \"opacity\":\n          this.opacity = obj[key];\n          break;\n        case \"opacityTexture\":\n          this.opacityTexture = obj[key];\n          break;\n        case \"baseColorTexture\":\n          this.baseColorTexture = obj[key];\n          break;\n        case \"metallicFactor\":\n          this.metallicFactor = obj[key];\n          break;\n        case \"roughnessFactor\":\n          this.roughnessFactor = obj[key];\n          break;\n        case \"metallicTexture\":\n          this.metallicTexture = obj[key];\n          break;\n        case \"roughnessTexture\":\n          this.roughnessTexture = obj[key];\n          break;\n        case \"metallicRoughnessTexture\":\n          this.metallicRoughnessTexture = obj[key];\n          break;\n        case \"normalTexture\":\n          this.normalTexture = obj[key];\n          break;\n        case \"normalScale\":\n          this.normalScale = obj[key];\n          break;\n        case \"emissiveTexture\":\n          this.emissiveTexture = obj[key];\n          break;\n        case \"emissiveFactor\":\n          this.emissiveFactor = obj[key];\n          break;\n        case \"occlusionTexture\":\n          this.occlusionTexture = obj[key];\n          break;\n        case \"occlusionStrength\":\n          this.occlusionStrength = obj[key];\n          break;\n        case \"alphaCutoff\":\n          this.alphaCutoff = obj[key];\n          break;\n        case \"specularFactor\":\n          this.specularFactor = obj[key];\n          break;\n        case \"glossinessFactor\":\n          this.glossinessFactor = obj[key];\n          break;\n        case \"specularGlossinessTexture\":\n          this.specularGlossinessTexture = obj[key];\n          break;\n        case \"reflectionTexture\":\n          this.reflectionTexture = obj[key];\n          break;\n        case \"envMapIntensity\":\n          this.envMapIntensity = obj[key];\n          break;\n        case \"refractionRatio\":\n          this.refractionRatio = obj[key];\n          break;\n        case \"refractionDepth\":\n          this.refractionDepth = obj[key];\n          break;\n        case \"refractionTexture\":\n          this.refractionTexture = obj[key];\n          break;\n        case \"perturbationTexture\":\n          this.perturbationTexture = obj[key];\n          break;\n        case \"perturbationUOffset\":\n          this.perturbationUOffset = obj[key];\n          break;\n        case \"perturbationVOffset\":\n          this.perturbationVOffset = obj[key];\n          break;\n        default:\n          break;\n      }\n    });\n  }\n\n  /**\n   * 设置渲染状态信息\n   * @param {Object} obj 渲染状态信息\n   * @private\n   */\n  setStates(obj) {\n    Object.keys(obj).forEach((key) => {\n      switch (key) {\n        case \"doubleSided\":\n          this.doubleSided = obj[key];\n          break;\n        case \"side\":\n          this.side = obj[key];\n          break;\n        case \"alphaMode\":\n          this.alphaMode = obj[key];\n          break;\n        case \"unlit\":\n          this.unlit = obj[key];\n          break;\n        case \"srgb\":\n          this.srgb = obj[key];\n          break;\n        case \"srgbFast\":\n          this.srgbFast = obj[key];\n          break;\n        case \"gamma\":\n          this.gamma = obj[key];\n          break;\n        case \"blendFunc\":\n          this.blendFunc = obj[key];\n          break;\n        case \"blendFuncSeparate\":\n          this.blendFuncSeparate = obj[key];\n          break;\n        case \"depthMask\":\n          this.depthMask = obj[key];\n          break;\n        case \"getOpacityFromRGB\":\n          this.getOpacityFromRGB = obj[key];\n          break;\n        case \"isMetallicWorkflow\":\n          this.isMetallicWorkflow = obj[key];\n          break;\n        case \"envMapModeRefract\":\n          this.envMapModeRefract = obj[key];\n          break;\n      }\n    });\n  }\n\n  /**\n   * 根据 uniform 的参数名设置材质值\n   * @private\n   */\n  setValueByParamName(paramName, value) {\n    const uniforms = PBRMaterial.TECH_CONFIG.uniforms;\n    const uniformName = Object.keys(uniforms).find((key) => uniforms[key].paramName === paramName);\n    if (uniformName) {\n      this.setValue(uniformName, value);\n    }\n  }\n\n  /** 根据 state 跟新 technique */\n  private updateTechnique(stateName: string, v) {\n    if (this[stateName] === v) return;\n    this._stateObj[stateName] = v;\n\n    const states = this.technique?.states;\n    if (!states) return;\n\n    switch (stateName) {\n      case \"doubleSided\":\n      case \"side\":\n        if (this.doubleSided) {\n          states.disable.push(RenderState.CULL_FACE);\n        } else {\n          const index = states.disable.indexOf(RenderState.CULL_FACE);\n          if (index > -1) {\n            states.disable.splice(index, 1);\n          }\n          switch (this.side) {\n            case Side.FRONT:\n              states.functions.cullFace = [CullFace.BACK];\n              break;\n            case Side.BACK:\n              states.functions.cullFace = [CullFace.FRONT];\n              break;\n            case Side.NONE:\n              states.functions.cullFace = [CullFace.FRONT_AND_BACK];\n              break;\n            default:\n              delete states.functions.cullFace;\n          }\n        }\n        break;\n      case \"blendFunc\":\n      case \"blendFuncSeparate\":\n        if (this.blendFunc.length) {\n          states.functions.blendFunc = this.blendFunc;\n        } else {\n          states.functions.blendFuncSeparate = this.blendFuncSeparate;\n        }\n        break;\n      case \"depthMask\":\n        states.functions.depthMask = v;\n        break;\n      default:\n        this._technique = null;\n    }\n  }\n\n  /****************************************   uniform start **************************************** /\n\n   /**\n   * 基础颜色因子\n   * @type {Vector4}\n   */\n  get baseColorFactor() {\n    return this._uniformObj.baseColorFactor;\n  }\n\n  set baseColorFactor(v: Vector4) {\n    this._uniformObj.baseColorFactor = v;\n    this.setValueByParamName(\"baseColorFactor\", v);\n  }\n\n  get opacity(): number {\n    return this.baseColorFactor.w;\n  }\n\n  set opacity(val: number) {\n    this.baseColorFactor.w = val;\n  }\n\n  /**\n   * 基础颜色纹理\n   * @type {Texture2D}\n   */\n  get baseColorTexture() {\n    return this._uniformObj.baseColorTexture;\n  }\n\n  set baseColorTexture(v) {\n    this.setValueByParamName(\"baseColorTexture\", v);\n    this._uniformObj.baseColorTexture = v;\n  }\n\n  /**\n   * 透明贴图\n   * @type {Texture2D}\n   * */\n  get opacityTexture() {\n    return this._uniformObj.opacityTexture;\n  }\n\n  set opacityTexture(v) {\n    this.setValueByParamName(\"opacityTexture\", v);\n    this._uniformObj.opacityTexture = v;\n  }\n\n  /**\n   * 金属度\n   * @type {Number}\n   */\n  get metallicFactor() {\n    return this._uniformObj.metallicFactor;\n  }\n\n  set metallicFactor(v) {\n    this._uniformObj.metallicFactor = v;\n    this._uniformObj.metallicRoughness.x = v;\n    this.setValueByParamName(\"metallicRoughness\", this._uniformObj.metallicRoughness);\n  }\n\n  /**\n   * 粗糙度\n   * @type {Number}\n   */\n  get roughnessFactor() {\n    return this._uniformObj.roughnessFactor;\n  }\n\n  set roughnessFactor(v) {\n    this._uniformObj.roughnessFactor = v;\n    this._uniformObj.metallicRoughness.y = v;\n    this.setValueByParamName(\"metallicRoughness\", this._uniformObj.metallicRoughness);\n  }\n\n  /**\n   * 金属纹理\n   * @type {Texture2D}\n   */\n  get metallicTexture() {\n    return this._uniformObj.metallicTexture;\n  }\n\n  set metallicTexture(v) {\n    this.setValueByParamName(\"metallicTexture\", v);\n    this._uniformObj.metallicTexture = v;\n  }\n\n  /**\n   * 粗糙度纹理\n   * @type {Texture2D}\n   */\n  get roughnessTexture() {\n    return this._uniformObj.roughnessTexture;\n  }\n\n  set roughnessTexture(v) {\n    this.setValueByParamName(\"roughnessTexture\", v);\n    this._uniformObj.roughnessTexture = v;\n  }\n\n  /**\n   * 金属粗糙度纹理\n   * @type {Texture2D}\n   */\n  get metallicRoughnessTexture() {\n    return this._uniformObj.metallicRoughnessTexture;\n  }\n\n  set metallicRoughnessTexture(v) {\n    this.setValueByParamName(\"metallicRoughnessTexture\", v);\n    this._uniformObj.metallicRoughnessTexture = v;\n  }\n\n  /**\n   * 法线纹理\n   * @type {Texture2D}\n   */\n  get normalTexture() {\n    return this._uniformObj.normalTexture;\n  }\n\n  set normalTexture(v) {\n    this.setValueByParamName(\"normalTexture\", v);\n    this._uniformObj.normalTexture = v;\n  }\n\n  /**\n   * 法线缩放量\n   * @type {Number}\n   */\n  get normalScale() {\n    return this._uniformObj.normalScale;\n  }\n\n  set normalScale(v) {\n    this._uniformObj.normalScale = v;\n    this.setValueByParamName(\"normalScale\", v);\n  }\n\n  /**\n   * 发散光纹理\n   * @type {Texture2D}\n   */\n  get emissiveTexture() {\n    return this._uniformObj.emissiveTexture;\n  }\n\n  set emissiveTexture(v) {\n    this.setValueByParamName(\"emissiveTexture\", v);\n    this._uniformObj.emissiveTexture = v;\n  }\n\n  /**\n   * 发散光因子\n   * @type {Vector3}\n   */\n  get emissiveFactor() {\n    return this._uniformObj.emissiveFactor;\n  }\n\n  set emissiveFactor(v: Vector3) {\n    this._uniformObj.emissiveFactor = v;\n    this.setValueByParamName(\"emissiveFactor\", v);\n  }\n\n  /**\n   * 遮蔽纹理\n   * @type {Texture2D}\n   */\n  get occlusionTexture() {\n    return this._uniformObj.occlusionTexture;\n  }\n\n  set occlusionTexture(v) {\n    this.setValueByParamName(\"occlusionTexture\", v);\n    this._uniformObj.occlusionTexture = v;\n  }\n\n  /**\n   * 遮蔽强度\n   * @type {Number}\n   */\n  get occlusionStrength() {\n    return this._uniformObj.occlusionStrength;\n  }\n\n  set occlusionStrength(v) {\n    this._uniformObj.occlusionStrength = v;\n    this.setValueByParamName(\"occlusionStrength\", v);\n  }\n\n  /**\n   * alpha裁剪值\n   * @type {Number}\n   */\n  get alphaCutoff() {\n    return this._uniformObj.alphaCutoff;\n  }\n\n  set alphaCutoff(v) {\n    this._uniformObj.alphaCutoff = v;\n    this.setValueByParamName(\"alphaCutoff\", v);\n  }\n\n  /**\n   * 高光度因子\n   * @type {Vector3}\n   */\n  get specularFactor() {\n    return this._uniformObj.specularFactor;\n  }\n\n  set specularFactor(v) {\n    this.setValueByParamName(\"specularFactor\", v);\n    this._uniformObj.specularFactor = v;\n  }\n\n  /**\n   * 光泽度\n   * @type {Array}\n   */\n  get glossinessFactor() {\n    return this._uniformObj.glossinessFactor;\n  }\n\n  set glossinessFactor(v) {\n    this.setValueByParamName(\"glossinessFactor\", v);\n    this._uniformObj.glossinessFactor = v;\n  }\n\n  /**\n   * 高光光泽度纹理\n   * @type {Texture2D}\n   */\n  get specularGlossinessTexture() {\n    return this._uniformObj.specularGlossinessTexture;\n  }\n\n  set specularGlossinessTexture(v) {\n    this.setValueByParamName(\"specularGlossinessTexture\", v);\n    this._uniformObj.specularGlossinessTexture = v;\n  }\n\n  /**\n   * 镜面反射纹理\n   * @type {TextureCubeMap}\n   */\n  get reflectionTexture() {\n    return this._uniformObj.reflectionTexture;\n  }\n\n  set reflectionTexture(v) {\n    this.setValueByParamName(\"reflectionTexture\", v);\n    this._uniformObj.reflectionTexture = v;\n  }\n\n  /**\n   * 反射强度\n   * @type {number}\n   */\n  get envMapIntensity() {\n    return this._uniformObj.envMapIntensity;\n  }\n\n  set envMapIntensity(v) {\n    this.setValueByParamName(\"envMapIntensity\", v);\n    this._uniformObj.envMapIntensity = v;\n  }\n\n  /**\n   * 折射率比\n   * @type {number}\n   */\n  get refractionRatio() {\n    return this._uniformObj.refractionRatio;\n  }\n\n  set refractionRatio(v) {\n    this.setValueByParamName(\"refractionRatio\", v);\n    this._uniformObj.refractionRatio = v;\n  }\n\n  /**\n   * 局部折射纹理的深度值，用来模拟折射距离\n   * @type {number}\n   */\n  get refractionDepth() {\n    return this._uniformObj.refractionDepth;\n  }\n\n  set refractionDepth(v) {\n    this.setValueByParamName(\"refractionDepth\", v);\n    this._uniformObj.refractionDepth = v;\n  }\n\n  /**\n   * 局部折射纹理\n   * @type {Texture2D}\n   */\n  get refractionTexture() {\n    return this._uniformObj.refractionTexture;\n  }\n\n  set refractionTexture(v) {\n    this.setValueByParamName(\"refractionTexture\", v);\n    this._uniformObj.refractionTexture = v;\n  }\n\n  /**\n   * 扰动纹理\n   * @type {Texture2D}\n   */\n  get perturbationTexture() {\n    return this._uniformObj.perturbationTexture;\n  }\n\n  set perturbationTexture(v) {\n    this.setValueByParamName(\"perturbationTexture\", v);\n    this._uniformObj.perturbationTexture = v;\n  }\n\n  /**\n   * 扰动纹理U偏移\n   * @type {number}\n   */\n  get perturbationUOffset() {\n    return this._uniformObj.perturbationUOffset;\n  }\n\n  set perturbationUOffset(v) {\n    this.setValueByParamName(\"perturbationUOffset\", v);\n    this._uniformObj.perturbationUOffset = v;\n  }\n\n  /**\n   * 扰动纹理V偏移\n   * @type {number}\n   */\n  get perturbationVOffset() {\n    return this._uniformObj.perturbationVOffset;\n  }\n\n  set perturbationVOffset(v) {\n    this.setValueByParamName(\"perturbationVOffset\", v);\n    this._uniformObj.perturbationVOffset = v;\n  }\n\n  /****************************************   uniform end **************************************** /\n\n\n  /****************************************   state start **************************************** /\n\n   /**\n   * alpha混合模式\n   * @type {'OPAQUE'|'MASK'|'BLEND'}\n   */\n  get alphaMode() {\n    return this._stateObj.alphaMode;\n  }\n\n  set alphaMode(v) {\n    this.updateTechnique(\"alphaMode\", v);\n  }\n\n  /**\n   * 是否显示双面\n   * @type {Boolean}\n   */\n  get doubleSided() {\n    return this._stateObj.doubleSided;\n  }\n\n  set doubleSided(v) {\n    if (v) {\n      this._stateObj.side = Side.DOUBLE;\n    } else if (this._stateObj.side === Side.DOUBLE) {\n      this._stateObj.side = Side.FRONT;\n    }\n    this.updateTechnique(\"doubleSided\", v);\n  }\n\n  /**\n   * 显示哪个面\n   * @type {Side}\n   * */\n  get side() {\n    return this._stateObj.side;\n  }\n\n  set side(v: Side) {\n    // 向下兼容doubleSided\n    if (v === Side.DOUBLE) {\n      this._stateObj.doubleSided = true;\n    } else {\n      this._stateObj.doubleSided = false;\n    }\n\n    this.updateTechnique(\"side\", v);\n  }\n\n  /**\n   * 是否使用光源\n   * @type {Boolean}\n   */\n  get unlit() {\n    return this._stateObj.unlit;\n  }\n\n  set unlit(v) {\n    this.updateTechnique(\"unlit\", v);\n  }\n\n  /**\n   * 是否 SRGB 色彩空间\n   * @type {Boolean}\n   */\n  get srgb() {\n    return this._stateObj.srgb;\n  }\n\n  set srgb(v) {\n    this.updateTechnique(\"srgb\", v);\n  }\n\n  /**\n   * sRGB线性校正是否使用近似快速算法\n   * */\n  get srgbFast(): boolean {\n    return this._stateObj.srgbFast;\n  }\n\n  set srgbFast(v: boolean) {\n    this.updateTechnique(\"srgbFast\", v);\n  }\n\n  /**\n   * 是否使用 Gamma 纠正\n   * @type {Boolean}\n   */\n  get gamma() {\n    return this._stateObj.gamma;\n  }\n\n  set gamma(v) {\n    this.updateTechnique(\"gamma\", v);\n  }\n\n  get blendFunc() {\n    return this._stateObj.blendFunc;\n  }\n\n  set blendFunc(v) {\n    this.updateTechnique(\"blendFunc\", v);\n  }\n\n  get blendFuncSeparate() {\n    return this._stateObj.blendFuncSeparate;\n  }\n\n  set blendFuncSeparate(v) {\n    this.updateTechnique(\"blendFuncSeparate\", v);\n  }\n\n  get depthMask() {\n    return this._stateObj.depthMask;\n  }\n\n  set depthMask(v) {\n    this.updateTechnique(\"depthMask\", v);\n  }\n\n  /**\n   * 透明度通道选择\n   * true:取透明度贴图的rgb亮度，false:取alpha通道\n   * @type{boolean}\n   * */\n  get getOpacityFromRGB(): boolean {\n    return this._stateObj.getOpacityFromRGB;\n  }\n\n  set getOpacityFromRGB(v) {\n    this.updateTechnique(\"getOpacityFromRGB\", v);\n  }\n\n  /**\n   * pbr工作流是否是金属粗糙度模式\n   * @type{boolean}\n   * */\n  get isMetallicWorkflow(): boolean {\n    return this._stateObj.isMetallicWorkflow;\n  }\n\n  set isMetallicWorkflow(v) {\n    this.updateTechnique(\"isMetallicWorkflow\", v);\n  }\n\n  /**\n   * 是否使用折射模式，默认反射模式\n   * @type{boolean}\n   * */\n  get envMapModeRefract(): boolean {\n    return this._stateObj.envMapModeRefract;\n  }\n\n  set envMapModeRefract(v) {\n    this.updateTechnique(\"envMapModeRefract\", v);\n  }\n\n  /****************************************   state end **************************************** /\n\n  /**\n   * 绘制前准备\n   * @param {Camera} camera 相机\n   * @param {Component} component 组件\n   * @private\n   */\n  prepareDrawing(context: RenderContext, component: Component, primitive) {\n    const camera = context.camera;\n    const scene = camera.scene;\n    const canvas = scene.engine.canvas;\n    const lightMgr = scene.findFeature(LightFeature);\n    const canOIT = (<any>camera._renderPipeline).canOIT;\n\n    /** 光源 uniform values */\n    lightMgr.bindMaterialValues(this);\n    /** 分辨率 */\n    this.setValue(\"u_resolution\", new Vector2(canvas.width, canvas.height));\n    /** clipPlane */\n    for (let i = 0; i < this._clipPlaneCount; i++) {\n      this.setValue(`u_clipPlanes[${i}]`, scene.clipPlanes[i]);\n    }\n\n    /** oit  depth texture */\n    if (canOIT) {\n      this.setValue(\"u_depthSampler\", (<any>camera._renderPipeline).depthTexture);\n    }\n\n    /** 是否需要重新编译 technique */\n    const {\n      ambientLightCount,\n      directLightCount,\n      pointLightCount,\n      spotLightCount,\n      envMapLightCount,\n      useDiffuseEnv,\n      useSpecularEnv\n    } = lightMgr.lightSortAmount;\n    if (\n      !this._technique ||\n      this._ambientLightCount !== ambientLightCount ||\n      this._envMapLightCount !== envMapLightCount ||\n      this._useDiffuseEnv !== useDiffuseEnv ||\n      this._useSpecularEnv !== useSpecularEnv ||\n      this._directLightCount !== directLightCount ||\n      this._pointLightCount !== pointLightCount ||\n      this._spotLightCount !== spotLightCount ||\n      this._clipPlaneCount !== scene.clipPlanes?.length ||\n      this._useOIT !== canOIT\n    ) {\n      this._ambientLightCount = ambientLightCount;\n      this._envMapLightCount = envMapLightCount;\n      this._useDiffuseEnv = useDiffuseEnv;\n      this._useSpecularEnv = useSpecularEnv;\n      this._directLightCount = directLightCount;\n      this._pointLightCount = pointLightCount;\n      this._spotLightCount = spotLightCount;\n      this._clipPlaneCount = scene.clipPlanes?.length;\n      this._useOIT = canOIT;\n      this._generateTechnique(camera, component, primitive);\n    }\n\n    super.prepareDrawing(context, component, primitive);\n  }\n\n  /**\n   * 创建Technique\n   * @param {Camera} camera 相机\n   * @param {Ability} component 组件\n   * @private\n   */\n  _generateTechnique(camera: Camera, component, primitive) {\n    const customMacros = this._generateShaderMacros(camera, component, primitive);\n    const techName = PBRMaterial.TECHNIQUE_NAME;\n    const vertex = PBRMaterial.STATIC_VERTEX_SHADER;\n    const frag = PBRMaterial.STATIC_FRAGMENT_SHADER;\n    const config = this._generateConfig();\n    const lightMgr = camera.scene.findFeature(LightFeature);\n\n    const tech = new RenderTechnique(techName);\n    tech.isValid = true;\n    tech.uniforms = { ...lightMgr.getUniformDefine(), ...config.uniforms };\n    tech.attributes = config.attributes;\n    tech.fragmentPrecision = \"highp\";\n    tech.customMacros = customMacros;\n    tech.states = config.states;\n    tech.vertexShader = vertex;\n    tech.fragmentShader = frag;\n    this._technique = tech;\n    return tech;\n  }\n\n  /**\n   * 创建宏\n   * @param {Camera} camera 相机\n   * @param {Ability} component 组件\n   * @private\n   */\n  _generateShaderMacros(camera: Camera, component, primitive) {\n    const rhi = camera.scene.engine._hardwareRenderer;\n\n    const _macros = [\"O3_NEED_WORLDPOS\"];\n\n    if (!primitive._vertexElementMap.NORMAL || !primitive._vertexElementMap.TANGENT)\n      if (rhi.canIUse(GLCapabilityType.standardDerivatives)) _macros.push(\"HAS_DERIVATIVES\");\n\n    const uniforms = Object.keys(this._values);\n    if (uniforms.indexOf(\"u_baseColorSampler\") > -1) _macros.push(\"HAS_BASECOLORMAP\");\n    if (uniforms.indexOf(\"u_normalSampler\") > -1) _macros.push(\"O3_HAS_NORMALMAP\");\n    if (uniforms.indexOf(\"u_metallicSampler\") > -1) _macros.push(\"HAS_METALMAP\");\n    if (uniforms.indexOf(\"u_roughnessSampler\") > -1) _macros.push(\"HAS_ROUGHNESSMAP\");\n    if (uniforms.indexOf(\"u_metallicRoughnessSampler\") > -1) _macros.push(\"HAS_METALROUGHNESSMAP\");\n    if (uniforms.indexOf(\"u_emissiveSampler\") > -1) _macros.push(\"HAS_EMISSIVEMAP\");\n    if (uniforms.indexOf(\"u_occlusionSampler\") > -1) _macros.push(\"HAS_OCCLUSIONMAP\");\n    if (uniforms.indexOf(\"u_specularGlossinessSampler\") > -1) _macros.push(\"HAS_SPECULARGLOSSINESSMAP\");\n    if (uniforms.indexOf(\"u_perturbationSampler\") > -1) _macros.push(\"HAS_PERTURBATIONMAP\");\n    if (uniforms.indexOf(\"u_reflectionSampler\") > -1) _macros.push(\"HAS_REFLECTIONMAP\");\n    if (uniforms.indexOf(\"u_refractionSampler\") > -1) {\n      this.setValueByParamName(\n        \"PTMMatrix\",\n        new Matrix(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0)\n      );\n      _macros.push(\"HAS_REFRACTIONMAP\");\n    }\n\n    if (this.alphaMode === \"MASK\") {\n      _macros.push(\"ALPHA_MASK\");\n    } else if (this.alphaMode === \"BLEND\" && !this.refractionTexture) {\n      _macros.push(\"ALPHA_BLEND\");\n      if (uniforms.indexOf(\"u_opacitySampler\") > -1) {\n        _macros.push(\"HAS_OPACITYMAP\");\n        if (this.getOpacityFromRGB) {\n          _macros.push(\"GETOPACITYFROMRGB\");\n        }\n      }\n    }\n\n    if (this._envMapLightCount) {\n      _macros.push(\"O3_HAS_ENVMAP_LIGHT\");\n\n      if (this._useDiffuseEnv) _macros.push(\"O3_USE_DIFFUSE_ENV\");\n\n      if (this._useSpecularEnv) _macros.push(\"O3_USE_SPECULAR_ENV\");\n\n      if (rhi.canIUse(GLCapabilityType.shaderTextureLod)) _macros.push(\"HAS_TEX_LOD\");\n    }\n\n    if (this._ambientLightCount) {\n      _macros.push(\"O3_HAS_AMBIENT_LIGHT\");\n    }\n    if (this._directLightCount) _macros.push(`O3_DIRECT_LIGHT_COUNT ${this._directLightCount}`);\n    if (this._pointLightCount) _macros.push(`O3_POINT_LIGHT_COUNT ${this._pointLightCount}`);\n    if (this._spotLightCount) _macros.push(`O3_SPOT_LIGHT_COUNT ${this._spotLightCount}`);\n    if (this._clipPlaneCount) _macros.push(`O3_CLIPPLANE_NUM ${this._clipPlaneCount}`);\n\n    if (this._stateObj.unlit) _macros.push(\"UNLIT\");\n    if (this._stateObj.srgb) _macros.push(\"MANUAL_SRGB\");\n    if (this._stateObj.srgbFast) _macros.push(\"SRGB_FAST_APPROXIMATION\");\n    if (this._stateObj.gamma) _macros.push(\"GAMMA\");\n    if (this._stateObj.isMetallicWorkflow) _macros.push(\"IS_METALLIC_WORKFLOW\");\n    if (this._stateObj.envMapModeRefract) _macros.push(\"ENVMAPMODE_REFRACT\");\n\n    if ((<any>camera._renderPipeline).canOIT) {\n      _macros.push(\"OIT_ENABLE\");\n    }\n    return _macros;\n  }\n\n  /**\n   * 创建Technique配置信息\n   */\n  _generateConfig() {\n    const defaultState = PBRMaterial.TECH_CONFIG.states;\n    const states = {\n      disable: defaultState.disable.slice(),\n      enable: defaultState.enable.slice(),\n      functions: Object.assign({}, defaultState.functions) as any\n    };\n    if (this.doubleSided) {\n      states.disable.push(RenderState.CULL_FACE);\n    } else {\n      switch (this.side) {\n        case Side.FRONT:\n          states.functions.cullFace = [CullFace.BACK];\n          break;\n        case Side.BACK:\n          states.functions.cullFace = [CullFace.FRONT];\n          break;\n        case Side.NONE:\n          states.functions.cullFace = [CullFace.FRONT_AND_BACK];\n          break;\n        default:\n          delete states.functions.cullFace;\n      }\n    }\n    if (this.alphaMode === \"BLEND\" && !this.refractionTexture) {\n      states.enable.push(RenderState.BLEND);\n      if (this.blendFunc.length) {\n        states.functions.blendFunc = this._stateObj.blendFunc;\n      } else {\n        states.functions.blendFuncSeparate = this._stateObj.blendFuncSeparate;\n      }\n      states.functions.depthMask = this._stateObj.depthMask;\n      this.renderType = MaterialType.TRANSPARENT;\n    } else {\n      this.renderType = MaterialType.OPAQUE;\n    }\n\n    const clipPlaneUniforms = {};\n    for (let i = 0; i < this._clipPlaneCount; i++) {\n      clipPlaneUniforms[`u_clipPlanes[${i}]`] = {\n        name: `u_clipPlanes[${i}]`,\n        type: DataType.FLOAT_VEC4\n      };\n    }\n\n    PBRMaterial.TECH_CONFIG.uniforms = Object.assign({}, PBRMaterial.TECH_CONFIG.uniforms, clipPlaneUniforms);\n\n    return Object.assign({}, PBRMaterial.TECH_CONFIG, { states });\n  }\n\n  /**\n   * 创建一个副本\n   * @param {string} name - name\n   */\n  clone(name?: string) {\n    const newMtl = new PBRMaterial(this._engine, name || this.name);\n\n    newMtl.renderType = this.renderType;\n    newMtl.useFog = this.useFog;\n\n    for (const name in this._uniformObj) {\n      const value = this._uniformObj[name];\n      if (value instanceof Texture) {\n        newMtl[name] = value;\n      } else {\n        newMtl[name] = Util.clone(value);\n      }\n    }\n\n    if (this._stateObj) {\n      newMtl._stateObj = Util.clone(this._stateObj);\n    }\n    return newMtl;\n  }\n\n  /**\n   * 默认材质名 ‘PBR_MATERIAL’\n   * @private\n   */\n  static MATERIAL_NAME = \"PBR_MATERIAL\";\n  /**\n   * 默认Technique名 ‘PBR_TECHNIQUE’\n   * @private\n   */\n  static TECHNIQUE_NAME = \"PBR_TECHNIQUE\";\n\n  /**\n   * 顶点着色器\n   * @private\n   */\n  static STATIC_VERTEX_SHADER = vs;\n\n  /**\n   * 片断着色器\n   * @private\n   */\n  static STATIC_FRAGMENT_SHADER = fs;\n\n  /**\n   * 已占用定点着色器 Uniform Vector 个数\n   * @private\n   */\n  static attribUniformVec4 = 12;\n\n  /**\n   * 默认 Technique 配置信息\n   * @private\n   */\n  static TECH_CONFIG = {\n    attributes: {},\n    uniforms: Object.assign({\n      u_baseColorSampler: {\n        name: \"u_baseColorSampler\",\n        paramName: \"baseColorTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_baseColorFactor: {\n        name: \"u_baseColorFactor\",\n        paramName: \"baseColorFactor\",\n        type: DataType.FLOAT_VEC4\n      },\n      u_normalSampler: {\n        name: \"u_normalSampler\",\n        paramName: \"normalTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_normalScale: {\n        name: \"u_normalScale\",\n        paramName: \"normalScale\",\n        type: DataType.FLOAT\n      },\n      u_lightDirection: {\n        name: \"u_lightDirection\",\n        type: DataType.FLOAT_VEC3\n      },\n      u_lightColor: {\n        name: \"u_lightColor\",\n        type: DataType.FLOAT_VEC3\n      },\n      u_metallicRoughnessValue: {\n        name: \"u_metallicRoughnessValue\",\n        paramName: \"metallicRoughness\",\n        type: DataType.FLOAT_VEC2\n      },\n      u_metallicSampler: {\n        name: \"u_metallicSampler\",\n        paramName: \"metallicTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_roughnessSampler: {\n        name: \"u_roughnessSampler\",\n        paramName: \"roughnessTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_metallicRoughnessSampler: {\n        name: \"u_metallicRoughnessSampler\",\n        paramName: \"metallicRoughnessTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_emissiveFactor: {\n        name: \"u_emissiveFactor\",\n        paramName: \"emissiveFactor\",\n        type: DataType.FLOAT_VEC3\n      },\n      u_emissiveSampler: {\n        name: \"u_emissiveSampler\",\n        paramName: \"emissiveTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_occlusionSampler: {\n        name: \"u_occlusionSampler\",\n        paramName: \"occlusionTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_occlusionStrength: {\n        name: \"u_occlusionStrength\",\n        paramName: \"occlusionStrength\",\n        type: DataType.FLOAT\n      },\n      u_alphaCutoff: {\n        name: \"u_alphaCutoff\",\n        paramName: \"alphaCutoff\",\n        type: DataType.FLOAT\n      },\n      u_opacitySampler: {\n        name: \"u_opacitySampler\",\n        paramName: \"opacityTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_specularFactor: {\n        name: \"u_specularFactor\",\n        paramName: \"specularFactor\",\n        type: DataType.FLOAT_VEC3\n      },\n      u_glossinessFactor: {\n        name: \"u_glossinessFactor\",\n        paramName: \"glossinessFactor\",\n        type: DataType.FLOAT\n      },\n      u_specularGlossinessSampler: {\n        name: \"u_specularGlossinessSampler\",\n        paramName: \"specularGlossinessTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_reflectionSampler: {\n        name: \"u_reflectionSampler\",\n        paramName: \"reflectionTexture\",\n        type: DataType.SAMPLER_CUBE\n      },\n      u_PTMMatrix: {\n        name: \"u_PTMMatrix\",\n        paramName: \"PTMMatrix\",\n        type: DataType.FLOAT_MAT4\n      },\n      u_envMapIntensity: {\n        name: \"u_envMapIntensity\",\n        paramName: \"envMapIntensity\",\n        type: DataType.FLOAT\n      },\n      u_refractionRatio: {\n        name: \"u_refractionRatio\",\n        paramName: \"refractionRatio\",\n        type: DataType.FLOAT\n      },\n      u_refractionDepth: {\n        name: \"u_refractionDepth\",\n        paramName: \"refractionDepth\",\n        type: DataType.FLOAT\n      },\n      u_refractionSampler: {\n        name: \"u_refractionSampler\",\n        paramName: \"refractionTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_resolution: {\n        name: \"u_resolution\",\n        paramName: \"resolution\",\n        type: DataType.FLOAT_VEC2\n      },\n      u_perturbationSampler: {\n        name: \"u_perturbationSampler\",\n        paramName: \"perturbationTexture\",\n        type: DataType.SAMPLER_2D\n      },\n      u_perturbationUOffset: {\n        name: \"u_perturbationUOffset\",\n        paramName: \"perturbationUOffset\",\n        type: DataType.FLOAT\n      },\n      u_perturbationVOffset: {\n        name: \"u_perturbationVOffset\",\n        paramName: \"perturbationVOffset\",\n        type: DataType.FLOAT\n      },\n      u_depthSampler: {\n        name: \"u_depthSampler\",\n        type: DataType.SAMPLER_2D\n      }\n    }),\n    states: {\n      disable: [],\n      enable: [],\n      functions: {}\n    }\n  };\n}\n\nexport { PBRMaterial };\n","import { MathUtil, Vector3 } from \"@oasis-engine/math\";\nimport { BlendFunc, DataType, MaterialType, RenderState, UniformSemantic } from \"../base/Constant\";\nimport { BufferGeometry, GeometryRenderer } from \"../geometry\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Material } from \"../material/Material\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport { TextureWrapMode } from \"../texture/enums/TextureWrapMode\";\n\n/**\n * GPU粒子系统渲染类\n * @extends GeometryRenderer\n */\nexport class GPUParticleSystem extends GeometryRenderer {\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _time: number;\n  private _isInit: boolean;\n  private _isStart: boolean;\n  public maxCount: number;\n  public options: {};\n  public getOptions: any;\n  public rotateToVelocity: boolean;\n  public blendFunc: number[];\n  public blendFuncSeparate: number[];\n  public useOriginColor: boolean;\n  public fragmentShader: string;\n  public vertexShader: string;\n  public particleTex;\n  public fadeIn: boolean;\n  public fadeOut: boolean;\n  public particleMaskTex;\n  public isScaleByLifetime: boolean;\n  public scaleFactor: number;\n  public spriteSheet: any[];\n  public is2d: boolean;\n  public interleaved: boolean;\n\n  /**\n   * @constructor\n   * @param {Entity} entity 节点对象\n   */\n  constructor(entity) {\n    super(entity);\n    this._time = 0; // 渲染时间，单位秒\n    this._isInit = false; // 是否完成初始化\n    this._isStart = false; // 是否开始粒子动画\n  }\n\n  /**\n   * 粒子发射参数\n   * @typedef {Object} ParticleParam\n   * @property {Vector3} position 位置，默认[0, 0, 0]\n   * @property {Vector3} velocity 速度，默认[0, 0, 0]\n   * @property {Vector3} acceleration 加速度，默认[0, 0, 0]\n   * @property {Vector3} color  颜色，默认[1, 1, 1]，范围 0 ~ 1\n   * @property {number} size  大小，默认 10，范围  >0\n   * @property {number} startAngle  初始旋转角度，默认0，范围 0 ~ 2*PI\n   * @property {number} rotateRate  自转旋转角速率，默认0\n   * @property {number} lifetime  生命周期，默认5，范围  >0\n   * @property {number} alpha 透明度，默认1，范围 0 ~ 1\n   * @property {Vector3} positionRandomness  位置随机因子，默认[0,0,0]，范围  >0\n   * @property {Array} positionArray  固定位置数组\n   * @property {Vector3} velocityRandomness  速度随机因子，默认[0, 0, 0]，范围  >0\n   * @property {Vector3} accelerationRandomness  加速度随机因子，默认[0, 0, 0]，范围  >0\n   * @property {number} colorRandomness  颜色随机因子，默认0，范围  0 ~ 1\n   * @property {number} sizeRandomness  大小随机因子，默认0，范围  0 ~ 1\n   * @property {number} alphaRandomness  透明度随机因子，默认0，范围 0 ~ 1\n   * @property {number} startAngleRandomness  初始旋转角度随机因子，默认0，范围 0 ~ 1\n   * @property {number} rotateRateRandomness  自转旋转角速率随机因子，默认0，范围   >0\n   * @property {number} startTimeRandomness  每个粒子出现的时间点随机因子，单位秒   >0\n   */\n\n  /**\n   * 初始化\n   * @param {ParticleProps} props 初始化参数\n   * @param {number} [ParticleProps.maxCount = 1000] 最大粒子数\n   * @param {boolean} [ParticleProps.once = false] 是否只发射一帧, 默认\n   * @param {ParticleParam} [ParticleProps.options] 发射参数\n   * @param {Function} [ParticleProps.getOptions] 获取更新参数（每帧回调）\n   * @param {boolean} [ParticleProps.rotateToVelocity] 是否跟随粒子运动速度的方向。\n   * @param {Array} [ParticleProps.blendFunc] webgl 混合因子，默认透明度混合 [SRC_ALPHA, ONE_MINUS_SRC_ALPHA]\n   * @param {Array} [ParticleProps.blendFuncSeparate] webgl 混合因子alpha通道分离，优先级高于blendFunc，如无指定使用blendFunc\n   * @param {boolean} [ParticleProps.useOriginColor = true] 是否使用图片原色: true(使用图片原色)、 false(图片原色混合生成的颜色)\n   * @param {string} [ParticleProps.fragmentShader] 自定义片元着色器\n   * @param {string} [ParticleProps.vertexShader] 自定义定点着色器\n   * @param {Texture} [ParticleProps.texture] 粒子贴图\n   * @param {Texture} [ParticleProps.maskTexture] 粒子遮罩贴图\n   * @param {boolean} [ParticleProps.isScaleByLifetime = false] 是否随生命周期缩小至消失\n   * @param {boolean} [ParticleProps.fadeIn = false] 是否添加淡入效果\n   * @param {boolean} [ParticleProps.fadeOut = false] 是否添加淡出效果\n   * @param {number} [ParticleProps.scaleFactor = 1] 粒子随时间scale参数\n   * @param {Array} [ParticleProps.spriteSheet] 雪碧图数据\n   * @param {boolean} [ParticleProps.is2d] 是否是2D旋转\n   */\n\n  initialize(props) {\n    this.maxCount = props.maxCount !== undefined ? props.maxCount : 1000;\n    this.once = props.once || false;\n    this.options = props.options || {};\n    this.getOptions = props.getOptions;\n    this.rotateToVelocity = props.rotateToVelocity || false;\n    if (props.blendFuncSeparate) {\n      this.blendFuncSeparate = props.blendFuncSeparate;\n    }\n    this.blendFunc = props.blendFunc || [BlendFunc.SRC_ALPHA, BlendFunc.ONE_MINUS_SRC_ALPHA];\n    this.useOriginColor = props.useOriginColor !== undefined ? props.useOriginColor : true;\n    this.fragmentShader = props.fragmentShader || null;\n    this.vertexShader = props.vertexShader || null;\n    this.particleTex = props.texture || null;\n    this.fadeIn = props.fadeIn || false;\n    this.fadeOut = props.fadeOut === undefined ? true : props.fadeOut;\n    this.particleMaskTex = props.maskTexture || null;\n    this.isScaleByLifetime = props.isScaleByLifetime || false;\n    this.scaleFactor = props.scaleFactor || 1;\n    this.spriteSheet = props.spriteSheet || null;\n    this.is2d = props.is2d === undefined ? true : props.is2d;\n    this.interleaved = props.spriteSheet || true;\n\n    this.setMaterial();\n\n    /** @private */\n    this.geometry = this._createGeometry();\n\n    this._isInit = true;\n\n    const options = this.getOptions ? this.getOptions(this._time) : this.options;\n\n    for (let x = 0; x < this.maxCount; x++) {\n      this._spawnParticle(options, x);\n    }\n    this._vertexBuffer.setData(this._vertices);\n    return this;\n  }\n\n  /**\n   * 更新参数\n   * @param {number} deltaTime 帧间隔时间\n   * @private\n   */\n  update(deltaTime) {\n    if (!this._isInit || !this._isStart) {\n      return;\n    }\n\n    this._time += deltaTime / 1000;\n    this.material.setValue(\"uTime\", this._time);\n  }\n\n  /**\n   * 设置粒子发射参数\n   * @param {ParticleParam} options 发射参数\n   */\n  setOptions(options) {\n    if (options !== undefined) {\n      this.options = { ...this.options, ...options };\n    }\n\n    return this;\n  }\n\n  /**\n   * 激活发射模块，重新开始发射 */\n  start() {\n    this._isStart = true;\n    this._time = 0;\n    this.material.setValue(\"uActive\", 1.0);\n  }\n\n  /**\n   * 停止发射\n   */\n  stop() {\n    this.material.setValue(\"uActive\", 0.0);\n  }\n\n  /**\n   * 销毁资源\n   * @private\n   */\n  destroy() {\n    super.destroy();\n    this.options = null;\n    if (this.particleTex) {\n      this.particleTex = null;\n    }\n    if (this.particleMaskTex) {\n      this.particleMaskTex = null;\n    }\n  }\n\n  /**\n   * 创建材质\n   * @private\n   */\n  setMaterial() {\n    const technique = this._createTechnique();\n    const material = new Material(this.engine, \"particleMaterial\");\n    material.technique = technique;\n    material.renderType = MaterialType.TRANSPARENT;\n\n    material.setValue(\"uOnce\", this.once ? 1.0 : 0.0);\n    material.setValue(\"uTime\", this._time);\n\n    if (this.particleTex) {\n      this.particleTex.wrapModeU = this.particleTex.wrapModeV = TextureWrapMode.Clamp;\n      material.setValue(\"particleTex\", this.particleTex);\n    }\n    if (this.particleMaskTex) {\n      this.particleMaskTex.wrapModeU = this.particleTex.wrapModeV = TextureWrapMode.Clamp;\n      material.setValue(\"particleMaskTex\", this.particleMaskTex);\n    }\n    this.material = material;\n  }\n\n  /**\n   * 创建 Technique\n   * @private\n   */\n  _createTechnique() {\n    const cfg = {\n      attributes: {\n        positionStart: {\n          name: \"positionStart\",\n          semantic: \"POSITIONSTART\",\n          type: DataType.FLOAT_VEC3\n        },\n        color: {\n          name: \"color\",\n          semantic: \"COLOR\",\n          type: DataType.FLOAT_VEC3\n        },\n        alpha: {\n          name: \"alpha\",\n          semantic: \"ALPHA\",\n          type: DataType.FLOAT\n        },\n        acceleration: {\n          name: \"acceleration\",\n          semantic: \"ACCELERATION\",\n          type: DataType.FLOAT_VEC3\n        },\n        velocity: {\n          name: \"velocity\",\n          semantic: \"VELOCITY\",\n          type: DataType.FLOAT_VEC3\n        },\n        startAngle: {\n          name: \"startAngle\",\n          semantic: \"STARTANGLE\",\n          type: DataType.FLOAT\n        },\n        lifeTime: {\n          name: \"lifeTime\",\n          semantic: \"LIFETIME\",\n          type: DataType.FLOAT\n        },\n        startTime: {\n          name: \"startTime\",\n          semantic: \"STARTTIME\",\n          type: DataType.FLOAT\n        },\n        size: {\n          name: \"size\",\n          semantic: \"SIZE\",\n          type: DataType.FLOAT\n        },\n        rotateRate: {\n          name: \"rotateRate\",\n          semantic: \"ROTATERATE\",\n          type: DataType.FLOAT\n        },\n        scaleFactor: {\n          name: \"scaleFactor\",\n          semantic: \"SCALEFACTOR\",\n          type: DataType.FLOAT\n        },\n        uv: {\n          name: \"uv\",\n          semantic: \"UV\",\n          type: DataType.FLOAT_VEC3\n        },\n        normalizedUv: {\n          name: \"normalizedUv\",\n          semantic: \"NORMALIZED_UV\",\n          type: DataType.FLOAT_VEC2\n        }\n      },\n      uniforms: {\n        uOnce: {\n          name: \"uOnce\",\n          type: DataType.FLOAT\n        },\n        uActive: {\n          name: \"uActive\",\n          type: DataType.FLOAT\n        },\n        uTime: {\n          name: \"uTime\",\n          type: DataType.FLOAT\n        },\n        matModelViewProjection: {\n          name: \"matModelViewProjection\",\n          semantic: UniformSemantic.MODELVIEWPROJECTION,\n          type: DataType.FLOAT_MAT4\n        },\n        matModelView: {\n          name: \"matModelView\",\n          semantic: UniformSemantic.MODELVIEW,\n          type: DataType.FLOAT_MAT4\n        }\n      } as any,\n      states: {\n        enable: [RenderState.BLEND],\n        functions: {\n          // blendFunc: this.blendFunc,\n          // todo question\n          depthMask: [false]\n        } as any\n      }\n    };\n\n    if (this.is2d) {\n      cfg.uniforms.matViewInverse = {\n        name: \"matViewInverse\",\n        semantic: UniformSemantic.VIEWINVERSE,\n        type: DataType.FLOAT_MAT4\n      };\n\n      cfg.uniforms.matProjection = {\n        name: \"matProjection\",\n        semantic: UniformSemantic.PROJECTION,\n        type: DataType.FLOAT_MAT4\n      };\n\n      cfg.uniforms.matView = {\n        name: \"matView\",\n        semantic: UniformSemantic.VIEW,\n        type: DataType.FLOAT_MAT4\n      };\n\n      cfg.uniforms.matWorld = {\n        name: \"matWorld\",\n        semantic: UniformSemantic.MODEL,\n        type: DataType.FLOAT_MAT4\n      };\n    } else {\n      // @ts-ignore\n      cfg.states.disable = [RenderState.CULL_FACE];\n    }\n\n    if (this.blendFuncSeparate) {\n      // @ts-ignore\n      cfg.states.functions.blendFuncSeparate = this.blendFuncSeparate;\n    } else {\n      // @ts-ignore\n      cfg.states.functions.blendFunc = this.blendFunc;\n    }\n    if (this.particleTex) {\n      cfg.uniforms.particleTex = {\n        name: \"particleTex\",\n        type: DataType.SAMPLER_2D\n      };\n    }\n    if (this.particleMaskTex) {\n      cfg.uniforms.particleMaskTex = {\n        name: \"particleMaskTex\",\n        type: DataType.SAMPLER_2D\n      };\n    }\n\n    const tech = new RenderTechnique(\"particleTech\");\n    tech.isValid = true;\n    tech.uniforms = cfg.uniforms;\n    tech.attributes = cfg.attributes;\n    tech.states = cfg.states;\n    tech.vertexShader = this._createVertexShader();\n    tech.fragmentShader = this._createFragmentShader();\n\n    return tech;\n  }\n\n  /**\n   * 创建几何体\n   * @private\n   */\n  _createGeometry() {\n    const geometry = new BufferGeometry(this._entity.engine, \"particleGeometry\");\n    const vertexStride = 96;\n    const vertexFloatCount = this.maxCount * 4 * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    const indices = new Uint16Array(6 * this.maxCount);\n\n    for (let i = 0, idx = 0; i < this.maxCount; ++i) {\n      let startIndex = i * 4;\n      indices[idx++] = startIndex + 0;\n      indices[idx++] = startIndex + 1;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex + 0;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex + 3;\n    }\n\n    const vertexElements = [\n      new VertexElement(\"POSITIONSTART\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"VELOCITY\", 12, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"ACCELERATION\", 24, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"COLOR\", 36, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"ALPHA\", 48, VertexElementFormat.Float, 0),\n      new VertexElement(\"SIZE\", 52, VertexElementFormat.Float, 0),\n      new VertexElement(\"ROTATERATE\", 56, VertexElementFormat.Float, 0),\n      new VertexElement(\"STARTTIME\", 60, VertexElementFormat.Float, 0),\n      new VertexElement(\"LIFETIME\", 64, VertexElementFormat.Float, 0),\n      new VertexElement(\"STARTANGLE\", 68, VertexElementFormat.Float, 0),\n      new VertexElement(\"SCALEFACTOR\", 72, VertexElementFormat.Float, 0),\n      new VertexElement(\"UV\", 76, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"NORMALIZED_UV\", 88, VertexElementFormat.Vector2, 0)\n    ];\n    const vertexBuffer = new Buffer(\n      this.engine,\n      BufferBindFlag.VertexBuffer,\n      vertexFloatCount * 4,\n      BufferUsage.Dynamic\n    );\n    const indexBuffer = new Buffer(this.engine, BufferBindFlag.IndexBuffer, indices, BufferUsage.Dynamic);\n\n    geometry.setVertexBufferBinding(vertexBuffer, vertexStride);\n    geometry.setIndexBufferBinding(indexBuffer, IndexFormat.UInt16);\n    geometry.setVertexElements(vertexElements);\n    geometry.addSubGeometry(0, indices.length);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride;\n    this._vertices = vertices;\n    return geometry;\n  }\n\n  /**\n   * 粒子发射\n   * @param {Options} options\n   * @private\n   */\n  _spawnParticle(options, i) {\n    const position: Vector3 = options.position !== undefined ? options.position.clone() : new Vector3();\n    const positionRandomness: Vector3 =\n      options.positionRandomness !== undefined ? options.positionRandomness.clone() : new Vector3();\n    const positionArray = options.positionArray;\n    const velocity: Vector3 = options.velocity !== undefined ? options.velocity.clone() : new Vector3();\n    const velocityRandomness: Vector3 =\n      options.velocityRandomness !== undefined ? options.velocityRandomness.clone() : new Vector3();\n    const color: Vector3 = options.color !== undefined ? options.color.clone() : new Vector3(1, 1, 1);\n    const colorRandomness = options.colorRandomness !== undefined ? options.colorRandomness : 1;\n    const alpha = options.alpha !== undefined ? options.alpha : 1;\n    const alphaRandomness = options.alphaRandomness !== undefined ? options.alphaRandomness : 0;\n    const lifetime = options.lifetime !== undefined ? options.lifetime : 5;\n    let size = options.size !== undefined ? options.size : 1;\n    const sizeRandomness = options.sizeRandomness !== undefined ? options.sizeRandomness : 0;\n    const smoothPosition = options.smoothPosition !== undefined ? options.smoothPosition : false;\n    const startTimeRandomness = options.startTimeRandomness !== undefined ? options.startTimeRandomness : 0;\n\n    const acceleration: Vector3 = options.acceleration !== undefined ? options.acceleration.clone() : new Vector3();\n    const accelerationRandomness: Vector3 =\n      options.accelerationRandomness !== undefined ? options.accelerationRandomness.clone() : new Vector3();\n    const startAngle = options.startAngle !== undefined ? options.startAngle : 0;\n    const startAngleRandomness = options.startAngleRandomness !== undefined ? options.startAngleRandomness : 0;\n    const rotateRate = options.rotateRate !== undefined ? options.rotateRate : 0;\n    const rotateRateRandomness = options.rotateRateRandomness !== undefined ? options.rotateRateRandomness : 0;\n    const scaleFactor = options.scaleFactor !== undefined ? options.scaleFactor : 1;\n\n    let x = position.x;\n    let y = position.y;\n    let z = position.z;\n\n    if (positionArray) {\n      if (positionArray.length !== this.maxCount) {\n        throw Error(\"The length of positionArray must be equal to maxCount.\");\n      }\n\n      x += positionArray[i].x;\n      y += positionArray[i].y;\n      z += positionArray[i].z;\n    } else {\n      x += this._getRandom() * positionRandomness.x;\n      y += this._getRandom() * positionRandomness.y;\n      z += this._getRandom() * positionRandomness.z;\n    }\n\n    if (smoothPosition === true) {\n      x += -(velocity.x * this._getRandom());\n      y += -(velocity.y * this._getRandom());\n      z += -(velocity.z * this._getRandom());\n    }\n\n    const velX = velocity.x + this._getRandom() * velocityRandomness.x;\n    const velY = velocity.y + this._getRandom() * velocityRandomness.y;\n    const velZ = velocity.z + this._getRandom() * velocityRandomness.z;\n\n    const accX = acceleration.x + this._getRandom() * accelerationRandomness.x;\n    const accY = acceleration.y + this._getRandom() * accelerationRandomness.y;\n    const accZ = acceleration.z + this._getRandom() * accelerationRandomness.z;\n\n    color.x = MathUtil.clamp(color.x + this._getRandom() * colorRandomness, 0, 1);\n    color.y = MathUtil.clamp(color.y + this._getRandom() * colorRandomness, 0, 1);\n    color.z = MathUtil.clamp(color.z + this._getRandom() * colorRandomness, 0, 1);\n    size = Math.max(size + this._getRandom() * sizeRandomness * size * 2, 0);\n    const lifeTime = lifetime + this._getRandom() * lifetime;\n    const sa = startAngle + this._getRandom() * Math.PI * startAngleRandomness * 2;\n    const rr = rotateRate + this._getRandom() * rotateRateRandomness;\n    const particleAlpha = MathUtil.clamp(alpha + this._getRandom() * alphaRandomness, 0, 1);\n    const startTime = Math.random() * startTimeRandomness;\n\n    const vertices = this._vertices;\n    for (let j = 0; j < 4; j++) {\n      const k = ((i * 4 + j) * this._vertexStride) / 4;\n\n      // POSITIONSTART\n      vertices[k] = x;\n      vertices[k + 1] = y;\n      vertices[k + 2] = z;\n      // VELOCITY\n      vertices[k + 3] = velX;\n      vertices[k + 4] = velY;\n      vertices[k + 5] = velZ;\n      // ACCELERATION\n      vertices[k + 6] = accX;\n      vertices[k + 7] = accY;\n      vertices[k + 8] = accZ;\n      //COLOR\n      vertices[k + 9] = color[0];\n      vertices[k + 10] = color[1];\n      vertices[k + 11] = color[2];\n      //ALPHA\n      vertices[k + 12] = particleAlpha;\n      //SIZE\n      vertices[k + 13] = size;\n      //ROTATERATE\n      vertices[k + 14] = rr;\n      //STARTTIME\n      vertices[k + 15] = startTime;\n      //LIFETIME\n      vertices[k + 16] = lifeTime;\n      //STARTANGLE\n      vertices[k + 17] = sa;\n      //SCALEFACTOR\n      vertices[k + 18] = scaleFactor;\n\n      this._setUvs(i, j, k);\n    }\n  }\n\n  /**\n   * 设置每个粒子的uv\n   * @param i {number} 第i个粒子\n   * @param j {number} 单个粒子四个顶点中的第j个\n   * @param k {number} 所有粒子顶点中的第k个\n   */\n  private _setUvs(i: number, j: number, k: number) {\n    const { spriteSheet } = this;\n    const { particleTex } = this;\n    let rects;\n    const normalizedRects: any[] = [\n      [-0.5, -0.5],\n      [0.5, -0.5],\n      [0.5, 0.5],\n      [-0.5, 0.5]\n    ];\n    if (particleTex) {\n      const width = particleTex.image ? particleTex.image.width : particleTex.width;\n      const height = particleTex.image ? particleTex.image.height : particleTex.height;\n\n      if (spriteSheet) {\n        const { x, y, w, h } = spriteSheet[i % spriteSheet.length];\n\n        const u = x / width;\n        const v = y / height;\n        const p = u + w / width;\n        const q = v + h / height;\n\n        rects = [\n          [u, q, h / w], // left bottom\n          [p, q, h / w], // right bottom\n          [p, v, h / w], // right top\n          [u, v, h / w] // left top\n        ];\n      } else {\n        rects = [\n          [0, 0, height / width],\n          [1, 0, height / width],\n          [1, 1, height / width],\n          [0, 1, height / width]\n        ];\n      }\n    } else {\n      rects = [\n        [0, 0, 1],\n        [1, 0, 1],\n        [1, 1, 1],\n        [0, 1, 1]\n      ];\n    }\n    const vertices = this._vertices;\n\n    //UV\n    const uv = rects[j];\n    vertices[k + 19] = uv[0];\n    vertices[k + 20] = uv[1];\n    vertices[k + 21] = uv[2];\n    //NORMALIZED_U\n    const nuv = normalizedRects[j];\n    vertices[k + 22] = nuv[0];\n    vertices[k + 23] = nuv[1];\n  }\n\n  /**\n   * 获取随机数\n   * @returns {number}\n   * @private\n   */\n  _getRandom() {\n    return Math.random() - 0.5;\n  }\n\n  /**\n   * 获取着色器代码\n   * @returns {string}\n   * @private\n   */\n  _getShader() {\n    return {\n      vertexShader: `\n        precision highp float;\n        precision highp int;\n\n        attribute float lifeTime;\n        attribute float startTime;\n        attribute float size;\n        attribute float rotateRate;\n        attribute vec3 velocity;\n        attribute vec3 acceleration;\n        attribute vec3 positionStart;\n        attribute vec3 color;\n        attribute float alpha;\n        attribute float startAngle;\n        attribute float scaleFactor;\n        attribute vec3 uv;\n        attribute vec2 normalizedUv;\n        \n        uniform float uTime;\n        uniform float uOnce;\n        uniform float uActive;\n        uniform mat4 matModelViewProjection;\n        uniform mat4 matModelView;\n        uniform mat4 matViewInverse;\n        uniform mat4 matView;\n        uniform mat4 matProjection;\n        uniform mat4 matWorld;\n\n        varying vec3 v_color;\n        varying float v_alpha;\n        varying float lifeLeft;\n        varying mat2 vTextureMat;\n        varying vec2 v_uv;\n\n        mat2 rotation2d(float angle) {\n          float s = sin(angle);\n          float c = cos(angle);\n        \n          return mat2(\n            c, -s,\n            s, c\n          );\n        }\n\n        void main()\n        {\n          v_color = color;\n          v_uv = uv.xy;\n          v_alpha = alpha;\n          \n          // float deltaTime = max(mod(uTime, lifeTime), 0.0);\n          // 真实的生命周期\n          float life = lifeTime + startTime;\n          // 当前已过去的时间\n          float deltaTime = max(mod(uTime, life) - startTime, 0.0);\n\n          bool isDying = false;\n\n          if (uOnce == 1.0 || uActive == 0.0) {\n            isDying = true;\n          }\n\n          if ((isDying && uTime > life)) {\n            deltaTime = life;\n          }\n\n          // 没出生就代表死亡，否则没出生就显示了\n          if (deltaTime == 0.0) {\n            deltaTime = life;\n          }\n\n          lifeLeft = 1.0 - deltaTime / lifeTime;\n          float scale = size;\n          vec3 position = positionStart + (velocity + acceleration * deltaTime * 0.5) * deltaTime;\n      `,\n      postionShader: `\n        gl_Position = matModelViewProjection * vec4(position, 1.0 );\n      `,\n      sizeVertexShader: `\n          scale *= pow(scaleFactor, deltaTime);\n      `,\n      isScaleByLifetimeVertexShader: `\n          scale *= lifeLeft;\n      `,\n      rotateToVelocityVertexShader: `\n        vec3 v = velocity + acceleration * deltaTime;\n        float angle = atan(v.z, v.x) * 2.0;\n        float s = sin(angle);\n        float c = cos(angle);\n      `,\n      rotationVertexShader: `\n        float deltaAngle = deltaTime * rotateRate;\n        float angle = startAngle + deltaAngle;\n        float s = sin(angle);\n        float c = cos(angle);\n\n      `,\n      rotation2dShader: `\n        vec2 rotatedPoint = rotation2d(angle) * vec2(normalizedUv.x, normalizedUv.y * uv.z);\n\n        vec3 basisX = matViewInverse[0].xyz;\n        vec3 basisZ = matViewInverse[1].xyz;\n\n        vec3 localPosition = vec3(basisX * rotatedPoint.x + \n                    basisZ * rotatedPoint.y) * scale + position;\n\n        gl_Position = matProjection * matView * vec4(localPosition + matWorld[3].xyz, 1.);\n      `,\n      rotation3dShader: `\n        vec4 rotatedPoint = vec4((normalizedUv.x * c + normalizedUv.y * uv.z * s) * scale , 0., \n                                 (normalizedUv.x * s - normalizedUv.y * uv.z * c) * scale, 1.);\n      \n        vec4 orientation = vec4(0, 0, 0, 1);\n        vec4 q2 = orientation + orientation;\n        vec4 qx = orientation.xxxw * q2.xyzx;\n        vec4 qy = orientation.xyyw * q2.xyzy;\n        vec4 qz = orientation.xxzw * q2.xxzz;\n      \n        mat4 localMatrix = mat4(\n            (1.0 - qy.y) - qz.z, \n            qx.y + qz.w, \n            qx.z - qy.w,\n            0,\n      \n            qx.y - qz.w, \n            (1.0 - qx.x) - qz.z, \n            qy.z + qx.w,\n            0,\n      \n            qx.z + qy.w, \n            qy.z - qx.w, \n            (1.0 - qx.x) - qy.y,\n            0,\n      \n            position.x, position.y, position.z, 1);\n\n        rotatedPoint = localMatrix * rotatedPoint;\n\n        gl_Position = matModelViewProjection * rotatedPoint;\n      `,\n\n      fragmentShader: `\n        precision mediump float;\n        precision mediump int;\n\n        varying vec3 v_color;\n        varying float v_alpha;\n        varying float lifeLeft;\n        varying vec2 v_uv;\n        uniform sampler2D particleTex;\n        uniform sampler2D particleMaskTex;\n\n        void main()\n        {\n          float alphaFactor = 1.0;\n      `,\n      fadeInFragmentShader: `\n        float fadeInFactor = step(0.5, lifeLeft);\n        alphaFactor = 2.0 * fadeInFactor * (1.0 - lifeLeft) + (1.0 - fadeInFactor);\n      `,\n      fadeOutFragmentShader: `\n        float fadeOutFactor = step(0.5, lifeLeft);\n        alphaFactor = alphaFactor * 2.0 * (1.0 - fadeOutFactor) * lifeLeft + alphaFactor * fadeOutFactor;\n      `,\n      noImgFragmentShader: ` \n        gl_FragColor = vec4( v_color, alphaFactor * v_alpha);\n      `,\n      imgFragmentShader: `\n        vec4 tex = texture2D(particleTex, v_uv);\n      `,\n      originColorFragmentShader: `\n        gl_FragColor = vec4(tex.rgb, alphaFactor * tex.a * v_alpha);\n      `,\n      createColorFragmentShader: `\n        gl_FragColor = vec4(v_color * tex.rgb, alphaFactor * tex.a * v_alpha);\n      `,\n      createColorWithMaskFragmentShader: `\n        vec4 maskTex = texture2D( particleMaskTex, v_uv);\n        gl_FragColor = vec4(v_color * tex.rgb + maskTex.a, alphaFactor * tex.a * v_alpha);\n      `\n    };\n  }\n\n  /**\n   * 创建顶点着色器\n   * @returns {string}\n   * @private\n   */\n  _createVertexShader() {\n    const shader = this._getShader();\n\n    let vertexShader = \"\";\n    if (this.vertexShader) {\n      vertexShader = this.vertexShader;\n    } else {\n      vertexShader = shader.vertexShader;\n      if (this.isScaleByLifetime) {\n        vertexShader += shader.isScaleByLifetimeVertexShader;\n      } else {\n        vertexShader += shader.sizeVertexShader;\n      }\n\n      if (this.rotateToVelocity) {\n        vertexShader += shader.rotateToVelocityVertexShader;\n      } else {\n        vertexShader += shader.rotationVertexShader;\n      }\n\n      // 2D 和 3D 的旋转算法不同\n      if (this.is2d) {\n        vertexShader += shader.rotation2dShader;\n      } else {\n        vertexShader += shader.rotation3dShader;\n      }\n\n      vertexShader += \"}\";\n    }\n    return vertexShader;\n  }\n\n  /**\n   * 创建片元着色器\n   * @returns {string}\n   * @private\n   */\n  _createFragmentShader() {\n    const shader = this._getShader();\n\n    let fragmentShader = \"\";\n    if (this.fragmentShader) {\n      fragmentShader = this.fragmentShader;\n    } else {\n      fragmentShader = shader.fragmentShader;\n      if (this.fadeIn) {\n        fragmentShader += shader.fadeInFragmentShader;\n      }\n\n      if (this.fadeOut) {\n        fragmentShader += shader.fadeOutFragmentShader;\n      }\n\n      if (!this.particleTex) {\n        fragmentShader += shader.noImgFragmentShader;\n      } else {\n        fragmentShader += shader.imgFragmentShader;\n        if (this.useOriginColor) {\n          fragmentShader += shader.originColorFragmentShader;\n        } else {\n          if (this.particleMaskTex) {\n            fragmentShader += shader.createColorWithMaskFragmentShader;\n          } else {\n            fragmentShader += shader.createColorFragmentShader;\n          }\n        }\n      }\n      fragmentShader += \"}\";\n    }\n    return fragmentShader;\n  }\n}\n","import { BlendFunc } from \"../base/Constant\";\nimport { GPUParticleSystem } from \"./particle\";\n\n/**\n * 暂时只为编辑器使用\n */\nexport class Particle extends GPUParticleSystem {\n  private _config;\n  private _options;\n\n  constructor(entity) {\n    super(entity);\n  }\n\n  init(props) {\n    this._options = {\n      position: props.__position,\n      positionRandomness: props.__positionRandomness,\n      velocity: props.__velocity,\n      velocityRandomness: props.__velocityRandomness,\n      acceleration: props.__acceleration,\n      accelerationRandomness: props.__accelerationRandomness,\n      color: props.__color,\n      colorRandomness: props.__colorRandomness,\n      lifetime: props.__lifetime,\n      size: props.__size,\n      sizeRandomness: props.__sizeRandomness,\n      startAngle: props.__startAngle,\n      startAngleRandomness: props.__startAngleRandomness,\n      rotateRate: props.__rotateRate,\n      rotateRateRandomness: props.__rotateRateRandomness,\n      scaleFactor: props.__scaleFactor,\n      alpha: props.__alpha,\n      alphaRandomness: props.__alphaRandomness,\n      startTimeRandomness: props.__startTimeRandomness\n    };\n    // 粒子发射器环境参数\n    this._config = {\n      maxCount: props.__maxCount,\n      once: props.__once,\n      rotateToVelocity: props.__rotateToVelocity,\n      isScaleByLifetime: props.__isScaleByLifetime,\n      fadeIn: props.__fadeIn,\n      fadeOut: props.__fadeOut,\n      texture: props.__texture ? props.__texture : null,\n      maskTexture: props.__maskTexture ? props.__maskTexture : null,\n      // blendFunc: [props.__blendFunc01, props.__blendFunc02],\n      useOriginColor: props.__useOriginColor,\n      is2d: props.__is2d,\n      options: this._options\n    };\n    if (props.__spriteSheet) {\n      if (typeof props.__spriteSheet === \"object\" && props.__spriteSheet.length) {\n        this._config.spriteSheet = props.__spriteSheet;\n      } else if (typeof props.__spriteSheet === \"string\") {\n        try {\n          const spriteSheet = JSON.parse(props.__spriteSheet);\n          if (spriteSheet.length) {\n            this._config.spriteSheet = spriteSheet;\n          }\n        } catch (e) {}\n      }\n    }\n    if (props.__positionArray) {\n      if (typeof props.__positionArray === \"object\" && props.__positionArray.length) {\n        this._options.positionArray = props.__positionArray;\n      } else if (typeof props.__positionArray === \"string\") {\n        try {\n          const positionArray = JSON.parse(props.__positionArray);\n          if (positionArray.length) {\n            this._options.positionArray = positionArray;\n          }\n        } catch (e) {}\n      }\n    }\n    if (props.__separate) {\n      this._config.blendFuncSeparate = [\n        BlendFunc[props.__srcRGB || \"SRC_ALPHA\"],\n        BlendFunc[props.__dstRGB || \"ONE_MINUS_SRC_ALPHA\"],\n        BlendFunc[props.__srcAlpha || \"SRC_ALPHA\"],\n        BlendFunc[props.__dstAlpha || \"ONE_MINUS_SRC_ALPHA\"]\n      ];\n    } else if (props.__src && props.__dst) {\n      this._config.blendFunc = [BlendFunc[props.__src], BlendFunc[props.__dst]];\n    }\n    this.initialize(this._config);\n    if (props.__defaultStart === true || props.__defaultStart === undefined) {\n      this.start();\n    }\n  }\n\n  updateOption(key, value) {\n    this._options = {\n      ...this._options,\n      [key]: value\n    };\n    this._config = {\n      ...this._config,\n      options: {\n        ...this._options\n      }\n    };\n    this.initialize(this._config);\n    this.start();\n  }\n\n  updateConfig(key, value) {\n    this._config = {\n      ...this._config,\n      [key]: value\n    };\n    this.initialize(this._config);\n    this.start();\n  }\n\n  set __position(value) {\n    this.updateOption(\"position\", value);\n  }\n\n  set __positionRandomness(value) {\n    this.updateOption(\"positionRandomness\", value);\n  }\n\n  set __velocity(value) {\n    this.updateOption(\"velocity\", value);\n  }\n\n  set __velocityRandomness(value) {\n    this.updateOption(\"velocityRandomness\", value);\n  }\n\n  set __acceleration(value) {\n    this.updateOption(\"acceleration\", value);\n  }\n\n  set __accelerationRandomness(value) {\n    this.updateOption(\"accelerationRandomness\", value);\n  }\n\n  set __color(value) {\n    this.updateOption(\"color\", value);\n  }\n\n  set __colorRandomness(value) {\n    this.updateOption(\"colorRandomness\", value);\n  }\n\n  set __lifetime(value) {\n    this.updateOption(\"lifetime\", value);\n  }\n\n  set __size(value) {\n    this.updateOption(\"size\", value);\n  }\n\n  set __sizeRandomness(value) {\n    this.updateOption(\"sizeRandomness\", value);\n  }\n\n  set __startAngle(value) {\n    this.updateOption(\"startAngle\", value);\n  }\n\n  set __startAngleRandomness(value) {\n    this.updateOption(\"startAngleRandomness\", value);\n  }\n\n  set __rotateRate(value) {\n    this.updateOption(\"rotateRate\", value);\n  }\n\n  set __rotateRateRandomness(value) {\n    this.updateOption(\"rotateRateRandomness\", value);\n  }\n\n  set __scaleFactor(value) {\n    this.updateOption(\"scaleFactor\", value);\n  }\n\n  set __alpha(value) {\n    this.updateOption(\"alpha\", value);\n  }\n\n  set __alphaRandomness(value) {\n    this.updateOption(\"alphaRandomness\", value);\n  }\n\n  set __startTimeRandomness(value) {\n    this.updateOption(\"startTimeRandomness\", value);\n  }\n\n  set __positionArray(value) {\n    if (typeof value === \"object\" && value.length) {\n      this.updateOption(\"positionArray\", value);\n    } else if (typeof value === \"string\") {\n      try {\n        const positionArray = JSON.parse(value);\n        if (positionArray.length) {\n          this.updateOption(\"positionArray\", positionArray);\n        } else {\n          this.updateOption(\"positionArray\", null);\n        }\n      } catch (e) {\n        this.updateOption(\"positionArray\", null);\n      }\n    } else {\n      this.updateOption(\"positionArray\", null);\n    }\n  }\n\n  set __maxCount(value) {\n    this.updateConfig(\"maxCount\", value);\n  }\n\n  set __useOriginColor(value) {\n    this.updateConfig(\"useOriginColor\", value);\n  }\n\n  set __once(value) {\n    this.updateConfig(\"once\", value);\n  }\n\n  set __rotateToVelocity(value) {\n    this.updateConfig(\"rotateToVelocity\", value);\n  }\n\n  set __isScaleByLifetime(value) {\n    this.updateConfig(\"isScaleByLifetime\", value);\n  }\n\n  set __fadeIn(value) {\n    this.updateConfig(\"fadeIn\", value);\n  }\n\n  set __fadeOut(value) {\n    this.updateConfig(\"fadeOut\", value);\n  }\n\n  set __texture(value) {\n    this.updateConfig(\"texture\", value);\n  }\n\n  set __maskTexture(value) {\n    this.updateConfig(\"maskTexture\", value);\n  }\n\n  set __spriteSheet(value) {\n    if (typeof value === \"object\" && value.length) {\n      this.updateConfig(\"spriteSheet\", value);\n    } else if (typeof value === \"string\") {\n      try {\n        const spriteSheet = JSON.parse(value);\n        if (spriteSheet.length) {\n          this.updateConfig(\"spriteSheet\", spriteSheet);\n        } else {\n          this.updateConfig(\"spriteSheet\", null);\n        }\n      } catch (e) {\n        this.updateConfig(\"spriteSheet\", null);\n      }\n    } else {\n      this.updateConfig(\"spriteSheet\", null);\n    }\n  }\n\n  set __is2d(value) {\n    this.updateConfig(\"is2d\", value);\n  }\n  // set __blendFunc01(value) {\n  //   this._config.blendFunc[0] = value;\n  //   this.updateConfig('blendFunc', this._config.blendFunc);\n  // }\n\n  // set __blendFunc02(value) {\n  //   this._config.blendFunc[1] = value;\n  //   this.updateConfig('blendFunc', this._config.blendFunc);\n  // }\n}\n","import FRAG_SHADER from \"./trail.fs.glsl\";\nimport VERT_SHADER from \"./trail.vs.glsl\";\nimport { Material } from \"../material/Material\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport { BlendFunc, MaterialType, RenderState, DataType } from \"../base/Constant\";\n\nexport class TrailMaterial extends Material {\n  /**\n   * 生成内部所使用的 Technique 对象\n   * @private\n   */\n  _generateTechnique() {\n    //--\n    const tech = new RenderTechnique(\"trail_tech\");\n    tech.isValid = true;\n    tech.uniforms = {\n      u_texture: {\n        name: \"u_texture\",\n        type: DataType.SAMPLER_2D\n      }\n    };\n    tech.attributes = {};\n    tech.states = {\n      enable: [RenderState.BLEND],\n      functions: {\n        blendFunc: [BlendFunc.SRC_ALPHA, BlendFunc.ONE],\n        depthMask: [false]\n      }\n    };\n    tech.customMacros = [];\n    tech.vertexShader = VERT_SHADER;\n    tech.fragmentShader = FRAG_SHADER;\n\n    this._technique = tech;\n    this.renderType = MaterialType.TRANSPARENT;\n  }\n\n  /**\n   * 重写基类方法\n   * @private\n   */\n  prepareDrawing(context, component, primitive) {\n    if (this._technique === null) {\n      this._generateTechnique();\n    }\n\n    super.prepareDrawing(context, component, primitive);\n  }\n}\n","import { Matrix, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { BufferGeometry, GeometryRenderer } from \"../geometry\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { PrimitiveTopology } from \"../graphic/enums/PrimitiveTopology\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { TrailMaterial } from \"./TrailMaterial\";\n\nconst _tempVector3 = new Vector3();\n\n/**\n * 拖尾效果渲染组件\n */\nexport class TrailRenderer extends GeometryRenderer {\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _stroke;\n  private _minSeg;\n  private _lifetime;\n  private _maxPointNum;\n  private _points: Array<Vector3>;\n  private _pointStates: Array<number>;\n  private _strapPoints: Array<Vector3>;\n  private _curPointNum;\n  private _prePointsNum;\n  /**\n   * 纹理对象基类\n   * @param {Entity} entity 所属的Node对象\n   * @param {Object} props 可选配置，包含以下参数\n   * @param {float} [props.stroke=0.2] 拖尾的宽度\n   * @param {float} [props.minSeg=0.02] 拖尾形状由物体运动轨迹上的点构成，描述相邻点之间最小间隔距离\n   * @param {Number} [props.lifetime=1000] 物体运动时，拖尾效果持续的时长\n   * @param {Material} [props.material=TrailMaterial] 拖尾使用的材质，默认使用内置的TrailMaterial\n   */\n  constructor(entity, props) {\n    super(entity);\n\n    this._stroke = props.stroke || 0.2;\n    this._minSeg = props.minSeg || 0.02;\n    this._lifetime = props.lifetime || 1000;\n    this._maxPointNum = (this._lifetime / 1000.0) * entity.engine.targetFrameRate;\n\n    this._points = [];\n    this._pointStates = [];\n    this._strapPoints = [];\n    for (let i = 0; i < this._maxPointNum; i++) {\n      this._points.push(new Vector3());\n      this._pointStates.push(this._lifetime);\n\n      this._strapPoints.push(new Vector3());\n      this._strapPoints.push(new Vector3());\n    }\n    this._curPointNum = 0;\n\n    const mtl = props.material || new TrailMaterial(this.engine, \"trial_mtl\");\n    this.material = mtl;\n\n    this.setTexture(props.texture);\n    this._initGeometry();\n  }\n\n  /**\n   * 每帧的更新函数\n   * @private\n   */\n  update(deltaTime) {\n    let mov = 0,\n      newIdx = 0;\n    for (let i = 0; i < this._curPointNum; i++) {\n      this._pointStates[i] -= deltaTime;\n      if (this._pointStates[i] < 0) {\n        mov++;\n      } else if (mov > 0) {\n        newIdx = i - mov;\n\n        // Move data\n        this._pointStates[newIdx] = this._pointStates[i];\n\n        // Move point\n        this._points[i].cloneTo(this._points[newIdx]);\n      }\n    }\n    this._curPointNum -= mov;\n\n    let appendNewPoint = true;\n    if (this._curPointNum === this._maxPointNum) {\n      appendNewPoint = false;\n    } else if (this._curPointNum > 0) {\n      const lastPoint = this._points[this._points.length - 1];\n      if (Vector3.distance(this.entity.worldPosition, lastPoint) < this._minSeg) {\n        appendNewPoint = false;\n      } else {\n        // debugger\n      }\n    }\n\n    if (appendNewPoint) {\n      this._pointStates[this._curPointNum] = this._lifetime;\n      this.entity.worldPosition.cloneTo(this._points[this._curPointNum]);\n\n      this._curPointNum++;\n    }\n  }\n\n  /**\n   * 更新位置，将数据对象加入渲染队列\n   * @param {Camera} camera\n   * @private\n   */\n  render(camera) {\n    this._updateStrapVertices(camera, this._points);\n    this._updateStrapCoords();\n    this._vertexBuffer.setData(this._vertices);\n\n    super.render(camera);\n  }\n\n  /**\n   * 设置当前拖尾的纹理\n   * @param {Texture2D} texture\n   */\n  setTexture(texture) {\n    if (texture) {\n      this.material.setValue(\"u_texture\", texture);\n    }\n  }\n\n  // ----------  private  -------------------\n  /**\n   * 初始化 geometry\n   * @private\n   */\n  _initGeometry() {\n    const geometry = new BufferGeometry(this._entity.engine);\n\n    const vertexStride = 20;\n    const vertexCount = this._maxPointNum * 2;\n    const vertexFloatCount = vertexCount * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0)\n    ];\n    const vertexBuffer = new Buffer(this.engine, vertexFloatCount * 4, BufferUsage.Dynamic);\n\n    geometry.setVertexBufferBinding(vertexBuffer, vertexStride);\n    geometry.setVertexElements(vertexElements);\n    geometry.addSubGeometry(0, vertexCount, PrimitiveTopology.TriangleStrip);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride;\n    this._vertices = vertices;\n    this.geometry = geometry;\n  }\n\n  /**\n   * 更新拖尾顶点位置\n   * @private\n   */\n  _updateStrapVertices(camera, points: Array<Vector3>) {\n    const m: Matrix = camera.viewMatrix;\n    const e = m.elements;\n    const vx = new Vector3(e[0], e[4], e[8]);\n    const vy = new Vector3(e[1], e[5], e[9]);\n    const vz = new Vector3(e[2], e[6], e[10]);\n    const s = this._stroke;\n\n    vy.scale(s);\n\n    const up = new Vector3();\n    const down = new Vector3();\n\n    const rotation = new Quaternion();\n\n    Vector3.transformByQuat(vx, rotation, vx);\n    Vector3.transformByQuat(vy, rotation, vy);\n\n    const dy = new Vector3();\n    const cross = new Vector3();\n    const perpVector = new Vector3();\n\n    vx.normalize();\n\n    const vertieces = this._vertices;\n    //-- quad pos\n    for (let i = 0; i < this._maxPointNum; i++) {\n      //-- center pos\n      if (i < this._curPointNum) {\n        const p = points[i];\n\n        if (i === this._curPointNum - 1 && i !== 0) {\n          Vector3.subtract(p, points[i - 1], perpVector);\n        } else {\n          Vector3.subtract(points[i + 1], p, perpVector);\n        }\n\n        this._projectOnPlane(perpVector, vz, perpVector);\n        perpVector.normalize();\n\n        // Calculate angle between vectors\n        let angle = Math.acos(Vector3.dot(vx, perpVector));\n        Vector3.cross(vx, perpVector, cross);\n        if (Vector3.dot(cross, vz) <= 0) {\n          angle = Math.PI * 2 - angle;\n        }\n        Quaternion.rotationAxisAngle(vz, angle, rotation);\n        Vector3.transformByQuat(vy, rotation, dy);\n\n        Vector3.add(p, dy, up);\n        Vector3.subtract(p, dy, down);\n      }\n\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n      vertieces[p0] = up.x;\n      vertieces[p0 + 1] = up.y;\n      vertieces[p0 + 2] = up.z;\n\n      vertieces[p1] = down.x;\n      vertieces[p1 + 1] = down.y;\n      vertieces[p1 + 2] = down.z;\n    }\n  }\n\n  /**\n   * 更新拖尾 uv 位置\n   * @private\n   */\n  _updateStrapCoords() {\n    if (this._prePointsNum === this._curPointNum) {\n      return;\n    }\n\n    this._prePointsNum = this._curPointNum;\n\n    const count = this._curPointNum;\n    const texDelta = 1.0 / count;\n    const vertieces = this._vertices;\n    for (let i = 0; i < count; i++) {\n      const d = 1.0 - i * texDelta;\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n\n      vertieces[p0] = 0;\n      vertieces[p0 + 1] = d;\n\n      vertieces[p1] = 1.0;\n      vertieces[p1 + 1] = d;\n    }\n  }\n\n  /**\n   * 将向量 a 投影到向 p 上。\n   * @param a - 要投影的向量\n   * @param p - 目标向量\n   * @param out - 向量 a 投影到向量 p 的结果向量\n   */\n  _projectOnVector(a: Vector3, p: Vector3, out: Vector3): void {\n    const n_p = p.clone();\n    Vector3.normalize(n_p, n_p);\n    const cosine = Vector3.dot(a, n_p);\n    out.x = n_p.x * cosine;\n    out.y = n_p.y * cosine;\n    out.z = n_p.z * cosine;\n  }\n\n  /**\n   * 将向量 a 投影到和法向量 n 正交的平面上。\n   * @param a - 输入向量\n   * @param n - 法向量\n   * @param out - 投影到平面上的向量\n   */\n  _projectOnPlane(a: Vector3, n: Vector3, out: Vector3) {\n    this._projectOnVector(a, n, _tempVector3);\n    Vector3.subtract(a, _tempVector3, out);\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { ABoxCollider } from \"./ABoxCollider\";\n\nexport class BoxCollider extends ABoxCollider {\n  private _center: Vector3 = new Vector3();\n  private _size: Vector3 = new Vector3();\n  private isShowCollider: boolean = true;\n\n  get center(): Vector3 {\n    return this._center;\n  }\n\n  set center(value: Vector3) {\n    this._center = value;\n    this.setBoxCenterSize(this._center, this._size);\n  }\n\n  get size(): Vector3 {\n    return this._size;\n  }\n\n  set size(value: Vector3) {\n    this._size = value;\n    this.setBoxCenterSize(this._center, this._size);\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.center = this.center;\n    this.size = this.size;\n    this.isShowCollider = this.isShowCollider;\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { ASphereCollider } from \"./ASphereCollider\";\n\nexport class SphereCollider extends ASphereCollider {\n  private __center: Vector3 = new Vector3();\n  private __radius: number = 1.0;\n  private isShowCollider: boolean = true;\n\n  get _center(): Vector3 {\n    return this.__center;\n  }\n\n  set _center(value: Vector3) {\n    this.__center = value;\n    this.setSphere(this.__center, this.__radius);\n  }\n\n  get _radius() {\n    return this.__radius;\n  }\n\n  set _radius(value: number) {\n    this.__radius = value;\n    this.setSphere(this.__center, this.__radius);\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n\n    this._center = this._center;\n    this._radius = this._radius;\n    this.isShowCollider = this.isShowCollider;\n  }\n}\n","import { ColliderFeature } from \"./ColliderFeature\";\nimport { Scene } from \"../Scene\";\nScene.registerFeature(ColliderFeature);\n\n//-- colliders\nexport { ColliderFeature };\nexport { Collider as ACollider } from \"./Collider\";\nexport { ABoxCollider } from \"./ABoxCollider\";\nexport { PlaneCollider } from \"./PlaneCollider\";\nexport { ASphereCollider } from \"./ASphereCollider\";\nexport { BoxCollider } from \"./BoxCollider\";\nexport { SphereCollider } from \"./SphereCollider\";\n","import { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * AABBox = {\n *  min: [-1,-1,-1],\n *  max: [1,1,1]\n * };\n *\n * Sphere = {\n *  center: [0,0,0],\n *  radius: 1\n * };\n */\n\n/**\n * 两个 AABBox 是否相交\n * @private\n */\nexport function intersectBox2Box(boxA, boxB) {\n  return (\n    boxA.min.x <= boxB.max.x &&\n    boxA.max.x >= boxB.min.x &&\n    boxA.min.y <= boxB.max.y &&\n    boxA.max.y >= boxB.min.y &&\n    boxA.min.z <= boxB.max.z &&\n    boxA.max.z >= boxB.min.z\n  );\n}\n\n/**\n * 两个球体是否相交\n * @private\n */\nexport function intersectSphere2Sphere(sphereA, sphereB) {\n  const distance = Vector3.distance(sphereA.center, sphereB.center);\n  return distance < sphereA.radius + sphereA.radius;\n}\n\n/**\n * 球体和AABBox是否相交\n * @private\n */\nexport function intersectSphere2Box(sphere, box) {\n  const center: Vector3 = sphere.center;\n\n  const closestPoint: Vector3 = new Vector3(\n    Math.max(box.min.x, Math.min(center.x, box.max.x)),\n    Math.max(box.min.y, Math.min(center.y, box.max.y)),\n    Math.max(box.min.z, Math.min(center.z, box.max.z))\n  );\n\n  const distance = Vector3.distance(center, closestPoint);\n  return distance < sphere.radius;\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Event } from \"../base/Event\";\nimport { ABoxCollider } from \"../collider/ABoxCollider\";\nimport { Script } from \"../Script\";\nimport { intersectBox2Box, intersectSphere2Box, intersectSphere2Sphere } from \"./intersect\";\nimport { ASphereCollider } from \"../collider/ASphereCollider\";\nimport { ColliderFeature } from \"../collider/ColliderFeature\";\nimport { ACollider } from \"../collider\";\n\n/**\n * 检测当前 Entity 上的 Collider 与场景中其他 Collider 的碰撞\n * 发出事件：collision\n */\nexport class CollisionDetection extends Script {\n  private static _tempVec3: Vector3 = new Vector3();\n\n  private _colliderManager;\n  private _myCollider;\n  private _overlopCollider;\n  private _sphere;\n  private _box;\n\n  /**\n   * 构造函数\n   * @param {Entity} entity 对象所在节点\n   */\n  constructor(entity) {\n    super(entity);\n\n    this._colliderManager = null;\n    this._myCollider = null;\n    this._overlopCollider = null;\n\n    // this.addEventListener(\"start\", this._onStart);\n  }\n\n  /**\n   * 和当前 Entity 上的 Collider 相交的 Collider 对象\n   */\n  get overlopCollider() {\n    return this._overlopCollider;\n  }\n\n  /**\n   * 每帧更新时，计算与其他 collider 的碰撞\n   */\n  onUpdate(deltaTime) {\n    super.onUpdate(deltaTime);\n\n    let overlopCollider = null;\n\n    if (this._colliderManager && this._myCollider) {\n      const colliders = this._colliderManager.colliders;\n\n      if (this._myCollider instanceof ABoxCollider) {\n        this._box = this._getWorldBox(this._myCollider);\n        for (let i = 0, len = colliders.length; i < len; i++) {\n          const collider = colliders[i];\n          if (collider != this._myCollider && this._boxCollision(collider)) {\n            overlopCollider = collider;\n            this.trigger(new Event(\"collision\", this, { collider }));\n          }\n        } // end of for\n      } else if (this._myCollider instanceof ASphereCollider) {\n        this._sphere = this._getWorldSphere(this._myCollider);\n        for (let i = 0, len = colliders.length; i < len; i++) {\n          const collider = colliders[i];\n          if (collider != this._myCollider && this._sphereCollision(collider)) {\n            overlopCollider = collider;\n            this.trigger(new Event(\"collision\", this, { collider }));\n          }\n        } // end of for\n      }\n    } // end of if\n\n    //-- overlop events\n    if (overlopCollider != null && this._overlopCollider != overlopCollider) {\n      this.trigger(new Event(\"begin_overlop\", this, { collider: overlopCollider }));\n    }\n\n    if (this._overlopCollider != null && this._overlopCollider != overlopCollider) {\n      const e = this._overlopCollider;\n      this.trigger(new Event(\"end_overlop\", this, { collider: e }));\n    }\n\n    this._overlopCollider = overlopCollider;\n  }\n\n  /**\n   * 获得世界空间中的 Box 坐标\n   * @param boxCollider\n   */\n  _getWorldBox(boxCollider) {\n    const mat = boxCollider.entity.transform.worldMatrix;\n    const max: Vector3 = new Vector3();\n    const min: Vector3 = new Vector3();\n    Vector3.transformCoordinate(boxCollider.boxMax, mat, max);\n    Vector3.transformCoordinate(boxCollider.boxMin, mat, min);\n\n    //--\n    const temp: Vector3 = CollisionDetection._tempVec3;\n    const corners = boxCollider.getCorners();\n    for (let i = 0; i < 8; i++) {\n      Vector3.transformCoordinate(corners[i], mat, temp);\n      if (temp.x > max.x) max.x = temp.x;\n      if (temp.y > max.y) max.y = temp.y;\n      if (temp.z > max.z) max.z = temp.z;\n      if (temp.x < min.x) min.x = temp.x;\n      if (temp.y < min.y) min.y = temp.y;\n      if (temp.z < min.z) min.z = temp.z;\n    }\n\n    return {\n      min,\n      max\n    };\n  }\n\n  /**\n   * 获得世界空间中的 Sphere 坐标\n   * @param {SphereCollider} sphereCollider\n   */\n  _getWorldSphere(sphereCollider) {\n    const center: Vector3 = new Vector3();\n    Vector3.transformCoordinate(sphereCollider.center, sphereCollider.entity.transform.worldMatrix, center);\n    return {\n      radius: sphereCollider.radius,\n      center\n    };\n  }\n\n  /**\n   * 自身的 Collider 与另一个 Collider 做碰撞检测\n   * @param {ABoxCollider|ASphereCollider} other\n   */\n  _boxCollision(other) {\n    if (other instanceof ABoxCollider) {\n      const box = this._getWorldBox(other);\n      return intersectBox2Box(box, this._box);\n    } else if (other instanceof ASphereCollider) {\n      const sphere = this._getWorldSphere(other);\n      return intersectSphere2Box(sphere, this._box);\n    }\n    return false;\n  }\n\n  /**\n   * 自身的 Collider 与另一个 Collider 做碰撞检测\n   * @param {ABoxCollider|ASphereCollider} other\n   */\n  _sphereCollision(other) {\n    if (other instanceof ABoxCollider) {\n      const box = this._getWorldBox(other);\n      return intersectSphere2Box(this._sphere, box);\n    } else if (other instanceof ASphereCollider) {\n      const sphere = this._getWorldSphere(other);\n      return intersectSphere2Sphere(sphere, this._sphere);\n    }\n    return false;\n  }\n\n  /**\n   * 在 start 事件时，查找其他组件并记录下来\n   */\n  onAwake() {\n    this._colliderManager = this.scene.findFeature(ColliderFeature);\n    this._myCollider = this.entity.getComponent(ACollider);\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { FogFeature } from \"./FogFeature\";\n\n/**\n * 雾基类\n */\nexport class Fog extends Component {\n  public color: Vector3 = new Vector3(1, 0, 0);\n\n  constructor(node) {\n    super(node);\n  }\n\n  /**\n   * @private\n   */\n  _onEnable() {\n    this.scene.findFeature(FogFeature).fog = this;\n  }\n\n  /**\n   * @private\n   */\n  _onDisable() {\n    this.scene.findFeature(FogFeature).fog = null;\n  }\n\n  /**\n   * @private\n   */\n  bindMaterialValues(mtl) {}\n}\n","import { Fog } from \"./Fog\";\n\n/**\n * 指数雾\n */\nexport class EXP2Fog extends Fog {\n  public density: number = 0.0025;\n\n  /**\n   * @private\n   */\n  bindMaterialValues(mtl) {\n    mtl.setValue(\"u_fogColor\", this.color);\n    mtl.setValue(\"u_fogDensity\", this.density);\n  }\n}\n","import { EXP2Fog } from \"./EXP2Fog\";\nimport { Fog } from \"./Fog\";\nimport { SceneFeature } from \"../SceneFeature\";\n\n/**\n * 是否有雾效特性\n * @private\n */\nexport function hasFogFeature() {\n  return true;\n}\n\n/**\n * 获取雾效相关宏\n * @private\n */\nexport function getFogMacro() {\n  return this.findFeature(FogFeature).macro;\n}\n\n/**\n * 设置雾参数到材质\n * @param {Material} mtl 材质\n * @private\n */\nexport function bindFogToMaterial(mtl) {\n  this.findFeature(FogFeature).bindFogToMaterial(mtl);\n}\n\n/**\n * 雾效场景特性\n * @private\n */\nexport class FogFeature extends SceneFeature {\n  private _fog;\n  private _macros;\n\n  constructor() {\n    super();\n    this._fog = null;\n    this._macros = [];\n  }\n\n  /**\n   * 雾\n   */\n  get fog() {\n    return this._fog;\n  }\n\n  set fog(v) {\n    if (v !== this._fog) {\n      this._fog = v;\n      const macro = [];\n      if (v instanceof Fog) {\n        macro.push(\"O3_HAS_FOG\");\n\n        if (v instanceof EXP2Fog) {\n          macro.push(\"O3_FOG_EXP2\");\n        }\n      }\n\n      if (this._macros.length !== macro.length) {\n        this._macros = macro;\n      }\n    }\n  }\n\n  /**\n   * 宏\n   */\n  get macro() {\n    return this._macros;\n  }\n\n  /**\n   * @private\n   * 绑定雾参数到材质\n   * @param {Material} mtl 材质\n   */\n  bindFogToMaterial(mtl) {\n    if (this.fog && mtl.useFog) {\n      this.fog.bindMaterialValues(mtl);\n    }\n\n    return this;\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Fog } from \"./Fog\";\n\n/**\n * 线性雾，根据镜头距离线性差值雾浓度\n */\nexport class LinearFog extends Fog {\n  public near: number = 1;\n  public far: number = 1000;\n  public color: Vector3;\n\n  /**\n   * @private\n   */\n  bindMaterialValues(mtl) {\n    mtl.setValue(\"u_fogColor\", this.color);\n    mtl.setValue(\"u_fogNear\", this.near);\n    mtl.setValue(\"u_fogFar\", this.far);\n  }\n}\n","import { Scene } from \"../Scene\";\nimport { bindFogToMaterial, FogFeature, getFogMacro, hasFogFeature } from \"./FogFeature\";\n\nScene.registerFeature(FogFeature);\n(Scene.prototype as any).hasFogFeature = hasFogFeature;\n(Scene.prototype as any).getFogMacro = getFogMacro;\n(Scene.prototype as any).bindFogToMaterial = bindFogToMaterial;\n\nexport { EXP2Fog } from \"./EXP2Fog\";\nexport { LinearFog } from \"./LinearFog\";\nexport { bindFogToMaterial, FogFeature, getFogMacro, hasFogFeature };\n","import { Vector4 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { Material } from \"../material/Material\";\nimport { BasicRenderPipeline } from \"../RenderPipeline/BasicRenderPipeline\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { RenderElement } from \"../RenderPipeline/RenderElement\";\nimport { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { RenderBufferDepthFormat } from \"../texture/enums/RenderBufferDepthFormat\";\nimport { RenderColorTexture } from \"../texture/RenderColorTexture\";\nimport { RenderDepthTexture } from \"../texture/RenderDepthTexture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { Texture } from \"../texture/Texture\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { TextureCubeMap } from \"../texture/TextureCubeMap\";\nimport { ProbeConfig } from \"./type\";\n\nlet cacheId = 0;\n\n/**\n * 环境探针类，提供诸如反射折射等需要的功能\n * */\nexport abstract class Probe extends Component {\n  protected readonly cacheId: number;\n  private isCube: boolean;\n  private oriClipPlane: Vector4[];\n\n  private _camera: Camera;\n\n  /** 优先级 excludeRenderList > renderAll > renderList */\n  public excludeRenderList: Material[];\n  public renderAll: boolean;\n  public renderList: Material[];\n\n  public renderPass: RenderPass;\n  protected renderTarget: RenderTarget;\n  protected renderTargetSwap: RenderTarget;\n\n  /** 裁剪面 */\n  public clipPlanes: Vector4[];\n\n  public set camera(camera: Camera) {\n    if (camera === this._camera) return;\n    this._camera && this.renderPipeline.removeRenderPass(this.renderPass);\n    this._camera = camera;\n    camera && this.renderPipeline.addRenderPass(this.renderPass);\n  }\n\n  public get camera() {\n    return this._camera;\n  }\n\n  /**\n   * 探针所得 2D 纹理\n   * */\n  public get texture(): Texture2D | RenderColorTexture {\n    return this.renderPass.renderTarget?.getColorTexture();\n  }\n\n  /**\n   * 探针所得 深度 纹理\n   * */\n  public get depthTexture(): Texture2D | RenderDepthTexture {\n    return this.renderPass.renderTarget?.depthTexture;\n  }\n\n  /**\n   * 探针所得 立方体 纹理\n   * */\n  public get cubeTexture(): TextureCubeMap | RenderColorTexture {\n    return this.renderPass.renderTarget?.getColorTexture();\n  }\n\n  protected get renderPipeline(): BasicRenderPipeline {\n    return this.camera._renderPipeline;\n  }\n\n  /**\n   * @deperated\n   */\n  protected get rhi(): any {\n    return this.camera.scene.engine._hardwareRenderer;\n  }\n\n  /**\n   * 获取需要渲染的真实队列.\n   * 优先级 excludeRenderList > renderAll > renderList\n   */\n  protected get renderItems(): any {\n    const opaqueQueue = this.renderPipeline.opaqueQueue;\n    const transparentQueue = this.renderPipeline.transparentQueue;\n    return opaqueQueue.items.concat(transparentQueue.items).filter((item: RenderElement) => {\n      if (!item.primitive) return false;\n      if (this.excludeRenderList.includes(item.material)) return false;\n      if (this.renderAll) return true;\n      if (this.renderList.includes(item.material)) return true;\n    });\n  }\n\n  /** WebGL2 时，可以开启硬件层的 MSAA */\n  public get samples() {\n    return this.renderTarget.antiAliasing;\n  }\n\n  /**\n   * 探针基类\n   * @param {Entity} entity\n   */\n  protected constructor(entity: Entity) {\n    super(entity);\n    this.cacheId = cacheId++;\n\n    this.renderPass = new RenderPass(\"_renderPass\" + this.cacheId, -10);\n\n    /** 自定义渲染管道 */\n    this.renderPass.renderOverride = true;\n    this.renderPass.preRender = this.preRender.bind(this);\n    this.renderPass.render = this.render.bind(this);\n    this.renderPass.postRender = this.postRender.bind(this);\n\n    /**\n     * 继续 RTT\n     * */\n    this.addEventListener(\"enabled\", () => {\n      this.renderPass.enabled = true;\n    });\n\n    /**\n     * 暂停 RTT（ render target to texture）\n     * */\n    this.addEventListener(\"disabled\", () => {\n      this.renderPass.enabled = false;\n    });\n  }\n\n  /**\n   * 初始化探针。\n   * @param config - 初始化配置\n   */\n  public init(config: ProbeConfig = {}): void {\n    this.isCube = !!config.isCube;\n    this.camera = config.camera || this.scene._activeCameras[0];\n    this.excludeRenderList = config.excludeRenderList || [];\n    this.renderAll = !!config.renderAll;\n    this.renderList = config.renderList || [];\n    this.clipPlanes = config.clipPlanes || [];\n\n    const width = config.width || 1024;\n    const height = config.height || 1024;\n    const samples = config.samples || 1;\n\n    this.renderTarget = new RenderTarget(\n      this.engine,\n      width,\n      height,\n      new RenderColorTexture(this.engine, width, height, undefined, false, this.isCube),\n      RenderBufferDepthFormat.Depth,\n      samples\n    );\n    this.renderTargetSwap = new RenderTarget(\n      this.engine,\n      width,\n      height,\n      new RenderColorTexture(this.engine, width, height, undefined, false, this.isCube),\n      RenderBufferDepthFormat.Depth,\n      samples\n    );\n\n    this.renderPass.renderTarget = this.renderTarget;\n  }\n\n  protected preRender() {\n    this.oriClipPlane = this.scene.clipPlanes;\n    this.scene.clipPlanes = this.clipPlanes;\n  }\n\n  protected render() {\n    const context = RenderContext._getRenderContext(this.camera);\n    this.renderItems.forEach((item: RenderElement) => {\n      const { component, primitive, subPrimitive, material } = item;\n      if (!(component.renderPassFlag & this.renderPassFlag)) return;\n      material.prepareDrawing(context, component, primitive);\n      this.rhi.drawPrimitive(primitive, subPrimitive, material);\n    });\n  }\n\n  protected postRender() {\n    this.scene.clipPlanes = this.oriClipPlane;\n    // 交换 FBO\n    // prevent issue: Feedback Loops Between Textures and the Framebuffer.\n    if (this.renderPass.enabled) {\n      // 钩子\n      if (this.onTextureChange) {\n        if (this.isCube) {\n          this.onTextureChange(this.cubeTexture);\n        } else {\n          this.onTextureChange(this.texture, this.depthTexture);\n        }\n      }\n\n      if (this.renderPass.renderTarget === this.renderTarget) {\n        this.renderPass.renderTarget = this.renderTargetSwap;\n      } else {\n        this.renderPass.renderTarget = this.renderTarget;\n      }\n    }\n  }\n\n  /**\n   * 销毁 probe 以及 renderPass\n   */\n  public destroy(): void {\n    this.enabled = false;\n    this.renderPipeline.removeRenderPass(this.renderPass);\n\n    super.destroy();\n\n    // todo:delete\n    this.renderTarget.destroy();\n    this.renderTargetSwap.destroy();\n  }\n\n  /**\n   * prevent issue: Feedback Loops Between Textures and the Framebuffer\n   * 提供钩子让用户进行交换 Texture\n   * @example\n   * probe.onTextureChange = cubeTexture => {\n   *   envLight.specularMap = cubeTexture;\n   *   skybox.specularMap = cubeTexture;\n   * }\n   * */\n  public onTextureChange(texture: Texture | RenderColorTexture, depthTexture?: Texture2D | RenderDepthTexture) {}\n}\n","import { Side } from \"../base/Constant\";\nimport { Entity } from \"../Entity\";\nimport { Probe } from \"./Probe\";\nimport { PlaneProbeConfig } from \"./type\";\n\n/**\n * 平面探针，用于生成 折射/纹理扰动 等效果\n * */\nexport class PlaneProbe extends Probe {\n  /**\n   * 创建探针\n   * @param {Entity} node\n   * */\n  constructor(node: Entity) {\n    super(node);\n  }\n\n  /**\n   * 初始化探针。\n   * @param config - 初始化配置\n   */\n  public init(config: PlaneProbeConfig = {}): void {\n    super.init(config);\n  }\n\n  /**\n   * 预处理材质，保存初始状态\n   * */\n  private storeMaterial() {\n    this.renderItems.forEach((item: any) => {\n      const material = item.material;\n      item.initialSide = material.side;\n      material.side = Side.BACK;\n    });\n  }\n\n  /**\n   * 后处理材质，还原初始状态\n   * */\n  private restoreMaterial() {\n    this.renderItems.forEach((item: any) => {\n      const material = item.material;\n      material.side = item.initialSide;\n      delete item.initialSide;\n    });\n  }\n\n  protected preRender() {\n    super.preRender();\n    this.storeMaterial();\n  }\n\n  protected postRender() {\n    super.postRender();\n    this.restoreMaterial();\n  }\n}\n","import { Matrix, Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { Probe } from \"./Probe\";\nimport { CubeProbeConfig } from \"./type\";\n\nconst cacheTarget: Vector3 = new Vector3();\nconst cacheUp: Vector3 = new Vector3();\nconst cacheDir: Vector3 = new Vector3();\nconst fovRadian = (90 * Math.PI) / 180;\n\n/**\n * 立方体探针,生成 cubeTexture,用于 动态环境反射 等效果\n * */\nexport class CubeProbe extends Probe {\n  /** 可以设置探针的位置，默认为原点 [0,0,0] */\n  public position: Vector3;\n\n  private oriViewMatrix = new Matrix();\n  private oriInverseViewMatrix = new Matrix();\n  private oriProjectionMatrix = new Matrix();\n  private oriInverseProjectionMatrix = new Matrix();\n\n  /**\n   * 创建探针\n   * @param {Entity} node\n   * */\n  constructor(node: Entity) {\n    super(node);\n  }\n\n  /**\n   * 初始化探针。\n   * @param config - 初始化配置\n   */\n  public init(config: CubeProbeConfig = {}): void {\n    super.init({\n      ...config,\n      isCube: true\n    });\n    this.position = config.position || new Vector3();\n  }\n\n  /**\n   * 贮藏原相机参数\n   * */\n  private storeCamera() {\n    this.camera.viewMatrix.cloneTo(this.oriViewMatrix);\n    this.camera.inverseViewMatrix.cloneTo(this.oriInverseViewMatrix);\n    this.camera.projectionMatrix.cloneTo(this.oriProjectionMatrix);\n    this.camera.inverseProjectionMatrix.cloneTo(this.oriInverseProjectionMatrix);\n  }\n\n  /**\n   * 还原相机参数\n   * */\n  private restoreCamera() {\n    this.oriViewMatrix.cloneTo(this.camera.viewMatrix);\n    this.oriInverseViewMatrix.cloneTo(this.camera.inverseViewMatrix);\n    this.oriProjectionMatrix.cloneTo(this.camera.projectionMatrix);\n    this.oriInverseProjectionMatrix.cloneTo(this.camera.inverseProjectionMatrix);\n  }\n\n  protected preRender() {\n    super.preRender();\n    this.storeCamera();\n  }\n\n  protected render() {\n    // 渲染6个面\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      // 设置渲染面\n      this.rhi.setRenderTargetFace(this.renderPass.renderTarget, faceIndex);\n\n      // clear\n      this.rhi.clearRenderTarget(this.renderPass.clearMode, this.renderPass.clearParam);\n\n      // 改 camera 参数\n      this.setCamera(faceIndex);\n\n      // render\n      super.render();\n\n      // MSAA need to blit\n      // 6'th face will blit in pipeline\n      if (faceIndex < 5) {\n        this.rhi.blitRenderTarget(this.renderPass.renderTarget);\n      }\n    }\n  }\n\n  protected postRender() {\n    super.postRender();\n    this.restoreCamera();\n  }\n\n  /**\n   * 根据渲染面设置相机参数\n   * */\n  private setCamera(faceIndex: number) {\n    switch (faceIndex) {\n      // positive_x\n      case 0:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(1, 0, 0);\n        break;\n      // negative_x\n      case 1:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(-1, 0, 0);\n        break;\n      // positive_y\n      case 2:\n        cacheUp.setValue(0, 0, 1);\n        cacheDir.setValue(0, 1, 0);\n        break;\n      // negative_y\n      case 3:\n        cacheUp.setValue(0, 0, -1);\n        cacheDir.setValue(0, -1, 0);\n        break;\n      // positive_z\n      case 4:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(0, 0, 1);\n        break;\n      // negative_z\n      case 5:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(0, 0, -1);\n        break;\n    }\n\n    Vector3.add(this.position, cacheDir, cacheTarget);\n    Matrix.lookAt(this.position, cacheTarget, cacheUp, this.camera.viewMatrix);\n    Matrix.invert(this.camera.viewMatrix, this.camera.inverseViewMatrix);\n    Matrix.perspective(fovRadian, 1, this.camera.nearClipPlane, this.camera.farClipPlane, this.camera.projectionMatrix);\n    Matrix.invert(this.camera.projectionMatrix, this.camera.inverseProjectionMatrix);\n  }\n}\n","import { MathUtil, Matrix, Vector2 } from \"@oasis-engine/math\";\nimport { DataType } from \"../base/Constant\";\nimport { DirectLight } from \"../lighting/DirectLight\";\nimport { PointLight } from \"../lighting/PointLight\";\nimport { SpotLight } from \"../lighting/SpotLight\";\nimport { RenderColorTexture } from \"../texture/RenderColorTexture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * 阴影的管理类\n * @private\n */\nexport class LightShadow {\n  private rhi;\n  private _mapSize;\n  private _renderTarget;\n  public bias;\n  public intensity;\n  public radius;\n  public projectionMatrix;\n\n  constructor(props = { engine: null, width: 512, height: 512 }) {\n    this._mapSize = new Vector2(props.width, props.height);\n    this._renderTarget = new RenderTarget(\n      props.engine,\n      props.width,\n      props.height,\n      new RenderColorTexture(props.engine, props.width, props.height)\n    );\n\n    /**\n     * （偏斜）\n     * @member {float}\n     */\n    this.bias = 0.005;\n\n    /**\n     * （投影强度）值越大投影越清晰越黑\n     * @member {float}\n     */\n    this.intensity = 0.2;\n\n    /**\n     * 阴影 PCF 插值使用的像素范围\n     * @member { float }\n     */\n    this.radius = 1.0;\n\n    /**\n     * 生成 shadow map 使用的投影矩阵\n     * @member {Matrix}\n     */\n    this.projectionMatrix = new Matrix();\n  }\n\n  /**\n   * shadow map 对应的 RenderTarget\n   * @member {RenderTarget}\n   * @readonly\n   */\n  get renderTarget() {\n    return this._renderTarget;\n  }\n\n  /**\n   * shadow map 纹理对象\n   * @member {Texture2D}\n   * @readonly\n   */\n  get map() {\n    return this._renderTarget.getColorTexture();\n  }\n\n  /**\n   * shadow map 纹理大小\n   * @member {Vector2}\n   * @readonly\n   */\n  get mapSize() {\n    return this._mapSize;\n  }\n\n  /**\n   * 初始化光照的投影矩阵\n   * @param {ALight} light\n   */\n  initShadowProjectionMatrix(light) {\n    /**\n     * 方向光初始化投影矩阵，默认覆盖区域 left: -5, right: 5, bottom: -5, up: 5, near: 0.5, far: 50\n     */\n    if (light instanceof DirectLight) {\n      Matrix.ortho(-5, 5, -5, 5, 0.1, 50, this.projectionMatrix);\n    }\n\n    /**\n     * 点光源初始化投影矩阵，默认配置：fov: 50, aspect: 1, near: 0.5, far: 50\n     */\n    if (light instanceof PointLight) {\n      Matrix.perspective(MathUtil.degreeToRadian(50), 1, 0.5, 50, this.projectionMatrix);\n    }\n\n    /**\n     * 聚光灯初始化投影矩阵，默认配置：fov: this.angle * 2 * Math.sqrt(2), aspect: 1, near: 0.1, far: this.distance + 5\n     */\n    if (light instanceof SpotLight) {\n      const fov = Math.min(Math.PI / 2, light.angle * 2 * Math.sqrt(2));\n      Matrix.perspective(fov, 1, 0.1, light.distance + 5, this.projectionMatrix);\n    }\n  }\n\n  /**\n   * 将阴影参数值提交到阴影材质对象\n   * @param {Material} mtl\n   * @param {number} index\n   * @param {Component} component\n   * @param {ALight} light\n   */\n  bindShadowValues(mtl, index, light) {\n    // 光源视点VP\n    mtl.setValue(`u_viewMatFromLight[${index}]`, light.viewMatrix);\n    mtl.setValue(`u_projMatFromLight[${index}]`, this.projectionMatrix);\n\n    // shadow map\n    const uniformName = `u_shadows[${index}]`;\n    mtl.setValue(uniformName + \".bias\", this.bias);\n    mtl.setValue(uniformName + \".intensity\", this.intensity);\n    mtl.setValue(uniformName + \".radius\", this.radius);\n    mtl.setValue(uniformName + \".mapSize\", this._mapSize);\n\n    mtl.setValue(`u_shadowMaps[${index}]`, this.map);\n  }\n\n  /**\n   * 生成 Technique 所需的 uniform 定义\n   * @param {number} index ShadowMap Index\n   */\n  static getUniformDefine(index) {\n    const uniforms = {};\n\n    uniforms[`u_viewMatFromLight[${index}]`] = {\n      name: `u_viewMatFromLight[${index}]`,\n      type: DataType.FLOAT_MAT4\n    };\n\n    uniforms[`u_projMatFromLight[${index}]`] = {\n      name: `u_projMatFromLight[${index}]`,\n      type: DataType.FLOAT_MAT4\n    };\n\n    const uniformName = `u_shadows[${index}]`;\n    uniforms[uniformName + \".bias\"] = {\n      name: uniformName + \".bias\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".intensity\"] = {\n      name: uniformName + \".intensity\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".radius\"] = {\n      name: uniformName + \".radius\",\n      type: DataType.FLOAT\n    };\n\n    uniforms[uniformName + \".mapSize\"] = {\n      name: uniformName + \".mapSize\",\n      type: DataType.FLOAT_VEC2\n    };\n\n    uniforms[`u_shadowMaps[${index}]`] = {\n      name: `u_shadowMaps[${index}]`,\n      type: DataType.SAMPLER_2D\n    };\n    return uniforms;\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { AmbientLight } from \"../lighting/AmbientLight\";\nimport { Light } from \"../lighting/Light\";\nimport { LightShadow } from \"./LightShadow\";\nimport { Component } from \"../Component\";\n\n/**\n * 设置是否产生阴影\n * @param {boolean} enabled\n */\nObject.defineProperty(Light.prototype, \"enableShadow\", {\n  get: function () {\n    return this._enableShadow;\n  },\n  set: function (enabled) {\n    this._enableShadow = enabled;\n\n    if (this._enableShadow) {\n      if (this instanceof AmbientLight) {\n        Logger.warn(\"Has no shadow!\");\n        return;\n      }\n\n      this.shadow = this.shadow || new LightShadow({ engine: this.engine, width: 512, height: 512 });\n      this.shadow.initShadowProjectionMatrix(this);\n    }\n  }\n});\n\n/**\n * 设置是否接收阴影\n * @param {boolean} enabled\n */\nObject.defineProperty(Component.prototype, \"recieveShadow\", {\n  get: function () {\n    return this._recieveShadow;\n  },\n  set: function (enabled) {\n    this._recieveShadow = enabled;\n  }\n});\n\n/**\n * 设置是否投射阴影\n * @param {boolean} enabled\n */\nObject.defineProperty(Component.prototype, \"castShadow\", {\n  get: function () {\n    return this._castShadow;\n  },\n  set: function (enabled) {\n    this._castShadow = enabled;\n  }\n});\n","import { DataType } from \"../base/Constant\";\nimport { ComplexMaterial } from \"../material/ComplexMaterial\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport fs from \"./shaders/shadowMap.fs.glsl\";\nimport vs from \"./shaders/vertex.glsl\";\n\n/**\n * 生成 Shadow Map 使用的材质\n * @private\n */\nexport class ShadowMapMaterial extends ComplexMaterial {\n  /**\n   * 生成内部所使用的 Technique 对象\n   * @private\n   */\n  _generateTechnique(camera, component) {\n    const customMacros = this._generateMacros();\n    const uniforms = this._generateFragmentUniform();\n\n    //--\n    const tech = new RenderTechnique(this.name);\n    tech.isValid = true;\n    tech.uniforms = uniforms;\n    tech.attributes = {};\n    tech.states = {};\n    tech.customMacros = customMacros;\n    tech.vertexShader = vs;\n    tech.fragmentShader = fs;\n\n    return tech;\n  }\n\n  /**\n   * 添加阴影相关的 uniform 定义\n   * @private\n   */\n  _generateFragmentUniform() {\n    const uniforms = {\n      u_viewMatFromLight: {\n        name: \"u_viewMatFromLight\",\n        type: DataType.FLOAT_MAT4\n      },\n      u_projMatFromLight: {\n        name: \"u_projMatFromLight\",\n        type: DataType.FLOAT_MAT4\n      }\n    };\n\n    return uniforms;\n  }\n\n  /**\n   * 根据阴影的个数，添加相应的宏定义\n   * @private\n   */\n  _generateMacros() {\n    const macros = [];\n\n    macros.push(\"O3_GENERATE_SHADOW_MAP\");\n\n    return macros;\n  }\n}\n","import { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { Camera } from \"../Camera\";\n\n/**\n * RednerPass 对象\n * @private\n */\nexport class ShadowMapPass extends RenderPass {\n  public light;\n  /**\n   * RenderPass 构造函数\n   * @param {string} name 这个 Pass 的名称\n   * @param {number} priority 优先级，小于0在默认Pass之前，大于0在默认Pass之后\n   * @param {RenderTarget} renderTarget 指定的 Render Target\n   * @param {Material} replaceMaterial 替换模型的默认材质\n   * @param {number} mask 与 Component.renderPassFlag 进行 bit and 操作，对这个 Pass 需要渲染的对象进行筛选\n   * @param {ALight} light 需要生成 ShadowMap 的光源\n   */\n  constructor(name, priority, renderTarget, replaceMaterial, mask, light) {\n    super(name, priority, renderTarget, replaceMaterial, mask);\n    this.light = light;\n  }\n\n  /**\n   * Pass 渲染前调用\n   * @param {Camera} camera 相机\n   * @param {RenderQueue} opaqueQueue 不透明物体渲染队列\n   * @param {RenderQueue} transparentQueue 透明物体渲染队列\n   */\n  preRender(camera: Camera, opaqueQueue, transparentQueue) {\n    // 光源视点 VP 矩阵\n    this.replaceMaterial.setValue(\"u_viewMatFromLight\", this.light.viewMatrix);\n    this.replaceMaterial.setValue(\"u_projMatFromLight\", this.light.shadow.projectionMatrix);\n  }\n}\n","import { BlendFunc, CompFunc, RenderState } from \"../base/Constant\";\nimport { ComplexMaterial } from \"../material/ComplexMaterial\";\nimport { RenderTechnique } from \"../material/RenderTechnique\";\nimport { LightShadow } from \"./LightShadow\";\nimport fs from \"./shaders/shadow.fs.glsl\";\nimport vs from \"./shaders/vertex.glsl\";\n\n/**\n * 接收阴影的材质\n * @private\n */\nexport class ShadowMaterial extends ComplexMaterial {\n  public shadowMapCount;\n  /**\n   * 生成内部所使用的 Technique 对象\n   * @private\n   */\n  _generateTechnique(camera, component) {\n    const customMacros = this._generateMacros();\n    const uniforms = this._generateFragmentUniform();\n\n    //--\n    const tech = new RenderTechnique(this.name);\n    tech.autoConvert = false;\n    tech.isValid = true;\n    tech.uniforms = uniforms;\n    tech.attributes = {};\n    tech.states = {};\n    tech.customMacros = customMacros;\n    tech.vertexShader = vs;\n    tech.fragmentShader = fs;\n    tech.states = {\n      enable: [RenderState.BLEND],\n      functions: {\n        depthFunc: [CompFunc.LEQUAL],\n        blendFunc: [BlendFunc.DST_COLOR, BlendFunc.ZERO]\n      }\n    };\n\n    return tech;\n  }\n\n  /**\n   * 添加阴影相关的 uniform 定义\n   * @private\n   */\n  _generateFragmentUniform() {\n    let uniforms = {};\n\n    for (let i = 0; i < this.shadowMapCount; i++) {\n      const lgtUniforms = LightShadow.getUniformDefine(i);\n      uniforms = { ...uniforms, ...lgtUniforms };\n    } // end of for\n\n    return uniforms;\n  }\n\n  /**\n   * 根据阴影的个数，添加相应的宏定义\n   * @private\n   */\n  _generateMacros() {\n    const macros = [];\n\n    if (this.shadowMapCount > 0) {\n      macros.push(`O3_SHADOW_MAP_COUNT ${this.shadowMapCount}`);\n    }\n    return macros;\n  }\n}\n","import { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { ClearMode } from \"../base/Constant\";\nimport { Camera } from \"../Camera\";\nimport { LightFeature } from \"../lighting/LightFeature\";\n\n/**\n * RednerPass 对象\n * @private\n */\nexport class ShadowPass extends RenderPass {\n  constructor(...args) {\n    super(...args);\n    this.clearMode = ClearMode.DONT_CLEAR;\n  }\n\n  /**\n   * Pass 渲染前调用\n   * @param {Camera} camera 相机\n   * @param {RenderQueue} opaqueQueue 不透明物体渲染队列\n   * @param {RenderQueue} transparentQueue 透明物体渲染队列\n   */\n  preRender(camera: Camera, opaqueQueue, transparentQueue) {\n    this.enabled = false;\n    const lightMgr = camera.scene.findFeature(LightFeature);\n    if (lightMgr) {\n      // keep render based on default render pass\n      const pass = camera._renderPipeline.defaultRenderPass;\n      this.renderTarget = pass.renderTarget;\n\n      const lights = lightMgr.visibleLights;\n      let shadowMapCount = 0;\n      for (let i = 0, len = lights.length; i < len; i++) {\n        const lgt: any = lights[i];\n        if (lgt.enableShadow) {\n          lgt.shadow.bindShadowValues(this.replaceMaterial, shadowMapCount, lgt);\n          shadowMapCount++;\n        }\n      } // end of for\n\n      if (shadowMapCount !== this.replaceMaterial.shadowMapCount) {\n        this.replaceMaterial.shadowMapCount = shadowMapCount;\n        this.replaceMaterial.clearTechniques();\n      }\n\n      if (shadowMapCount) this.enabled = true;\n    }\n  }\n}\n","import { ShadowMapMaterial } from \"./ShadowMapMaterial\";\nimport { ShadowMapPass } from \"./ShadowMapPass\";\nimport { ShadowMaterial } from \"./ShadowMaterial\";\nimport { ShadowPass } from \"./ShadowPass\";\nimport { SceneFeature } from \"../SceneFeature\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { Camera } from \"../Camera\";\nimport { MaskList } from \"../base/Constant\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { Component } from \"../Component\";\n\n/**\n * Shadow Feature：场景中 Shadow 特性\n * @extends SceneFeature\n * @private\n */\nexport class ShadowFeature extends SceneFeature {\n  private _shadowPass;\n  private _shadowMapMaterial: ShadowMapMaterial;\n  /**\n   * 场景渲染前的回调, 在此环节生成 Shadow Map\n   * @param {Scene} scene\n   * @param {Camera} camera\n   */\n  preRender(scene, camera: Camera) {\n    const lightMgr = camera.scene.findFeature(LightFeature);\n    if (lightMgr && lightMgr.visibleLights.length > 0) {\n      // 检查添加绘制 Shadow 的 RenderPass\n      if (!this._shadowPass) {\n        this.addShadowPass(camera);\n      }\n\n      // 检查添加绘制 Shadow Map 的 RenderPass\n      const lights = lightMgr.visibleLights;\n      for (let i = 0, len = lights.length; i < len; i++) {\n        const lgt: any = lights[i];\n        if (lgt.enableShadow && !lgt.shadowMapPass) {\n          lgt.shadowMapPass = this.addShadowMapPass(camera, lgt);\n        } else if (!lgt.enableShadow && lgt.shadowMapPass) {\n          const renderer = camera._renderPipeline;\n          renderer.removeRenderPass(lgt.shadowMapPass);\n          lgt.shadowMapPass = null;\n        }\n      } // end of for\n\n      this.updatePassRenderFlag(camera._renderPipeline.opaqueQueue);\n      this.updatePassRenderFlag(camera._renderPipeline.transparentQueue);\n    } // end of if\n  }\n\n  /**\n   * 添加渲染阴影的 RendererPass\n   * @param {Camera} camera\n   */\n  addShadowPass(camera: Camera) {\n    const shadowMaterial = new ShadowMaterial(camera.engine, \"shadowMaterial\");\n    this._shadowPass = new ShadowPass(\"ShadowPass\", 1, null, shadowMaterial, MaskList.SHADOW);\n    const renderer = camera._renderPipeline;\n    renderer.addRenderPass(this._shadowPass);\n  }\n\n  /**\n   * 添加渲染 shadow map 的 RendererPass\n   * @param {Camera} camera\n   * @param {ALight} light\n   */\n  addShadowMapPass(camera: Camera, light) {\n    // 共用 shadow map 材质\n    this._shadowMapMaterial = this._shadowMapMaterial || new ShadowMapMaterial(camera.engine, \"shadowMapMaterial\");\n\n    const shadowMapPass = new ShadowMapPass(\n      \"ShadowMapPass\",\n      -1,\n      light.shadow.renderTarget,\n      this._shadowMapMaterial,\n      MaskList.SHADOW_MAP,\n      light\n    );\n    const renderer = camera._renderPipeline;\n    renderer.addRenderPass(shadowMapPass);\n\n    return shadowMapPass;\n  }\n\n  /**\n   * 用于更新场景中物体的 renderPassFlag 状态\n   * @param {RenderQueue} renderQueue\n   */\n  updatePassRenderFlag(renderQueue: RenderQueue) {\n    const items = renderQueue.items;\n    for (let i = 0, len = items.length; i < len; i++) {\n      const item = items[i];\n      const ability: Component = item.component;\n\n      const recieveShadow = (ability as any).recieveShadow;\n      const castShadow = (ability as any).castShadow;\n      if (recieveShadow === true) {\n        ability.addPassMasks(MaskList.SHADOW);\n      } else if (recieveShadow === false) {\n        ability.removePassMasks(MaskList.SHADOW);\n      }\n\n      if (castShadow === true) {\n        ability.addPassMasks(MaskList.SHADOW_MAP);\n      } else if (castShadow === false) {\n        ability.removePassMasks(MaskList.SHADOW_MAP);\n      }\n    }\n  }\n}\n","import \"./Extension\";\nimport { ShadowFeature } from \"./ShadowFeature\";\nimport { Scene } from \"../Scene\";\n\nScene.registerFeature(ShadowFeature);\n","export { Engine } from \"./Engine\";\nexport { SystemInfo } from \"./SystemInfo\";\nexport type { HardwareRenderer } from \"./HardwareRenderer\";\nexport type { Canvas } from \"./Canvas\";\nexport { EngineFeature } from \"./EngineFeature\";\nexport { AssetObject } from \"./asset/AssetObject\";\n\nexport { Scene } from \"./Scene\";\nexport { SceneVisitor } from \"./SceneVisitor\";\nexport { SceneFeature } from \"./SceneFeature\";\n\nexport { Entity } from \"./Entity\";\nexport { Component } from \"./Component\";\nexport { Script } from \"./Script\";\nexport { RenderableComponent } from \"./RenderableComponent\";\nexport { dependencies } from \"./ComponentsDependencies\";\n\nexport { Camera } from \"./Camera\";\nexport { Transform } from \"./Transform\";\nexport { UpdateFlag } from \"./UpdateFlag\";\nexport { request } from \"./asset/request\";\nexport { Loader } from \"./asset/Loader\";\nexport { ResourceManager, resourceLoader } from \"./asset/ResourceManager\";\nexport { AssetPromise, AssetPromiseStatus } from \"./asset/AssetPromise\";\nexport type { LoadItem } from \"./asset/LoadItem\";\nexport { AssetType } from \"./asset/AssetType\";\nexport { RefObject } from \"./asset/RefObject\";\n\nexport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nexport { RenderQueue } from \"./RenderPipeline//RenderQueue\";\nexport { RenderContext } from \"./RenderPipeline/RenderContext\";\nexport { RenderPass } from \"./RenderPipeline/RenderPass\";\nexport * from \"./base\";\n\n//lighting\nimport { LightFeature, hasLight } from \"./lighting/LightFeature\";\nimport { Scene } from \"./Scene\";\nScene.registerFeature(LightFeature);\n(Scene.prototype as any).hasLight = hasLight;\n// 引用了 raycast\nimport \"./raycast\";\n\nexport { LightFeature };\nexport { AmbientLight } from \"./lighting/AmbientLight\";\nexport { DirectLight } from \"./lighting/DirectLight\";\nexport { PointLight } from \"./lighting/PointLight\";\nexport { SpotLight } from \"./lighting/SpotLight\";\nexport { EnvironmentMapLight } from \"./lighting/EnvironmentMapLight\";\nexport { Light } from \"./lighting/Light\";\n//mesh\nexport { Mesh } from \"./mesh/Mesh\";\nexport { Skin } from \"./mesh/Skin\";\nexport { MeshRenderer } from \"./mesh/MeshRenderer\";\nexport { SkinnedMeshRenderer } from \"./mesh/SkinnedMeshRenderer\";\nexport { LODGroup } from \"./mesh/LODGroup\";\n\n// material\nexport { Material } from \"./material/Material\";\nexport { ComplexMaterial } from \"./material/ComplexMaterial\";\nexport { RenderTechnique } from \"./material/RenderTechnique\";\nexport * from \"./material/type\";\n\nexport * from \"./renderingHardwareInterface/index\";\nexport * from \"./texture/index\";\nexport * from \"./graphic/index\";\nexport * from \"./2d/index\";\nexport * from \"./shaderlib/index\";\nexport * from \"./animation/index\";\nexport * from \"./mobile-material/index\";\nexport * from \"./geometry/index\";\nexport * from \"./geometry-shape/index\";\nexport * from \"./skybox/index\";\nexport * from \"./pbr/index\";\nexport * from \"./particle/index\";\nexport * from \"./trail/index\";\nexport * from \"./collider/index\";\nexport * from \"./collision/index\";\nexport * from \"./fog/index\";\nexport * from \"./env-probe/index\";\nexport * from \"./shadow/index\";\nexport * from \"./Layer\";\n"],"names":["AssetPromise2","CloneMode2","EngineObject2","__decorate","DisorderedArray2","CloneManager2","Component2","UpdateFlag2","Layer2","Transform2","Entity2","FeatureManager2","ComponentsManager2","ResourceManager2","SceneManager2","Scene2","RenderContext2","RenderPass2","SceneVisitor2","RenderQueue2","SeparateSpritePass2","BasicRenderPipeline2","request2","LightFeature2","Light2","SceneFeature2","AmbientLight2","DirectLight2","PointLight2","SpotLight2","EnvironmentMapLight2","ColliderFeature2","Collider2","ABoxCollider2","ASphereCollider2","PlaneCollider2","AssetObject2","RenderableComponent2","RenderElement2","RefObject2","TextureFormat2","RenderBufferColorFormat2","RenderBufferDepthFormat2","TextureFilterMode2","TextureWrapMode2","Texture2","MeshRenderer2","Texture2D2","Util2","Material2","BufferUsage2","IndexFormat2","VertexElementFormat2","BufferUtil2","BufferBindFlag2","SetDataOptions2","VertexBufferBinding2","IndexBufferBinding2","PrimitiveTopology2","ShaderLib2","ShaderFactory2","RenderDepthTexture2","EventDispatcher2","Event2","SkinnedMeshRenderer2","AnimationLayer2","RenderTechnique2","CommonMaterial2","Primitive2","BufferGeometry2","VertexElement2","Buffer2","ShapeGeometry2","GeometryRenderer2","SphereGeometry2","CylinderGeometry2","PlaneGeometry2","CuboidGeometry2","BlinnPhongMaterial2","SkyBoxMaterial2","vs","fs","FRAG_SHADER","TrailMaterial2","Script2","ACollider","FogFeature2","Fog2","EXP2Fog2","RenderTarget2","RenderColorTexture2","Probe2","LightShadow2","ComplexMaterial2","ShadowMaterial2","ShadowPass2","ShadowMapMaterial2","ShadowMapPass2","ShadowFeature2","Scene4"],"mappings":"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"}