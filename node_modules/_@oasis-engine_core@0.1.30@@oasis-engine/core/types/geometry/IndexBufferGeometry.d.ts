import { BufferGeometry } from "./BufferGeometry";
/**
 * IndexBufferGeometry 几何体创建类，当很多顶点共享，且该共享顶点在不同三角形内的数据完全相同时使用，可以节省大量空间
 * @extends BufferGeometry
 */
export declare class IndexBufferGeometry extends BufferGeometry {
    /**
     * @constructor
     * @param {String} name 名称
     */
    constructor(name?: any);
    /**
     * 初始化
     * @param {Attribute[]} attributes 顶点属性数组
     * @param {number} vertexCount 几何体顶点总个数
     * @param {Array} indexValues 顶点序号数组
     * @param {number} usage 数据绘制类型，默认为静态类型 STATIC_DRAW，需要更新数据时使用动态类型 DYNAMIC_DRAW
     */
    initialize(attributes: any, vertexCount: number, indexValues?: any, usage?: any): void;
    /**
     * 设置所有三角形顶点对应的几何体顶点序号
     * @param {Array} values 顶点序号数组
     * @private
     */
    _setAllIndex(values: any): void;
    setAllIndex(values: any): void;
    /**
     * 获取所有三角形顶点对应的几何体顶点序号
     * @returns {TypedArray} 几何体顶点序号集
     */
    getAllIndex(): any;
    /**
     * 获取三角形顶点序号的几何体顶点序号
     * @param {number} index 三角形顶点序号
     * @returns {TypedArray} 几何体顶点序号
     */
    getIndex(index: any): any;
}
