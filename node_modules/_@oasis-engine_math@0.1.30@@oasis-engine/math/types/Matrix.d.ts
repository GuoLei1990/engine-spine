import { IClone } from "@oasis-engine/design";
import { Quaternion } from "./Quaternion";
import { Vector3 } from "./Vector3";
/**
 * 4x4矩阵。
 */
export declare class Matrix implements IClone {
    /** @internal */
    private static readonly _tempVec30;
    /** @internal */
    private static readonly _tempVec31;
    /** @internal */
    private static readonly _tempVec32;
    /** @internal */
    private static readonly _tempMat30;
    /** @internal */
    private static readonly _tempMat40;
    /** @internal 单位矩阵。*/
    static readonly _identity: Matrix;
    /**
     * 将两个矩阵相乘。
     * @param left - 左矩阵
     * @param right - 右矩阵
     * @param out - 矩阵相乘的结果
     */
    static multiply(left: Matrix, right: Matrix, out: Matrix): void;
    /**
     * 判断两个矩阵的值是否相等。
     * @param left - 左矩阵
     * @param right - 右矩阵
     * @returns 两个矩阵是否相等，是返回 true，否则返回 false
     */
    static equals(left: Matrix, right: Matrix): boolean;
    /**
     * 通过四元数生成旋转矩阵。
     * @param q - 四元数
     * @param out - 转换后的4x4矩阵
     */
    static rotationQuaternion(q: Quaternion, out: Matrix): void;
    /**
     * 通过绕任意轴旋转生成4x4矩阵。
     * * @param axis - 旋转轴
     * @param r - 旋转角度
     * @param out - 指定旋转后矩阵
     */
    static rotationAxisAngle(axis: Vector3, r: number, out: Matrix): void;
    /**
     * 通过指定的旋转四元数,转换向量生成4x4矩阵。
     * @param q - 旋转四元数
     * @param trans - 转换向量
     * @param out - 生成的4x4矩阵
     */
    static rotationTranslation(q: Quaternion, trans: Vector3, out: Matrix): void;
    /**
     * 创建仿射矩阵。
     * @param scale - 缩放向量
     * @param rotation - 旋转四元数
     * @param trans - 转换向量
     * @param out - 生成的4x4矩阵
     */
    static affineTransformation(scale: Vector3, rotation: Quaternion, trans: Vector3, out: Matrix): void;
    /**
     * 通过指定缩放生成4x4矩阵。
     * @param s - 缩放向量
     * @param out - 指定缩放后矩阵
     */
    static scaling(s: Vector3, out: Matrix): void;
    /**
     * 通过指定平移生成4x4矩阵。
     * @param trans - 平移向量
     * @param out - 指定平移后矩阵
     */
    static translation(trans: Vector3, out: Matrix): void;
    /**
     * 计算矩阵 a 的逆矩阵，并将结果输出到 out。
     * @param a - 矩阵
     * @param out - 逆矩阵
     */
    static invert(a: Matrix, out: Matrix): void;
    /**
     * 计算观察矩阵，基于右手坐标系。
     * @param eye - 观察者视点位置
     * @param target - 视点目标
     * @param up - 向上向量
     * @param out - 观察矩阵
     */
    static lookAt(eye: Vector3, target: Vector3, up: Vector3, out: Matrix): void;
    /**
     * 计算正交投影矩阵。
     * @param left - 视锥左边界
     * @param right - 视锥右边界
     * @param bottom - 视锥底边界
     * @param top - 视锥顶边界
     * @param near - 视锥近边界
     * @param far - 视锥远边界
     * @param out - 正交投影矩阵
     */
    static ortho(left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix): void;
    /**
     * 计算透视投影矩阵。
     * @param fovy - 视角
     * @param aspect - 视图的宽高比
     * @param near - 近裁面
     * @param far - 远裁面
     * @param out - 透视投影矩阵
     */
    static perspective(fovy: number, aspect: number, near: number, far: number, out: Matrix): void;
    /**
     * 将矩阵 a 按给定角度旋转，并将结果输出到 out。
     * @param m - 矩阵
     * @param axis - 旋转轴
     * @param r - 给定的旋转角度
     * @param out - 旋转后的矩阵
     */
    static rotateAxisAngle(m: Matrix, axis: Vector3, r: number, out: Matrix): void;
    /**
     * 将矩阵 a 按给定向量 v 缩放，并将结果输出到 out。
     * @param m - 矩阵
     * @param s - 缩放向量
     * @param out - 缩放后的矩阵
     */
    static scale(m: Matrix, s: Vector3, out: Matrix): void;
    /**
     * 将矩阵 a 按给定向量 v 转换，并将结果输出到 out。
     * @param m - 矩阵
     * @param v - 转换向量
     * @param out - 转换后的结果
     */
    static translate(m: Matrix, v: Vector3, out: Matrix): void;
    /**
     * 计算矩阵 a 的转置矩阵，并将结果输出到 out。
     * @param a - 矩阵
     * @param out - 转置矩阵
     */
    static transpose(a: Matrix, out: Matrix): void;
    /**
     * 矩阵元素数组，采用列矩阵的模式存储。
     * @remarks
     * elements[0] 表示第 1 列第 1 行 m11
     * elements[1] 表示第 1 列第 2 行 m12
     * elements[2] 表示第 1 列第 3 行 m13
     * elements[3] 表示第 1 列第 4 行 m14
     * elements[4] 表示第 2 列第 1 行 m21
     * 依次类推
     */
    elements: Float32Array;
    /**
     * 创建4x4矩阵实例，默认创建单位矩阵，采用列矩阵的模式存储。
     * @param m11 - 默认值 1，column 1, row 1
     * @param m12 - 默认值 0，column 1, row 2
     * @param m13 - 默认值 0，column 1, row 3
     * @param m14 - 默认值 0，column 1, row 4
     * @param m21 - 默认值 0，column 2, row 1
     * @param m22 - 默认值 1，column 2, row 2
     * @param m23 - 默认值 0，column 2, row 3
     * @param m24 - 默认值 0，column 2, row 4
     * @param m31 - 默认值 0，column 3, row 1
     * @param m32 - 默认值 0，column 3, row 2
     * @param m33 - 默认值 1，column 3, row 3
     * @param m34 - 默认值 0，column 3, row 4
     * @param m41 - 默认值 0，column 4, row 1
     * @param m42 - 默认值 0，column 4, row 2
     * @param m43 - 默认值 0，column 4, row 3
     * @param m44 - 默认值 1，column 4, row 4
     */
    constructor(m11?: number, m12?: number, m13?: number, m14?: number, m21?: number, m22?: number, m23?: number, m24?: number, m31?: number, m32?: number, m33?: number, m34?: number, m41?: number, m42?: number, m43?: number, m44?: number);
    /**
     * 给矩阵设置值，并返回当前值。
     * @param m11 - column 1, row 1
     * @param m12 - column 1, row 2
     * @param m13 - column 1, row 3
     * @param m14 - column 1, row 4
     * @param m21 - column 2, row 1
     * @param m22 - column 2, row 2
     * @param m23 - column 2, row 3
     * @param m24 - column 2, row 4
     * @param m31 - column 3, row 1
     * @param m32 - column 3, row 2
     * @param m33 - column 3, row 3
     * @param m34 - column 3, row 4
     * @param m41 - column 4, row 1
     * @param m42 - column 4, row 2
     * @param m43 - column 4, row 3
     * @param m44 - column 4, row 4
     * @returns 当前矩阵
     */
    setValue(m11: number, m12: number, m13: number, m14: number, m21: number, m22: number, m23: number, m24: number, m31: number, m32: number, m33: number, m34: number, m41: number, m42: number, m43: number, m44: number): Matrix;
    /**
     * 通过数组设置值，并返回当前矩阵。
     * @param array - 数组
     * @param offset - 数组偏移
     * @returns 当前矩阵
     */
    setValueByArray(array: ArrayLike<number>, offset?: number): Matrix;
    /**
     * 拷贝到数组。
     * @param out - 数组。
     * @param outOffset - 数组偏移。
     */
    toArray(out: number[] | Float32Array | Float64Array, outOffset?: number): void;
    /**
     * 创建一个新的矩阵，并用当前矩阵值初始化。
     * @returns 一个新的矩阵，并且拷贝当前矩阵的值
     */
    clone(): Matrix;
    /**
     * 将当前矩阵值拷贝给 out 矩阵。
     * @param out - 目标矩阵
     */
    cloneTo(out: Matrix): Matrix;
    /**
     * 将当前矩阵乘以给定的向量 right，并返回当前矩阵。
     * @param right - 给定的向量，右操作数
     * @returns 当前矩阵
     */
    multiply(right: Matrix): Matrix;
    /**
     * 计算4x4矩阵的行列式。
     * @returns 当前矩阵的行列式
     */
    determinant(): number;
    /**
     * 将矩阵分解为平移向量、旋转四元数、缩放向量。
     * @param pos - 平移向量
     * @param q - 旋转四元数
     * @param s - 缩放向量
     * @returns 是否可以分解。
     */
    decompose(pos: Vector3, q: Quaternion, s: Vector3): boolean;
    /**
     * 从矩阵中返回表示旋转的四元数。
     * @param a - 转换矩阵
     * @param out - 表示旋转的四元数
     * @returns 当前矩阵的旋转四元数
     */
    getRotation(out: Quaternion): Quaternion;
    /**
     * 从矩阵中返回缩放向量。
     * @param out - 缩放向量
     * @returns 当前矩阵的缩放向量
     */
    getScaling(out: Vector3): Vector3;
    /**
     * 从矩阵中返回转换向量。
     * @param out - 转换向量
     * @returns 当前矩阵的转换向量
     */
    getTranslation(out: Vector3): Vector3;
    /**
     * 将矩阵设置为单位矩阵。
     * @returns 当前矩阵
     */
    identity(): Matrix;
    /**
     * 计算当前矩阵的逆矩阵，并返回。
     * @returns 当前矩阵
     */
    invert(): Matrix;
    /**
     * 将当前矩阵按给定角度旋转，并返回。
     * @param axis - 旋转轴
     * @param r - 给定的旋转角度
     * @returns 当前矩阵
     */
    rotateAxisAngle(axis: Vector3, r: number): Matrix;
    /**
     * 将当前矩阵按给定向量 v 缩放，并返回。
     * @param s
     * @returns 当前矩阵
     */
    scale(s: Vector3): Matrix;
    /**
     * 将当前矩阵按给定向量 v 转换，并返回。
     * @param v - 转换向量
     * @returns 当前矩阵
     */
    translate(v: Vector3): Matrix;
    /**
     * 计算当前矩阵的转置矩阵，并返回。
     * @returns 当前矩阵
     */
    transpose(): Matrix;
}
