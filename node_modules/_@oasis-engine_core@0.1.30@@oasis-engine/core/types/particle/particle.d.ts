import { BufferGeometry, GeometryRenderer } from "../geometry";
import { RenderTechnique } from "../material/RenderTechnique";
/**
 * GPU粒子系统渲染类
 * @extends GeometryRenderer
 */
export declare class GPUParticleSystem extends GeometryRenderer {
    private _vertexStride;
    private _vertices;
    private _vertexBuffer;
    private _time;
    private _isInit;
    private _isStart;
    maxCount: number;
    options: {};
    getOptions: any;
    rotateToVelocity: boolean;
    blendFunc: number[];
    blendFuncSeparate: number[];
    useOriginColor: boolean;
    fragmentShader: string;
    vertexShader: string;
    particleTex: any;
    fadeIn: boolean;
    fadeOut: boolean;
    particleMaskTex: any;
    isScaleByLifetime: boolean;
    scaleFactor: number;
    spriteSheet: any[];
    is2d: boolean;
    interleaved: boolean;
    /**
     * @constructor
     * @param {Entity} entity 节点对象
     */
    constructor(entity: any);
    /**
     * 粒子发射参数
     * @typedef {Object} ParticleParam
     * @property {Vector3} position 位置，默认[0, 0, 0]
     * @property {Vector3} velocity 速度，默认[0, 0, 0]
     * @property {Vector3} acceleration 加速度，默认[0, 0, 0]
     * @property {Vector3} color  颜色，默认[1, 1, 1]，范围 0 ~ 1
     * @property {number} size  大小，默认 10，范围  >0
     * @property {number} startAngle  初始旋转角度，默认0，范围 0 ~ 2*PI
     * @property {number} rotateRate  自转旋转角速率，默认0
     * @property {number} lifetime  生命周期，默认5，范围  >0
     * @property {number} alpha 透明度，默认1，范围 0 ~ 1
     * @property {Vector3} positionRandomness  位置随机因子，默认[0,0,0]，范围  >0
     * @property {Array} positionArray  固定位置数组
     * @property {Vector3} velocityRandomness  速度随机因子，默认[0, 0, 0]，范围  >0
     * @property {Vector3} accelerationRandomness  加速度随机因子，默认[0, 0, 0]，范围  >0
     * @property {number} colorRandomness  颜色随机因子，默认0，范围  0 ~ 1
     * @property {number} sizeRandomness  大小随机因子，默认0，范围  0 ~ 1
     * @property {number} alphaRandomness  透明度随机因子，默认0，范围 0 ~ 1
     * @property {number} startAngleRandomness  初始旋转角度随机因子，默认0，范围 0 ~ 1
     * @property {number} rotateRateRandomness  自转旋转角速率随机因子，默认0，范围   >0
     * @property {number} startTimeRandomness  每个粒子出现的时间点随机因子，单位秒   >0
     */
    /**
     * 初始化
     * @param {ParticleProps} props 初始化参数
     * @param {number} [ParticleProps.maxCount = 1000] 最大粒子数
     * @param {boolean} [ParticleProps.once = false] 是否只发射一帧, 默认
     * @param {ParticleParam} [ParticleProps.options] 发射参数
     * @param {Function} [ParticleProps.getOptions] 获取更新参数（每帧回调）
     * @param {boolean} [ParticleProps.rotateToVelocity] 是否跟随粒子运动速度的方向。
     * @param {Array} [ParticleProps.blendFunc] webgl 混合因子，默认透明度混合 [SRC_ALPHA, ONE_MINUS_SRC_ALPHA]
     * @param {Array} [ParticleProps.blendFuncSeparate] webgl 混合因子alpha通道分离，优先级高于blendFunc，如无指定使用blendFunc
     * @param {boolean} [ParticleProps.useOriginColor = true] 是否使用图片原色: true(使用图片原色)、 false(图片原色混合生成的颜色)
     * @param {string} [ParticleProps.fragmentShader] 自定义片元着色器
     * @param {string} [ParticleProps.vertexShader] 自定义定点着色器
     * @param {Texture} [ParticleProps.texture] 粒子贴图
     * @param {Texture} [ParticleProps.maskTexture] 粒子遮罩贴图
     * @param {boolean} [ParticleProps.isScaleByLifetime = false] 是否随生命周期缩小至消失
     * @param {boolean} [ParticleProps.fadeIn = false] 是否添加淡入效果
     * @param {boolean} [ParticleProps.fadeOut = false] 是否添加淡出效果
     * @param {number} [ParticleProps.scaleFactor = 1] 粒子随时间scale参数
     * @param {Array} [ParticleProps.spriteSheet] 雪碧图数据
     * @param {boolean} [ParticleProps.is2d] 是否是2D旋转
     */
    initialize(props: any): this;
    /**
     * 更新参数
     * @param {number} deltaTime 帧间隔时间
     * @private
     */
    update(deltaTime: any): void;
    /**
     * 设置粒子发射参数
     * @param {ParticleParam} options 发射参数
     */
    setOptions(options: any): this;
    /**
     * 激活发射模块，重新开始发射 */
    start(): void;
    /**
     * 停止发射
     */
    stop(): void;
    /**
     * 销毁资源
     * @private
     */
    destroy(): void;
    /**
     * 创建材质
     * @private
     */
    setMaterial(): void;
    /**
     * 创建 Technique
     * @private
     */
    _createTechnique(): RenderTechnique;
    /**
     * 创建几何体
     * @private
     */
    _createGeometry(): BufferGeometry;
    /**
     * 粒子发射
     * @param {Options} options
     * @private
     */
    _spawnParticle(options: any, i: any): void;
    /**
     * 设置每个粒子的uv
     * @param i {number} 第i个粒子
     * @param j {number} 单个粒子四个顶点中的第j个
     * @param k {number} 所有粒子顶点中的第k个
     */
    private _setUvs;
    /**
     * 获取随机数
     * @returns {number}
     * @private
     */
    _getRandom(): number;
    /**
     * 获取着色器代码
     * @returns {string}
     * @private
     */
    _getShader(): {
        vertexShader: string;
        postionShader: string;
        sizeVertexShader: string;
        isScaleByLifetimeVertexShader: string;
        rotateToVelocityVertexShader: string;
        rotationVertexShader: string;
        rotation2dShader: string;
        rotation3dShader: string;
        fragmentShader: string;
        fadeInFragmentShader: string;
        fadeOutFragmentShader: string;
        noImgFragmentShader: string;
        imgFragmentShader: string;
        originColorFragmentShader: string;
        createColorFragmentShader: string;
        createColorWithMaskFragmentShader: string;
    };
    /**
     * 创建顶点着色器
     * @returns {string}
     * @private
     */
    _createVertexShader(): string;
    /**
     * 创建片元着色器
     * @returns {string}
     * @private
     */
    _createFragmentShader(): string;
}
