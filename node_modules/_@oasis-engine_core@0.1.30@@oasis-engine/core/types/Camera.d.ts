import { Matrix, Vector2, Vector3, Vector4, Ray } from "@oasis-engine/math";
import { ClearMode } from "./base";
import { Component } from "./Component";
import { Entity } from "./Entity";
import { Layer } from "./Layer";
import { BasicRenderPipeline } from "./RenderPipeline/BasicRenderPipeline";
import { TextureCubeFace } from "./texture/enums/TextureCubeFace";
import { RenderTarget } from "./texture/RenderTarget";
/**
 * @todo
 */
declare type Sky = {};
/**
 * 相机的清除标记。
 */
export declare enum ClearFlags {
    DepthSky = 0,
    DepthColor = 1,
    Depth = 2,
    None = 3
}
/**
 * Camera 组件，作为渲染三位世界的入口。
 */
export declare class Camera extends Component {
    /** 渲染优先级，数字越大越先渲染。*/
    priority: number;
    /**
     * 渲染遮罩。
     * @remarks 位操作，对应 Entity 的 layer。
     */
    cullingMask: Layer;
    private _isOrthographic;
    private _isProjMatSetting;
    private _clearMode;
    private _nearClipPlane;
    private _farClipPlane;
    private _fieldOfView;
    private _orthographicSize;
    private _isProjectionDirty;
    private _isInvProjMatDirty;
    private _customAspectRatio;
    private _renderTarget;
    _renderPipeline: BasicRenderPipeline;
    private _transform;
    private _isViewMatrixDirty;
    private _isInvViewProjDirty;
    private _projectionMatrix;
    private _viewMatrix;
    private _backgroundColor;
    private _viewport;
    private _inverseProjectionMatrix;
    private _inverseViewMatrix;
    private _lastAspectSize;
    private _invViewProjMat;
    /**
     * 近裁剪平面。
     */
    get nearClipPlane(): number;
    set nearClipPlane(value: number);
    /**
     * 远裁剪平面。
     */
    get farClipPlane(): number;
    set farClipPlane(value: number);
    /**
     * 视场，单位是角度制，透视投影时生效。
     */
    get fieldOfView(): number;
    set fieldOfView(value: number);
    /**
     * 横纵比，默认由视口的宽高比自动计算，如果手动设置会保持手动值，调用resetAspectRatio()可恢复。
     */
    get aspectRatio(): number;
    set aspectRatio(value: number);
    /**
     * 视口，归一化表达，左上角为（0，0），右下角为（1，1）。
     * @remarks 修改后需要重新赋值,保证修改生效。
     */
    get viewport(): Vector4;
    set viewport(value: Vector4);
    /**
     * 是否正交，默认是 false。true 会使用正交投影，false 使用透视投影。
     */
    get isOrthographic(): boolean;
    set isOrthographic(value: boolean);
    /**
     * 正交模式下相机的一半尺寸。
     */
    get orthographicSize(): number;
    set orthographicSize(value: number);
    /**
     * 背景清除标记。
     */
    get clearFlags(): ClearFlags;
    /**
     * @todo 天空盒重构
     */
    set clearFlags(value: ClearFlags);
    /**
     * 清除视口的背景颜色，当 clearFlags 为 DepthColor 时生效。
     */
    get backgroundColor(): Vector4;
    set backgroundColor(value: Vector4);
    /**
     * 清除视口的背景天空，当 clearFlags 为 DepthSky 时生效。
     * @todo 渲染管线修改
     */
    get backgroundSky(): Sky;
    /**
     * 视图矩阵。
     */
    get viewMatrix(): Readonly<Matrix>;
    /**
     * 投影矩阵,默认由相机的相关参数计算计算，如果手动设置会保持手动值，调用resetProjectionMatrix()可恢复。
     */
    set projectionMatrix(value: Matrix);
    get projectionMatrix(): Matrix;
    /**
     * 是否开启HDR。
     * @todo 渲染管线修改
     */
    get enableHDR(): boolean;
    set enableHDR(value: boolean);
    /**
     * 渲染目标，设置后会渲染到渲染目标上，如果为空则渲染到主画布。
     */
    get renderTarget(): RenderTarget | null;
    set renderTarget(value: RenderTarget | null);
    /**
     * 创建 Camera 组件。
     * @param entity 实体
     */
    constructor(entity: Entity);
    /**
     * 恢复通过 fieldOfView、nearClipPlane 和 farClipPlane 自动计算投影矩阵。
     */
    resetProjectionMatrix(): void;
    /**
     * 恢复通过视口宽高比自动计算横纵比。
     */
    resetAspectRatio(): void;
    /**
     * 将一个点从世界空间变换到视口空间。
     * @param point - 世界空间中的点
     * @param out - 视口空间的点，X 和 Y 为视口空间坐标，Z 为视口深度，近裁剪面为 0，远裁剪面为 1，W 为距离相机的世界单位距离
     * @returns 视口空间的点
     */
    worldToViewportPoint(point: Vector3, out: Vector4): Vector4;
    /**
     * 将一个点从视口空间变换到世界空间。
     * @param point - X 和 Y 为视口空间坐标，Z 为视口深度，近裁剪面为 0，远裁剪面为 1
     * @param out - 世界空间中的点
     * @returns 世界空间中的点
     */
    viewportToWorldPoint(point: Vector3, out: Vector3): Vector3;
    /**
     * 通过视口空间点的点获取射线，生成射线的起点在相机的近裁面并穿过点的 X 和 Y 坐标。
     * @param point 视口空间中的点
     * @param out - 射线
     * @returns 射线
     */
    viewportPointToRay(point: Vector2, out: Ray): Ray;
    /**
     * 将一个点的X和Y坐标从屏幕空间变换到视口空间
     * @param point - 屏幕空间点
     * @param out - 视口空间点
     * @returns 射线
     */
    screenToViewportPoint<T extends Vector2 | Vector3>(point: Vector3 | Vector2, out: T): T;
    /**
     * 将一个点的X和Y坐标从视口空间变换到屏幕空间。
     * @param point - 视口空间的点
     * @param out - 屏幕空间的点
     * @returns 射线
     */
    viewportToScreenPoint<T extends Vector2 | Vector3 | Vector4>(point: T, out: T): T;
    /**
     * 将一个点从世界空间变换到屏幕空间。
     * @param point - 世界空间中的点
     * @param out - 屏幕空间的点
     * @returns 屏幕空间的点
     */
    worldToScreenPoint(point: Vector3, out: Vector4): Vector4;
    /**
     * 将一个点从屏幕空间变换到世界空间。
     * @param point - 屏幕空间点
     * @param out - 世界空间中的点
     * @returns 世界空间中的点
     */
    screenToWorldPoint(point: Vector3, out: Vector3): Vector3;
    /**
     * 手动调用相机的渲染。
     * @param cubeFaces - 立方体的渲染面集合,如果设置了renderTarget并且renderTarget.isCube=true时生效
     */
    render(cubeFaces?: TextureCubeFace): void;
    /**
     * @override
     * @inheritdoc
     */
    _onActive(): void;
    /**
     * @override
     * @inheritdoc
     */
    _onInActive(): void;
    /**
     * @override
     * @inheritdoc
     */
    _onDestroy(): void;
    private _projMatChange;
    private _innerViewportToWorldPoint;
    /**
     * @private
     * 视图投影矩阵逆矩阵
     */
    get invViewProjMat(): Matrix;
    /**
     * @private
     * 投影矩阵逆矩阵。
     */
    get inverseProjectionMatrix(): Readonly<Matrix>;
    /**
     * @deprecated
     * 视图矩阵逆矩阵。
     */
    get inverseViewMatrix(): Readonly<Matrix>;
    /**
     * @deprecated
     * @todo 涉及渲染管线修改 rhi.clearRenderTarget 方法
     * @param clearMode
     * @param backgroundColor
     */
    setClearMode(clearMode?: ClearMode, backgroundColor?: Vector4): void;
}
export {};
