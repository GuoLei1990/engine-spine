import { ResourceManager } from "./asset/ResourceManager";
import { EventDispatcher, Time } from "./base";
import { Canvas } from "./Canvas";
import { ComponentsManager } from "./ComponentsManager";
import { EngineFeature } from "./EngineFeature";
import { Entity } from "./Entity";
import { HardwareRenderer } from "./HardwareRenderer";
import { Scene } from "./Scene";
import { SceneManager } from "./SceneManager";
/**
 * 引擎。
 */
export declare class Engine extends EventDispatcher {
    _componentsManager: ComponentsManager;
    _hardwareRenderer: HardwareRenderer;
    protected _canvas: Canvas;
    private _resourceManager;
    private _sceneManager;
    private _vSyncCount;
    private _targetFrameRate;
    private _time;
    private _isPaused;
    private _requestId;
    private _timeoutId;
    private _loopCounter;
    private _targetFrameInterval;
    private _animate;
    /**
     * 渲染画布。
     */
    get canvas(): Canvas;
    /**
     * 资源管理器。
     */
    get resourceManager(): ResourceManager;
    /**
     * 场景管理器。
     */
    get sceneManager(): SceneManager;
    /**
     * 计时器。
     */
    get time(): Time;
    /**
     * 是否暂停。
     */
    get isPaused(): boolean;
    /**
     * 垂直同步数量,表示执行一帧的垂直消隐数量,0表示关闭垂直同步。
     */
    get vSyncCount(): number;
    set vSyncCount(value: number);
    /**
     * 目标帧率，vSyncCount = 0（即关闭垂直同步）时生效。
     * 值越大，目标帧率越高，Number.POSITIVE_INFINIT 表示无穷大目标帧率。
     */
    get targetFrameRate(): number;
    set targetFrameRate(value: number);
    /**
     * @deprecated
     * 图形API渲染器。
     */
    get renderhardware(): HardwareRenderer;
    /**
     * 创建引擎。
     * @param canvas - 渲染画布
     * @param hardwareRenderer - 渲染器
     */
    constructor(canvas: Canvas, hardwareRenderer: HardwareRenderer);
    /**
     * 创建实体。
     * @param name - 名字
     */
    createEntity(name?: string): Entity;
    /**
     * 暂停引擎循环。
     */
    pause(): void;
    /**
     * 恢复引擎循环。
     */
    resume(): void;
    /**
     * 引擎手动更新，如果调用 run() 则一般无需调用该函数。
     */
    update(): void;
    /**
     * 执行引擎循环。
     */
    run(): void;
    /**
     * 销毁引擎。
     */
    destroy(): void;
    _render(scene: Scene): void;
    findFeature(Feature: any): EngineFeature;
    static registerFeature(Feature: new () => EngineFeature): void;
    features: EngineFeature[];
}
