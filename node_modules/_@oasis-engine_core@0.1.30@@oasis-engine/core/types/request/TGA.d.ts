/**
 * TGA
 * @class
 * @private
 */
export declare class TGA {
    header: any;
    palette: any;
    imageData: any;
    parseData(data: any): any;
    /**
     * Check the header of TGA file to detect errors
     *
     * @param {object} tga header structure
     * @throws Error
     */
    static checkHeader(header: any): void;
    /**
     * Decode RLE compression
     *
     * @param {Uint8Array} data
     * @param {number} offset in data to start loading RLE
     * @param {number} pixel count
     * @param {number} output buffer size
     */
    static decodeRLE(data: any, offset: any, pixelSize: any, outputSize: any): Uint8Array;
    /**
     * Return a ImageData object from a TGA file (8bits)
     *
     * @param {Array} imageData - ImageData to bind
     * @param {Array} indexes - index to colormap
     * @param {Array} colormap
     * @param {number} width
     * @param {number} y_start - start at y pixel.
     * @param {number} x_start - start at x pixel.
     * @param {number} y_step  - increment y pixel each time.
     * @param {number} y_end   - stop at pixel y.
     * @param {number} x_step  - increment x pixel each time.
     * @param {number} x_end   - stop at pixel x.
     * @returns {Array} imageData
     */
    static getImageData8bits(imageData: any, indexes: any, colormap: any, width: any, y_start: any, y_step: any, y_end: any, x_start: any, x_step: any, x_end: any): any;
    /**
     * Return a ImageData object from a TGA file (16bits)
     *
     * @param {Array} imageData - ImageData to bind
     * @param {Array} pixels data
     * @param {Array} colormap - not used
     * @param {number} width
     * @param {number} y_start - start at y pixel.
     * @param {number} x_start - start at x pixel.
     * @param {number} y_step  - increment y pixel each time.
     * @param {number} y_end   - stop at pixel y.
     * @param {number} x_step  - increment x pixel each time.
     * @param {number} x_end   - stop at pixel x.
     * @returns {Array} imageData
     */
    static getImageData16bits(imageData: any, pixels: any, colormap: any, width: any, y_start: any, y_step: any, y_end: any, x_start: any, x_step: any, x_end: any): any;
    /**
     * Return a ImageData object from a TGA file (24bits)
     *
     * @param {Array} imageData - ImageData to bind
     * @param {Array} pixels data
     * @param {Array} colormap - not used
     * @param {number} width
     * @param {number} y_start - start at y pixel.
     * @param {number} x_start - start at x pixel.
     * @param {number} y_step  - increment y pixel each time.
     * @param {number} y_end   - stop at pixel y.
     * @param {number} x_step  - increment x pixel each time.
     * @param {number} x_end   - stop at pixel x.
     * @returns {Array} imageData
     */
    static getImageData24bits(imageData: any, pixels: any, colormap: any, width: any, y_start: any, y_step: any, y_end: any, x_start: any, x_step: any, x_end: any): any;
    /**
     * Return a ImageData object from a TGA file (32bits)
     *
     * @param {Array} imageData - ImageData to bind
     * @param {Array} pixels data
     * @param {Array} colormap - not used
     * @param {number} width
     * @param {number} y_start - start at y pixel.
     * @param {number} x_start - start at x pixel.
     * @param {number} y_step  - increment y pixel each time.
     * @param {number} y_end   - stop at pixel y.
     * @param {number} x_step  - increment x pixel each time.
     * @param {number} x_end   - stop at pixel x.
     * @returns {Array} imageData
     */
    static getImageData32bits(imageData: any, pixels: any, colormap: any, width: any, y_start: any, y_step: any, y_end: any, x_start: any, x_step: any, x_end: any): any;
    /**
     * Return a ImageData object from a TGA file (8bits grey)
     *
     * @param {Array} imageData - ImageData to bind
     * @param {Array} pixels data
     * @param {Array} colormap - not used
     * @param {number} width
     * @param {number} y_start - start at y pixel.
     * @param {number} x_start - start at x pixel.
     * @param {number} y_step  - increment y pixel each time.
     * @param {number} y_end   - stop at pixel y.
     * @param {number} x_step  - increment x pixel each time.
     * @param {number} x_end   - stop at pixel x.
     * @returns {Array} imageData
     */
    static getImageDataGrey8bits(imageData: any, pixels: any, colormap: any, width: any, y_start: any, y_step: any, y_end: any, x_start: any, x_step: any, x_end: any): any;
    /**
     * Return a ImageData object from a TGA file (16bits grey)
     *
     * @param {Array} imageData - ImageData to bind
     * @param {Array} pixels data
     * @param {Array} colormap - not used
     * @param {number} width
     * @param {number} y_start - start at y pixel.
     * @param {number} x_start - start at x pixel.
     * @param {number} y_step  - increment y pixel each time.
     * @param {number} y_end   - stop at pixel y.
     * @param {number} x_step  - increment x pixel each time.
     * @param {number} x_end   - stop at pixel x.
     * @returns {Array} imageData
     */
    static getImageDataGrey16bits(imageData: any, pixels: any, colormap: any, width: any, y_start: any, y_step: any, y_end: any, x_start: any, x_step: any, x_end: any): any;
    /**
     * Return a ImageData object from a TGA file
     *
     * @param {object} imageData - Optional ImageData to work with
     * @returns {object} imageData
     */
    getImageData(imageData: any): any;
    /**
     * Return a canvas with the TGA render on it
     *
     * @returns {object} CanvasElement
     */
    getCanvas(): HTMLCanvasElement;
    /**
     * Return a dataURI of the TGA file
     *
     * @param {string} type - Optional image content-type to output (default: image/png)
     * @returns {string} url
     */
    getDataURL(type?: any): string;
    static Type: {
        NO_DATA: number;
        INDEXED: number;
        RGB: number;
        GREY: number;
        RLE_INDEXED: number;
        RLE_RGB: number;
        RLE_GREY: number;
    };
    static Origin: {
        BOTTOM_LEFT: number;
        BOTTOM_RIGHT: number;
        TOP_LEFT: number;
        TOP_RIGHT: number;
        SHIFT: number;
        MASK: number;
    };
}
