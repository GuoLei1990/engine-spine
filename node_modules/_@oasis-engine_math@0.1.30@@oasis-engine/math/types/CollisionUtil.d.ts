import { BoundingBox } from "./BoundingBox";
import { BoundingFrustum } from "./BoundingFrustum";
import { BoundingSphere } from "./BoundingSphere";
import { ContainmentType } from "./enums/ContainmentType";
import { PlaneIntersectionType } from "./enums/PlaneIntersectionType";
import { Plane } from "./Plane";
import { Ray } from "./Ray";
import { Vector3 } from "./Vector3";
/**
 * 检测碰撞工具类。
 */
export declare class CollisionUtil {
    private static _tempVec30;
    private static _tempVec31;
    /**
     * 计算一个点到一个平面的距离。
     * @param plane - 平面
     * @param point - 点
     * @returns 点到平面的距离
     */
    static distancePlaneAndPoint(plane: Plane, point: Vector3): number;
    /**
     * 判断平面和点的相交状态。
     * @param plane - 平面
     * @param point - 点
     * @returns 相交状态
     */
    static intersectsPlaneAndPoint(plane: Plane, point: Vector3): PlaneIntersectionType;
    /**
     * 判断平面和 AABB 包围盒的相交状态
     * @param plane - 平面
     * @param box - 包围盒
     * @returns 相交状态
     */
    static intersectsPlaneAndBox(plane: Plane, box: BoundingBox): PlaneIntersectionType;
    /**
     * 判断平面和包围球的相交状态。
     * @param plane - 平面
     * @param sphere - 包围球
     * @returns 相交状态
     */
    static intersectsPlaneAndSphere(plane: Plane, sphere: BoundingSphere): PlaneIntersectionType;
    /**
     * 判断射线和平面的相交状态。
     * @param ray - 射线
     * @param plane - 平面
     * @returns 射线到平面的距离，如果不相交，返回 -1
     */
    static intersectsRayAndPlane(ray: Ray, plane: Plane): number;
    /**
     * 判断射线和 AABB 包围盒的相交状态。
     * @param ray - 射线
     * @param box - AABB 包围盒
     * @returns 射线到 AABB 包围盒的距离，如果不相交，返回 -1
     */
    static intersectsRayAndBox(ray: Ray, box: BoundingBox): number;
    /**
     * 判断射线和包围球的相交状态。
     * @param ray - 射线
     * @param sphere - 包围球
     * @returns 射线到包围球的距离，如果不相交，返回 -1
     */
    static intersectsRayAndSphere(ray: Ray, sphere: BoundingSphere): number;
    /**
     * 判断视锥体和包围盒是否相交。
     * @param frustum - 视锥体
     * @param box - AABB 包围盒
     * @returns 是否相交，包含和相交都返回 true ，否则返回 false
     */
    static intersectsFrustumAndBox(frustum: BoundingFrustum, box: BoundingBox): boolean;
    /**
     * 判断一个视锥体和一个 AABB 包围盒的位置关系。
     * @param frustum - 视锥体
     * @param box - 包围盒
     * @returns 位置关系
     */
    static frustumContainsBox(frustum: BoundingFrustum, box: BoundingBox): ContainmentType;
    /**
     * 判断一个视锥体和一个包围球的位置关系。
     * @param frustum - 视锥体
     * @param sphere - 包围球
     * @returns 位置关系
     */
    static frustumContainsSphere(frustum: BoundingFrustum, sphere: BoundingSphere): ContainmentType;
}
