import { IClone } from "@oasis-engine/design";
import { IntersectInfo } from "./enums/IntersectInfo";
import { Vector3 } from "./Vector3";
import { Vector4 } from "./Vector4";
/**
 * 轴对齐的包围盒(Axis Aligned Bound Box)
 * */
export declare class BoundingBox implements IClone {
    min: Vector3;
    max: Vector3;
    /**
     * AABB 的 min/max 基于世界坐标系，且不能通过 modelMatrix 缓存计算
     * @param {Vector3} minWorld - 世界坐标系的最小坐标
     * @param {Vector3} maxWorld - 世界坐标系的最大坐标
     * */
    constructor(minWorld: Vector3, maxWorld: Vector3);
    /**
     * 更新 AABB
     * @param {Vector3} minWorld - 世界坐标系的最小坐标
     * @param {Vector3} maxWorld - 世界坐标系的最大坐标
     * */
    update(minWorld: Vector3, maxWorld: Vector3): void;
    /**
     * 使用中心点和 Size 的方式来计算 AABB 包围盒
     * @param {Vector3} center - 包围盒的中心点
     * @param {Vector3} size - 包围盒的3个轴向的大小
     */
    setFromCenterAndSize(center: Vector3, size: Vector3): void;
    /**
     * 获取与视锥体的 具体相交状态
     * @param { Vector4[] } frustumPlanes - Oasis 视锥体的6个平面方程
     * @return {IntersectInfo} 返回相交状态
     * */
    intersectsFrustum(frustumPlanes: Vector4[]): IntersectInfo;
    /**
     * 是否在视锥体内部（包含或者交叉）
     * @param { Vector4[] } frustumPlanes -  Oasis 视锥体的6个平面方程
     * @return {boolean}
     * */
    isInFrustum(frustumPlanes: Vector4[]): boolean;
    /**
     * 克隆并返回一个新的包围盒对象。
     * @returns 新的包围盒对象
     */
    clone(): BoundingBox;
    /**
     * 将当包围盒值拷贝给 out 包围盒。
     * @param out - 目标包围盒
     */
    cloneTo(out: BoundingBox): void;
}
