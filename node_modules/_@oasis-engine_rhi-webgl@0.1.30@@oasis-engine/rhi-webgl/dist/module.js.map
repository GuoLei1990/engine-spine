{"version":3,"file":"module.js","sources":["../src/GLShaderProgram.ts","../src/GLAsset.ts","../src/GLTechnique.ts","../src/GLTexture.ts","../src/WebCanvas.ts","../src/GLAssetsCache.ts","../src/GLCapability.ts","../src/GLExtensions.ts","../src/GLPrimitive.ts","../src/GLRenderStates.ts","../src/GLSprite.ts","../src/GLSpriteMaterial.ts","../src/GLSpriteBatcher.ts","../src/WebGLRenderer.ts","../src/WebGLEngine.ts"],"sourcesContent":["import { Logger } from \"@oasis-engine/core\";\nimport { RenderTechnique } from \"@oasis-engine/core\";\nimport { WebGLEngine } from \"./WebGLEngine\";\n\ninterface UniformCache {\n  [key: string]: WebGLUniformLocation | null;\n}\n\ninterface AttributeCache {\n  [key: string]: GLint;\n}\n\nlet programList: Array<GLShaderProgram> = [];\n\nfunction addLineNum(str) {\n  const lines = str.split(\"\\n\");\n  const limitLength = (lines.length + 1).toString().length + 6;\n  let prefix;\n  return lines\n    .map((line, index) => {\n      prefix = `0:${index + 1}`;\n      if (prefix.length >= limitLength) return prefix.substring(0, limitLength) + line;\n\n      for (let i = 0; i < limitLength - prefix.length; i++) prefix += \" \";\n\n      return prefix + line;\n    })\n    .join(\"\\n\");\n}\n\n/**\n * GL的Shader+Program的包装，用于对象的绘制. 对应glTF中的一个program对象\n * @class\n * @private\n */\nexport class GLShaderProgram {\n  /**\n   * 从缓存中读取program,如果没有则新建\n   * @param {RenderTechnique} tech\n   * @param {WebGLRenderingContext} gl\n   * @return {GLShaderProgram}\n   * */\n  static requireProgram(tech: RenderTechnique, gl: WebGLRenderingContext, engine: WebGLEngine): GLShaderProgram {\n    let program: GLShaderProgram = null;\n\n    programList.some((p) => {\n      if (\n        p._gl === gl &&\n        p._vertexShaderSource === tech.vertexShader &&\n        p._fragmentShaderSource === tech.fragmentShader\n      ) {\n        program = p;\n        return true;\n      }\n    });\n\n    if (!program) {\n      program = new GLShaderProgram(gl, engine);\n      const sucess = program.createFromSource(tech.vertexShader, tech.fragmentShader, tech.attribLocSet);\n      if (!sucess) return null;\n      programList.push(program);\n    }\n\n    return program;\n  }\n\n  /**\n   * 从缓存中释放program\n   * @param {GLShaderProgram} program\n   * */\n  static releaseProgram(program: GLShaderProgram) {\n    let index = programList.indexOf(program);\n    if (index !== -1) {\n      programList.splice(index, 1);\n    }\n  }\n\n  private _gl: WebGLRenderingContext;\n  private _vertexShader: WebGLShader;\n  private _fragmentShader: WebGLShader;\n  private _vertexShaderSource: string;\n  private _fragmentShaderSource: string;\n  private _program: WebGLProgram;\n  private _attributeCache: AttributeCache;\n  private _uniformCache: UniformCache;\n\n  constructor(gl: WebGLRenderingContext, private _engine: WebGLEngine) {\n    this._gl = gl;\n\n    // {WebGLShader}\n    this._vertexShader = null;\n\n    // {WebGLShader}\n    this._fragmentShader = null;\n\n    // shader source\n    this._vertexShaderSource = null;\n    this._fragmentShaderSource = null;\n\n    // {WebGLProgram}\n    this._program = null;\n\n    // location cache\n    this._attributeCache = {};\n    this._uniformCache = {};\n  }\n\n  /**\n   * WebGLProgram对象\n   * @member {WebGLProgram}\n   * @readonly\n   */\n  get program() {\n    return this._program;\n  }\n\n  /**\n   * 使用源代码编译、链接Shader Program\n   * @param {string} vertexSource 顶点 Shader 代码\n   * @param {string} fragmentSource 片元 Shader 代码\n   */\n  createFromSource(vertexSource, fragmentSource, attribLocSet) {\n    const gl = this._gl;\n\n    // 编译两个Shader\n    const vertexShader = this._compileShader(gl.VERTEX_SHADER, vertexSource);\n    if (!vertexShader) {\n      return false;\n    }\n\n    const fragmentShader = this._compileShader(gl.FRAGMENT_SHADER, fragmentSource);\n    if (!fragmentShader) {\n      return false;\n    }\n\n    // 链接Program\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    if (attribLocSet) {\n      for (const attribName in attribLocSet) {\n        gl.bindAttribLocation(program, attribLocSet[attribName], attribName);\n      }\n    }\n    gl.linkProgram(program);\n    gl.validateProgram(program);\n\n    if (gl.isContextLost()) {\n      Logger.error(\"Contex lost while linking program.\");\n      gl.deleteShader(vertexShader);\n      gl.deleteShader(fragmentShader);\n      return null;\n    }\n\n    // debug开启才进行消耗性能的能力检测\n    // if (Logger.isEnabled) {\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS) && !gl.isContextLost()) {\n      const msg = \"Could not link WebGL program. \\n\" + gl.getProgramInfoLog(program);\n      console.error(msg);\n      this._engine.dispatch(\"linkProgramError\", msg);\n      gl.deleteProgram(program);\n      return false;\n      // }\n    }\n\n    // 更新内部变量\n    this._vertexShader = vertexShader;\n    this._fragmentShader = fragmentShader;\n    this._vertexShaderSource = vertexSource;\n    this._fragmentShaderSource = fragmentSource;\n    this._program = program;\n    return true;\n  }\n\n  /**\n   * 编译Shader\n   * @param {GLenum} shaderType\n   * @param {string} shaderSource\n   * @private\n   */\n  private _compileShader(shaderType, shaderSource) {\n    const gl = this._gl;\n    const shader = gl.createShader(shaderType);\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n\n    if (gl.isContextLost()) {\n      Logger.error(\"Contex lost while compiling shader.\");\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    // debug开启才进行消耗性能的能力检测\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS) && !gl.isContextLost()) {\n      const msg = `Could not compile WebGL shader.\\n${addLineNum(shaderSource)}\\n${gl.getShaderInfoLog(shader)}`;\n      console.error(msg);\n      this._engine.dispatch(\"compileShaderError\", msg);\n      // Logger.error( gl.getShaderInfoLog( shader ) );\n\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  }\n\n  /**\n   * getAttribLocation读取速度比较慢，增加缓存机制\n   * */\n  getAttribLocation(glProgram: WebGLProgram, name: string): GLint {\n    if (this._attributeCache.hasOwnProperty(name)) {\n      return this._attributeCache[name];\n    } else {\n      return (this._attributeCache[name] = this._gl.getAttribLocation(glProgram, name));\n    }\n  }\n\n  /**\n   * getUniformLocation读取速度比较慢，增加缓存机制\n   * */\n  getUniformLocation(glProgram: WebGLProgram, name: string): WebGLUniformLocation | null {\n    if (this._uniformCache.hasOwnProperty(name)) {\n      return this._uniformCache[name];\n    } else {\n      return (this._uniformCache[name] = this._gl.getUniformLocation(glProgram, name));\n    }\n  }\n\n  /**\n   * 释放GL资源对象\n   */\n  finalize() {\n    const gl = this._gl;\n    if (this._vertexShader) {\n      gl.deleteShader(this._vertexShader);\n    }\n\n    if (this._fragmentShader) {\n      gl.deleteShader(this._fragmentShader);\n    }\n\n    if (this._program) {\n      gl.deleteProgram(this._program);\n    }\n\n    this._vertexShader = null;\n    this._fragmentShader = null;\n    this._vertexShaderSource = null;\n    this._fragmentShaderSource = null;\n    this._program = null;\n    this._attributeCache = {};\n    this._uniformCache = {};\n    GLShaderProgram.releaseProgram(this);\n  }\n}\n","import { WebGLRenderer } from \"./WebGLRenderer\";\nimport { AssetObject } from \"@oasis-engine/core\";\n\n/**\n * GL 资源对象，通过 GLAssetsCache 管理\n * */\nexport abstract class GLAsset {\n  private readonly _rhi: WebGLRenderer;\n\n  /** @member {AssetObject} -  引擎 js 部分的资源对象 */\n  public asset: AssetObject;\n  public activeFrame: number;\n  public cacheID: number;\n\n  /**\n   * @param {WebGLRenderer} rhi - GPU 硬件抽象层的 WebGL\n   * @param {AssetObject} asset - 引擎 js 部分的资源对象\n   * */\n  protected constructor(rhi: WebGLRenderer, asset: AssetObject) {\n    this._rhi = rhi;\n    this.asset = asset;\n  }\n\n  get rhi() {\n    return this._rhi;\n  }\n\n  /**\n   * 释放 GL 资源\n   * @param {boolean} force - 强制释放\n   */\n  abstract finalize(force?: boolean);\n}\n","import { DataType, Logger, Material, RenderTechnique } from \"@oasis-engine/core\";\nimport { GLAsset } from \"./GLAsset\";\nimport { GLRenderStates } from \"./GLRenderStates\";\nimport { GLShaderProgram } from \"./GLShaderProgram\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * GL 层的 Technique 资源管理和渲染调用处理\n * @private\n */\nexport class GLTechnique extends GLAsset {\n  static cacheCounter: number = 0;\n  readonly valid: boolean;\n\n  private _tech: RenderTechnique;\n  private _activeTextureCount: number;\n  private _program: GLShaderProgram;\n  private _attributes;\n  private _uniforms;\n  private _tempSamplerArray: Int32Array;\n\n  constructor(rhi: WebGLRenderer, tech: RenderTechnique) {\n    super(rhi, tech);\n    this.cacheID = ++GLTechnique.cacheCounter;\n    this._tech = tech;\n    this._activeTextureCount = 0;\n\n    const gl: WebGLRenderingContext = rhi.gl;\n\n    //-- 编译shader 或者从缓存中捞program\n    this._program = GLShaderProgram.requireProgram(tech, gl, rhi._engine);\n    if (this._program) {\n      this.valid = true;\n      const glProgram = this._program.program;\n\n      // 记录Attribute的shader location\n      this._attributes = {};\n      const attributes = tech.attributes;\n      for (const name in attributes) {\n        this._attributes[name] = {\n          name,\n          semantic: attributes[name].semantic,\n          location: this._program.getAttribLocation(glProgram, name)\n        };\n      }\n\n      // 记录Unifrom的shader location\n      this._uniforms = {};\n      const uniforms = tech.uniforms;\n      for (const name in uniforms) {\n        const loc = this._program.getUniformLocation(glProgram, name);\n        if (loc !== null) {\n          this._uniforms[name] = {\n            name,\n            location: loc\n          };\n        }\n      } // end of for\n    } else {\n      this.valid = false;\n    }\n  }\n\n  /**\n   * 释放 GL 资源\n   */\n  finalize(forceDispose?: boolean) {\n    if (this._program && forceDispose) {\n      // this._program.finalize();\n      this._program = null;\n    }\n  }\n\n  /**\n   * Shader Program 对象\n   * @member {GLShaderProgram}\n   */\n  get program(): GLShaderProgram {\n    return this._program;\n  }\n\n  /**\n   * 顶点属性数组\n   */\n  get attributes() {\n    return this._attributes;\n  }\n\n  /**\n   * Unifrom 参数集合\n   */\n  get uniforms() {\n    return this._uniforms;\n  }\n\n  /**\n   * 开始渲染时调用，绑定内部 GL Program，并设定 Unifrom\n   * @param {Material} mtl\n   */\n  begin(mtl: Material) {\n    const gl = this.rhi.gl;\n    const glProgram = this._program.program;\n\n    //-- 重置内部状态变量\n    this._activeTextureCount = 0;\n\n    //-- bind program\n    gl.useProgram(glProgram);\n\n    //-- upload mtl uniforms\n    const uniforms = this._uniforms;\n    const assetUniforms = this._tech.uniforms;\n    for (const name in assetUniforms) {\n      if (uniforms.hasOwnProperty(name)) {\n        const value = mtl.getValue(name);\n        value != null && this._uploadUniformValue(assetUniforms[name], uniforms[name].location, value);\n      }\n    }\n\n    //-- change render states\n    const stateManager = this.rhi.renderStates;\n    if (this._tech.states) {\n      stateManager.pushStateBlock(this._tech.name);\n      this._applyStates(stateManager);\n    }\n  }\n\n  /**\n   * 结束渲染，回复状态\n   */\n  end() {\n    // 恢复渲染状态\n    if (this._tech.states) {\n      const stateManager = this.rhi.renderStates;\n      stateManager.popStateBlock();\n    }\n  }\n\n  /**\n   * 将状态设置到GL/RenderStateManager\n   * @param {GLRenderStates} stateManager\n   */\n  _applyStates(stateManager: GLRenderStates) {\n    const states = this._tech.states;\n    //-- enable\n    const enable = states.enable;\n    if (enable) {\n      for (let i = 0, len = enable.length; i < len; i++) {\n        stateManager.enable(enable[i]);\n      }\n    }\n\n    const disable = states.disable;\n    if (disable) {\n      for (let i = 0, len = disable.length; i < len; i++) {\n        stateManager.disable(disable[i]);\n      }\n    }\n\n    //-- functions\n    const functions = states.functions;\n    if (functions) {\n      for (const name in functions) {\n        const args = Array.isArray(functions[name]) ? functions[name] : [functions[name]];\n        const func = stateManager[name];\n        func.apply(stateManager, args);\n      }\n    }\n  }\n\n  /**\n   * 将自己的value设置到shader的uniform值之上\n   * @param uniform\n   * @param location\n   * @param value\n   * @private\n   */\n  private _uploadUniformValue(uniform, location, value) {\n    const gl = this.rhi.gl;\n\n    // 设置shader uniform值\n    switch (uniform.type) {\n      case DataType.FLOAT:\n        if (value.length) gl.uniform1fv(location, value);\n        else gl.uniform1f(location, value);\n        break;\n      case DataType.FLOAT_ARRAY:\n        gl.uniform1fv(location, value);\n        break;\n      case DataType.INT:\n        if (value.length) gl.uniform1iv(location, value);\n        else gl.uniform1i(location, value);\n        break;\n      case DataType.INT_ARRAY:\n        gl.uniform1iv(location, value);\n        break;\n      case DataType.FLOAT_VEC2:\n        gl.uniform2f(location, value.x, value.y);\n        break;\n      case DataType.FLOAT_VEC2_ARRAY:\n        gl.uniform2fv(location, value);\n        break;\n      case DataType.FLOAT_VEC3:\n        gl.uniform3f(location, value.x, value.y, value.z);\n        break;\n      case DataType.FLOAT_VEC3_ARRAY:\n        gl.uniform3fv(location, value);\n        break;\n      case DataType.FLOAT_VEC4:\n        gl.uniform4f(location, value.x, value.y, value.z, value.w);\n        break;\n      case DataType.FLOAT_VEC4_ARRAY:\n        gl.uniform4fv(location, value);\n        break;\n      case DataType.INT_VEC2:\n        gl.uniform2i(location, value.x, value.y);\n        break;\n      case DataType.INT_VEC2_ARRAY:\n        gl.uniform2iv(location, value);\n        break;\n      case DataType.INT_VEC3:\n        gl.uniform3i(location, value.x, value.y, value.z);\n        break;\n      case DataType.INT_VEC3_ARRAY:\n        gl.uniform3iv(location, value);\n        break;\n      case DataType.INT_VEC4:\n        gl.uniform4i(location, value.x, value.y, value.z, value.w);\n        break;\n      case DataType.INT_VEC4_ARRAY:\n        gl.uniform4iv(location, value);\n        break;\n      case DataType.FLOAT_MAT2:\n        gl.uniformMatrix2fv(location, false, value.elements);\n        break;\n      case DataType.FLOAT_MAT2_ARRAY:\n        gl.uniformMatrix2fv(location, false, value);\n        break;\n      case DataType.FLOAT_MAT3:\n        gl.uniformMatrix3fv(location, false, value.elements);\n        break;\n      case DataType.FLOAT_MAT3_ARRAY:\n        gl.uniformMatrix3fv(location, false, value);\n        break;\n      case DataType.FLOAT_MAT4:\n        gl.uniformMatrix4fv(location, false, value.elements);\n        break;\n      case DataType.FLOAT_MAT4_ARRAY:\n        gl.uniformMatrix4fv(location, false, value);\n        break;\n      case DataType.SAMPLER_2D: {\n        this._uploadTexture(value, location);\n        break;\n      }\n      case DataType.SAMPLER_2D_ARRAY: {\n        this._uploadTextures(value, location);\n        break;\n      }\n      case DataType.SAMPLER_CUBE: {\n        this._uploadTexture(value, location);\n        break;\n      }\n      case DataType.SAMPLER_CUBE_ARRAY: {\n        this._uploadTextures(value, location);\n        break;\n      }\n      default:\n        Logger.warn(\"UNKNOWN uniform type: \" + uniform.type);\n        break;\n    } // end of switch\n  }\n\n  /**\n   * 将一个内存中的 Texture2D 对象绑定到 GL\n   * @param {Texture} texture\n   */\n  _uploadTexture(texture, location) {\n    if (texture) {\n      const gl = this.rhi.gl;\n      const index = this._activeTextureCount++;\n      gl.activeTexture(gl.TEXTURE0 + index);\n      gl.bindTexture(texture._target, texture._glTexture);\n      gl.uniform1i(location, index);\n    } // end of if\n  }\n\n  /**\n   * 将一堆内存中的 Texture2D 对象绑定到 GL\n   */\n  _uploadTextures(textures, location) {\n    if (!this._tempSamplerArray || this._tempSamplerArray.length !== textures.length) {\n      this._tempSamplerArray = new Int32Array(textures.length);\n    }\n\n    const gl = this.rhi.gl;\n    for (let i = 0, length = textures.length; i < length; i++) {\n      const texture = textures[i];\n      if (texture) {\n        const index = this._activeTextureCount++;\n        gl.activeTexture(gl.TEXTURE0 + index);\n        gl.bindTexture(texture._target, texture._glTexture);\n        this._tempSamplerArray[i] = index;\n      } else {\n        this._tempSamplerArray[i] = -1;\n      }\n    }\n    gl.uniform1iv(location, this._tempSamplerArray);\n  }\n}\n","import { GLAsset } from \"./GLAsset\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\nimport { Texture } from \"@oasis-engine/core\";\n\n/**\n * 管理贴图对象\n * @class\n * @private\n */\nexport class GLTexture extends GLAsset {\n  protected _gl;\n  private _glTexture: WebGLTexture;\n  protected _config: Texture;\n  protected _type;\n\n  constructor(rhi: WebGLRenderer, config: Texture, type) {\n    super(rhi, config as any);\n\n    this._gl = rhi.gl;\n    this._glTexture = config._glTexture;\n    this._config = config;\n    this._type = type;\n  }\n\n  /**\n   * 内部的WebGLTexture对象\n   * @readonly\n   * @private\n   */\n  get glTexture() {\n    return this._glTexture;\n  }\n\n  /**\n   * 绑定到指定的 TEXTURE UNIT\n   * @private\n   */\n  activeBinding(textureIndex) {\n    const gl = this._gl;\n\n    gl.activeTexture(gl.TEXTURE0 + textureIndex);\n    gl.bindTexture(this._type, this._glTexture);\n  }\n\n  /**\n   * 释放 GL 资源\n   * @private\n   */\n  finalize() {}\n}\n","import { Canvas } from \"@oasis-engine/core\";\nimport { Vector2 } from \"@oasis-engine/math\";\n/**\n * Web端使用的画布,可以支持HTMLCanvasElement和OffscreenCanvas。\n */\nexport class WebCanvas implements Canvas {\n  _webCanvas: HTMLCanvasElement | OffscreenCanvas;\n\n  private _width: number;\n  private _height: number;\n  private _scale: Vector2 = new Vector2();\n\n  /**\n   * @inheritdoc\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  set width(value: number) {\n    if (this._width !== value) {\n      this._webCanvas.width = value;\n      this._width = value;\n    }\n  }\n\n  /**\n   * @inheritdoc\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  set height(value: number) {\n    if (this._height !== value) {\n      this._webCanvas.height = value;\n      this._height = value;\n    }\n  }\n\n  /**\n   * 画布的缩放比例,值为显示宽高/渲染分辨率宽高。\n   * @remarks 修改后需要重新赋值,保证修改生效。\n   */\n  get scale(): Vector2 {\n    const webCanvas = this._webCanvas;\n    if (webCanvas instanceof HTMLCanvasElement) {\n      this._scale.setValue(\n        (webCanvas.clientWidth * devicePixelRatio) / webCanvas.width,\n        (webCanvas.clientHeight * devicePixelRatio) / webCanvas.height\n      );\n    }\n    return this._scale;\n  }\n\n  set scale(value: Vector2) {\n    const webCanvas = this._webCanvas;\n    if (webCanvas instanceof HTMLCanvasElement) {\n      webCanvas.style.transformOrigin = `left top`;\n      webCanvas.style.transform = `scale(${value.x}, ${value.y})`;\n    }\n  }\n\n  /**\n   * 根据 canvas 的 clientWidth 和 clientHeight 重置画布渲染尺寸。\n   * @param pixelRatio 像素比例，若不传初次设置为设备像素比。\n   */\n  resizeByClientSize(pixelRatio: number = window.devicePixelRatio): void {\n    const webCanvas = this._webCanvas;\n    if (webCanvas instanceof HTMLCanvasElement) {\n      const width = webCanvas.clientWidth;\n      const height = webCanvas.clientHeight;\n      this.width = width * pixelRatio;\n      this.height = height * pixelRatio;\n    }\n  }\n\n  /**\n   * 创建Web画布。\n   * @param webCanvas 画布。\n   */\n  constructor(webCanvas: HTMLCanvasElement | OffscreenCanvas) {\n    const width = webCanvas.width;\n    const height = webCanvas.height;\n    this._webCanvas = webCanvas;\n    this._width = width;\n    this._height = height;\n  }\n\n  /**\n   * 设置缩放\n   * @param x - 沿 X 轴的缩放。\n   * @param y - 沿 Y 轴的缩放。\n   */\n  setScale(x: number, y: number): void {\n    this._scale.setValue(x, y);\n    this.scale = this._scale;\n  }\n}\n","import { InternalAssetType } from \"@oasis-engine/core\";\nimport { AssetObject } from \"@oasis-engine/core\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\nimport { GLAsset } from \"./GLAsset\";\n\ninterface ObjectSet {\n  [key: number]: GLAsset;\n}\n\n/**\n * 引擎的资源对象所需要的 GL 资源对象的 Cache 管理\n * @private\n */\nexport class GLAssetsCache {\n  private readonly _rhi: WebGLRenderer;\n  private _objectSet: ObjectSet;\n  private _checkList: GLAsset[];\n  private _nextID: number;\n  private readonly _enableCollect: boolean;\n\n  constructor(rhi: WebGLRenderer, props: any = {}) {\n    this._rhi = rhi;\n    this._objectSet = {}; // 所有资源对象的集合\n    this._checkList = []; // 需要检测生命周期的对象列表\n    this._nextID = 1;\n    // 是否启用回收机制\n    this._enableCollect = props.enableCollect === undefined ? true : !!props.enableCollect;\n  }\n\n  /**\n   * 为一个引擎资源对象创建对应的 GL 资源对象\n   * @param {object} asset\n   * @param {class} ctor\n   */\n  requireObject(asset: AssetObject, ctor: new (...args: any) => GLAsset) {\n    let cachedObject = null;\n\n    //-- 查找已有\n    if (asset.cacheID) {\n      cachedObject = this._objectSet[asset.cacheID];\n    }\n\n    if (!cachedObject || asset.needRecreate) {\n      const cacheID = this._nextID++;\n      const objectSet = this._objectSet;\n\n      //-- 创新新的\n      cachedObject = new ctor(this._rhi, asset);\n      objectSet[cacheID] = cachedObject;\n      cachedObject.cacheID = cacheID;\n      cachedObject.asset = asset;\n      asset.cacheID = cacheID;\n      asset.needRecreate = false;\n\n      //-- 处理运行时资源释放\n      if (this._enableCollect && asset.type === InternalAssetType.Cache) {\n        this._checkList.push(cachedObject);\n      }\n    }\n\n    cachedObject.activeFrame = this._rhi.frameCount;\n    return cachedObject;\n  }\n\n  /**\n   * 清除 Cache 中没有用到的 GL 资源对象\n   */\n  compact() {\n    if (!this._enableCollect) return;\n\n    const currentFrame = this._rhi.frameCount;\n\n    const checkList = this._checkList;\n    const objectSet = this._objectSet;\n\n    for (let i = checkList.length - 1; i >= 0; i--) {\n      const cachedObject = checkList[i];\n      if (cachedObject.activeFrame < currentFrame) {\n        delete objectSet[cachedObject.cacheID];\n        checkList.splice(i, 1);\n\n        cachedObject.finalize();\n      }\n    }\n  }\n\n  /**\n   * 释放内部登记的所有对象\n   */\n  finalize() {\n    for (const name in this._objectSet) {\n      const obj = this._objectSet[name];\n      obj.finalize(true);\n    }\n    this._objectSet = {};\n    this._checkList = [];\n  }\n}\n","import { WebGLRenderer } from \"./WebGLRenderer\";\nimport { GLCapabilityType, GLCompressedTextureInternalFormat } from \"@oasis-engine/core\";\n\ntype extensionKey = string;\n\n/**\n * GL 能力统一管理\n * */\nexport class GLCapability {\n  private _maxDrawBuffers: number;\n  private _maxAnisoLevel: number;\n  private _maxAntiAliasing: number;\n\n  _rhi: WebGLRenderer;\n  capabilityList: Map<GLCapabilityType, boolean>;\n\n  get maxDrawBuffers() {\n    if (!this._maxDrawBuffers) {\n      if (this.canIUse(GLCapabilityType.drawBuffers)) {\n        this._maxDrawBuffers = this._rhi.gl.getParameter(this._rhi.gl.MAX_DRAW_BUFFERS);\n      } else {\n        this._maxDrawBuffers = 1;\n      }\n    }\n    return this._maxDrawBuffers;\n  }\n\n  /**\n   * 最大各向异性过滤等级。\n   */\n  get maxAnisoLevel(): number {\n    if (!this._maxAnisoLevel) {\n      const ext = this._rhi.requireExtension(GLCapabilityType.textureFilterAnisotropic);\n      this._maxAnisoLevel = ext ? this._rhi.gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1;\n    }\n    return this._maxAnisoLevel;\n  }\n\n  /**\n   * 最大 MSAA 采样数量\n   */\n  get maxAntiAliasing(): number {\n    if (!this._maxAntiAliasing) {\n      const gl = this._rhi.gl;\n      const canMSAA = this.canIUse(GLCapabilityType.multipleSample);\n\n      this._maxAntiAliasing = canMSAA ? gl.getParameter(gl.MAX_SAMPLES) : 1;\n    }\n    return this._maxAntiAliasing;\n  }\n\n  get rhi() {\n    return this._rhi;\n  }\n\n  constructor(rhi: WebGLRenderer) {\n    this._rhi = rhi;\n    this.capabilityList = new Map();\n\n    this.init();\n    // 抹平接口差异\n    this.compatibleAllInterface();\n  }\n\n  /**\n   * 查询能否使用某些 GL 能力\n   * */\n  public canIUse(capabilityType: GLCapabilityType): boolean {\n    return this.capabilityList.get(capabilityType);\n  }\n\n  /**\n   * 查询能否使用某种压缩纹理格式\n   * */\n  public canIUseCompressedTextureInternalFormat(internalType: GLCompressedTextureInternalFormat): boolean {\n    const {\n      // astc\n      RGBA_ASTC_4X4_KHR,\n      RGBA_ASTC_12X12_KHR,\n      SRGB8_ALPHA8_ASTC_4X4_KHR,\n      SRGB8_ALPHA8_ASTC_12X12_KHR,\n      // etc1\n      RGB_ETC1_WEBGL,\n      // etc\n      R11_EAC,\n      SRGB8_ALPHA8_ETC2_EAC,\n      // pvrtc\n      RGB_PVRTC_4BPPV1_IMG,\n      RGBA_PVRTC_2BPPV1_IMG,\n      // s3tc\n      RGB_S3TC_DXT1_EXT,\n      RGBA_S3TC_DXT5_EXT\n    } = GLCompressedTextureInternalFormat;\n    if (\n      (internalType >= RGBA_ASTC_4X4_KHR && RGBA_ASTC_12X12_KHR <= RGBA_ASTC_12X12_KHR) ||\n      (internalType >= SRGB8_ALPHA8_ASTC_4X4_KHR && internalType <= SRGB8_ALPHA8_ASTC_12X12_KHR)\n    ) {\n      return this.canIUse(GLCapabilityType.astc);\n    } else if (internalType === RGB_ETC1_WEBGL) {\n      return this.canIUse(GLCapabilityType.etc1);\n    } else if (internalType >= R11_EAC && internalType <= SRGB8_ALPHA8_ETC2_EAC) {\n      return this.canIUse(GLCapabilityType.etc);\n    } else if (internalType >= RGB_PVRTC_4BPPV1_IMG && internalType <= RGBA_PVRTC_2BPPV1_IMG) {\n      return this.canIUse(GLCapabilityType.pvrtc);\n    } else if (internalType >= RGB_S3TC_DXT1_EXT && internalType <= RGBA_S3TC_DXT5_EXT) {\n      return this.canIUse(GLCapabilityType.s3tc);\n    }\n    return false;\n  }\n\n  /** 是否能使用更多骨骼关节 */\n  public get canIUseMoreJoints() {\n    return (\n      this.canIUse(GLCapabilityType.textureFloat) &&\n      this.rhi.renderStates.getParameter(this.rhi.gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0\n    );\n  }\n\n  /**\n   *  初始化能力\n   * */\n  private init() {\n    const cap = this.capabilityList;\n    const { isWebGL2 } = this.rhi;\n    const requireExtension = this.rhi.requireExtension.bind(this.rhi);\n\n    const {\n      standardDerivatives,\n      shaderTextureLod,\n      elementIndexUint,\n      depthTexture,\n      vertexArrayObject,\n      instancedArrays,\n      multipleSample,\n      drawBuffers,\n\n      astc,\n      astc_webkit,\n      etc,\n      etc_webkit,\n      etc1,\n      etc1_webkit,\n      pvrtc,\n      pvrtc_webkit,\n      s3tc,\n      s3tc_webkit,\n\n      textureFloat,\n      textureHalfFloat,\n      textureFloatLinear,\n      textureHalfFloatLinear,\n      WEBGL_colorBufferFloat,\n      colorBufferFloat,\n      colorBufferHalfFloat,\n      textureFilterAnisotropic\n    } = GLCapabilityType;\n    cap.set(standardDerivatives, isWebGL2 || !!requireExtension(standardDerivatives));\n    cap.set(shaderTextureLod, isWebGL2 || !!requireExtension(shaderTextureLod));\n    cap.set(elementIndexUint, isWebGL2 || !!requireExtension(elementIndexUint));\n    cap.set(depthTexture, isWebGL2 || !!requireExtension(depthTexture));\n    cap.set(vertexArrayObject, isWebGL2 || !!requireExtension(vertexArrayObject));\n    cap.set(instancedArrays, isWebGL2 || !!requireExtension(instancedArrays));\n    cap.set(multipleSample, isWebGL2);\n    cap.set(drawBuffers, isWebGL2 || !!requireExtension(drawBuffers));\n    cap.set(textureFloat, isWebGL2 || !!requireExtension(textureFloat));\n    cap.set(textureHalfFloat, isWebGL2 || !!requireExtension(textureHalfFloat));\n    cap.set(textureFloatLinear, !!requireExtension(textureFloatLinear));\n    cap.set(textureHalfFloatLinear, isWebGL2 || !!requireExtension(textureHalfFloatLinear));\n    cap.set(\n      colorBufferFloat,\n      (isWebGL2 && !!requireExtension(colorBufferFloat)) || !!requireExtension(WEBGL_colorBufferFloat)\n    );\n    cap.set(\n      colorBufferHalfFloat,\n      (isWebGL2 && !!requireExtension(colorBufferFloat)) || !!requireExtension(colorBufferHalfFloat)\n    );\n    cap.set(textureFilterAnisotropic, !!requireExtension(textureFilterAnisotropic));\n\n    cap.set(astc, !!(requireExtension(astc) || requireExtension(astc_webkit)));\n    cap.set(etc, !!(requireExtension(etc) || requireExtension(etc_webkit)));\n    cap.set(etc1, !!(requireExtension(etc1) || requireExtension(etc1_webkit)));\n    cap.set(pvrtc, !!(requireExtension(pvrtc) || requireExtension(pvrtc_webkit)));\n    cap.set(s3tc, !!(requireExtension(s3tc) || requireExtension(s3tc_webkit)));\n  }\n\n  /**\n   * 如果有插件能补充该能力，则抹平该差异\n   * @example\n   * compatible(GLCapabilityType.depthTexture,{\n   *    UNSIGNED_INT_24_8: \"UNSIGNED_INT_24_8_WEBGL\"\n   * })\n   * 满足条件时， gl.UNSIGNED_INT_24_8 = ext.UNSIGNED_INT_24_8_WEBGL\n   * */\n  private compatibleInterface(capabilityType: GLCapabilityType, flatItem: { [glKey: string]: extensionKey }) {\n    const rhi = this.rhi;\n    const gl = rhi.gl;\n    let ext = null;\n\n    /** 如果有插件能补充该能力，则抹平该差异 */\n    if ((ext = rhi.requireExtension(capabilityType))) {\n      for (let glKey in flatItem) {\n        const extensionKey = flatItem[glKey];\n        const extensionVal = ext[extensionKey];\n\n        // 小程序 hack 了原生的 Function，用是否有 .bind 去判断是否是 Function\n        if (extensionVal?.bind) {\n          gl[glKey] = extensionVal.bind(ext);\n        } else {\n          gl[glKey] = extensionVal;\n        }\n      }\n    }\n  }\n\n  /** 抹平接口差异 */\n  private compatibleAllInterface() {\n    // 需要兼容的能力\n    const {\n      depthTexture,\n      vertexArrayObject,\n      instancedArrays,\n      drawBuffers,\n      textureFilterAnisotropic,\n      textureHalfFloat,\n      colorBufferHalfFloat,\n      WEBGL_colorBufferFloat\n    } = GLCapabilityType;\n    const { isWebGL2 } = this.rhi;\n\n    //  以下能力 WebGL2.0 必有，不需要插件\n    if (!isWebGL2) {\n      this.compatibleInterface(depthTexture, {\n        UNSIGNED_INT_24_8: \"UNSIGNED_INT_24_8_WEBGL\"\n      });\n      this.compatibleInterface(vertexArrayObject, {\n        createVertexArray: \"createVertexArrayOES\",\n        deleteVertexArray: \"deleteVertexArrayOES\",\n        isVertexArray: \"isVertexArrayOES\",\n        bindVertexArray: \"bindVertexArrayOES\"\n      });\n      this.compatibleInterface(instancedArrays, {\n        drawArraysInstanced: \"drawArraysInstancedANGLE\",\n        drawElementsInstanced: \"drawElementsInstancedANGLE\",\n        vertexAttribDivisor: \"vertexAttribDivisorANGLE\"\n      });\n      this.compatibleInterface(drawBuffers, {\n        MAX_DRAW_BUFFERS: \"MAX_DRAW_BUFFERS_WEBGL\"\n      });\n      const items = {};\n      if (this.canIUse(GLCapabilityType.drawBuffers)) {\n        const maxDrawBuffers = this.maxDrawBuffers;\n        for (let i = 0; i < maxDrawBuffers; i++) {\n          i != 0 && (items[`COLOR_ATTACHMENT${i}`] = `COLOR_ATTACHMENT${i}_WEBGL`);\n          items[`DRAW_BUFFER${i}`] = `DRAW_BUFFER${i}_WEBGL`;\n        }\n        this.compatibleInterface(drawBuffers, {\n          drawBuffers: \"drawBuffersWEBGL\",\n          ...items\n        });\n      }\n      this.compatibleInterface(textureHalfFloat, {\n        HAFL_FLOAT: \"HALF_FLOAT_OES\"\n      });\n      this.compatibleInterface(colorBufferHalfFloat, {\n        RGBA16F: \"RBGA16F_EXT\"\n      });\n      this.compatibleInterface(WEBGL_colorBufferFloat, {\n        RGBA32F: \"RBGA32F_EXT\"\n      });\n    }\n\n    // 以下能力依赖插件，不依赖 WebGL 环境\n    this.compatibleInterface(textureFilterAnisotropic, {\n      TEXTURE_MAX_ANISOTROPY_EXT: \"TEXTURE_MAX_ANISOTROPY_EXT\"\n    });\n  }\n}\n","import { WebGLRenderer } from \"./WebGLRenderer\";\nimport { GLCapabilityType } from \"@oasis-engine/core\";\n\n/**\n * GLContext 扩展管理\n * @private\n */\nexport class GLExtensions {\n  private rhi: WebGLRenderer;\n  private _requireResult;\n\n  constructor(rhi: WebGLRenderer) {\n    this.rhi = rhi;\n    this._requireResult = {};\n  }\n\n  /**\n   * 请求扩展\n   * @param {String} ext 扩展名\n   * @returns {Object|null} 请求结果，返回插件对象或null\n   * @private\n   */\n  requireExtension(ext: GLCapabilityType) {\n    if (this._requireResult[ext] !== undefined) {\n      return this._requireResult[ext];\n    }\n\n    this._requireResult[ext] = this.rhi.gl.getExtension(ext);\n    return this._requireResult[ext];\n  }\n}\n","import { GLCapabilityType, IPlatformPrimitive, Logger, Primitive } from \"@oasis-engine/core\";\nimport { SubPrimitive } from \"@oasis-engine/core/types/graphic/SubPrimitive\";\nimport { GLTechnique } from \"./GLTechnique\";\nimport { WebGLExtension } from \"./type\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * chenmo.gl\n * 关于 VAO 的改进方案\n * 1）VAO WebGL2.0 一定支持，在 WebGL1.0 下亦为支持率最高的扩展之一，所以我们可以结合 VAO 的 PollyFill 直接删除非 VAO 的实现,精简代码\n * 2）VAO 目前存在隐藏 BUG , 更换 IndexBuffer、VertexBuffer、VertexElements 需要更新对应 VAO\n */\n\n/**\n * Primtive 相关的 GL 资源管理，主要是 WebGLBuffer 对象\n */\nexport class GLPrimitive implements IPlatformPrimitive {\n  protected readonly _primitive: Primitive;\n  protected attribLocArray: number[];\n  protected readonly canUseInstancedArrays: boolean;\n\n  private gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n  private vao: Map<number, WebGLVertexArrayObject> = new Map();\n  private readonly _useVao: boolean;\n\n  constructor(rhi: WebGLRenderer, primitive: Primitive) {\n    this._primitive = primitive;\n    this.canUseInstancedArrays = rhi.canIUse(GLCapabilityType.instancedArrays);\n    this._useVao = rhi.canIUse(GLCapabilityType.vertexArrayObject);\n    this.gl = rhi.gl;\n  }\n\n  /**\n   * 执行绘制操作。\n   */\n  draw(tech: GLTechnique, subPrimitive: SubPrimitive) {\n    const gl = this.gl;\n    const primitive = this._primitive;\n\n    if (this._useVao) {\n      if (!this.vao.has(tech.cacheID)) {\n        this.registerVAO(tech);\n      }\n      const vao = this.vao.get(tech.cacheID);\n      gl.bindVertexArray(vao);\n    } else {\n      this.bindBufferAndAttrib(tech);\n    }\n\n    const { indexBufferBinding, instanceCount, _glIndexType } = primitive;\n    const { topology, start, count } = subPrimitive;\n\n    if (!instanceCount) {\n      if (indexBufferBinding) {\n        if (this._useVao) {\n          gl.drawElements(topology, count, _glIndexType, start);\n        } else {\n          const { _nativeBuffer } = indexBufferBinding.buffer;\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _nativeBuffer);\n          gl.drawElements(topology, count, _glIndexType, start);\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        }\n      } else {\n        gl.drawArrays(topology, start, count);\n      }\n    } else {\n      if (this.canUseInstancedArrays) {\n        if (indexBufferBinding) {\n          if (this._useVao) {\n            gl.drawElementsInstanced(topology, count, _glIndexType, start, instanceCount);\n          } else {\n            const { _nativeBuffer } = indexBufferBinding.buffer;\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _nativeBuffer);\n            gl.drawElementsInstanced(topology, count, _glIndexType, start, instanceCount);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n          }\n        } else {\n          gl.drawArraysInstanced(topology, start, count, instanceCount);\n        }\n      } else {\n        Logger.error(\"ANGLE_instanced_arrays extension is not supported\");\n      }\n    }\n\n    // unbind\n    if (this._useVao) {\n      gl.bindVertexArray(null);\n    } else {\n      this.disableAttrib();\n    }\n  }\n\n  destroy() {\n    if (this._useVao) {\n      const gl = this.gl;\n      this.vao.forEach((vao) => {\n        gl.deleteVertexArray(vao);\n      });\n    }\n  }\n\n  /**\n   * 绑定 Buffer 和 attribute\n   */\n  protected bindBufferAndAttrib(tech: GLTechnique) {\n    const gl = this.gl;\n    const primitive = this._primitive;\n    const vertexBufferBindings = primitive.vertexBufferBindings;\n\n    this.attribLocArray = [];\n    const techAttributes = tech.attributes;\n    const attributes = primitive._vertexElementMap;\n\n    let vbo: WebGLBuffer;\n    let lastBoundVbo: WebGLBuffer;\n\n    for (const name in techAttributes) {\n      const loc = techAttributes[name].location;\n      if (loc === -1) continue;\n\n      const semantic = techAttributes[name].semantic;\n      const element = attributes[semantic];\n      if (element) {\n        const { buffer, stride } = vertexBufferBindings[element.bindingIndex];\n        vbo = buffer._nativeBuffer;\n        // prevent binding the vbo which already bound at the last loop, e.g. a buffer with multiple attributes.\n        if (lastBoundVbo !== vbo) {\n          lastBoundVbo = vbo;\n          gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n        }\n\n        gl.enableVertexAttribArray(loc);\n        const { size, type } = element._glElementInfo;\n        gl.vertexAttribPointer(loc, size, type, element.normalized, stride, element.offset);\n        if (this.canUseInstancedArrays) {\n          gl.vertexAttribDivisor(loc, element.instanceDivisor);\n        }\n        this.attribLocArray.push(loc);\n      } else {\n        Logger.warn(\"vertex attribute not found: \" + name);\n      }\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  }\n\n  protected disableAttrib() {\n    const gl = this.gl;\n    for (let i = 0, l = this.attribLocArray.length; i < l; i++) {\n      gl.disableVertexAttribArray(this.attribLocArray[i]);\n    }\n  }\n\n  private registerVAO(tech: GLTechnique): void {\n    const gl = this.gl;\n    const vao = gl.createVertexArray();\n\n    /** register VAO */\n    gl.bindVertexArray(vao);\n\n    const { indexBufferBinding } = this._primitive;\n    if (indexBufferBinding) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBufferBinding.buffer._nativeBuffer);\n    }\n    this.bindBufferAndAttrib(tech);\n\n    /** unbind */\n    gl.bindVertexArray(null);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    this.disableAttrib();\n\n    this.vao.set(tech.cacheID, vao);\n  }\n}\n","/**\n * 管理渲染状态，主要功能：设置默认渲染状态，cache当前渲染状态，管理渲染状态stack（供恢复用）\n * @class\n * @private\n */\nexport class GLRenderStates {\n  private _gl: WebGLRenderingContext;\n  private _stateStack = [];\n  private _parameters = {};\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   */\n  constructor(gl: WebGLRenderingContext) {\n    this._gl = gl;\n    this._stateStack = []; // stat block stack\n    this._parameters = {}; // current gl state parameters\n\n    //-- 初始化，设置所有渲染状态为默认值 ---------------\n\n    /** cache */\n    this._parameters[gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS] = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this._parameters[gl.MAX_VERTEX_UNIFORM_VECTORS] = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n    this._parameters[gl.MAX_VERTEX_ATTRIBS] = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    this._parameters[gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS] = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n\n    //-- enable/disable\n    this._parameters[gl.BLEND] = false;\n    gl.disable(gl.BLEND);\n\n    this._parameters[gl.CULL_FACE] = true;\n    gl.enable(gl.CULL_FACE);\n\n    this._parameters[gl.DEPTH_TEST] = true;\n    gl.enable(gl.DEPTH_TEST);\n\n    this._parameters[gl.DITHER] = false;\n    gl.disable(gl.DITHER);\n\n    this._parameters[gl.POLYGON_OFFSET_FILL] = false;\n    gl.disable(gl.POLYGON_OFFSET_FILL);\n\n    this._parameters[gl.SAMPLE_ALPHA_TO_COVERAGE] = false;\n    gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\n    this._parameters[gl.SAMPLE_COVERAGE] = false;\n    gl.disable(gl.SAMPLE_COVERAGE);\n\n    this._parameters[gl.SCISSOR_TEST] = false;\n    gl.disable(gl.SCISSOR_TEST);\n\n    this._parameters[gl.STENCIL_TEST] = false;\n    gl.disable(gl.STENCIL_TEST);\n\n    //-- colorMask\n    this._parameters[gl.COLOR_WRITEMASK] = [true, true, true, true];\n    gl.colorMask(true, true, true, true);\n\n    //-- depthMask\n    this._parameters[gl.DEPTH_WRITEMASK] = true;\n    gl.depthMask(true);\n\n    //-- blendFunc\n    this._parameters[gl.BLEND_SRC_RGB] = gl.ONE;\n    this._parameters[gl.BLEND_SRC_ALPHA] = gl.ONE;\n    this._parameters[gl.BLEND_DST_RGB] = gl.ZERO;\n    this._parameters[gl.BLEND_DST_ALPHA] = gl.ZERO;\n    gl.blendFunc(gl.ONE, gl.ZERO);\n\n    this._parameters[gl.BLEND_EQUATION_RGB] = gl.FUNC_ADD;\n    this._parameters[gl.BLEND_EQUATION_ALPHA] = gl.FUNC_ADD;\n\n    //-- cullFace\n    this._parameters[gl.CULL_FACE_MODE] = gl.BACK;\n    gl.cullFace(gl.BACK);\n\n    //-- frontFace\n    this._parameters[gl.FRONT_FACE] = gl.CCW;\n    gl.frontFace(gl.CCW);\n\n    //-- depthFunc\n    this._parameters[gl.DEPTH_FUNC] = gl.LESS;\n    gl.depthFunc(gl.LESS);\n\n    //-- depthRange\n    this._parameters[gl.DEPTH_RANGE] = [0, 1];\n    gl.depthRange(0, 1);\n\n    //-- polygonOffset\n    this._parameters[gl.POLYGON_OFFSET_FACTOR] = 0;\n    this._parameters[gl.POLYGON_OFFSET_UNITS] = 0;\n    gl.polygonOffset(0, 0);\n\n    //-- scissor\n    this._parameters[gl.SCISSOR_BOX] = [0, 0, gl.canvas.width, gl.canvas.height];\n\n    //-- stencilFunc\n    this._parameters[gl.STENCIL_FUNC] = gl.ALWAYS;\n    this._parameters[gl.STENCIL_VALUE_MASK] = 0xff;\n    this._parameters[gl.STENCIL_REF] = 0;\n    gl.stencilFunc(gl.ALWAYS, 0, 0xff);\n\n    // -- stencilMask\n    this._parameters[gl.STENCIL_WRITEMASK] = 0xff;\n    gl.stencilMask(0xff);\n\n    //-- stencilOp\n    this._parameters[gl.STENCIL_FAIL] = gl.KEEP;\n    this._parameters[gl.STENCIL_PASS_DEPTH_FAIL] = gl.KEEP;\n    this._parameters[gl.STENCIL_PASS_DEPTH_PASS] = gl.KEEP;\n  }\n\n  /**\n   * 取得渲染状态参数：any gl.getParameter(pname);\n   * @param {GLenum} pname\n   */\n  getParameter(pname) {\n    return this._parameters[pname];\n  }\n\n  /**\n   * 新建一个State Block（渲染单个对象时的一组渲染状态），并放入状态栈\n   */\n  pushStateBlock(_name) {\n    const stateBlock = {\n      name: _name,\n      states: []\n    };\n    this._stateStack.push(stateBlock);\n  }\n\n  /**\n   * 取出栈顶的State Block，并用来恢复当前的渲染状态\n   */\n  popStateBlock() {\n    const stateBlock = this._stateStack.pop();\n\n    //-- 恢复渲染状态\n    for (const state of stateBlock.states) {\n      const stateFunc = state.func;\n      const stateArgs = state.args;\n      const parameters = state.parameters;\n      stateFunc.apply(this._gl, stateArgs);\n      for (const param in parameters) {\n        this._parameters[param] = parameters[param];\n      }\n    }\n  }\n\n  /**\n   * 取得当前状态栈的顶部对象\n   * @return {Object}\n   * @private\n   */\n  _getStateStackTop() {\n    const count = this._stateStack.length;\n    if (count > 0) {\n      return this._stateStack[count - 1];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * 将一个渲染状态放入栈顶的State Block\n   * @param {Function} func\n   * @param {Array} args\n   * @private\n   */\n  _pushState(_func, _args, _param) {\n    const stateBlock = this._getStateStackTop();\n    if (stateBlock) {\n      stateBlock.states.push({\n        func: _func,\n        args: _args,\n        parameters: _param\n      });\n    }\n  }\n\n  /**\n   * 设置渲染状态：void gl.enable(cap);\n   * @param {GLenum} cap\n   */\n  enable(cap) {\n    const currentState = this._parameters[cap];\n    if (currentState === true) return;\n\n    this._parameters[cap] = true;\n    this._gl.enable(cap);\n\n    const pushParam = {};\n    pushParam[cap] = false;\n    this._pushState(this._gl.disable, [cap], pushParam);\n  }\n\n  /**\n   * 设置渲染状态：void gl.disable(cap);\n   * @param {GLenum} cap\n   */\n  disable(cap) {\n    const currentState = this._parameters[cap];\n    if (currentState === false) return;\n\n    this._parameters[cap] = false;\n    this._gl.disable(cap);\n\n    const pushParam = {};\n    pushParam[cap] = true;\n    this._pushState(this._gl.enable, [cap], pushParam);\n  }\n\n  /**\n   * 设置渲染状态：void gl.blendFunc(sfactor, dfactor);\n   * @param {GLenum} sfactor\n   * @param {GLenum} dfactor\n   */\n  blendFunc(sfactor, dfactor) {\n    const gl = this._gl;\n\n    const param = this._parameters;\n    if (\n      param[gl.BLEND_SRC_RGB] === sfactor &&\n      param[gl.BLEND_SRC_ALPHA] === sfactor &&\n      param[gl.BLEND_DST_RGB] === dfactor &&\n      param[gl.BLEND_DST_ALPHA] === dfactor\n    )\n      return;\n\n    const pushArgs = [\n      param[gl.BLEND_SRC_RGB],\n      param[gl.BLEND_DST_RGB],\n      param[gl.BLEND_SRC_ALPHA],\n      param[gl.BLEND_DST_ALPHA]\n    ];\n    const pushParam = {};\n    pushParam[gl.BLEND_SRC_RGB] = param[gl.BLEND_SRC_RGB];\n    pushParam[gl.BLEND_DST_RGB] = param[gl.BLEND_DST_RGB];\n    pushParam[gl.BLEND_SRC_ALPHA] = param[gl.BLEND_SRC_ALPHA];\n    pushParam[gl.BLEND_DST_ALPHA] = param[gl.BLEND_DST_ALPHA];\n    this._pushState(gl.blendFuncSeparate, pushArgs, pushParam);\n\n    param[gl.BLEND_SRC_RGB] = sfactor;\n    param[gl.BLEND_SRC_ALPHA] = sfactor;\n    param[gl.BLEND_DST_RGB] = dfactor;\n    param[gl.BLEND_DST_ALPHA] = dfactor;\n    gl.blendFunc(sfactor, dfactor);\n  }\n\n  /**\n   * 设置渲染状态：void gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\n   * @param {GLenum} srcRGB\n   * @param {GLenum} dstRGB\n   * @param {GLenum} srcAlpha\n   * @param {GLenum} dstAlpha\n   */\n  blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha) {\n    const gl = this._gl;\n\n    const param = this._parameters;\n    if (\n      param[gl.BLEND_SRC_RGB] === srcRGB &&\n      param[gl.BLEND_SRC_ALPHA] === srcAlpha &&\n      param[gl.BLEND_DST_RGB] === dstRGB &&\n      param[gl.BLEND_DST_ALPHA] === dstAlpha\n    )\n      return;\n\n    const pushArgs = [\n      param[gl.BLEND_SRC_RGB],\n      param[gl.BLEND_DST_RGB],\n      param[gl.BLEND_SRC_ALPHA],\n      param[gl.BLEND_DST_ALPHA]\n    ];\n    const pushParam = {};\n    pushParam[gl.BLEND_SRC_RGB] = param[gl.BLEND_SRC_RGB];\n    pushParam[gl.BLEND_DST_RGB] = param[gl.BLEND_DST_RGB];\n    pushParam[gl.BLEND_SRC_ALPHA] = param[gl.BLEND_SRC_ALPHA];\n    pushParam[gl.BLEND_DST_ALPHA] = param[gl.BLEND_DST_ALPHA];\n    this._pushState(gl.blendFuncSeparate, pushArgs, pushParam);\n\n    param[gl.BLEND_SRC_RGB] = srcRGB;\n    param[gl.BLEND_SRC_ALPHA] = srcAlpha;\n    param[gl.BLEND_DST_RGB] = dstRGB;\n    param[gl.BLEND_DST_ALPHA] = dstAlpha;\n    gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\n  }\n\n  /**\n   * void gl.blendEquationSeparate(modeRGB, modeAlpha);\n   * @param {GLenum} modeRGB\n   * @param {GLenum} modeAlpha\n   */\n  blendEquationSeparate(modeRGB, modeAlpha) {\n    const gl = this._gl;\n    const param = this._parameters;\n\n    if (param[gl.BLEND_EQUATION_RGB] === modeRGB && param[gl.BLEND_EQUATION_ALPHA] === modeAlpha) return;\n\n    const pushArgs = [param[gl.BLEND_EQUATION_RGB], param[gl.BLEND_EQUATION_ALPHA]];\n    const pushParam = {};\n    pushParam[gl.BLEND_EQUATION_RGB] = param[gl.BLEND_EQUATION_RGB];\n    pushParam[gl.BLEND_EQUATION_ALPHA] = param[gl.BLEND_EQUATION_ALPHA];\n    this._pushState(gl.blendEquationSeparate, pushArgs, pushParam);\n\n    param[gl.BLEND_EQUATION_RGB] = modeRGB;\n    param[gl.BLEND_EQUATION_ALPHA] = modeAlpha;\n    gl.blendEquationSeparate(modeRGB, modeAlpha);\n  }\n\n  /**\n   * 控制颜色通道释放写入Frame Buffer\n   * @param {boolean} red 红色通道是否写入\n   * @param {boolean} green 绿色通道是否写入\n   * @param {boolean} blue 蓝色通道是否写入\n   * @param {boolean} alpha 透明通道是否写入\n   */\n  colorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean) {\n    const gl = this._gl;\n    const pushParam = {};\n    pushParam[gl.COLOR_WRITEMASK] = this._parameters[gl.COLOR_WRITEMASK];\n    this._pushState(gl.colorMask, this._parameters[gl.COLOR_WRITEMASK], pushParam);\n\n    this._parameters[gl.COLOR_WRITEMASK] = [red, green, blue, alpha];\n    gl.colorMask(red, green, blue, alpha);\n  }\n\n  /**\n   * 是否写入深度缓冲\n   * @param {boolean} flag\n   */\n  depthMask(flag) {\n    const gl = this._gl;\n\n    if (this._parameters[gl.DEPTH_WRITEMASK] === flag) return;\n\n    const pushParam = {};\n    pushParam[gl.DEPTH_WRITEMASK] = this._parameters[gl.DEPTH_WRITEMASK];\n    this._pushState(gl.depthMask, [this._parameters[gl.DEPTH_WRITEMASK]], pushParam);\n\n    this._parameters[gl.DEPTH_WRITEMASK] = flag;\n    gl.depthMask(flag);\n  }\n\n  /**\n   * 设置渲染状态：void gl.cullFace(mode);\n   * @param {GLenum} mode\n   */\n  cullFace(mode: GLenum) {\n    const gl = this._gl;\n\n    if (this._parameters[gl.CULL_FACE_MODE] === mode) return;\n\n    const pushParam = {};\n    pushParam[gl.CULL_FACE_MODE] = this._parameters[gl.CULL_FACE_MODE];\n    this._pushState(gl.cullFace, [this._parameters[gl.CULL_FACE_MODE]], pushParam);\n\n    this._parameters[gl.CULL_FACE_MODE] = mode;\n    gl.cullFace(mode);\n  }\n\n  /**\n   * 设置渲染状态：void gl.frontFace(mode);\n   * @param {GLenum} mode\n   */\n  frontFace(mode: GLenum) {\n    const gl = this._gl;\n\n    if (this._parameters[gl.FRONT_FACE] === mode) return;\n\n    const pushParam = {};\n    pushParam[gl.FRONT_FACE] = this._parameters[gl.FRONT_FACE];\n    this._pushState(gl.frontFace, [this._parameters[gl.FRONT_FACE]], pushParam);\n\n    this._parameters[gl.FRONT_FACE] = mode;\n    gl.frontFace(mode);\n  }\n\n  /**\n   * 设置渲染状态：void gl.depthFunc(func);\n   * @param {GLenum} func\n   */\n  depthFunc(func: GLenum) {\n    const gl = this._gl;\n\n    if (this._parameters[gl.DEPTH_FUNC] === func) return;\n\n    const pushParam = {};\n    pushParam[gl.DEPTH_FUNC] = this._parameters[gl.DEPTH_FUNC];\n    this._pushState(gl.depthFunc, [this._parameters[gl.DEPTH_FUNC]], pushParam);\n\n    this._parameters[gl.DEPTH_FUNC] = func;\n    gl.depthFunc(func);\n  }\n\n  /**\n   * 设置渲染状态：void gl.depthRange(zNear, zFar);\n   * @param {GLclampf} zNear\n   * @param {GLclampf} zFar\n   */\n  depthRange(zNear, zFar) {\n    const gl = this._gl;\n    const currentValue = this._parameters[gl.DEPTH_RANGE];\n\n    if (currentValue[0] === zNear && currentValue[1] === zFar) return;\n\n    const pushParam = {};\n    pushParam[gl.DEPTH_RANGE] = currentValue;\n    this._pushState(gl.depthRange, [this._parameters[gl.DEPTH_RANGE]], pushParam);\n\n    this._parameters[gl.DEPTH_RANGE] = [zNear, zFar];\n    gl.depthRange(zNear, zFar);\n  }\n\n  /**\n   * void gl.polygonOffset(factor, units);\n   * @param {GLfloat} factor\n   * @param {GLfloat} units\n   */\n  polygonOffset(factor, units) {\n    const gl = this._gl;\n    if (this._parameters[gl.POLYGON_OFFSET_FACTOR] === factor && this._parameters[gl.POLYGON_OFFSET_UNITS] === units)\n      return;\n\n    const pushParam = {};\n    pushParam[gl.POLYGON_OFFSET_FACTOR] = this._parameters[gl.POLYGON_OFFSET_FACTOR];\n    pushParam[gl.POLYGON_OFFSET_UNITS] = this._parameters[gl.POLYGON_OFFSET_UNITS];\n    this._pushState(\n      gl.polygonOffset,\n      [this._parameters[gl.POLYGON_OFFSET_FACTOR], this._parameters[gl.POLYGON_OFFSET_UNITS]],\n      pushParam\n    );\n\n    this._parameters[gl.POLYGON_OFFSET_FACTOR] = factor;\n    this._parameters[gl.POLYGON_OFFSET_UNITS] = units;\n    gl.polygonOffset(factor, units);\n  }\n\n  /**\n   * 设置渲染状态：void gl.scissor(x, y, width, height);\n   * @param {GLint} x\n   * @param {GLint} y\n   * @param {GLsizei} width\n   * @param {GLsizei} height\n   */\n  scissor(x, y, width, height) {\n    const gl = this._gl;\n\n    const box = this._parameters[gl.SCISSOR_BOX];\n    if (box[0] === x && box[1] === y && box[2] === width && box[3] === height) return;\n\n    const pushParam = {};\n    pushParam[gl.SCISSOR_BOX] = box;\n    this._pushState(gl.scissor, box, pushParam);\n\n    this._parameters[gl.SCISSOR_BOX] = [x, y, width, height];\n    gl.scissor(x, y, width, height);\n  }\n\n  /**\n   * 设置渲染状态：void gl.stencilFunc(func, ref, mask);\n   * @param {GLenum} func\n   * @param {GLint} ref\n   * @param {GLint} mask\n   */\n  stencilFunc(func: GLenum, ref: GLint, mask: GLint) {\n    const gl = this._gl;\n\n    if (\n      this._parameters[gl.STENCIL_FUNC] === func &&\n      this._parameters[gl.STENCIL_REF] === ref &&\n      this._parameters[gl.STENCIL_VALUE_MASK] === mask\n    )\n      return;\n\n    const pushArgs = [\n      this._parameters[gl.STENCIL_FUNC],\n      this._parameters[gl.STENCIL_REF],\n      this._parameters[gl.STENCIL_VALUE_MASK]\n    ];\n    const pushParam = {};\n    pushParam[gl.STENCIL_FUNC] = pushArgs[0];\n    pushParam[gl.STENCIL_REF] = pushArgs[1];\n    pushParam[gl.STENCIL_VALUE_MASK] = pushArgs[2];\n\n    this._pushState(gl.stencilFunc, pushArgs, pushParam);\n\n    this._parameters[gl.STENCIL_FUNC] = func;\n    this._parameters[gl.STENCIL_REF] = ref;\n    this._parameters[gl.STENCIL_VALUE_MASK] = mask;\n    gl.stencilFunc(func, ref, mask);\n  }\n\n  /**\n   * 设置渲染状态：void gl.stencilOp(fail, zfail, zpass);\n   * @param {GLenum} fail\n   * @param {GLenum} zfail\n   * @param {GLenum} zpass\n   */\n  stencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) {\n    const gl = this._gl;\n\n    if (\n      this._parameters[gl.STENCIL_FAIL] === fail &&\n      this._parameters[gl.STENCIL_PASS_DEPTH_FAIL] === zfail &&\n      this._parameters[gl.STENCIL_PASS_DEPTH_PASS] === zpass\n    )\n      return;\n\n    const pushArgs = [\n      this._parameters[gl.STENCIL_FAIL],\n      this._parameters[gl.STENCIL_PASS_DEPTH_FAIL],\n      this._parameters[gl.STENCIL_PASS_DEPTH_PASS]\n    ];\n    const pushParam = {};\n    pushParam[gl.STENCIL_FAIL] = pushArgs[0];\n    pushParam[gl.STENCIL_PASS_DEPTH_FAIL] = pushArgs[1];\n    pushParam[gl.STENCIL_PASS_DEPTH_PASS] = pushArgs[2];\n\n    this._pushState(gl.stencilOp, pushArgs, pushParam);\n\n    this._parameters[gl.STENCIL_FAIL] = fail;\n    this._parameters[gl.STENCIL_BACK_PASS_DEPTH_FAIL] = zfail;\n    this._parameters[gl.STENCIL_PASS_DEPTH_PASS] = zpass;\n    gl.stencilOp(fail, zfail, zpass);\n  }\n\n  stencilMask(mask: GLuint) {\n    const gl = this._gl;\n\n    if (this._parameters[gl.STENCIL_WRITEMASK] === mask) return;\n\n    const pushParam = {};\n    pushParam[gl.STENCIL_WRITEMASK] = this._parameters[gl.STENCIL_WRITEMASK];\n    this._pushState(gl.stencilMask, [this._parameters[gl.STENCIL_WRITEMASK]], pushParam);\n\n    this._parameters[gl.STENCIL_WRITEMASK] = mask;\n    gl.stencilMask(mask);\n  }\n}\n","import { Logger } from \"@oasis-engine/core\";\nimport { Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\n\n/**\n * 管理HUD控件Batch绘制时，需要处理的几何体数据\n * @private\n */\nexport class GLSprite {\n  private gl: WebGLRenderingContext;\n  private _vbo: WebGLBuffer;\n  private _maxBatchCount: number;\n  private _vertBuffer;\n  private _vertCursor: number;\n  private _drawSpriteCount: number;\n  private _vertAttributes;\n  constructor(gl) {\n    this.gl = gl;\n\n    //-- vertex attributes\n    this._initVertexAttributes(gl);\n\n    //-- 创建VBO\n    this._vbo = gl.createBuffer();\n    this._maxBatchCount = 0;\n    this._vertBuffer = null; // 在setWidgetCount()中创建\n    this._vertCursor = 0; // 当前使用的顶点的index\n    this._drawSpriteCount = 0; // 当前这一帧画了多少个Widget\n  }\n\n  /**\n   * 设置需要绘制的控件的个数\n   * @param {NUMBER} count 控件的个数\n   */\n  setMaxBatchCount(count) {\n    // 每个控件需要2个三角形，即6个顶点来绘制\n    const requireSize = count * 6 * 9;\n    if (this._vertBuffer && this._vertBuffer.length >= requireSize) {\n      return;\n    }\n\n    this._maxBatchCount = count;\n    this._vertBuffer = new Float32Array(requireSize);\n  }\n\n  /**\n   * 开始绘制控件，清空内部状态\n   */\n  beginDraw(count) {\n    this._vertCursor = 0;\n    this._drawSpriteCount = 0;\n\n    // 动态扩张\n    if (count > this._maxBatchCount) {\n      this.setMaxBatchCount(count);\n    }\n  }\n\n  /**\n   * 将一个2D Sprite绘制所需的矩形，Batch到内部的Vertex Buffer之中\n   * @param {HUDWidget} screenRect 需要绘制的控件\n   */\n  drawSprite(positionQuad, uvRect, tintColor) {\n    this._drawSpriteCount++;\n    if (this._drawSpriteCount > this._maxBatchCount) {\n      Logger.warn(\"Sprite: sprite count overflow\");\n      return;\n    }\n\n    const color = tintColor;\n\n    const u = uvRect.u;\n    const v = uvRect.v;\n    const p = uvRect.u + uvRect.width;\n    const q = uvRect.v + uvRect.height;\n\n    this._pushVertex(positionQuad.leftTop, new Vector2(u, v), color);\n    this._pushVertex(positionQuad.leftBottom, new Vector2(u, q), color);\n    this._pushVertex(positionQuad.rightBottom, new Vector2(p, q), color);\n\n    this._pushVertex(positionQuad.rightBottom, new Vector2(p, q), color);\n    this._pushVertex(positionQuad.rightTop, new Vector2(p, v), color);\n    this._pushVertex(positionQuad.leftTop, new Vector2(u, v), color);\n  }\n\n  /**\n   * 执行真正的绘制\n   */\n  endDraw() {\n    const vertCount = this._vertCursor / 9;\n    if (vertCount <= 0) return;\n\n    var gl = this.gl;\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._vbo);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertBuffer, gl.DYNAMIC_DRAW);\n\n    for (let i = 0, len = this._vertAttributes.length; i < len; i++) {\n      const attrib = this._vertAttributes[i];\n      gl.vertexAttribPointer(\n        attrib.lastShaderLoc,\n        attrib.size,\n        attrib.type,\n        attrib.normalized,\n        attrib.stride,\n        attrib.offset\n      );\n      gl.enableVertexAttribArray(attrib.lastShaderLoc);\n    } // end of for\n\n    gl.drawArrays(gl.TRIANGLES, 0, vertCount);\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    // disable attributes\n    for (let i = 0, len = this._vertAttributes.length; i < len; i++) {\n      gl.disableVertexAttribArray(this._vertAttributes[i].lastShaderLoc);\n    }\n  }\n\n  /**\n   * 初始化内部的顶点属性，包括pos, uv, color\n   * @param {WebGLRenderingContext} gl GL Context对象\n   */\n  _initVertexAttributes(gl) {\n    const vertexStride = (3 + 2 + 4) * 4;\n    const posAtt: any = {};\n    posAtt.name = \"a_pos\";\n    posAtt.size = 3;\n    posAtt.offset = 0;\n    posAtt.lastShaderLoc = 0;\n\n    const uvAtt: any = {};\n    uvAtt.name = \"a_uv\";\n    uvAtt.size = 2;\n    uvAtt.offset = 3 * 4;\n    uvAtt.lastShaderLoc = 1;\n\n    const colorAtt: any = {};\n    colorAtt.name = \"a_color\";\n    colorAtt.size = 4;\n    colorAtt.offset = 5 * 4;\n    colorAtt.lastShaderLoc = 2;\n\n    this._vertAttributes = [posAtt, uvAtt, colorAtt];\n    for (const att of this._vertAttributes) {\n      att.type = gl.FLOAT;\n      att.normalized = false;\n      att.stride = vertexStride;\n    } // end of for\n  }\n\n  /**\n   * 向当前的顶点缓冲中添加一个顶点\n   * @param {Vector3} pos 位置坐标\n   * @param {Vector2} uv 贴图坐标\n   * @param {Vector4} color 颜色RGBA\n   */\n  _pushVertex(pos: Vector3, uv: Vector2, color: Vector4) {\n    const vb = this._vertBuffer;\n    const id = this._vertCursor;\n\n    //-- pos\n    vb[id] = pos.x;\n    vb[id + 1] = pos.y;\n    vb[id + 2] = pos.z;\n\n    //-- uv\n    vb[id + 3] = uv.x;\n    vb[id + 4] = uv.y;\n\n    //-- color\n    vb[id + 5] = color.x;\n    vb[id + 6] = color.y;\n    vb[id + 7] = color.z;\n    vb[id + 8] = color.w;\n\n    //--\n    this._vertCursor += 9;\n  }\n\n  finalize() {\n    if (this._vbo) {\n      this.gl.deleteBuffer(this._vbo);\n      this._vbo = null;\n    }\n  }\n}\n","\"use strict\";\n\nimport { DataType, UniformSemantic, RenderState, BlendFunc } from \"@oasis-engine/core\";\n\nconst SpriteVertShader = `\nprecision highp float;\n\nuniform mat4 matProjection;\nuniform mat4 matView;\n\nattribute vec3 a_pos;\nattribute vec2 a_uv;\nattribute vec4 a_color;\n\nvarying vec2 v_uv;\nvarying vec4 v_color;\n\nvoid main()\n{\n  gl_Position = matProjection * matView * vec4(a_pos,1.0);\n  v_uv = a_uv;\n  v_color = a_color;\n}\n`;\n\nconst SpriteFragmentShader = `\nprecision mediump float;\nprecision mediump int;\n\nuniform sampler2D s_diffuse;\nvarying vec2 v_uv;\nvarying vec4 v_color;\n\nvoid main()\n{\n  // 只使用贴图的Alpha做Mask，这样Tint Color依然可以控制控件Fade Out\n  vec4 baseColor = texture2D(s_diffuse, v_uv);\n  gl_FragColor = baseColor * v_color;\n}\n`;\n\nexport const SpriteTechnique = {\n  name: \"spriteTech3D\",\n  vertexShader: SpriteVertShader,\n  fragmentShader: SpriteFragmentShader,\n  attribLocSet: {\n    a_pos: 0,\n    a_uv: 1,\n    a_color: 2\n  },\n  attributes: {\n    a_pos: {\n      name: \"a_pos\",\n      semantic: \"POSITION\",\n      type: DataType.FLOAT_VEC3\n    },\n    a_uv: {\n      name: \"a_uv\",\n      semantic: \"TEXCOORD_0\",\n      type: DataType.FLOAT_VEC2\n    },\n    a_color: {\n      name: \"a_color\",\n      semantic: \"COLOR\",\n      type: DataType.FLOAT_VEC3\n    }\n  },\n  uniforms: {\n    matProjection: {\n      name: \"matProjection\",\n      semantic: UniformSemantic.PROJECTION,\n      type: DataType.FLOAT_MAT4\n    },\n    matView: {\n      name: \"matView\",\n      semantic: UniformSemantic.VIEW,\n      type: DataType.FLOAT_MAT4\n    },\n    s_diffuse: {\n      name: \"s_diffuse\",\n      type: DataType.SAMPLER_2D\n    }\n  },\n  states: {\n    disable: [RenderState.CULL_FACE],\n    enable: [RenderState.BLEND],\n    functions: {\n      blendFunc: [BlendFunc.SRC_ALPHA, BlendFunc.ONE_MINUS_SRC_ALPHA],\n      depthMask: [false] //[gl.FALSE]\n    }\n  }\n};\n\nexport function createSpriteMaterial() {\n  const values = {};\n  return {\n    values,\n\n    setValue: (key, val) => {\n      values[key] = val;\n    },\n    getValue: (key) => {\n      return values[key];\n    }\n  };\n}\n","import { Logger } from \"@oasis-engine/core\";\nimport { Camera } from \"@oasis-engine/core\";\nimport { GLSprite } from \"./GLSprite\";\nimport { createSpriteMaterial, SpriteTechnique } from \"./GLSpriteMaterial\";\nimport { GLTechnique } from \"./GLTechnique\";\n\n/**\n * GL 层的 Technique 资源管理和渲染调用处理\n * @private\n */\nexport class GLSpriteBatcher {\n  private _gl: WebGLRenderingContext;\n  private _batchedQueue;\n  private _targetTexture;\n  private _glSprite: GLSprite;\n  private _glTech;\n  private _material;\n  private _camera;\n\n  constructor(rhi) {\n    this._gl = rhi.gl;\n\n    this._batchedQueue = [];\n    this._targetTexture = null;\n\n    this._glSprite = new GLSprite(rhi.gl);\n\n    //-- 初始化GLTechnique\n    this._glTech = new GLTechnique(rhi, SpriteTechnique as any);\n    this._material = createSpriteMaterial();\n    this._camera = null;\n  }\n\n  /**\n   * 将缓存的Sprite也绘制出来\n   */\n  flush() {\n    if (this._batchedQueue.length === 0) {\n      return;\n    }\n\n    if (!this._targetTexture) {\n      Logger.error(\"No texture!\");\n      return;\n    }\n\n    this._material.setValue(\"s_diffuse\", this._targetTexture);\n\n    this._material.setValue(\"matView\", this._camera.viewMatrix);\n    this._material.setValue(\"matProjection\", this._camera.projectionMatrix);\n\n    this._glTech.begin(this._material);\n    // 绘制\n    this._glSprite.beginDraw(this._batchedQueue.length);\n    for (let i = 0, len = this._batchedQueue.length; i < len; i++) {\n      const positionQuad = this._batchedQueue[i].positionQuad;\n      const uvRect = this._batchedQueue[i].uvRect;\n      const tintColor = this._batchedQueue[i].tintColor;\n      this._glSprite.drawSprite(positionQuad, uvRect, tintColor);\n    }\n    this._glSprite.endDraw();\n\n    this._glTech.end();\n\n    this._batchedQueue = [];\n    this._targetTexture = null;\n    this._camera = null;\n  }\n\n  /**\n   * 检查一个Sprite绘制的时候，能否和上一个Sprite合并绘制\n   * @param {Texture}   texture    纹理信息\n   * @param {String}    renderMode    绘制方式， '2D' 或者 '3D'\n   * @param {Camera}   camera        相机信息\n   */\n  canBatch(texture, renderMode, camera: Camera) {\n    if (this._targetTexture === null) {\n      return true;\n    }\n    return texture === this._targetTexture && camera === this._camera;\n  }\n\n  /**\n   * 把一个 Sprite 绘制需要的信息传进来，完成Batch逻辑\n   * @param {Object} positionQuad  Sprite四个顶点的位置\n   * @param {Object} uvRect        Sprite在texture上的纹理坐标\n   * @param {vec4}   tintColor     颜色\n   * @param {Texture}   texture    纹理信息\n   * @param {String}    renderMode    绘制方式， '2D' 或者 '3D'\n   * @param {Camera}   camera        相机信息\n   */\n  drawSprite(positionQuad, uvRect, tintColor, texture, renderMode, camera: Camera) {\n    if (!this.canBatch(texture, renderMode, camera)) {\n      this.flush();\n    }\n\n    this._targetTexture = texture;\n    this._camera = camera;\n    this._batchedQueue.push({ positionQuad, uvRect, tintColor });\n  }\n\n  /**\n   * 释放资源\n   */\n  finalize() {\n    this._glSprite.finalize();\n    this._glTech.finalize();\n  }\n}\n","import {\n  Camera,\n  Canvas,\n  ClearMode,\n  GLCapabilityType,\n  HardwareRenderer,\n  Logger,\n  Primitive,\n  RenderTarget,\n  IPlatformPrimitive\n} from \"@oasis-engine/core\";\nimport { Vector4 } from \"@oasis-engine/math\";\nimport { GLAssetsCache } from \"./GLAssetsCache\";\nimport { GLCapability } from \"./GLCapability\";\nimport { GLExtensions } from \"./GLExtensions\";\nimport { GLPrimitive } from \"./GLPrimitive\";\nimport { GLRenderStates } from \"./GLRenderStates\";\nimport { GLSpriteBatcher } from \"./GLSpriteBatcher\";\nimport { GLTechnique } from \"./GLTechnique\";\nimport { WebGLExtension } from \"./type\";\nimport { WebCanvas } from \"./WebCanvas\";\nimport { WebGLEngine } from \"./WebGLEngine\";\n\n/**\n * WebGL模式。默认 Auto\n */\nexport enum WebGLMode {\n  /** 自动，如果设备支持优先选择WebGL2.0，不支持 WebGL2.0 会回滚至WebGL1.0 */\n  Auto = 0,\n  /** 使用 WebGL2.0 */\n  WebGL2 = 1,\n  /** 使用 WebGL1.0 */\n  WebGL1 = 2\n}\n\n/**\n * WebGLRenderer的参数选项。\n */\nexport interface WebGLRendererOptions extends WebGLContextAttributes {\n  /** WebGL API 模式。*/\n  webGLMode?: WebGLMode;\n}\n\n/**\n * WebGL渲染器实现，包含了WebGL1.0/和WebGL2.0。\n */\nexport class WebGLRenderer implements HardwareRenderer {\n  /** @internal */\n  _engine: WebGLEngine;\n  private _options: WebGLRendererOptions;\n  private _gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n  private _renderStates;\n  private _assetsCache: GLAssetsCache;\n  private _extensions;\n  private _frameCount: number;\n  private _spriteBatcher;\n  private _capability: GLCapability;\n  private _isWebGL2: boolean;\n\n  /** 当前 RHI 是否为 WebGL 2.0 */\n  get isWebGL2() {\n    return this._isWebGL2;\n  }\n\n  constructor(options: WebGLRendererOptions = {}) {\n    this._options = options;\n  }\n\n  init(canvas: Canvas, engine: WebGLEngine) {\n    const option = this._options;\n    this._engine = engine;\n    const webCanvas = (canvas as WebCanvas)._webCanvas;\n    const webGLMode = option.webGLMode || WebGLMode.Auto;\n    let gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n\n    if (webGLMode == WebGLMode.Auto || webGLMode == WebGLMode.WebGL2) {\n      gl = webCanvas.getContext(\"webgl2\", option);\n      if (!gl && webCanvas instanceof HTMLCanvasElement) {\n        gl = <WebGL2RenderingContext>webCanvas.getContext(\"experimental-webgl2\", option);\n      }\n      this._isWebGL2 = true;\n    }\n\n    if (!gl) {\n      if (webGLMode == WebGLMode.Auto || webGLMode == WebGLMode.WebGL1) {\n        gl = <WebGLRenderingContext & WebGLExtension>webCanvas.getContext(\"webgl\", option);\n        if (!gl && webCanvas instanceof HTMLCanvasElement) {\n          gl = <WebGLRenderingContext & WebGLExtension>webCanvas.getContext(\"experimental-webgl\", option);\n        }\n        this._isWebGL2 = false;\n      }\n    }\n\n    if (!gl) {\n      throw new Error(\"Get GL Context FAILED.\");\n    }\n\n    this._gl = gl;\n    this._renderStates = new GLRenderStates(gl);\n    this._assetsCache = new GLAssetsCache(this, option);\n    this._extensions = new GLExtensions(this);\n    this._capability = new GLCapability(this);\n\n    this._frameCount = 0;\n    this._options = null;\n  }\n\n  /**\n   * 创建平台图元。\n   */\n  createPlatformPrimitive(primitive: Primitive): IPlatformPrimitive {\n    return new GLPrimitive(this, primitive);\n  }\n\n  /**\n   * GL Context 对象\n   * @member {WebGLRenderingContext}\n   * @readonly\n   */\n  get gl() {\n    return this._gl;\n  }\n\n  /**\n   * GL 资源对象缓冲池\n   */\n  get assetsCache(): GLAssetsCache {\n    return this._assetsCache;\n  }\n\n  /**\n   * GL 状态管理器\n   */\n  get renderStates(): GLRenderStates {\n    return this._renderStates;\n  }\n\n  /**\n   * GL 能力管理\n   * */\n  get capability(): GLCapability {\n    return this._capability;\n  }\n\n  /**\n   * 当前帧的计数\n   */\n  get frameCount() {\n    return this._frameCount;\n  }\n\n  /**\n   * 请求扩展\n   * @param {String} ext 扩展名\n   * @returns {Object|null} 请求结果，返回插件对象或null\n   */\n  requireExtension(ext) {\n    return this._extensions.requireExtension(ext);\n  }\n\n  /**\n   * 查询能否使用某些 GL 能力\n   * */\n  canIUse(capabilityType: GLCapabilityType) {\n    return this.capability.canIUse(capabilityType);\n  }\n\n  /**\n   * 查询能否使用某种压缩纹理格式\n   * */\n  canIUseCompressedTextureInternalFormat(type: number) {\n    return this.capability.canIUseCompressedTextureInternalFormat(type);\n  }\n\n  /** 是否能使用更多骨骼关节 */\n  public get canIUseMoreJoints() {\n    return this.capability.canIUseMoreJoints;\n  }\n\n  /**\n   * 设置视口区域\n   * @param {number} x 用来设定视口的左下角水平坐标\n   * @param {number} y 用来设定视口的左下角垂直坐标\n   * @param {number} width 用来设定视口的宽度\n   * @param {number} height 用来设定视口的高度\n   */\n  viewport(x, y, width, height) {\n    // 开启裁剪\n    // gl.enable(gl.SCISSOR_TEST);\n    // gl.scissor(x, transformY, width, height);\n    const gl = this._gl;\n    gl.viewport(x, gl.drawingBufferHeight - y - height, width, height);\n  }\n\n  colorMask(r, g, b, a) {\n    this._gl.colorMask(r, g, b, a);\n  }\n\n  /**\n   * 在一帧的渲染开始时，处理内部状态\n   */\n  beginFrame() {\n    this._frameCount++;\n  }\n\n  /**\n   * 清空渲染缓冲\n   * @param {ClearMode} clearMode\n   * @param {*} clearParam\n   */\n  clearRenderTarget(clearMode, clearParam: Vector4) {\n    const gl = this._gl;\n\n    switch (clearMode) {\n      case ClearMode.SOLID_COLOR: // solid color\n        gl.clearColor(clearParam.x, clearParam.y, clearParam.z, clearParam.w);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        break;\n      case ClearMode.DEPTH_ONLY: // depth only\n        gl.clear(gl.DEPTH_BUFFER_BIT);\n        break;\n      case ClearMode.COLOR_ONLY:\n        gl.clearColor(clearParam.x, clearParam.y, clearParam.z, clearParam.w);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        break;\n      case ClearMode.STENCIL_ONLY:\n        gl.clear(gl.STENCIL_BUFFER_BIT);\n        break;\n      case ClearMode.ALL_CLEAR:\n        gl.clearColor(clearParam.x, clearParam.y, clearParam.z, clearParam.w);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\n        break;\n\n      case ClearMode.DONT_CLEAR: // dont clear\n        break;\n    }\n  }\n\n  /**\n   * 使用指定的材质绘制一个 Primitive\n   * @param {Primitive} primitive\n   * @param {Material} mtl\n   */\n  drawPrimitive(primitive, group, mtl) {\n    // todo: VAO 不支持 morph 动画\n    let glTech = mtl.technique._glTechnique;\n    glTech || (glTech = mtl.technique._glTechnique = new GLTechnique(this, mtl.technique));\n\n    if (!glTech.valid) return;\n\n    if (primitive && glTech) {\n      glTech.begin(mtl);\n      primitive.draw(glTech, group);\n      glTech.end();\n    } else {\n      Logger.error(\"draw primitive failed.\");\n    }\n  }\n\n  /**\n   * 把一个 Sprite 绘制需要的信息传进来\n   * @param {Object} positionQuad  Sprite四个顶点的位置\n   * @param {Object} uvRect        Sprite在texture上的纹理坐标\n   * @param {vec4}   tintColor     颜色\n   * @param {Texture}   texture    纹理信息\n   * @param {String}    renderMode    绘制方式， '2D' 或者 '3D'\n   * @param {Camera}   camera        相机信息\n   */\n  drawSprite(positionQuad, uvRect, tintColor, texture, renderMode, camera: Camera) {\n    // _spriteBatcher只有在需要的时候才会创建\n    if (!this._spriteBatcher) {\n      this._spriteBatcher = new GLSpriteBatcher(this);\n    }\n\n    this._spriteBatcher.drawSprite(positionQuad, uvRect, tintColor, texture, renderMode, camera);\n  }\n\n  /**\n   * 给 SpriteRenderPass 在最后调用，确保所有 Sprite 绘制\n   */\n  flushSprite() {\n    if (this._spriteBatcher) {\n      this._spriteBatcher.flush();\n    }\n  }\n\n  /**\n   * 激活指定的RenderTarget\n   * @param {RenderTarget} renderTarget  需要被激活的RenderTarget对象，如果未设置，则渲染到屏幕帧\n   */\n  activeRenderTarget(renderTarget: RenderTarget, camera: Camera) {\n    const gl = this._gl;\n    if (renderTarget) {\n      renderTarget._activeRenderTarget();\n      const { width, height } = renderTarget;\n      gl.viewport(0.0, 0.0, width, height);\n    } else {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      const viewport = camera.viewport;\n      const width = gl.drawingBufferWidth;\n      const height = gl.drawingBufferHeight;\n      this.viewport(viewport.x * width, viewport.y * height, viewport.z * width, viewport.w * height);\n    }\n  }\n\n  /** blit FBO */\n  blitRenderTarget(renderTarget: RenderTarget) {\n    if (renderTarget) {\n      if (renderTarget._MSAAFrameBuffer) {\n        renderTarget._blitRenderTarget();\n        return;\n      }\n    }\n  }\n\n  /**\n   * 设置渲染到立方体纹理的面\n   * @param {RenderTarget} renderTarget  需要设置的 RenderTarget 对象\n   * @param {number} faceIndex - gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex\n   * */\n  setRenderTargetFace(renderTarget: RenderTarget, faceIndex: number) {\n    if (renderTarget) {\n      renderTarget._setRenderTargetFace(faceIndex);\n    }\n  }\n\n  /**\n   * 在一帧结束时，处理内部状态，释放 texture 缓存\n   */\n  endFrame() {\n    const CHECK_FREQ = 8;\n    if (this._frameCount % CHECK_FREQ === 0) {\n      this._assetsCache.compact();\n    }\n  }\n\n  /**\n   * 释放资源\n   */\n  destroy() {\n    this._assetsCache.finalize();\n  }\n}\n","import { Engine } from \"@oasis-engine/core\";\nimport { WebCanvas } from \"./WebCanvas\";\nimport { WebGLRenderer, WebGLRendererOptions } from \"./WebGLRenderer\";\n\n/**\n * WebGL 平台引擎，渲染器包含 WebGL1.0 和 WebGL2.0。\n */\nexport class WebGLEngine extends Engine {\n  /**\n   * 创建适用于 WebGL 平台的引擎。\n   * @param canvas - Web 画布\n   * @param webGLRendererOptions - WebGL渲染器参数\n   */\n  constructor(canvas: string | HTMLCanvasElement | OffscreenCanvas, webGLRendererOptions?: WebGLRendererOptions) {\n    const webCanvas = new WebCanvas(\n      <HTMLCanvasElement | OffscreenCanvas>(typeof canvas === \"string\" ? document.getElementById(canvas) : canvas)\n    );\n    const hardwareRenderer = new WebGLRenderer(webGLRendererOptions);\n\n    super(webCanvas, hardwareRenderer);\n  }\n\n  /**\n   * Web 画布。\n   */\n  get canvas(): WebCanvas {\n    return this._canvas as WebCanvas;\n  }\n}\n"],"names":["GLAsset2","GLShaderProgram2","GLSprite2","GLTechnique2","GLRenderStates2","GLAssetsCache2","GLExtensions2","GLCapability2","GLPrimitive2","GLSpriteBatcher2","WebCanvas2","WebGLRenderer2"],"mappings":"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"}