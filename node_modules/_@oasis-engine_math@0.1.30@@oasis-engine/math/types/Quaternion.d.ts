import { IClone } from "@oasis-engine/design";
import { Matrix3x3 } from "./Matrix3x3";
import { Vector3 } from "./Vector3";
/**
 * 四元数。
 */
export declare class Quaternion implements IClone {
    /** @internal */
    static readonly _tempVector3: Vector3;
    /**
     * 将两个四元数相加。
     * @param left - 左四元数
     * @param right - 右四元数
     * @param out - 四元数相加结果
     */
    static add(left: Quaternion, right: Quaternion, out: Quaternion): void;
    /**
     * 将两个四元数相乘。
     * @param left - 左四元数
     * @param right - 右四元数
     * @param out - 四元数相乘结果
     */
    static multiply(left: Quaternion, right: Quaternion, out: Quaternion): void;
    /**
     * 计算共轭四元数。
     * @param a - 输入四元数
     * @param out - 输出的共轭四元数
     */
    static conjugate(a: Quaternion, out: Quaternion): void;
    /**
     * 计算两个四元数的点积。
     * @param left - 左四元数
     * @param right - 右四元数
     * @returns 两个四元数的点积
     */
    static dot(left: Quaternion, right: Quaternion): number;
    /**
     * 判断两个四元数是否相等。
     * @param left - 四元数
     * @param right - 四元数
     * @returns 两个四元数是否相等，是返回 true，否则返回 false
     */
    static equals(left: Quaternion, right: Quaternion): boolean;
    /**
     * 通过旋转的欧拉角设置四元数。
     * @param axis - 旋转轴向量
     * @param rad - 旋转角度(单位：弧度)
     * @param out - 生成的四元数
     */
    static rotationAxisAngle(axis: Vector3, rad: number, out: Quaternion): void;
    /**
     * 根据 x,y,z 轴的旋转欧拉角(弧度)生成四元数，欧拉角顺序 pitch yaw roll。
     * @param x - 绕X轴旋转的弧度 pitch
     * @param y - 绕Y轴旋转的弧度 yaw
     * @param z - 绕Z轴旋转的弧度 roll
     * @param out - 生成的四元数
     */
    static rotationEuler(x: number, y: number, z: number, out: Quaternion): void;
    /**
     * 根据 yaw、pitch、roll 生成四元数
     * @param yaw - 偏航角(单位弧度)
     * @param pitch - 俯仰角(单位弧度)
     * @param roll - 翻滚角(单位弧度)
     * @param out - 生成的四元数
     */
    static rotationYawPitchRoll(yaw: number, pitch: number, roll: number, out: Quaternion): void;
    /**
     * 通过矩阵得出对应的四元数。
     * @param m - 3x3矩阵
     * @param out - 生成的四元数
     */
    static rotationMatrix3x3(m: Matrix3x3, out: Quaternion): void;
    /**
     * 计算四元数的逆。
     * @param a - 四元数的逆
     * @param out - 四元数的逆
     */
    static invert(a: Quaternion, out: Quaternion): void;
    /**
     * 插值四元数。
     * @param start - 左四元数
     * @param end - 右四元数
     * @param t - 插值比例 范围 0～1
     * @param out - 插值结果
     */
    static lerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void;
    /**
     * 球面插值四元数。
     * @param start - 左四元数
     * @param end - 右四元数
     * @param t - 插值比例
     * @param out - 插值结果
     */
    static slerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void;
    /**
     * 将一个四元数归一化。
     * @param a - 四元数
     * @param out - 四元数归一化的结果
     */
    static normalize(a: Quaternion, out: Quaternion): void;
    /**
     * 绕 X 轴旋生成转四元数。
     * @param a - 四元数
     * @param rad - 旋转角度(单位：弧度)
     * @param out - 旋转后的四元数
     */
    static rotationX(rad: number, out: Quaternion): void;
    /**
     * 绕 Y 轴旋转生成四元数。
     * @param a - 四元数
     * @param rad - 旋转角度(单位：弧度)
     * @param out - 旋转后的四元数
     */
    static rotationY(rad: number, out: Quaternion): void;
    /**
     * 绕 Z 轴旋转生成四元数。
     * @param a - 四元数
     * @param rad - 旋转角度(单位：弧度)
     * @param out - 旋转后的四元数
     */
    static rotationZ(rad: number, out: Quaternion): void;
    /**
     * 四元数 q 绕 X 轴旋转。
     * @param q - 四元数
     * @param rad - 旋转角度(单位：弧度)
     * @param out - 旋转后的四元数
     */
    static rotateX(q: Quaternion, rad: number, out: Quaternion): void;
    /**
     * 四元数 q 绕 Y 轴旋转。
     * @param q - 四元数
     * @param rad - 旋转角度(单位：弧度)
     * @param out - 旋转后的四元数
     */
    static rotateY(q: Quaternion, rad: number, out: Quaternion): void;
    /**
     * 四元数 q 绕 Z 轴旋转。
     * @param q - 四元数
     * @param rad - 旋转角度(单位：弧度)
     * @param out - 旋转后的四元数
     */
    static rotateZ(q: Quaternion, rad: number, out: Quaternion): void;
    /**
     * 将一个四元数缩放。
     * @param a - 四元数
     * @param s - 缩放因子
     * @param out - 四元数缩放的结果
     */
    static scale(a: Quaternion, s: number, out: Quaternion): void;
    /** 四元数的 X 分量 */
    x: number;
    /** 四元数的 Y 分量 */
    y: number;
    /** 四元数的 Z 分量 */
    z: number;
    /** 四元数的 W 分量 */
    w: number;
    /**
     * 创建四元数实例。
     * @param x - 四元数的 X 分量，默认值 0
     * @param y - 四元数的 Y 分量，默认值 0
     * @param z - 四元数的 Z 分量，默认值 0
     * @param w - 四元数的 W 分量，默认值 1
     */
    constructor(x?: number, y?: number, z?: number, w?: number);
    /**
     * 设置 x, y, z, w 的值。
     * @param x - 四元数的 X 分量
     * @param y - 四元数的 Y 分量
     * @param z - 四元数的 Z 分量
     * @param w - 四元数的 W 分量
     * @returns 当前四元数
     */
    setValue(x: number, y: number, z: number, w: number): Quaternion;
    /**
     * 通过数组设置值，并返回当前四元数。
     * @param array - 数组
     * @param offset - 数组偏移
     * @returns 当前四元数
     */
    setValueByArray(array: ArrayLike<number>, offset?: number): Quaternion;
    /**
     * 共轭四元数
     * @returns 当前四元数
     */
    conjugate(): Quaternion;
    /**
     * 获取四元数的旋转轴和旋转角度(单位：弧度)。
     * @param out - 四元数的旋转轴
     * @returns 当前四元数的旋转角度(单位：弧度)
     */
    getAxisAngle(out: Vector3): number;
    /**
     * 将四元数设置为单位四元数。
     */
    identity(): Quaternion;
    /**
     * 计算一个四元数的标量长度。
     * @returns 当前四元数的标量长度
     */
    length(): number;
    /**
     * 计算一个四元数的标量长度的平方。
     * @returns 当前四元数的标量长度的平方
     */
    lengthSquared(): number;
    /**
     * 四元数归一化。
     * @returns 当前四元数
     */
    normalize(): Quaternion;
    /**
     * 获取四元数的欧拉角(弧度)。
     * @param out - 四元数的欧拉角(弧度)
     * @returns 欧拉角 x->pitch y->yaw z->roll
     */
    toEuler(out: Vector3): Vector3;
    /**
     * 获取四元数的欧拉角(弧度)。
     * @param out - 四元数的欧拉角(弧度)
     * @returns 欧拉角 x->yaw y->pitch z->roll
     */
    toYawPitchRoll(out: Vector3): Vector3;
    /**
     * 拷贝到数组。
     * @param out - 数组。
     * @param outOffset - 数组偏移。
     */
    toArray(out: number[] | Float32Array | Float64Array, outOffset?: number): void;
    /**
     * 创建一个新的四元数，并用当前四元数初始化。
     * @returns 一个新的四元数，并且拷贝当前四元数的值
     */
    clone(): Quaternion;
    /**
     * 将当前四元数值拷贝给 out 四元数。
     * @param out - 目标四元数
     */
    cloneTo(out: Quaternion): Quaternion;
    /**
     * 绕 X 轴旋转。
     * @param rad - 旋转角度(单位：弧度)
     * @returns 当前四元数
     */
    rotateX(rad: number): Quaternion;
    /**
     * 绕 Y 轴旋转。
     * @param rad - 旋转角度(单位：弧度)
     * @returns 当前四元数
     */
    rotateY(rad: number): Quaternion;
    /**
     * 绕 Z 轴旋转。
     * @param rad - 旋转角度(单位：弧度)
     * @returns 当前四元数
     */
    rotateZ(rad: number): Quaternion;
    /**
     * 通过旋转的欧拉角设置当前四元数。
     * @param axis - 旋转轴向量
     * @param rad - 旋转角度(单位：弧度)
     * @returns 当前四元数
     */
    rotationAxisAngle(axis: Vector3, rad: number): Quaternion;
    /**
     * 与四元数相乘。
     * @param quat - 右四元数
     * @returns 当前四元数
     */
    multiply(quat: Quaternion): Quaternion;
    /**
     * 计算四元数的逆。
     * @returns 当前四元数
     */
    invert(): Quaternion;
    /**
     * 计算与四元数的点积。
     * @param quat - 右四元数
     * @returns 点击结果
     */
    dot(quat: Quaternion): number;
    /**
     * 插值四元数。
     * @param quat - 右四元数
     * @param t - 插值比例 范围 0～1
     * @returns - 插值结果
     */
    lerp(quat: Quaternion, t: number): Quaternion;
}
