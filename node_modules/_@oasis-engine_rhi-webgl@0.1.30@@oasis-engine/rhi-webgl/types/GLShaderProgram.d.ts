import { RenderTechnique } from "@oasis-engine/core";
import { WebGLEngine } from "./WebGLEngine";
/**
 * GL的Shader+Program的包装，用于对象的绘制. 对应glTF中的一个program对象
 * @class
 * @private
 */
export declare class GLShaderProgram {
    private _engine;
    /**
     * 从缓存中读取program,如果没有则新建
     * @param {RenderTechnique} tech
     * @param {WebGLRenderingContext} gl
     * @return {GLShaderProgram}
     * */
    static requireProgram(tech: RenderTechnique, gl: WebGLRenderingContext, engine: WebGLEngine): GLShaderProgram;
    /**
     * 从缓存中释放program
     * @param {GLShaderProgram} program
     * */
    static releaseProgram(program: GLShaderProgram): void;
    private _gl;
    private _vertexShader;
    private _fragmentShader;
    private _vertexShaderSource;
    private _fragmentShaderSource;
    private _program;
    private _attributeCache;
    private _uniformCache;
    constructor(gl: WebGLRenderingContext, _engine: WebGLEngine);
    /**
     * WebGLProgram对象
     * @member {WebGLProgram}
     * @readonly
     */
    get program(): WebGLProgram;
    /**
     * 使用源代码编译、链接Shader Program
     * @param {string} vertexSource 顶点 Shader 代码
     * @param {string} fragmentSource 片元 Shader 代码
     */
    createFromSource(vertexSource: any, fragmentSource: any, attribLocSet: any): boolean;
    /**
     * 编译Shader
     * @param {GLenum} shaderType
     * @param {string} shaderSource
     * @private
     */
    private _compileShader;
    /**
     * getAttribLocation读取速度比较慢，增加缓存机制
     * */
    getAttribLocation(glProgram: WebGLProgram, name: string): GLint;
    /**
     * getUniformLocation读取速度比较慢，增加缓存机制
     * */
    getUniformLocation(glProgram: WebGLProgram, name: string): WebGLUniformLocation | null;
    /**
     * 释放GL资源对象
     */
    finalize(): void;
}
