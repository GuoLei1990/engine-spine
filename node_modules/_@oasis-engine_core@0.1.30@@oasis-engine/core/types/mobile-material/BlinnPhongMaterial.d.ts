import { Engine } from "../Engine";
import { CommonMaterial } from "./CommonMaterial";
/**
 * 实现 Blinn 光照模型的材质
 * https://dl.acm.org/citation.cfm?id=563893
 * color = <emission> + <ambient> * al + <diffuse> * max(N * L, 0) + <specular> * max(H * N, 0)^<shininess>
 */
export declare class BlinnPhongMaterial extends CommonMaterial {
    private _directLightCount;
    private _spotLightCount;
    private _pointLightCount;
    /**
     * 实现 Blinn 光照模型的材质
     * @param {String} name 名称
     */
    constructor(engine: Engine, name: any);
    /**
     * 环境光反射颜色
     * @member {Vector4|Texture2D}
     */
    get diffuse(): any;
    set diffuse(val: any);
    /**
     * 高光反射颜色
     * @member {Vector4|Texture2D}
     */
    get specular(): any;
    set specular(val: any);
    /**
     * 高光系数，值越大高光效果越聚拢
     * @member {float}
     */
    get shininess(): any;
    set shininess(val: any);
    /**
     * 生成内部的 Technique 对象
     * @private
     */
    _generateTechnique(): void;
    /**
     * 获取宏
     * @private
     */
    _generateMacros(): any[];
    /**
     * 重写基类方法，添加方向光计算
     * @private
     */
    prepareDrawing(context: any, component: any, primitive: any): void;
    /**
     * 添加方向光相关的 uniform 定义
     * @private
     */
    _generateFragmentUniform(): any;
}
