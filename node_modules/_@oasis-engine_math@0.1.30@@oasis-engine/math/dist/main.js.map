{"version":3,"file":"main.js","sources":["../src/MathUtil.ts","../src/Matrix3x3.ts","../src/Vector3.ts","../src/Quaternion.ts","../src/Matrix.ts","../src/Vector2.ts","../src/Vector4.ts","../src/Spherical.ts"],"sourcesContent":["/**\n * 数学工具类。\n */\nexport class MathUtil {\n  /** 单精度浮点零容差。 */\n  static readonly zeroTolerance: number = 1e-6;\n  /** 弧度转角度的转换因子。 */\n  static readonly radToDegreeFactor: number = 180 / Math.PI;\n  /** 角度转弧度的转换因子。 */\n  static readonly degreeToRadFactor: number = Math.PI / 180;\n\n  /**\n   * 求指定范围内的值。\n   * @param v\n   * @param min\n   * @param max\n   * @returns 范围内的值\n   */\n  static clamp(v: number, min: number, max: number): number {\n    return Math.max(min, Math.min(max, v));\n  }\n\n  /**\n   * 比较两个数是否相等(大小在零容差之内就算相等)。\n   * @param a\n   * @param b\n   * @returns 两个数是否相等\n   */\n  static equals(a: number, b: number): boolean {\n    return Math.abs(a - b) <= MathUtil.zeroTolerance;\n  }\n\n  /**\n   * 判断一个数是否是 2 的幂。\n   * @param v\n   * @returns 传入的数是否是 2 的幂\n   */\n  static isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * 弧度转角度。\n   * @param r\n   * @returns 角度\n   */\n  static radianToDegree(r: number): number {\n    return r * MathUtil.radToDegreeFactor;\n  }\n\n  /**\n   * 角度转弧度。\n   * @param d\n   * @returns 弧度\n   */\n  static degreeToRadian(d: number): number {\n    return d * MathUtil.degreeToRadFactor;\n  }\n}\n","import { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector2 } from \"./Vector2\";\n\n/**\n * 3x3矩阵，我们采用列矩阵的模式存储\n */\nexport class Matrix3x3 {\n  /**\n   * 将两个矩阵相加。\n   * @param left - 左矩阵\n   * @param right - 右矩阵\n   * @param out - 矩阵相加的结果\n   */\n  static add(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] + re[0];\n    oe[1] = le[1] + re[1];\n    oe[2] = le[2] + re[2];\n\n    oe[3] = le[3] + re[3];\n    oe[4] = le[4] + re[4];\n    oe[5] = le[5] + re[5];\n\n    oe[6] = le[6] + re[6];\n    oe[7] = le[7] + re[7];\n    oe[8] = le[8] + re[8];\n  }\n\n  /**\n   * 将两个矩阵相减。\n   * @param left - 左矩阵\n   * @param right - 右矩阵\n   * @param out - 矩阵相减的结果\n   */\n  static subtract(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] - re[0];\n    oe[1] = le[1] - re[1];\n    oe[2] = le[2] - re[2];\n\n    oe[3] = le[3] - re[3];\n    oe[4] = le[4] - re[4];\n    oe[5] = le[5] - re[5];\n\n    oe[6] = le[6] - re[6];\n    oe[7] = le[7] - re[7];\n    oe[8] = le[8] - re[8];\n  }\n\n  /**\n   * 将两个矩阵相乘。\n   * @param left - 左矩阵\n   * @param right - 右矩阵\n   * @param out - 矩阵相乘的结果\n   */\n  static multiply(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    const l11 = le[0],\n      l12 = le[1],\n      l13 = le[2];\n    const l21 = le[3],\n      l22 = le[4],\n      l23 = le[5];\n    const l31 = le[6],\n      l32 = le[7],\n      l33 = le[8];\n\n    const r11 = re[0],\n      r12 = re[1],\n      r13 = re[2];\n    const r21 = re[3],\n      r22 = re[4],\n      r23 = re[5];\n    const r31 = re[6],\n      r32 = re[7],\n      r33 = re[8];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13;\n\n    oe[3] = l11 * r21 + l21 * r22 + l31 * r23;\n    oe[4] = l12 * r21 + l22 * r22 + l32 * r23;\n    oe[5] = l13 * r21 + l23 * r22 + l33 * r23;\n\n    oe[6] = l11 * r31 + l21 * r32 + l31 * r33;\n    oe[7] = l12 * r31 + l22 * r32 + l32 * r33;\n    oe[8] = l13 * r31 + l23 * r32 + l33 * r33;\n  }\n\n  /**\n   * 判断两个矩阵的值是否相等。\n   * @param left - 左矩阵\n   * @param right - 右矩阵\n   * @returns 两个矩阵是否相等，是返回 true，否则返回 false\n   */\n  static equals(left: Matrix3x3, right: Matrix3x3): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8])\n    );\n  }\n\n  /**\n   * 从四元数转换为一个3x3矩阵。\n   * @param q - 四元数\n   * @param out - 转换后的3x3矩阵\n   */\n  static rotationQuaternion(q: Quaternion, out: Matrix3x3): void {\n    const oe = out.elements;\n    const { x, y, z, w } = q;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[3] = yx - wz;\n    oe[6] = zx + wy;\n\n    oe[1] = yx + wz;\n    oe[4] = 1 - xx - zz;\n    oe[7] = zy - wx;\n\n    oe[2] = zx - wy;\n    oe[5] = zy + wx;\n    oe[8] = 1 - xx - yy;\n  }\n\n  /**\n   * 通过指定缩放生成3x3矩阵。\n   * @param s - 缩放向量\n   * @param out - 指定缩放后矩阵\n   */\n  static scaling(s: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = s.x;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = s.y;\n    oe[5] = 0;\n\n    oe[6] = 0;\n    oe[7] = 0;\n    oe[8] = 1;\n  }\n\n  /**\n   * 通过指定平移生成3x3矩阵。\n   * @param trans - 平移向量\n   * @param out - 指定平移后矩阵\n   */\n  static translation(trans: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = 1;\n    oe[5] = 0;\n\n    oe[6] = trans.x;\n    oe[7] = trans.y;\n    oe[8] = 1;\n  }\n\n  /**\n   * 计算矩阵 a 的逆矩阵，并将结果输出到 out。\n   * @param a - 矩阵\n   * @param out - 逆矩阵\n   */\n  static invert(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    let det = a11 * b12 + a12 * b22 + a13 * b32;\n    if (!det) {\n      return;\n    }\n    det = 1.0 / det;\n\n    oe[0] = b12 * det;\n    oe[1] = (-a33 * a12 + a13 * a32) * det;\n    oe[2] = (a23 * a12 - a13 * a22) * det;\n\n    oe[3] = b22 * det;\n    oe[4] = (a33 * a11 - a13 * a31) * det;\n    oe[5] = (-a23 * a11 + a13 * a21) * det;\n\n    oe[6] = b32 * det;\n    oe[7] = (-a32 * a11 + a12 * a31) * det;\n    oe[8] = (a22 * a11 - a12 * a21) * det;\n  }\n\n  /**\n   * 从4x4矩阵中计算出3x3法线矩阵。\n   * @remarks 计算过程为求逆矩阵的转置矩阵。\n   * @param mat4 - 4x4矩阵\n   * @param out - 3x3法线矩阵\n   */\n  static normalMatrix(mat4: Matrix, out: Matrix3x3): void {\n    const ae = mat4.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[2] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n\n    oe[3] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[4] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[5] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n\n    oe[6] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[7] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[8] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n  }\n\n  /**\n   * 将矩阵 a 按给定角度旋转，并将结果输出到 out。\n   * @param a - 矩阵\n   * @param r - 给定的旋转角度(单位：弧度)\n   * @param out - 旋转后的矩阵\n   */\n  static rotate(a: Matrix3x3, r: number, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n    const s = Math.sin(r);\n    const c = Math.cos(r);\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = c * a11 + s * a21;\n    oe[1] = c * a12 + s * a22;\n    oe[2] = c * a13 + s * a23;\n\n    oe[3] = c * a21 - s * a11;\n    oe[4] = c * a22 - s * a12;\n    oe[5] = c * a23 - s * a13;\n\n    oe[6] = a31;\n    oe[7] = a32;\n    oe[8] = a33;\n  }\n\n  /**\n   * 将矩阵 a 按给定向量 v 缩放，并将结果输出到 out。\n   * @param m - 矩阵\n   * @param s - 缩放向量\n   * @param out - 缩放后的矩阵\n   */\n  static scale(m: Matrix3x3, s: Vector2, out: Matrix3x3): void {\n    const { x, y } = s;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    oe[0] = x * ae[0];\n    oe[1] = x * ae[1];\n    oe[2] = x * ae[2];\n\n    oe[3] = y * ae[3];\n    oe[4] = y * ae[4];\n    oe[5] = y * ae[5];\n\n    oe[6] = ae[6];\n    oe[7] = ae[7];\n    oe[8] = ae[8];\n  }\n\n  /**\n   * 将矩阵 a 按给定向量 v 转换，并将结果输出到 out。\n   * @param m - 矩阵\n   * @param trans - 转换向量\n   * @param out - 转换后的结果\n   */\n  static translate(m: Matrix3x3, trans: Vector2, out: Matrix3x3): void {\n    const { x, y } = trans;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = a11;\n    oe[1] = a12;\n    oe[2] = a13;\n\n    oe[3] = a21;\n    oe[4] = a22;\n    oe[5] = a23;\n\n    oe[6] = x * a11 + y * a21 + a31;\n    oe[7] = x * a12 + y * a22 + a32;\n    oe[8] = x * a13 + y * a23 + a33;\n  }\n\n  /**\n   * 计算矩阵 a 的转置矩阵，并将结果输出到 out。\n   * @param a - 矩阵\n   * @param out - 转置矩阵\n   */\n  static transpose(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a23 = ae[5];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n      oe[3] = a12;\n      oe[5] = ae[7];\n      oe[6] = a13;\n      oe[7] = a23;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n\n      oe[3] = ae[1];\n      oe[4] = ae[4];\n      oe[5] = ae[7];\n\n      oe[6] = ae[2];\n      oe[7] = ae[5];\n      oe[8] = ae[8];\n    }\n  }\n\n  /**\n   * 矩阵元素数组，采用列矩阵的模式存储。\n   * @remarks\n   * elements[0] 表示第 1 列第 1 行 m11\n   * elements[1] 表示第 1 列第 2 行 m12\n   * elements[2] 表示第 1 列第 3 行 m13\n   * elements[3] 表示第 2 列第 1 行 m21\n   * 依次类推\n   */\n  elements: Float32Array = new Float32Array(9);\n\n  /**\n   * 创建3x3矩阵实例，默认创建单位矩阵，采用列矩阵的模式存储。\n   * @param m11 - 默认值1 column 1, row 1\n   * @param m12 - 默认值0 column 1, row 2\n   * @param m13 - 默认值0 column 1, row 3\n   * @param m21 - 默认值0 column 2, row 1\n   * @param m22 - 默认值1 column 2, row 2\n   * @param m23 - 默认值0 column 2, row 3\n   * @param m31 - 默认值0 column 3, row 1\n   * @param m32 - 默认值0 column 3, row 2\n   * @param m33 - 默认值1 column 3, row 3\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n  }\n\n  /**\n   * 给矩阵设置值，并返回当前值。\n   * @param m11\n   * @param m12\n   * @param m13\n   * @param m21\n   * @param m22\n   * @param m23\n   * @param m31\n   * @param m32\n   * @param m33\n   * @returns 当前矩阵\n   */\n  setValue(\n    m11: number,\n    m12: number,\n    m13: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m31: number,\n    m32: number,\n    m33: number\n  ): Matrix3x3 {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n\n    return this;\n  }\n\n  /**\n   * 通过数组设置值，并返回当前矩阵。\n   * @param array - 数组\n   * @param offset - 数组偏移\n   * @returns 当前矩阵\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Matrix3x3 {\n    const srce = this.elements;\n    for (let i = 0; i < 12; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * 从4x4矩阵转换为一个3x3矩阵，upper-left 原则，即忽略第4行第4列。\n   * @param a - 4x4矩阵\n   * @returns 当前矩阵\n   */\n  setValueByMatrix(a: Matrix): Matrix3x3 {\n    const ae = a.elements;\n    const e = this.elements;\n\n    e[0] = ae[0];\n    e[1] = ae[1];\n    e[2] = ae[2];\n\n    e[3] = ae[4];\n    e[4] = ae[5];\n    e[5] = ae[6];\n\n    e[6] = ae[8];\n    e[7] = ae[9];\n    e[8] = ae[10];\n\n    return this;\n  }\n\n  /**\n   * 拷贝到数组。\n   * @param out - 数组。\n   * @param outOffset - 数组偏移。\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n  }\n\n  /**\n   * 创建一个新的矩阵，并用当前矩阵值初始化。\n   * @returns 一个新的矩阵，并且拷贝当前矩阵的值\n   */\n  clone(): Matrix3x3 {\n    const e = this.elements;\n    let ret = new Matrix3x3(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);\n    return ret;\n  }\n\n  /**\n   * 将当前矩阵值拷贝给 out 矩阵。\n   * @param out - 目标矩阵\n   */\n  cloneTo(out: Matrix3x3): Matrix3x3 {\n    const e = this.elements;\n    const oe = out.elements;\n\n    oe[0] = e[0];\n    oe[1] = e[1];\n    oe[2] = e[2];\n\n    oe[3] = e[3];\n    oe[4] = e[4];\n    oe[5] = e[5];\n\n    oe[6] = e[6];\n    oe[7] = e[7];\n    oe[8] = e[8];\n\n    return out;\n  }\n\n  /**\n   * 将当前矩阵加上给定的向量 right，并返回当前矩阵。\n   * @param right - 给定的向量，右操作数\n   * @returns 当前矩阵\n   */\n  add(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.add(this, right, this);\n    return this;\n  }\n\n  /**\n   * 将当前矩阵减去给定的向量 right，并返回当前矩阵。\n   * @param right - 给定的向量，右操作数\n   * @returns 当前矩阵\n   */\n  subtract(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.subtract(this, right, this);\n    return this;\n  }\n\n  /**\n   * 将当前矩阵乘以给定的向量 right，并返回当前矩阵。\n   * @param right - 给定的向量，右操作数\n   * @returns 当前矩阵\n   */\n  multiply(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * 计算3x3矩阵的行列式。\n   * @returns 当前矩阵的行列式\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2];\n    const a21 = e[3],\n      a22 = e[4],\n      a23 = e[5];\n    const a31 = e[6],\n      a32 = e[7],\n      a33 = e[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    return a11 * b12 + a12 * b22 + a13 * b32;\n  }\n\n  /**\n   * 将矩阵设置为单位矩阵，并返回。\n   * @returns 当前矩阵\n   */\n  identity(): Matrix3x3 {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n\n    return this;\n  }\n\n  /**\n   * 计算当前矩阵的逆矩阵，并返回。\n   * @returns 当前矩阵\n   */\n  invert(): Matrix3x3 {\n    Matrix3x3.invert(this, this);\n    return this;\n  }\n\n  /**\n   * 将当前矩阵按给定角度旋转，并返回。\n   * @param r - 给定的旋转角度(单位：弧度)\n   * @returns 当前矩阵\n   */\n  rotate(r: number): Matrix3x3 {\n    Matrix3x3.rotate(this, r, this);\n    return this;\n  }\n\n  /**\n   * 将当前矩阵按给定向量 v 缩放，并返回。\n   * @param s - 缩放向量\n   * @returns 当前矩阵\n   */\n  scale(s: Vector2): Matrix3x3 {\n    Matrix3x3.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * 将当前矩阵按给定向量 v 转换，并返回。\n   * @param trans - 转换向量\n   * @returns 当前矩阵\n   */\n  translate(trans: Vector2): Matrix3x3 {\n    Matrix3x3.translate(this, trans, this);\n    return this;\n  }\n\n  /**\n   * 计算当前矩阵的转置矩阵，并返回。\n   * @returns 当前矩阵\n   */\n  transpose(): Matrix3x3 {\n    Matrix3x3.transpose(this, this);\n    return this;\n  }\n}\n","import { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector4 } from \"./Vector4\";\n\n/**\n * 三维向量。\n */\nexport class Vector3 {\n  /** @internal 零向量。*/\n  static readonly _zero = new Vector3(0.0, 0.0, 0.0);\n  /** @internal 一向量。*/\n  static readonly _one = new Vector3(1.0, 1.0, 1.0);\n  /** @internal */\n  static readonly _tempVector3 = new Vector3();\n\n  /**\n   * 将两个向量相加。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @param out - 向量相加结果\n   */\n  static add(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n    out.z = left.z + right.z;\n  }\n\n  /**\n   * 将两个向量相减。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @param out - 两个三维向量的相减结果\n   */\n  static subtract(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x - right.x;\n    out.y = left.y - right.y;\n    out.z = left.z - right.z;\n  }\n\n  /**\n   * 将两个向量相乘。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @param out - 两个三维向量的相乘结果\n   */\n  static multiply(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x * right.x;\n    out.y = left.y * right.y;\n    out.z = left.z * right.z;\n  }\n\n  /**\n   * 将两个三维向量相除。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @param out - 两个三维向量的相除结果\n   */\n  static divide(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = left.x / right.x;\n    out.y = left.y / right.y;\n    out.z = left.z / right.z;\n  }\n\n  /**\n   * 计算两个三维向量的点积。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @returns 两个向量的点积\n   */\n  static dot(left: Vector3, right: Vector3): number {\n    return left.x * right.x + left.y * right.y + left.z * right.z;\n  }\n\n  /**\n   * 计算两个三维向量的叉乘。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @param out - 两个三维向量的叉乘结果\n   */\n  static cross(left: Vector3, right: Vector3, out: Vector3): void {\n    const ax = left.x;\n    const ay = left.y;\n    const az = left.z;\n    const bx = right.x;\n    const by = right.y;\n    const bz = right.z;\n\n    out.x = ay * bz - az * by;\n    out.y = az * bx - ax * bz;\n    out.z = ax * by - ay * bx;\n  }\n\n  /**\n   * 计算两个三维向量的距离。\n   * @param a - 向量\n   * @param b - 向量\n   * @returns 两个向量的距离\n   */\n  static distance(a: Vector3, b: Vector3): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * 计算两个三维向量的距离的平方。\n   * @param a - 向量\n   * @param b - 向量\n   * @returns 两个向量的距离的平方\n   */\n  static distanceSquared(a: Vector3, b: Vector3): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * 判断两个三维向量的值是否相等。\n   * @param left - 向量\n   * @param right - 向量\n   * @returns 两个向量是否相等，是返回 true，否则返回 false\n   */\n  static equals(left: Vector3, right: Vector3): boolean {\n    return MathUtil.equals(left.x, right.x) && MathUtil.equals(left.y, right.y) && MathUtil.equals(left.z, right.z);\n  }\n\n  /**\n   * 插值三维向量。\n   * @param start - 向量\n   * @param end - 向量\n   * @param t - 插值比例\n   * @param out - 插值结果\n   */\n  static lerp(start: Vector3, end: Vector3, t: number, out: Vector3): void {\n    const { x, y, z } = start;\n    out.x = x + (end.x - x) * t;\n    out.y = y + (end.y - y) * t;\n    out.z = z + (end.z - z) * t;\n  }\n\n  /**\n   * 分别取两个三维向量 x、y 的最大值计算新的三维向量。\n   * @param left - 向量\n   * @param right - 向量\n   * @param out - 结果向量\n   */\n  static max(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = Math.max(left.x, right.x);\n    out.y = Math.max(left.y, right.y);\n    out.z = Math.max(left.z, right.z);\n  }\n\n  /**\n   * 分别取两个三维向量 x、y 的最小值计算新的三维向量。\n   * @param left - 向量\n   * @param right - 向量\n   * @param out - 结果向量\n   */\n  static min(left: Vector3, right: Vector3, out: Vector3): void {\n    out.x = Math.min(left.x, right.x);\n    out.y = Math.min(left.y, right.y);\n    out.z = Math.min(left.z, right.z);\n  }\n\n  /**\n   * 将向量 a 反转的结果输出到 out。\n   * @param a - 向量\n   * @param out - 向量反转的结果\n   */\n  static negate(a: Vector3, out: Vector3): void {\n    out.x = -a.x;\n    out.y = -a.y;\n    out.z = -a.z;\n  }\n\n  /**\n   * 将向量 a 归一化的结果输出到 out。\n   * @param a - 向量\n   * @param out - 向量归一化的结果\n   */\n  static normalize(a: Vector3, out: Vector3): void {\n    const { x, y, z } = a;\n    let len: number = Math.sqrt(x * x + y * y + z * z);\n    if (len > 0) {\n      // TODO\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n      out.z = z * len;\n    }\n  }\n\n  /**\n   * 将向量 a 缩放的结果输出到 out。\n   * @param a - 向量\n   * @param s - 缩放因子\n   * @param out - 向量缩放的结果\n   */\n  static scale(a: Vector3, s: number, out: Vector3): void {\n    out.x = a.x * s;\n    out.y = a.y * s;\n    out.z = a.z * s;\n  }\n\n  /**\n   * 通过4x4矩阵将一个三维向量进行法线转换到另一个三维向量。\n   * @remarks\n   * 法线变换假设 w 分量为零，这导致矩阵的第四行和第四列并不使用。\n   * 最终得出的结果是一个没有位置变换的向量，但是其他变换属性均被应用。\n   * 通常这对法线向量来说比较友好，因为法线向量纯粹代表方向。\n   * @param v - 向量\n   * @param m - 转换矩阵\n   * @param out - 通过矩阵转换后的向量\n   */\n  static transformNormal(v: Vector3, m: Matrix, out: Vector3): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n    out.x = x * e[0] + y * e[4] + z * e[8];\n    out.y = x * e[1] + y * e[5] + z * e[9];\n    out.z = x * e[2] + y * e[6] + z * e[10];\n  }\n\n  /**\n   * 通过4x4矩阵将一个三维向量转换到另一个三维向量。\n   * @param v - 向量\n   * @param m - 转换矩阵\n   * @param out - 通过矩阵转换后的向量\n   */\n  static transformToVec3(v: Vector3, m: Matrix, out: Vector3): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n\n    out.x = x * e[0] + y * e[4] + z * e[8] + e[12];\n    out.y = x * e[1] + y * e[5] + z * e[9] + e[13];\n    out.z = x * e[2] + y * e[6] + z * e[10] + e[14];\n  }\n\n  /**\n   * 通过4x4矩阵将一个三维向量转换到一个四维向量。\n   * @param v - 向量\n   * @param m - 转换矩阵\n   * @param out - 通过矩阵转换后的向量\n   */\n  static transformToVec4(v: Vector3, m: Matrix, out: Vector4): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n\n    out.x = x * e[0] + y * e[4] + z * e[8] + e[12];\n    out.y = x * e[1] + y * e[5] + z * e[9] + e[13];\n    out.z = x * e[2] + y * e[6] + z * e[10] + e[14];\n    out.w = x * e[3] + y * e[7] + z * e[11] + e[15];\n  }\n\n  /**\n   * 通过4x4矩阵将一个三维向量转换到另一个三维向量。\n   *\n   * @remarks\n   * 坐标变换价值 w 分量为一，从变换得到的四维向量的每个分量都除以 w 分量。\n   * 这导致变换结果的 w 分量为一,向量变为齐次向量。\n   * 齐次向量在坐标变换中使用，w 分量可以安全的忽略。\n   *\n   * @param v - 向量\n   * @param m - 转换矩阵\n   * @param out - 通过矩阵转换后的向量，此向量为齐次\n   */\n  static transformCoordinate(v: Vector3, m: Matrix, out: Vector3): void {\n    const { x, y, z } = v;\n    const e = m.elements;\n    let w = x * e[3] + y * e[7] + z * e[11] + e[15];\n    w = 1.0 / w;\n\n    out.x = (x * e[0] + y * e[4] + z * e[8] + e[12]) * w;\n    out.y = (x * e[1] + y * e[5] + z * e[9] + e[13]) * w;\n    out.z = (x * e[2] + y * e[6] + z * e[10] + e[14]) * w;\n  }\n\n  /**\n   * 通过四元数将一个三维向量转换到另一个三维向量。\n   * @param v - 向量\n   * @param q - 四元数\n   * @param out - 通过矩阵转换后的向量\n   */\n  static transformByQuat(v: Vector3, q: Quaternion, out: Vector3): void {\n    const { x, y, z } = v;\n    const qx = q.x;\n    const qy = q.y;\n    const qz = q.z;\n    const qw = q.w;\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out.x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out.y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out.z = iz * qw - iw * qz - ix * qy + iy * qx;\n  }\n\n  /** 向量的 X 分量。*/\n  x: number;\n  /** 向量的 Y 分量。*/\n  y: number;\n  /** 向量的 Z 分量。*/\n  z: number;\n\n  /**\n   * 创建一个 Vector3 实例。\n   * @param x - 向量的 X 分量，默认值 0\n   * @param y - 向量的 Y 分量，默认值 0\n   * @param z - 向量的 Z 分量，默认值 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  /**\n   * 设置 x, y, z 的值，并返回当前向量。\n   * @param x - 向量的 X 分量\n   * @param y - 向量的 Y 分量\n   * @param z - 向量的 Z 分量\n   * @returns 当前向量\n   */\n  setValue(x: number, y: number, z: number): Vector3 {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n\n  /**\n   * 通过数组设置值，并返回当前向量。\n   * @param array - 数组\n   * @param offset - 数组偏移\n   * @returns 当前向量\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Vector3 {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    return this;\n  }\n\n  /**\n   * 将当前向量加上给定的向量 right，并返回当前向量。\n   * @param right - 给定的向量\n   * @returns 当前向量\n   */\n  add(right: Vector3): Vector3 {\n    this.x += right.x;\n    this.y += right.y;\n    this.z += right.z;\n    return this;\n  }\n\n  /**\n   * 将当前向量减去给定的向量 right，并返回当前向量。\n   * @param right - 给定的向量\n   * @returns 当前向量\n   */\n  subtract(right: Vector3): Vector3 {\n    this.x -= right.x;\n    this.y -= right.y;\n    this.z -= right.z;\n    return this;\n  }\n\n  /**\n   * 将当前向量乘以给定的向量 right，并返回当前向量。\n   * @param right - 给定的向量\n   * @returns 当前向量\n   */\n  multiply(right: Vector3): Vector3 {\n    this.x *= right.x;\n    this.y *= right.y;\n    this.z *= right.z;\n    return this;\n  }\n\n  /**\n   * 将当前向量除以给定的向量 right，并返回当前向量。\n   * @param right - 给定的向量\n   * @returns 当前向量\n   */\n  divide(right: Vector3): Vector3 {\n    this.x /= right.x;\n    this.y /= right.y;\n    this.z /= right.z;\n    return this;\n  }\n\n  /**\n   * 计算一个三维向量的标量长度。\n   * @returns 当前向量的标量长度\n   */\n  length(): number {\n    const { x, y, z } = this;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * 计算一个三维向量的标量长度的平方。\n   * @returns 当前向量的标量长度的平方\n   */\n  lengthSquared(): number {\n    const { x, y, z } = this;\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * 向量反转。\n   * @returns 当前向量\n   */\n  negate(): Vector3 {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  }\n\n  /**\n   * 向量归一化。\n   * @returns 当前向量\n   */\n  normalize(): Vector3 {\n    Vector3.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * 向量缩放。\n   * @param s - 缩放因子\n   * @returns 当前向量\n   */\n  scale(s: number): Vector3 {\n    this.x *= s;\n    this.y *= s;\n    this.z *= s;\n    return this;\n  }\n\n  /**\n   * 拷贝到数组。\n   * @param out - 数组。\n   * @param outOffset - 数组偏移。\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n    out[outOffset + 2] = this.z;\n  }\n\n  /**\n   * 克隆并返回一个新的三维向量对象。\n   * @returns 新的三维向量对象\n   */\n  clone(): Vector3 {\n    return new Vector3(this.x, this.y, this.z);\n  }\n\n  /**\n   * 将当前向量值拷贝给 out 向量。\n   * @param out - 目标向量\n   */\n  cloneTo(out: Vector3): Vector3 {\n    out.x = this.x;\n    out.y = this.y;\n    out.z = this.z;\n    return out;\n  }\n\n  /**\n   * 通过4x4矩阵将当前向量转换。\n   * @remarks\n   * 法线变换假设 w 分量为零，这导致矩阵的第四行和第四列并不使用。\n   * 最终得出的结果是一个没有位置变换的向量，但是其他变换属性均被应用。\n   * 通常这对法线向量来说比较友好，因为法线向量纯粹代表方向。\n   * @param m - 转换矩阵\n   * @returns 当前向量\n   */\n  transformNormal(m: Matrix): Vector3 {\n    Vector3.transformNormal(this, m, this);\n    return this;\n  }\n\n  /**\n   * 通过4x4矩阵将当前向量转换。\n   * @param m - 转换矩阵\n   * @returns 当前向量\n   */\n  transformToVec3(m: Matrix): Vector3 {\n    Vector3.transformToVec3(this, m, this);\n    return this;\n  }\n\n  /**\n   * 通过4x4矩阵将当前向量转换。\n   * @remarks\n   * 坐标变换价值 w 分量为一，从变换得到的四维向量的每个分量都除以 w 分量。\n   * 这导致变换结果的 w 分量为一,向量变为齐次向量。\n   * 齐次向量在坐标变换中使用，w 分量可以安全的忽略。\n\n   * @param m - 转换矩阵\n   * @returns 当前向量\n   */\n  transformCoordinate(m: Matrix): Vector3 {\n    Vector3.transformCoordinate(this, m, this);\n    return this;\n  }\n\n  /**\n   * 通过四元数将当前向量转换。\n   * @param q - 四元数\n   * @param out - 通过矩阵转换后的向量\n   */\n  transformByQuat(q: Quaternion): Vector3 {\n    Vector3.transformByQuat(this, q, this);\n    return this;\n  }\n}\n","import { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * 四元数。\n */\nexport class Quaternion {\n  /** @internal */\n  static readonly _tempVector3 = new Vector3();\n\n  /**\n   * 将两个四元数相加。\n   * @param left - 左四元数\n   * @param right - 右四元数\n   * @param out - 四元数相加结果\n   */\n  static add(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n    out.z = left.z + right.z;\n    out.w = left.w + right.w;\n  }\n\n  /**\n   * 将两个四元数相乘。\n   * @param left - 左四元数\n   * @param right - 右四元数\n   * @param out - 四元数相乘结果\n   */\n  static multiply(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    const ax = left.x,\n      ay = left.y,\n      az = left.z,\n      aw = left.w;\n    const bx = right.x,\n      by = right.y,\n      bz = right.z,\n      bw = right.w;\n\n    out.x = ax * bw + aw * bx + ay * bz - az * by;\n    out.y = ay * bw + aw * by + az * bx - ax * bz;\n    out.z = az * bw + aw * bz + ax * by - ay * bx;\n    out.w = aw * bw - ax * bx - ay * by - az * bz;\n  }\n\n  /**\n   * 计算共轭四元数。\n   * @param a - 输入四元数\n   * @param out - 输出的共轭四元数\n   */\n  static conjugate(a: Quaternion, out: Quaternion): void {\n    out.x = -a.x;\n    out.y = -a.y;\n    out.z = -a.z;\n    out.w = a.w;\n  }\n\n  /**\n   * 计算两个四元数的点积。\n   * @param left - 左四元数\n   * @param right - 右四元数\n   * @returns 两个四元数的点积\n   */\n  static dot(left: Quaternion, right: Quaternion): number {\n    return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n  }\n\n  /**\n   * 判断两个四元数是否相等。\n   * @param left - 四元数\n   * @param right - 四元数\n   * @returns 两个四元数是否相等，是返回 true，否则返回 false\n   */\n  static equals(left: Quaternion, right: Quaternion): boolean {\n    return (\n      MathUtil.equals(left.x, right.x) &&\n      MathUtil.equals(left.y, right.y) &&\n      MathUtil.equals(left.z, right.z) &&\n      MathUtil.equals(left.w, right.w)\n    );\n  }\n\n  /**\n   * 通过旋转的欧拉角设置四元数。\n   * @param axis - 旋转轴向量\n   * @param rad - 旋转角度(单位：弧度)\n   * @param out - 生成的四元数\n   */\n  static rotationAxisAngle(axis: Vector3, rad: number, out: Quaternion): void {\n    const normalAxis = Quaternion._tempVector3;\n    Vector3.normalize(axis, normalAxis);\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    out.x = normalAxis.x * s;\n    out.y = normalAxis.y * s;\n    out.z = normalAxis.z * s;\n    out.w = Math.cos(rad);\n  }\n\n  /**\n   * 根据 x,y,z 轴的旋转欧拉角(弧度)生成四元数，欧拉角顺序 pitch yaw roll。\n   * @param x - 绕X轴旋转的弧度 pitch\n   * @param y - 绕Y轴旋转的弧度 yaw\n   * @param z - 绕Z轴旋转的弧度 roll\n   * @param out - 生成的四元数\n   */\n  static rotationEuler(x: number, y: number, z: number, out: Quaternion): void {\n    Quaternion.rotationYawPitchRoll(y, x, z, out);\n  }\n\n  /**\n   * 根据 yaw、pitch、roll 生成四元数\n   * @param yaw - 偏航角(单位弧度)\n   * @param pitch - 俯仰角(单位弧度)\n   * @param roll - 翻滚角(单位弧度)\n   * @param out - 生成的四元数\n   */\n  static rotationYawPitchRoll(yaw: number, pitch: number, roll: number, out: Quaternion): void {\n    const halfRoll = roll * 0.5;\n    const halfPitch = pitch * 0.5;\n    const halfYaw = yaw * 0.5;\n\n    const sinRoll = Math.sin(halfRoll);\n    const cosRoll = Math.cos(halfRoll);\n    const sinPitch = Math.sin(halfPitch);\n    const cosPitch = Math.cos(halfPitch);\n    const sinYaw = Math.sin(halfYaw);\n    const cosYaw = Math.cos(halfYaw);\n\n    const cosYawPitch = cosYaw * cosPitch;\n    const sinYawPitch = sinYaw * sinPitch;\n\n    out.x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\n    out.y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\n    out.z = cosYawPitch * sinRoll - sinYawPitch * cosRoll;\n    out.w = cosYawPitch * cosRoll + sinYawPitch * sinRoll;\n  }\n\n  /**\n   * 通过矩阵得出对应的四元数。\n   * @param m - 3x3矩阵\n   * @param out - 生成的四元数\n   */\n  static rotationMatrix3x3(m: Matrix3x3, out: Quaternion): void {\n    const me = m.elements;\n    const m11 = me[0],\n      m12 = me[1],\n      m13 = me[2];\n    const m21 = me[3],\n      m22 = me[4],\n      m23 = me[5];\n    const m31 = me[6],\n      m32 = me[7],\n      m33 = me[8];\n    const scale = m11 + m22 + m33;\n    let sqrt, half;\n\n    if (scale > 0) {\n      sqrt = Math.sqrt(scale + 1.0);\n      out.w = sqrt * 0.5;\n      sqrt = 0.5 / sqrt;\n\n      out.x = (m23 - m32) * sqrt;\n      out.y = (m31 - m13) * sqrt;\n      out.z = (m12 - m21) * sqrt;\n    } else if (m11 >= m22 && m11 >= m33) {\n      sqrt = Math.sqrt(1.0 + m11 - m22 - m33);\n      half = 0.5 / sqrt;\n\n      out.x = 0.5 * sqrt;\n      out.y = (m12 + m21) * half;\n      out.z = (m13 + m31) * half;\n      out.w = (m23 - m32) * half;\n    } else if (m22 > m33) {\n      sqrt = Math.sqrt(1.0 + m22 - m11 - m33);\n      half = 0.5 / sqrt;\n\n      out.x = (m21 + m12) * half;\n      out.y = 0.5 * sqrt;\n      out.z = (m32 + m23) * half;\n      out.w = (m31 - m13) * half;\n    } else {\n      sqrt = Math.sqrt(1.0 + m33 - m11 - m22);\n      half = 0.5 / sqrt;\n\n      out.x = (m13 + m31) * half;\n      out.y = (m23 + m32) * half;\n      out.z = 0.5 * sqrt;\n      out.w = (m12 - m21) * half;\n    }\n  }\n\n  /**\n   * 计算四元数的逆。\n   * @param a - 四元数的逆\n   * @param out - 四元数的逆\n   */\n  static invert(a: Quaternion, out: Quaternion): void {\n    const { x, y, z, w } = a;\n    const dot = x * x + y * y + z * z + w * w;\n    if (dot > MathUtil.zeroTolerance) {\n      const invDot = 1.0 / dot;\n      out.x = -x * invDot;\n      out.y = -y * invDot;\n      out.z = -z * invDot;\n      out.w = w * invDot;\n    }\n  }\n\n  /**\n   * 插值四元数。\n   * @param start - 左四元数\n   * @param end - 右四元数\n   * @param t - 插值比例 范围 0～1\n   * @param out - 插值结果\n   */\n  static lerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void {\n    const inv = 1.0 - t;\n    if (Quaternion.dot(start, end) >= 0) {\n      out.x = start.x * inv + end.x * t;\n      out.y = start.y * inv + end.y * t;\n      out.z = start.z * inv + end.z * t;\n      out.w = start.w * inv + end.w * t;\n    } else {\n      out.x = start.x * inv - end.x * t;\n      out.y = start.y * inv - end.y * t;\n      out.z = start.z * inv - end.z * t;\n      out.w = start.w * inv - end.w * t;\n    }\n\n    out.normalize();\n  }\n\n  /**\n   * 球面插值四元数。\n   * @param start - 左四元数\n   * @param end - 右四元数\n   * @param t - 插值比例\n   * @param out - 插值结果\n   */\n  static slerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void {\n    //CM: todo: 参照stride实现\n    const ax = start.x;\n    const ay = start.y;\n    const az = start.z;\n    const aw = start.w;\n    let bx = end.x;\n    let by = end.y;\n    let bz = end.z;\n    let bw = end.w;\n\n    let scale0, scale1;\n    // calc cosine\n    let cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > MathUtil.zeroTolerance) {\n      // standard case (slerp)\n      const omega = Math.acos(cosom);\n      const sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    }\n    // calculate final values\n    out.x = scale0 * ax + scale1 * bx;\n    out.y = scale0 * ay + scale1 * by;\n    out.z = scale0 * az + scale1 * bz;\n    out.w = scale0 * aw + scale1 * bw;\n  }\n\n  /**\n   * 将一个四元数归一化。\n   * @param a - 四元数\n   * @param out - 四元数归一化的结果\n   */\n  static normalize(a: Quaternion, out: Quaternion): void {\n    const { x, y, z, w } = a;\n    let len: number = Math.sqrt(x * x + y * y + z * z + w * w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n      out.z = z * len;\n      out.w = w * len;\n    }\n  }\n\n  /**\n   * 绕 X 轴旋生成转四元数。\n   * @param a - 四元数\n   * @param rad - 旋转角度(单位：弧度)\n   * @param out - 旋转后的四元数\n   */\n  static rotationX(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out.x = s;\n    out.y = 0;\n    out.z = 0;\n    out.w = c;\n  }\n\n  /**\n   * 绕 Y 轴旋转生成四元数。\n   * @param a - 四元数\n   * @param rad - 旋转角度(单位：弧度)\n   * @param out - 旋转后的四元数\n   */\n  static rotationY(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out.x = 0;\n    out.y = s;\n    out.z = 0;\n    out.w = c;\n  }\n\n  /**\n   * 绕 Z 轴旋转生成四元数。\n   * @param a - 四元数\n   * @param rad - 旋转角度(单位：弧度)\n   * @param out - 旋转后的四元数\n   */\n  static rotationZ(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out.x = 0;\n    out.y = 0;\n    out.z = s;\n    out.w = c;\n  }\n\n  /**\n   * 四元数 q 绕 X 轴旋转。\n   * @param q - 四元数\n   * @param rad - 旋转角度(单位：弧度)\n   * @param out - 旋转后的四元数\n   */\n  static rotateX(q: Quaternion, rad: number, out: Quaternion): void {\n    const { x, y, z, w } = q;\n    rad *= 0.5;\n    const bx = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out.x = x * bw + w * bx;\n    out.y = y * bw + z * bx;\n    out.z = z * bw - y * bx;\n    out.w = w * bw - x * bx;\n  }\n\n  /**\n   * 四元数 q 绕 Y 轴旋转。\n   * @param q - 四元数\n   * @param rad - 旋转角度(单位：弧度)\n   * @param out - 旋转后的四元数\n   */\n  static rotateY(q: Quaternion, rad: number, out: Quaternion): void {\n    const { x, y, z, w } = q;\n    rad *= 0.5;\n    const by = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out.x = x * bw - z * by;\n    out.y = y * bw + w * by;\n    out.z = z * bw + x * by;\n    out.w = w * bw - y * by;\n  }\n\n  /**\n   * 四元数 q 绕 Z 轴旋转。\n   * @param q - 四元数\n   * @param rad - 旋转角度(单位：弧度)\n   * @param out - 旋转后的四元数\n   */\n  static rotateZ(q: Quaternion, rad: number, out: Quaternion): void {\n    const { x, y, z, w } = q;\n    rad *= 0.5;\n    const bz = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out.x = x * bw + y * bz;\n    out.y = y * bw - x * bz;\n    out.z = z * bw + w * bz;\n    out.w = w * bw - z * bz;\n  }\n\n  /**\n   * 将一个四元数缩放。\n   * @param a - 四元数\n   * @param s - 缩放因子\n   * @param out - 四元数缩放的结果\n   */\n  static scale(a: Quaternion, s: number, out: Quaternion): void {\n    out.x = a.x * s;\n    out.y = a.y * s;\n    out.z = a.z * s;\n    out.w = a.w * s;\n  }\n\n  /** 四元数的 X 分量 */\n  x: number;\n  /** 四元数的 Y 分量 */\n  y: number;\n  /** 四元数的 Z 分量 */\n  z: number;\n  /** 四元数的 W 分量 */\n  w: number;\n\n  /**\n   * 创建四元数实例。\n   * @param x - 四元数的 X 分量，默认值 0\n   * @param y - 四元数的 Y 分量，默认值 0\n   * @param z - 四元数的 Z 分量，默认值 0\n   * @param w - 四元数的 W 分量，默认值 1\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n\n  /**\n   * 设置 x, y, z, w 的值。\n   * @param x - 四元数的 X 分量\n   * @param y - 四元数的 Y 分量\n   * @param z - 四元数的 Z 分量\n   * @param w - 四元数的 W 分量\n   * @returns 当前四元数\n   */\n  setValue(x: number, y: number, z: number, w: number): Quaternion {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n\n    return this;\n  }\n\n  /**\n   * 通过数组设置值，并返回当前四元数。\n   * @param array - 数组\n   * @param offset - 数组偏移\n   * @returns 当前四元数\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Quaternion {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    this.w = array[offset + 3];\n    return this;\n  }\n\n  /**\n   * 共轭四元数\n   * @returns 当前四元数\n   */\n  conjugate(): Quaternion {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n\n    return this;\n  }\n\n  /**\n   * 获取四元数的旋转轴和旋转角度(单位：弧度)。\n   * @param out - 四元数的旋转轴\n   * @returns 当前四元数的旋转角度(单位：弧度)\n   */\n  getAxisAngle(out: Vector3): number {\n    const { x, y, z } = this;\n    const length = x * x + y * y + z * z;\n\n    if (length < MathUtil.zeroTolerance) {\n      out.x = 1;\n      out.y = 0;\n      out.z = 0;\n\n      return 0;\n    } else {\n      const inv = 1.0 / length;\n      out.x = this.x * inv;\n      out.y = this.y * inv;\n      out.z = this.z * inv;\n\n      return Math.acos(this.w) * 2.0;\n    }\n  }\n\n  /**\n   * 将四元数设置为单位四元数。\n   */\n  identity(): Quaternion {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 1;\n    return this;\n  }\n\n  /**\n   * 计算一个四元数的标量长度。\n   * @returns 当前四元数的标量长度\n   */\n  length(): number {\n    const { x, y, z, w } = this;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * 计算一个四元数的标量长度的平方。\n   * @returns 当前四元数的标量长度的平方\n   */\n  lengthSquared(): number {\n    const { x, y, z, w } = this;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * 四元数归一化。\n   * @returns 当前四元数\n   */\n  normalize(): Quaternion {\n    Quaternion.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * 获取四元数的欧拉角(弧度)。\n   * @param out - 四元数的欧拉角(弧度)\n   * @returns 欧拉角 x->pitch y->yaw z->roll\n   */\n  toEuler(out: Vector3): Vector3 {\n    this.toYawPitchRoll(out);\n    const t = out.x;\n    out.x = out.y;\n    out.y = t;\n    return out;\n  }\n\n  /**\n   * 获取四元数的欧拉角(弧度)。\n   * @param out - 四元数的欧拉角(弧度)\n   * @returns 欧拉角 x->yaw y->pitch z->roll\n   */\n  toYawPitchRoll(out: Vector3): Vector3 {\n    const { x, y, z, w } = this;\n    const xx = x * x;\n    const yy = y * y;\n    const zz = z * z;\n    const xy = x * y;\n    const zw = z * w;\n    const zx = z * x;\n    const yw = y * w;\n    const yz = y * z;\n    const xw = x * w;\n\n    out.y = Math.asin(2.0 * (xw - yz));\n    if (Math.cos(out.y) > MathUtil.zeroTolerance) {\n      out.z = Math.atan2(2.0 * (xy + zw), 1.0 - 2.0 * (zz + xx));\n      out.x = Math.atan2(2.0 * (zx + yw), 1.0 - 2.0 * (yy + xx));\n    } else {\n      out.z = Math.atan2(-2.0 * (xy - zw), 1.0 - 2.0 * (yy + zz));\n      out.x = 0.0;\n    }\n\n    return out;\n  }\n\n  /**\n   * 拷贝到数组。\n   * @param out - 数组。\n   * @param outOffset - 数组偏移。\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n    out[outOffset + 2] = this.z;\n    out[outOffset + 3] = this.w;\n  }\n\n  /**\n   * 创建一个新的四元数，并用当前四元数初始化。\n   * @returns 一个新的四元数，并且拷贝当前四元数的值\n   */\n  clone(): Quaternion {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  }\n\n  /**\n   * 将当前四元数值拷贝给 out 四元数。\n   * @param out - 目标四元数\n   */\n  cloneTo(out: Quaternion): Quaternion {\n    out.x = this.x;\n    out.y = this.y;\n    out.z = this.z;\n    out.w = this.w;\n    return out;\n  }\n\n  /**\n   * 绕 X 轴旋转。\n   * @param rad - 旋转角度(单位：弧度)\n   * @returns 当前四元数\n   */\n  rotateX(rad: number): Quaternion {\n    Quaternion.rotateX(this, rad, this);\n    return this;\n  }\n\n  /**\n   * 绕 Y 轴旋转。\n   * @param rad - 旋转角度(单位：弧度)\n   * @returns 当前四元数\n   */\n  rotateY(rad: number): Quaternion {\n    Quaternion.rotateY(this, rad, this);\n    return this;\n  }\n\n  /**\n   * 绕 Z 轴旋转。\n   * @param rad - 旋转角度(单位：弧度)\n   * @returns 当前四元数\n   */\n  rotateZ(rad: number): Quaternion {\n    Quaternion.rotateZ(this, rad, this);\n    return this;\n  }\n\n  /**\n   * 通过旋转的欧拉角设置当前四元数。\n   * @param axis - 旋转轴向量\n   * @param rad - 旋转角度(单位：弧度)\n   * @returns 当前四元数\n   */\n  rotationAxisAngle(axis: Vector3, rad: number): Quaternion {\n    Quaternion.rotationAxisAngle(axis, rad, this);\n    return this;\n  }\n\n  /**\n   * 与四元数相乘。\n   * @param quat - 右四元数\n   * @returns 当前四元数\n   */\n  multiply(quat: Quaternion): Quaternion {\n    Quaternion.multiply(this, quat, this);\n    return this;\n  }\n\n  /**\n   * 计算四元数的逆。\n   * @returns 当前四元数\n   */\n  invert(): Quaternion {\n    Quaternion.invert(this, this);\n    return this;\n  }\n\n  /**\n   * 计算与四元数的点积。\n   * @param quat - 右四元数\n   * @returns 点击结果\n   */\n  dot(quat: Quaternion): number {\n    return Quaternion.dot(this, quat);\n  }\n\n  /**\n   * 插值四元数。\n   * @param quat - 右四元数\n   * @param t - 插值比例 范围 0～1\n   * @returns - 插值结果\n   */\n  lerp(quat: Quaternion, t: number): Quaternion {\n    Quaternion.lerp(this, quat, t, this);\n    return this;\n  }\n}\n","import { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * 4x4矩阵。\n */\nexport class Matrix {\n  /** @internal */\n  private static readonly _tempVec30: Vector3 = new Vector3();\n  /** @internal */\n  private static readonly _tempVec31: Vector3 = new Vector3();\n  /** @internal */\n  private static readonly _tempVec32: Vector3 = new Vector3();\n  /** @internal */\n  private static readonly _tempMat30: Matrix3x3 = new Matrix3x3();\n  /** @internal */\n  private static readonly _tempMat40: Matrix = new Matrix();\n\n  /** @internal 单位矩阵。*/\n  static readonly _identity: Matrix = new Matrix(\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0\n  );\n\n  /**\n   * 将两个矩阵相乘。\n   * @param left - 左矩阵\n   * @param right - 右矩阵\n   * @param out - 矩阵相乘的结果\n   */\n  static multiply(left: Matrix, right: Matrix, out: Matrix): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    const l11 = le[0],\n      l12 = le[1],\n      l13 = le[2],\n      l14 = le[3];\n    const l21 = le[4],\n      l22 = le[5],\n      l23 = le[6],\n      l24 = le[7];\n    const l31 = le[8],\n      l32 = le[9],\n      l33 = le[10],\n      l34 = le[11];\n    const l41 = le[12],\n      l42 = le[13],\n      l43 = le[14],\n      l44 = le[15];\n\n    const r11 = re[0],\n      r12 = re[1],\n      r13 = re[2],\n      r14 = re[3];\n    const r21 = re[4],\n      r22 = re[5],\n      r23 = re[6],\n      r24 = re[7];\n    const r31 = re[8],\n      r32 = re[9],\n      r33 = re[10],\n      r34 = re[11];\n    const r41 = re[12],\n      r42 = re[13],\n      r43 = re[14],\n      r44 = re[15];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13 + l41 * r14;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13 + l42 * r14;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13 + l43 * r14;\n    oe[3] = l14 * r11 + l24 * r12 + l34 * r13 + l44 * r14;\n\n    oe[4] = l11 * r21 + l21 * r22 + l31 * r23 + l41 * r24;\n    oe[5] = l12 * r21 + l22 * r22 + l32 * r23 + l42 * r24;\n    oe[6] = l13 * r21 + l23 * r22 + l33 * r23 + l43 * r24;\n    oe[7] = l14 * r21 + l24 * r22 + l34 * r23 + l44 * r24;\n\n    oe[8] = l11 * r31 + l21 * r32 + l31 * r33 + l41 * r34;\n    oe[9] = l12 * r31 + l22 * r32 + l32 * r33 + l42 * r34;\n    oe[10] = l13 * r31 + l23 * r32 + l33 * r33 + l43 * r34;\n    oe[11] = l14 * r31 + l24 * r32 + l34 * r33 + l44 * r34;\n\n    oe[12] = l11 * r41 + l21 * r42 + l31 * r43 + l41 * r44;\n    oe[13] = l12 * r41 + l22 * r42 + l32 * r43 + l42 * r44;\n    oe[14] = l13 * r41 + l23 * r42 + l33 * r43 + l43 * r44;\n    oe[15] = l14 * r41 + l24 * r42 + l34 * r43 + l44 * r44;\n  }\n\n  /**\n   * 判断两个矩阵的值是否相等。\n   * @param left - 左矩阵\n   * @param right - 右矩阵\n   * @returns 两个矩阵是否相等，是返回 true，否则返回 false\n   */\n  static equals(left: Matrix, right: Matrix): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8]) &&\n      MathUtil.equals(le[9], re[9]) &&\n      MathUtil.equals(le[10], re[10]) &&\n      MathUtil.equals(le[11], re[11]) &&\n      MathUtil.equals(le[12], re[12]) &&\n      MathUtil.equals(le[13], re[13]) &&\n      MathUtil.equals(le[14], re[14]) &&\n      MathUtil.equals(le[15], re[15])\n    );\n  }\n\n  /**\n   * 通过四元数生成旋转矩阵。\n   * @param q - 四元数\n   * @param out - 转换后的4x4矩阵\n   */\n  static rotationQuaternion(q: Quaternion, out: Matrix): void {\n    const oe = out.elements;\n    const { x, y, z, w } = q;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[1] = yx + wz;\n    oe[2] = zx - wy;\n    oe[3] = 0;\n\n    oe[4] = yx - wz;\n    oe[5] = 1 - xx - zz;\n    oe[6] = zy + wx;\n    oe[7] = 0;\n\n    oe[8] = zx + wy;\n    oe[9] = zy - wx;\n    oe[10] = 1 - xx - yy;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * 通过绕任意轴旋转生成4x4矩阵。\n   * * @param axis - 旋转轴\n   * @param r - 旋转角度\n   * @param out - 指定旋转后矩阵\n   */\n  static rotationAxisAngle(axis: Vector3, r: number, out: Matrix): void {\n    //CM：stride实现\n    const oe = out.elements;\n    let { x, y, z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n    let s, c, t;\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = x * x * t + c;\n    oe[1] = y * x * t + z * s;\n    oe[2] = z * x * t - y * s;\n    oe[3] = 0;\n\n    oe[4] = x * y * t - z * s;\n    oe[5] = y * y * t + c;\n    oe[6] = z * y * t + x * s;\n    oe[7] = 0;\n\n    oe[8] = x * z * t + y * s;\n    oe[9] = y * z * t - x * s;\n    oe[10] = z * z * t + c;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * 通过指定的旋转四元数,转换向量生成4x4矩阵。\n   * @param q - 旋转四元数\n   * @param trans - 转换向量\n   * @param out - 生成的4x4矩阵\n   */\n  static rotationTranslation(q: Quaternion, trans: Vector3, out: Matrix): void {\n    Matrix.rotationQuaternion(q, out);\n\n    const oe = out.elements;\n    oe[12] = trans.x;\n    oe[13] = trans.y;\n    oe[14] = trans.z;\n  }\n\n  /**\n   * 创建仿射矩阵。\n   * @param scale - 缩放向量\n   * @param rotation - 旋转四元数\n   * @param trans - 转换向量\n   * @param out - 生成的4x4矩阵\n   */\n  static affineTransformation(scale: Vector3, rotation: Quaternion, trans: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const { x, y, z, w } = rotation;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = scale.x;\n    let sy = scale.y;\n    let sz = scale.z;\n\n    oe[0] = (1 - (yy + zz)) * sx;\n    oe[1] = (xy + wz) * sx;\n    oe[2] = (xz - wy) * sx;\n    oe[3] = 0;\n\n    oe[4] = (xy - wz) * sy;\n    oe[5] = (1 - (xx + zz)) * sy;\n    oe[6] = (yz + wx) * sy;\n    oe[7] = 0;\n\n    oe[8] = (xz + wy) * sz;\n    oe[9] = (yz - wx) * sz;\n    oe[10] = (1 - (xx + yy)) * sz;\n    oe[11] = 0;\n\n    oe[12] = trans.x;\n    oe[13] = trans.y;\n    oe[14] = trans.z;\n    oe[15] = 1;\n  }\n\n  /**\n   * 通过指定缩放生成4x4矩阵。\n   * @param s - 缩放向量\n   * @param out - 指定缩放后矩阵\n   */\n  static scaling(s: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = s.x;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = s.y;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = s.z;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * 通过指定平移生成4x4矩阵。\n   * @param trans - 平移向量\n   * @param out - 指定平移后矩阵\n   */\n  static translation(trans: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = 1;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 1;\n    oe[11] = 0;\n\n    oe[12] = trans.x;\n    oe[13] = trans.y;\n    oe[14] = trans.z;\n    oe[15] = 1;\n  }\n\n  /**\n   * 计算矩阵 a 的逆矩阵，并将结果输出到 out。\n   * @param a - 矩阵\n   * @param out - 逆矩阵\n   */\n  static invert(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[2] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[3] = (a33 * b04 - a32 * b05 - a34 * b03) * det;\n\n    oe[4] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[5] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[6] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[7] = (a31 * b05 - a33 * b02 + a34 * b01) * det;\n\n    oe[8] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n    oe[9] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n    oe[10] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n    oe[11] = (a32 * b02 - a31 * b04 - a34 * b00) * det;\n\n    oe[12] = (a22 * b07 - a21 * b09 - a23 * b06) * det;\n    oe[13] = (a11 * b09 - a12 * b07 + a13 * b06) * det;\n    oe[14] = (a42 * b01 - a41 * b03 - a43 * b00) * det;\n    oe[15] = (a31 * b03 - a32 * b01 + a33 * b00) * det;\n  }\n\n  /**\n   * 计算观察矩阵，基于右手坐标系。\n   * @param eye - 观察者视点位置\n   * @param target - 视点目标\n   * @param up - 向上向量\n   * @param out - 观察矩阵\n   */\n  static lookAt(eye: Vector3, target: Vector3, up: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const xAxis: Vector3 = Matrix._tempVec30;\n    const yAxis: Vector3 = Matrix._tempVec31;\n    const zAxis: Vector3 = Matrix._tempVec32;\n\n    Vector3.subtract(eye, target, zAxis);\n    zAxis.normalize();\n    Vector3.cross(up, zAxis, xAxis);\n    xAxis.normalize();\n    Vector3.cross(zAxis, xAxis, yAxis);\n\n    oe[0] = xAxis.x;\n    oe[1] = yAxis.x;\n    oe[2] = zAxis.x;\n    oe[3] = 0;\n\n    oe[4] = xAxis.y;\n    oe[5] = yAxis.y;\n    oe[6] = zAxis.y;\n    oe[7] = 0;\n\n    oe[8] = xAxis.z;\n    oe[9] = yAxis.z;\n    oe[10] = zAxis.z;\n    oe[11] = 0;\n\n    oe[12] = -Vector3.dot(xAxis, eye);\n    oe[13] = -Vector3.dot(yAxis, eye);\n    oe[14] = -Vector3.dot(zAxis, eye);\n    oe[15] = 1;\n  }\n\n  /**\n   * 计算正交投影矩阵。\n   * @param left - 视锥左边界\n   * @param right - 视锥右边界\n   * @param bottom - 视锥底边界\n   * @param top - 视锥顶边界\n   * @param near - 视锥近边界\n   * @param far - 视锥远边界\n   * @param out - 正交投影矩阵\n   */\n  static ortho(left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n\n    oe[0] = -2 * lr;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = -2 * bt;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 2 * nf;\n    oe[11] = 0;\n\n    oe[12] = (left + right) * lr;\n    oe[13] = (top + bottom) * bt;\n    oe[14] = (far + near) * nf;\n    oe[15] = 1;\n  }\n\n  /**\n   * 计算透视投影矩阵。\n   * @param fovy - 视角\n   * @param aspect - 视图的宽高比\n   * @param near - 近裁面\n   * @param far - 远裁面\n   * @param out - 透视投影矩阵\n   */\n  static perspective(fovy: number, aspect: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const f = 1.0 / Math.tan(fovy / 2);\n    const nf = 1 / (near - far);\n\n    oe[0] = f / aspect;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = f;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = (far + near) * nf;\n    oe[11] = -1;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 2 * far * near * nf;\n    oe[15] = 0;\n  }\n\n  /**\n   * 将矩阵 a 按给定角度旋转，并将结果输出到 out。\n   * @param m - 矩阵\n   * @param axis - 旋转轴\n   * @param r - 给定的旋转角度\n   * @param out - 旋转后的矩阵\n   */\n  static rotateAxisAngle(m: Matrix, axis: Vector3, r: number, out: Matrix): void {\n    let { x, y, z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    const me = m.elements;\n    const oe = out.elements;\n    let s, c, t;\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    let a11 = me[0],\n      a12 = me[1],\n      a13 = me[2],\n      a14 = me[3];\n    let a21 = me[4],\n      a22 = me[5],\n      a23 = me[6],\n      a24 = me[7];\n    let a31 = me[8],\n      a32 = me[9],\n      a33 = me[10],\n      a34 = me[11];\n\n    // Construct the elements of the rotation matrix\n    let b11 = x * x * t + c;\n    let b12 = y * x * t + z * s;\n    let b13 = z * x * t - y * s;\n    let b21 = x * y * t - z * s;\n    let b22 = y * y * t + c;\n    let b23 = z * y * t + x * s;\n    let b31 = x * z * t + y * s;\n    let b32 = y * z * t - x * s;\n    let b33 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = a11 * b11 + a21 * b12 + a31 * b13;\n    oe[1] = a12 * b11 + a22 * b12 + a32 * b13;\n    oe[2] = a13 * b11 + a23 * b12 + a33 * b13;\n    oe[3] = a14 * b11 + a24 * b12 + a34 * b13;\n\n    oe[4] = a11 * b21 + a21 * b22 + a31 * b23;\n    oe[5] = a12 * b21 + a22 * b22 + a32 * b23;\n    oe[6] = a13 * b21 + a23 * b22 + a33 * b23;\n    oe[7] = a14 * b21 + a24 * b22 + a34 * b23;\n\n    oe[8] = a11 * b31 + a21 * b32 + a31 * b33;\n    oe[9] = a12 * b31 + a22 * b32 + a32 * b33;\n    oe[10] = a13 * b31 + a23 * b32 + a33 * b33;\n    oe[11] = a14 * b31 + a24 * b32 + a34 * b33;\n\n    if (m !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      oe[12] = me[12];\n      oe[13] = me[13];\n      oe[14] = me[14];\n      oe[15] = me[15];\n    }\n  }\n\n  /**\n   * 将矩阵 a 按给定向量 v 缩放，并将结果输出到 out。\n   * @param m - 矩阵\n   * @param s - 缩放向量\n   * @param out - 缩放后的矩阵\n   */\n  static scale(m: Matrix, s: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { x, y, z } = s;\n\n    oe[0] = me[0] * x;\n    oe[1] = me[1] * x;\n    oe[2] = me[2] * x;\n    oe[3] = me[3] * x;\n\n    oe[4] = me[4] * y;\n    oe[5] = me[5] * y;\n    oe[6] = me[6] * y;\n    oe[7] = me[7] * y;\n\n    oe[8] = me[8] * z;\n    oe[9] = me[9] * z;\n    oe[10] = me[10] * z;\n    oe[11] = me[11] * z;\n\n    oe[12] = me[12];\n    oe[13] = me[13];\n    oe[14] = me[14];\n    oe[15] = me[15];\n  }\n\n  /**\n   * 将矩阵 a 按给定向量 v 转换，并将结果输出到 out。\n   * @param m - 矩阵\n   * @param v - 转换向量\n   * @param out - 转换后的结果\n   */\n  static translate(m: Matrix, v: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { x, y, z } = v;\n\n    if (m === out) {\n      oe[12] = me[0] * x + me[4] * y + me[8] * z + me[12];\n      oe[13] = me[1] * x + me[5] * y + me[9] * z + me[13];\n      oe[14] = me[2] * x + me[6] * y + me[10] * z + me[14];\n      oe[15] = me[3] * x + me[7] * y + me[11] * z + me[15];\n    } else {\n      const a11 = me[0],\n        a12 = me[1],\n        a13 = me[2],\n        a14 = me[3];\n      const a21 = me[4],\n        a22 = me[5],\n        a23 = me[6],\n        a24 = me[7];\n      const a31 = me[8],\n        a32 = me[9],\n        a33 = me[10],\n        a34 = me[11];\n\n      (oe[0] = a11), (oe[1] = a12), (oe[2] = a13), (oe[3] = a14);\n      (oe[4] = a21), (oe[5] = a22), (oe[6] = a23), (oe[7] = a24);\n      (oe[8] = a31), (oe[9] = a32), (oe[10] = a33), (oe[11] = a34);\n\n      oe[12] = a11 * x + a21 * y + a31 * z + me[12];\n      oe[13] = a12 * x + a22 * y + a32 * z + me[13];\n      oe[14] = a13 * x + a23 * y + a33 * z + me[14];\n      oe[15] = a14 * x + a24 * y + a34 * z + me[15];\n    }\n  }\n\n  /**\n   * 计算矩阵 a 的转置矩阵，并将结果输出到 out。\n   * @param a - 矩阵\n   * @param out - 转置矩阵\n   */\n  static transpose(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a14 = ae[3];\n      const a23 = ae[6];\n      const a24 = ae[7];\n      const a34 = ae[11];\n\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = a12;\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = a13;\n      oe[9] = a23;\n      oe[11] = ae[14];\n\n      oe[12] = a14;\n      oe[13] = a24;\n      oe[14] = a34;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = ae[1];\n      oe[5] = ae[5];\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = ae[2];\n      oe[9] = ae[6];\n      oe[10] = ae[10];\n      oe[11] = ae[14];\n\n      oe[12] = ae[3];\n      oe[13] = ae[7];\n      oe[14] = ae[11];\n      oe[15] = ae[15];\n    }\n  }\n\n  /**\n   * 矩阵元素数组，采用列矩阵的模式存储。\n   * @remarks\n   * elements[0] 表示第 1 列第 1 行 m11\n   * elements[1] 表示第 1 列第 2 行 m12\n   * elements[2] 表示第 1 列第 3 行 m13\n   * elements[3] 表示第 1 列第 4 行 m14\n   * elements[4] 表示第 2 列第 1 行 m21\n   * 依次类推\n   */\n  elements: Float32Array = new Float32Array(16);\n\n  /**\n   * 创建4x4矩阵实例，默认创建单位矩阵，采用列矩阵的模式存储。\n   * @param m11 - 默认值 1，column 1, row 1\n   * @param m12 - 默认值 0，column 1, row 2\n   * @param m13 - 默认值 0，column 1, row 3\n   * @param m14 - 默认值 0，column 1, row 4\n   * @param m21 - 默认值 0，column 2, row 1\n   * @param m22 - 默认值 1，column 2, row 2\n   * @param m23 - 默认值 0，column 2, row 3\n   * @param m24 - 默认值 0，column 2, row 4\n   * @param m31 - 默认值 0，column 3, row 1\n   * @param m32 - 默认值 0，column 3, row 2\n   * @param m33 - 默认值 1，column 3, row 3\n   * @param m34 - 默认值 0，column 3, row 4\n   * @param m41 - 默认值 0，column 4, row 1\n   * @param m42 - 默认值 0，column 4, row 2\n   * @param m43 - 默认值 0，column 4, row 3\n   * @param m44 - 默认值 1，column 4, row 4\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m14: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m24: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1,\n    m34: number = 0,\n    m41: number = 0,\n    m42: number = 0,\n    m43: number = 0,\n    m44: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n  }\n\n  /**\n   * 给矩阵设置值，并返回当前值。\n   * @param m11 - column 1, row 1\n   * @param m12 - column 1, row 2\n   * @param m13 - column 1, row 3\n   * @param m14 - column 1, row 4\n   * @param m21 - column 2, row 1\n   * @param m22 - column 2, row 2\n   * @param m23 - column 2, row 3\n   * @param m24 - column 2, row 4\n   * @param m31 - column 3, row 1\n   * @param m32 - column 3, row 2\n   * @param m33 - column 3, row 3\n   * @param m34 - column 3, row 4\n   * @param m41 - column 4, row 1\n   * @param m42 - column 4, row 2\n   * @param m43 - column 4, row 3\n   * @param m44 - column 4, row 4\n   * @returns 当前矩阵\n   */\n  setValue(\n    m11: number,\n    m12: number,\n    m13: number,\n    m14: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m24: number,\n    m31: number,\n    m32: number,\n    m33: number,\n    m34: number,\n    m41: number,\n    m42: number,\n    m43: number,\n    m44: number\n  ): Matrix {\n    const e = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n\n    return this;\n  }\n\n  /**\n   * 通过数组设置值，并返回当前矩阵。\n   * @param array - 数组\n   * @param offset - 数组偏移\n   * @returns 当前矩阵\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Matrix {\n    const srce = this.elements;\n    for (let i = 0; i < 16; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * 拷贝到数组。\n   * @param out - 数组。\n   * @param outOffset - 数组偏移。\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n    out[outOffset + 9] = e[9];\n    out[outOffset + 10] = e[10];\n    out[outOffset + 11] = e[11];\n    out[outOffset + 12] = e[12];\n    out[outOffset + 13] = e[13];\n    out[outOffset + 14] = e[14];\n    out[outOffset + 15] = e[15];\n  }\n\n  /**\n   * 创建一个新的矩阵，并用当前矩阵值初始化。\n   * @returns 一个新的矩阵，并且拷贝当前矩阵的值\n   */\n  clone(): Matrix {\n    const e = this.elements;\n    let ret = new Matrix(\n      e[0],\n      e[1],\n      e[2],\n      e[3],\n      e[4],\n      e[5],\n      e[6],\n      e[7],\n      e[8],\n      e[9],\n      e[10],\n      e[11],\n      e[12],\n      e[13],\n      e[14],\n      e[15]\n    );\n    return ret;\n  }\n\n  /**\n   * 将当前矩阵值拷贝给 out 矩阵。\n   * @param out - 目标矩阵\n   */\n  cloneTo(out: Matrix): Matrix {\n    const e = this.elements;\n    const oe = out.elements;\n\n    oe[0] = e[0];\n    oe[1] = e[1];\n    oe[2] = e[2];\n    oe[3] = e[3];\n\n    oe[4] = e[4];\n    oe[5] = e[5];\n    oe[6] = e[6];\n    oe[7] = e[7];\n\n    oe[8] = e[8];\n    oe[9] = e[9];\n    oe[10] = e[10];\n    oe[11] = e[11];\n\n    oe[12] = e[12];\n    oe[13] = e[13];\n    oe[14] = e[14];\n    oe[15] = e[15];\n\n    return out;\n  }\n\n  /**\n   * 将当前矩阵乘以给定的向量 right，并返回当前矩阵。\n   * @param right - 给定的向量，右操作数\n   * @returns 当前矩阵\n   */\n  multiply(right: Matrix): Matrix {\n    Matrix.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * 计算4x4矩阵的行列式。\n   * @returns 当前矩阵的行列式\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2],\n      a14 = e[3];\n    const a21 = e[4],\n      a22 = e[5],\n      a23 = e[6],\n      a24 = e[7];\n    const a31 = e[8],\n      a32 = e[9],\n      a33 = e[10],\n      a34 = e[11];\n    const a41 = e[12],\n      a42 = e[13],\n      a43 = e[14],\n      a44 = e[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  }\n\n  /**\n   * 将矩阵分解为平移向量、旋转四元数、缩放向量。\n   * @param pos - 平移向量\n   * @param q - 旋转四元数\n   * @param s - 缩放向量\n   */\n  decompose(pos: Vector3, q: Quaternion, s: Vector3): void {\n    const t: Matrix = Matrix._tempMat40;\n    this.cloneTo(t);\n    const te = t.elements;\n\n    pos.x = te[12];\n    pos.y = te[13];\n    pos.z = te[14];\n\n    let sx = Math.sqrt(te[0] * te[0] + te[1] * te[1] + te[2] * te[2]);\n    const sy = Math.sqrt(te[4] * te[4] + te[5] * te[5] + te[6] * te[6]);\n    const sz = Math.sqrt(te[8] * te[8] + te[9] * te[9] + te[10] * te[10]);\n\n    if (\n      Math.abs(sx) < MathUtil.zeroTolerance ||\n      Math.abs(sy) < MathUtil.zeroTolerance ||\n      Math.abs(sz) < MathUtil.zeroTolerance\n    ) {\n      // TODO CM:\n    } else {\n      // if determine is negative, we need to invert one scale\n      const det = t.determinant();\n      if (det < 0) sx = -sx;\n\n      // scale the rotation part\n      const invSX = 1 / sx;\n      const invSY = 1 / sy;\n      const invSZ = 1 / sz;\n\n      te[0] *= invSX;\n      te[1] *= invSX;\n      te[2] *= invSX;\n\n      te[4] *= invSY;\n      te[5] *= invSY;\n      te[6] *= invSY;\n\n      te[8] *= invSZ;\n      te[9] *= invSZ;\n      te[10] *= invSZ;\n    }\n\n    const m3: Matrix3x3 = Matrix._tempMat30;\n    m3.setValueByMatrix(t);\n    Quaternion.rotationMatrix3x3(m3, q);\n\n    s.x = sx;\n    s.y = sy;\n    s.z = sz;\n  }\n\n  /**\n   * 从矩阵中返回表示旋转的四元数。\n   * @param a - 转换矩阵\n   * @param out - 表示旋转的四元数\n   * @returns 当前矩阵的旋转四元数\n   */\n  getRotation(out: Quaternion): Quaternion {\n    const e = this.elements;\n    let trace = e[0] + e[5] + e[10];\n    let S = 0;\n\n    if (trace > MathUtil.zeroTolerance) {\n      S = Math.sqrt(trace + 1.0) * 2;\n      out.w = 0.25 * S;\n      out.x = (e[6] - e[9]) / S;\n      out.y = (e[8] - e[2]) / S;\n      out.z = (e[1] - e[4]) / S;\n    } else if (e[0] > e[5] && e[0] > e[10]) {\n      S = Math.sqrt(1.0 + e[0] - e[5] - e[10]) * 2;\n      out.w = (e[6] - e[9]) / S;\n      out.x = 0.25 * S;\n      out.y = (e[1] + e[4]) / S;\n      out.z = (e[8] + e[2]) / S;\n    } else if (e[5] > e[10]) {\n      S = Math.sqrt(1.0 + e[5] - e[0] - e[10]) * 2;\n      out.w = (e[8] - e[2]) / S;\n      out.x = (e[1] + e[4]) / S;\n      out.y = 0.25 * S;\n      out.z = (e[6] + e[9]) / S;\n    } else {\n      S = Math.sqrt(1.0 + e[10] - e[0] - e[5]) * 2;\n      out.w = (e[1] - e[4]) / S;\n      out.x = (e[8] + e[2]) / S;\n      out.y = (e[6] + e[9]) / S;\n      out.z = 0.25 * S;\n    }\n\n    return out;\n  }\n\n  /**\n   * 从矩阵中返回缩放向量。\n   * @param out - 缩放向量\n   * @returns 当前矩阵的缩放向量\n   */\n  getScaling(out: Vector3): Vector3 {\n    //getScale()\n    const e = this.elements;\n    const m11 = e[0],\n      m12 = e[1],\n      m13 = e[2];\n    const m21 = e[4],\n      m22 = e[5],\n      m23 = e[6];\n    const m31 = e[8],\n      m32 = e[9],\n      m33 = e[10];\n\n    out.x = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    out.y = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    out.z = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n    return out;\n  }\n\n  /**\n   * 从矩阵中返回转换向量。\n   * @param out - 转换向量\n   * @returns 当前矩阵的转换向量\n   */\n  getTranslation(out: Vector3): Vector3 {\n    const e = this.elements;\n\n    out.x = e[12];\n    out.y = e[13];\n    out.z = e[14];\n\n    return out;\n  }\n\n  /**\n   * 将矩阵设置为单位矩阵。\n   * @returns 当前矩阵\n   */\n  identity(): Matrix {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n\n    e[4] = 0;\n    e[5] = 1;\n    e[6] = 0;\n    e[7] = 0;\n\n    e[8] = 0;\n    e[9] = 0;\n    e[10] = 1;\n    e[11] = 0;\n\n    e[12] = 0;\n    e[13] = 0;\n    e[14] = 0;\n    e[15] = 1;\n\n    return this;\n  }\n\n  /**\n   * 计算当前矩阵的逆矩阵，并返回。\n   * @returns 当前矩阵\n   */\n  invert(): Matrix {\n    Matrix.invert(this, this);\n    return this;\n  }\n\n  /**\n   * 将当前矩阵按给定角度旋转，并返回。\n   * @param axis - 旋转轴\n   * @param r - 给定的旋转角度\n   * @returns 当前矩阵\n   */\n  rotateAxisAngle(axis: Vector3, r: number): Matrix {\n    Matrix.rotateAxisAngle(this, axis, r, this);\n    return this;\n  }\n\n  /**\n   * 将当前矩阵按给定向量 v 缩放，并返回。\n   * @param s\n   * @returns 当前矩阵\n   */\n  scale(s: Vector3): Matrix {\n    Matrix.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * 将当前矩阵按给定向量 v 转换，并返回。\n   * @param v - 转换向量\n   * @returns 当前矩阵\n   */\n  translate(v: Vector3): Matrix {\n    Matrix.translate(this, v, this);\n    return this;\n  }\n\n  /**\n   * 计算当前矩阵的转置矩阵，并返回。\n   * @returns 当前矩阵\n   */\n  transpose(): Matrix {\n    Matrix.transpose(this, this);\n    return this;\n  }\n}\n","import { MathUtil } from \"./MathUtil\";\n\n/**\n * 二维向量。\n */\nexport class Vector2 {\n  /** @internal 零向量。*/\n  static readonly _zero = new Vector2(0.0, 0.0);\n  /** @internal 一向量。*/\n  static readonly _one = new Vector2(1.0, 1.0);\n\n  /**\n   * 将两个向量相加并输出结果至 out。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @param out - 向量相加结果\n   */\n  static add(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n  }\n\n  /**\n   * 将两个向量相减并输出结果至 out。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @param out - 两个二维向量的相减结果\n   */\n  static subtract(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x - right.x;\n    out.y = left.y - right.y;\n  }\n\n  /**\n   * 将两个向量相乘并输出结果至 out。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @param out - 两个二维向量的相乘结果\n   */\n  static multiply(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x * right.x;\n    out.y = left.y * right.y;\n  }\n\n  /**\n   * 将两个二维向量相除并输出结果至 out。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @param out - 两个二维向量的相除结果\n   */\n  static divide(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = left.x / right.x;\n    out.y = left.y / right.y;\n  }\n\n  /**\n   * 计算两个二维向量的点积。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @returns 两个向量的点积\n   */\n  static dot(left: Vector2, right: Vector2): number {\n    return left.x * right.x + left.y * right.y;\n  }\n\n  /**\n   * 计算两个二维向量的距离。\n   * @param left - 向量\n   * @param right - 向量\n   * @returns 两个向量的距离\n   */\n  static distance(left: Vector2, right: Vector2): number {\n    const x = right.x - left.x;\n    const y = right.y - left.y;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  /**\n   * 计算两个二维向量的距离的平方。\n   * @param left - 向量\n   * @param right - 向量\n   * @returns 两个向量的距离的平方\n   */\n  static distanceSquared(left: Vector2, right: Vector2): number {\n    const x = right.x - left.x;\n    const y = right.y - left.y;\n    return x * x + y * y;\n  }\n\n  /**\n   * 判断两个二维向量的值是否相等。\n   * @param left - 向量\n   * @param right - 向量\n   * @returns 两个向量是否相等，是返回 true，否则返回 false\n   */\n  static equals(left: Vector2, right: Vector2): boolean {\n    return MathUtil.equals(left.x, right.x) && MathUtil.equals(left.y, right.y);\n  }\n\n  /**\n   * 插值二维向量。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @param t - 插值比例\n   * @param out - 插值结果\n   */\n  static lerp(left: Vector2, right: Vector2, t: number, out: Vector2): void {\n    const { x, y } = left;\n    out.x = x + (right.x - x) * t;\n    out.y = y + (right.y - y) * t;\n  }\n\n  /**\n   * 分别取两个二维向量 x、y 的最大值计算新的二维向量。\n   * @param left - 向量\n   * @param right - 向量\n   * @param out - 结果向量\n   */\n  static max(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = Math.max(left.x, right.x);\n    out.y = Math.max(left.y, right.y);\n  }\n\n  /**\n   * 分别取两个二维向量 x、y 的最小值计算新的二维向量。\n   * @param left - 向量\n   * @param right - 向量\n   * @param out - 结果向量\n   */\n  static min(left: Vector2, right: Vector2, out: Vector2): void {\n    out.x = Math.min(left.x, right.x);\n    out.y = Math.min(left.y, right.y);\n  }\n\n  /**\n   * 将向量 left 反转的结果输出到 out。\n   * @param left - 向量\n   * @param out - 向量反转的结果\n   */\n  static negate(left: Vector2, out: Vector2): void {\n    out.x = -left.x;\n    out.y = -left.y;\n  }\n\n  /**\n   * 将向量 left 归一化的结果输出到 out。\n   * @param left - 向量\n   * @param out - 向量归一化的结果\n   */\n  static normalize(left: Vector2, out: Vector2): void {\n    const { x, y } = left;\n    let len: number = Math.sqrt(x * x + y * y);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n    }\n  }\n\n  /**\n   * 将向量 left 缩放的结果输出到 out。\n   * @param left - 向量\n   * @param scale - 缩放因子\n   * @param out - 向量缩放的结果\n   */\n  static scale(left: Vector2, s: number, out: Vector2): void {\n    out.x = left.x * s;\n    out.y = left.y * s;\n  }\n\n  /** 向量的 X 分量。 */\n  x: number;\n  /** 向量的 Y 分量。 */\n  y: number;\n\n  /**\n   * 创建一个 Vector2 实例。\n   * @param x - 向量的 X 分量，默认值 0\n   * @param y - 向量的 Y 分量，默认值 0\n   */\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * 设置 x, y 的值，并返回当前向量。\n   * @param x - 向量的 X 分量\n   * @param y - 向量的 Y 分量\n   * @returns 当前向量\n   */\n  setValue(x: number, y: number): Vector2 {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * 通过数组设置值，并返回当前向量。\n   * @param array - 数组\n   * @param offset - 数组偏移\n   * @returns 当前向量\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Vector2 {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    return this;\n  }\n\n  /**\n   * 将当前向量加上给定的向量 right，并返回当前向量。\n   * @param right - 给定的向量\n   * @returns 当前向量\n   */\n  add(right: Vector2): Vector2 {\n    this.x += right.x;\n    this.y += right.y;\n    return this;\n  }\n\n  /**\n   * 将当前向量减去给定的向量 right，并返回当前向量。\n   * @param right - 给定的向量\n   * @returns 当前向量\n   */\n  subtract(right: Vector2): Vector2 {\n    this.x -= right.x;\n    this.y -= right.y;\n    return this;\n  }\n\n  /**\n   * 将当前向量乘以给定的向量 right，并返回当前向量。\n   * @param right - 给定的向量\n   * @returns 当前向量\n   */\n  multiply(right: Vector2): Vector2 {\n    this.x *= right.x;\n    this.y *= right.y;\n    return this;\n  }\n\n  /**\n   * 将当前向量除以给定的向量 right，并返回当前向量。\n   * @param right - 给定的向量\n   * @returns 当前向量\n   */\n  divide(right: Vector2): Vector2 {\n    this.x /= right.x;\n    this.y /= right.y;\n    return this;\n  }\n\n  /**\n   * 计算一个二维向量的标量长度。\n   * @returns 当前向量的标量长度\n   */\n  length(): number {\n    const { x, y } = this;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  /**\n   * 计算一个二维向量的标量长度的平方。\n   * @returns 当前向量的标量长度的平方\n   */\n  lengthSquared(): number {\n    const { x, y } = this;\n    return x * x + y * y;\n  }\n\n  /**\n   * 向量反转。\n   * @returns 当前向量\n   */\n  negate(): Vector2 {\n    this.x = -this.x;\n    this.y = -this.y;\n    return this;\n  }\n\n  /**\n   * 当前向量归一化，并返回。\n   * @returns 当前向量\n   */\n  normalize(): Vector2 {\n    Vector2.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * 向量缩放。\n   * @param s - 缩放因子\n   * @returns 当前向量\n   */\n  scale(s: number): Vector2 {\n    this.x *= s;\n    this.y *= s;\n    return this;\n  }\n\n  /**\n   * 拷贝到数组。\n   * @param out - 数组。\n   * @param outOffset - 数组偏移。\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n  }\n\n  /**\n   * 克隆并返回一个新的二维向量对象。\n   * @returns 新的二维向量对象\n   */\n  clone(): Vector2 {\n    return new Vector2(this.x, this.y);\n  }\n\n  /**\n   * 将当前向量值拷贝给目标向量。\n   * @param out - 目标向量\n   */\n  cloneTo(out: Vector2): Vector2 {\n    out.x = this.x;\n    out.y = this.y;\n    return out;\n  }\n}\n","import { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\n\n/**\n * 四维向量。\n */\nexport class Vector4 {\n  /** @internal 零向量。*/\n  static readonly _zero = new Vector4(0.0, 0.0, 0.0, 0.0);\n  /** @internal 一向量。*/\n  static readonly _one = new Vector4(1.0, 1.0, 1.0, 1.0);\n\n  /**\n   * 将两个向量相加。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @param out - 向量相加结果\n   */\n  static add(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x + right.x;\n    out.y = left.y + right.y;\n    out.z = left.z + right.z;\n    out.w = left.w + right.w;\n  }\n\n  /**\n   * 将两个向量相减。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @param out - 两个四维向量的相减结果\n   */\n  static subtract(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x - right.x;\n    out.y = left.y - right.y;\n    out.z = left.z - right.z;\n    out.w = left.w - right.w;\n  }\n\n  /**\n   * 将两个向量相乘。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @param out - 两个四维向量的相乘结果\n   */\n  static multiply(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x * right.x;\n    out.y = left.y * right.y;\n    out.z = left.z * right.z;\n    out.w = left.w * right.w;\n  }\n\n  /**\n   * 将两个四维向量相除。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @param out - 两个四维向量的相除结果\n   */\n  static divide(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = left.x / right.x;\n    out.y = left.y / right.y;\n    out.z = left.z / right.z;\n    out.w = left.w / right.w;\n  }\n\n  /**\n   * 计算两个四维向量的点积。\n   * @param left - 左向量\n   * @param right - 右向量\n   * @returns 两个向量的点积\n   */\n  static dot(left: Vector4, right: Vector4): number {\n    return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n  }\n\n  /**\n   * 计算两个四维向量的距离。\n   * @param a - 向量\n   * @param b - 向量\n   * @returns 两个向量的距离\n   */\n  static distance(a: Vector4, b: Vector4): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    const w = b.w - a.w;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * 计算两个四维向量的距离的平方。\n   * @param a - 向量\n   * @param b - 向量\n   * @returns 两个向量的距离的平方\n   */\n  static distanceSquared(a: Vector4, b: Vector4): number {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    const z = b.z - a.z;\n    const w = b.w - a.w;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * 判断两个四维向量的值是否相等。\n   * @param left - 向量\n   * @param right - 向量\n   * @returns 两个向量是否相等，是返回 true，否则返回 false\n   */\n  static equals(left: Vector4, right: Vector4): boolean {\n    return (\n      MathUtil.equals(left.x, right.x) &&\n      MathUtil.equals(left.y, right.y) &&\n      MathUtil.equals(left.z, right.z) &&\n      MathUtil.equals(left.w, right.w)\n    );\n  }\n\n  /**\n   * 插值四维向量。\n   * @param start - 左向量\n   * @param end - 右向量\n   * @param t - 插值比例\n   * @param out - 插值结果\n   */\n  static lerp(start: Vector4, end: Vector4, t: number, out: Vector4): void {\n    const { x, y, z, w } = start;\n    out.x = x + (end.x - x) * t;\n    out.y = y + (end.y - y) * t;\n    out.z = z + (end.z - z) * t;\n    out.w = w + (end.w - w) * t;\n  }\n\n  /**\n   * 分别取两个四维向量 x、y 的最大值计算新的四维向量。\n   * @param left - 向量\n   * @param right - 向量\n   * @param out - 结果向量\n   */\n  static max(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = Math.max(left.x, right.x);\n    out.y = Math.max(left.y, right.y);\n    out.z = Math.max(left.z, right.z);\n    out.w = Math.max(left.w, right.w);\n  }\n\n  /**\n   * 分别取两个四维向量 x、y 的最小值计算新的四维向量。\n   * @param left - 向量\n   * @param right - 向量\n   * @param out - 结果向量\n   */\n  static min(left: Vector4, right: Vector4, out: Vector4): void {\n    out.x = Math.min(left.x, right.x);\n    out.y = Math.min(left.y, right.y);\n    out.z = Math.min(left.z, right.z);\n    out.w = Math.min(left.w, right.w);\n  }\n\n  /**\n   * 将向量 a 反转的结果输出到 out。\n   * @param a - 向量\n   * @param out - 向量反转的结果\n   */\n  static negate(a: Vector4, out: Vector4): void {\n    out.x = -a.x;\n    out.y = -a.y;\n    out.z = -a.z;\n    out.w = -a.w;\n  }\n\n  /**\n   * 将向量 a 归一化的结果输出到 out。\n   * @param a - 向量\n   * @param out - 向量归一化的结果\n   */\n  static normalize(a: Vector4, out: Vector4): void {\n    const { x, y, z, w } = a;\n    let len: number = Math.sqrt(x * x + y * y + z * z + w * w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.x = x * len;\n      out.y = y * len;\n      out.z = z * len;\n      out.w = w * len;\n    }\n  }\n\n  /**\n   * 将向量 a 缩放的结果输出到 out。\n   * @param a - 向量\n   * @param s - 缩放因子\n   * @param out - 向量缩放的结果\n   */\n  static scale(a: Vector4, s: number, out: Vector4): void {\n    out.x = a.x * s;\n    out.y = a.y * s;\n    out.z = a.z * s;\n    out.w = a.w * s;\n  }\n\n  /**\n   * 通过4x4矩阵将一个四维向量转换到另一个四维向量。\n   * @param v - 向量\n   * @param m - 转换矩阵\n   * @param out - 通过矩阵转换后的向量\n   */\n  static transform(v: Vector4, m: Matrix, out: Vector4): void {\n    const { x, y, z, w } = v;\n    const e = m.elements;\n    out.x = x * e[0] + y * e[4] + z * e[8] + w * e[12];\n    out.y = x * e[1] + y * e[5] + z * e[9] + w * e[13];\n    out.z = x * e[2] + y * e[6] + z * e[10] + w * e[14];\n    out.w = x * e[3] + y * e[7] + z * e[11] + w * e[15];\n  }\n\n  /**\n   * 通过四元数将一个四维向量转换到另一个四维向量。\n   * @param v - 向量\n   * @param m - 转换矩阵\n   * @param out - 通过矩阵转换后的向量\n   */\n  static transformByQuat(v: Vector4, q: Quaternion, out: Vector4): void {\n    const { x, y, z, w } = v;\n    const qx = q.x;\n    const qy = q.y;\n    const qz = q.z;\n    const qw = q.w;\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out.x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out.y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out.z = iz * qw - iw * qz - ix * qy + iy * qx;\n    out.w = w;\n  }\n\n  /** 向量的 X 分量。 */\n  x: number;\n  /** 向量的 Y 分量。 */\n  y: number;\n  /** 向量的 Z 分量。 */\n  z: number;\n  /** 向量的 W 分量。 */\n  w: number;\n\n  /**\n   * 创建一个 Vector4 实例。\n   * @param x - 向量的 X 分量，默认值 0\n   * @param y - 向量的 Y 分量，默认值 0\n   * @param z - 向量的 Z 分量，默认值 0\n   * @param w - 向量的 W 分量，默认值 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n\n  /**\n   * 设置 x, y, z, w 的值，并返回当前向量。\n   * @param x - 向量的 X 分量\n   * @param y - 向量的 Y 分量\n   * @param z - 向量的 Z 分量\n   * @param w - 向量的 W 分量\n   * @returns 当前向量\n   */\n  setValue(x: number, y: number, z: number, w: number): Vector4 {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n\n  /**\n   * 通过数组设置值，并返回当前向量。\n   * @param array - 数组\n   * @param offset - 数组偏移\n   * @returns 当前向量\n   */\n  setValueByArray(array: ArrayLike<number>, offset: number = 0): Vector4 {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    this.w = array[offset + 3];\n    return this;\n  }\n\n  /**\n   * 将当前向量加上给定的向量 right，并返回当前向量。\n   * @param right - 给定的向量\n   * @returns 当前向量\n   */\n  add(right: Vector4): Vector4 {\n    this.x += right.x;\n    this.y += right.y;\n    this.z += right.z;\n    this.w += right.w;\n    return this;\n  }\n\n  /**\n   * 将当前向量减去给定的向量 right，并返回当前向量。\n   * @param right - 给定的向量\n   * @returns 当前向量\n   */\n  subtract(right: Vector4): Vector4 {\n    this.x -= right.x;\n    this.y -= right.y;\n    this.z -= right.z;\n    this.w -= right.w;\n    return this;\n  }\n\n  /**\n   * 将当前向量乘以给定的向量 right，并返回当前向量。\n   * @param right - 给定的向量\n   * @returns 当前向量\n   */\n  multiply(right: Vector4): Vector4 {\n    this.x *= right.x;\n    this.y *= right.y;\n    this.z *= right.z;\n    this.w *= right.w;\n    return this;\n  }\n\n  /**\n   * 将当前向量除以给定的向量 right，并返回当前向量。\n   * @param right - 给定的向量\n   * @returns 当前向量\n   */\n  divide(right: Vector4): Vector4 {\n    this.x /= right.x;\n    this.y /= right.y;\n    this.z /= right.z;\n    this.w /= right.w;\n    return this;\n  }\n\n  /**\n   * 计算一个四维向量的标量长度。\n   * @returns 当前向量的标量长度\n   */\n  length(): number {\n    const { x, y, z, w } = this;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * 计算一个四维向量的标量长度的平方。\n   * @returns 当前向量的标量长度的平方\n   */\n  lengthSquared(): number {\n    const { x, y, z, w } = this;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * 向量反转。\n   * @returns 当前向量\n   */\n  negate(): Vector4 {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    this.w = -this.w;\n    return this;\n  }\n\n  /**\n   * 向量归一化。\n   * @returns 当前向量\n   */\n  normalize(): Vector4 {\n    Vector4.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * 向量缩放。\n   * @param s - 缩放因子\n   * @returns 当前向量\n   */\n  scale(s: number): Vector4 {\n    this.x *= s;\n    this.y *= s;\n    this.z *= s;\n    this.w *= s;\n    return this;\n  }\n\n  /**\n   * 拷贝到数组。\n   * @param out - 数组。\n   * @param outOffset - 数组偏移。\n   */\n  toArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this.x;\n    out[outOffset + 1] = this.y;\n    out[outOffset + 2] = this.z;\n    out[outOffset + 3] = this.w;\n  }\n\n  /**\n   * 创建一个新的四维向量，并用当前向量值初始化。\n   * @returns 一个新的向量，并且拷贝当前向量的值\n   */\n  clone(): Vector4 {\n    let ret = new Vector4(this.x, this.y, this.z, this.w);\n    return ret;\n  }\n\n  /**\n   * 将当前向量值拷贝给 out 向量。\n   * @param out - 目标向量\n   */\n  cloneTo(out: Vector4): Vector4 {\n    out.x = this.x;\n    out.y = this.y;\n    out.z = this.z;\n    out.w = this.w;\n    return out;\n  }\n}\n","import { MathUtil } from \"./MathUtil\";\nimport { Vector3 } from \"./Vector3\";\n\n// 防止万向锁\nconst ESP = MathUtil.zeroTolerance;\n\n// 球面坐标\nexport class Spherical {\n  public radius;\n  public phi;\n  public theta;\n\n  constructor(radius?, phi?, theta?) {\n    this.radius = radius !== undefined ? radius : 1.0;\n    this.phi = phi !== undefined ? phi : 0;\n    this.theta = theta !== undefined ? theta : 0;\n  }\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n\n    return this;\n  }\n\n  makeSafe() {\n    this.phi = MathUtil.clamp(this.phi, ESP, Math.PI - ESP);\n    return this;\n  }\n\n  setFromVec3(v3: Vector3) {\n    this.radius = v3.length();\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(v3.x, v3.z);\n      this.phi = Math.acos(MathUtil.clamp(v3.y / this.radius, -1, 1));\n    }\n\n    return this;\n  }\n\n  setToVec3(v3: Vector3) {\n    const sinPhiRadius = Math.sin(this.phi) * this.radius;\n\n    v3.x = sinPhiRadius * Math.sin(this.theta);\n    v3.y = Math.cos(this.phi) * this.radius;\n    v3.z = sinPhiRadius * Math.cos(this.theta);\n\n    return this;\n  }\n}\n"],"names":["MathUtil","v","min","max","Math","a","b","abs","zeroTolerance","r","radToDegreeFactor","d","degreeToRadFactor","PI","Matrix3x3","left","right","out","le","elements","re","oe","l11","l12","l13","l21","l22","l23","l31","l32","l33","r11","r12","r13","r21","r22","r23","r31","r32","r33","equals","q","x","y","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","s","trans","ae","a11","a12","a13","a21","a22","a23","a31","a32","a33","b12","b22","b32","det","mat4","a14","a24","a34","a41","a42","a43","a44","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","sin","c","cos","m","m11","m12","m13","m21","m22","m23","m31","m32","m33","Float32Array","e","array","offset","srce","i","outOffset","ret","add","subtract","multiply","invert","rotate","scale","translate","transpose","Vector3","ax","ay","az","bx","by","bz","sqrt","start","end","t","len","qx","qy","qz","qw","ix","iy","iz","iw","normalize","transformNormal","transformToVec3","transformCoordinate","transformByQuat","_zero","_one","_tempVector3","Quaternion","aw","bw","axis","rad","normalAxis","rotationYawPitchRoll","yaw","pitch","roll","halfRoll","halfPitch","halfYaw","sinRoll","cosRoll","sinPitch","cosPitch","sinYaw","cosYaw","cosYawPitch","sinYawPitch","me","half","dot","invDot","inv","scale0","scale1","cosom","omega","acos","sinom","length","toYawPitchRoll","xy","zw","yw","yz","xw","asin","atan2","rotateX","rotateY","rotateZ","rotationAxisAngle","quat","lerp","Matrix","l14","l24","l34","l41","l42","l43","l44","r14","r24","r34","r41","r42","r43","r44","rotationQuaternion","rotation","xz","sx","sy","sz","eye","target","up","xAxis","_tempVec30","yAxis","_tempVec31","zAxis","_tempVec32","cross","bottom","top","near","far","lr","bt","nf","fovy","aspect","f","tan","b13","b21","b23","b31","b33","m14","m24","m34","m41","m42","m43","m44","pos","_tempMat40","cloneTo","te","determinant","invSX","invSY","invSZ","m3","_tempMat30","setValueByMatrix","rotationMatrix3x3","trace","S","rotateAxisAngle","_identity","Vector2","Vector4","ESP","Spherical","radius","phi","theta","undefined","clamp","v3","sinPhiRadius"],"mappings":"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"}