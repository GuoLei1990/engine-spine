import { Entity, Matrix, Script, Vector3 } from "oasis-engine";
/**
 * 相机的的轨道控制器，可以旋转，缩放，平移，支持鼠标和触摸事件。
 */
export declare class OrbitControl extends Script {
    camera: Entity;
    domElement: HTMLElement | Document;
    mainElement: HTMLCanvasElement;
    fov: number;
    target: Vector3;
    up: Vector3;
    minDistance: number;
    maxDistance: number;
    minZoom: number;
    maxZoom: number;
    enableDamping: boolean;
    zoomFactor: number;
    enableRotate: boolean;
    keyPanSpeed: number;
    minPolarAngle: number;
    maxPolarAngle: number;
    minAzimuthAngle: number;
    maxAzimuthAngle: number;
    enableZoom: boolean;
    dampingFactor: number;
    zoomSpeed: number;
    enablePan: boolean;
    autoRotate: boolean;
    autoRotateSpeed: number;
    rotateSpeed: number;
    enableKeys: boolean;
    keys: {
        LEFT: number;
        RIGHT: number;
        UP: number;
        BOTTOM: number;
    };
    mouseButtons: {
        ORBIT: number;
        ZOOM: number;
        PAN: number;
    };
    touchFingers: {
        ORBIT: number;
        ZOOM: number;
        PAN: number;
    };
    private _position;
    private _offset;
    private _spherical;
    private _sphericalDelta;
    private _sphericalDump;
    private _zoomFrag;
    private _scale;
    private _panOffset;
    private _isMouseUp;
    private _vPan;
    constEvents: {
        listener: any;
        type: string;
        element?: Window;
    }[];
    private _state;
    private _rotateStart;
    private _rotateEnd;
    private _rotateDelta;
    private _panStart;
    private _panEnd;
    private _panDelta;
    private _zoomStart;
    private _zoomEnd;
    private _zoomDelta;
    STATE: {
        TOUCH_ROTATE: number;
        ROTATE: number;
        TOUCH_PAN: number;
        ZOOM: number;
        NONE: number;
        PAN: number;
        TOUCH_ZOOM: number;
    };
    mouseUpEvents: {
        listener: any;
        type: string;
    }[];
    /**
     * 轨道控制器构造函数
     * @param {Entity} entity 挂载节点
     */
    constructor(entity: Entity);
    /**
     * 销毁，释放事件监听
     * @private
     */
    destroy(): void;
    /**
     * 在触屏上用单指控制旋转，三指控制平移
     */
    setOneFingerRotate(): void;
    /**
     * 在触屏上用单指控制平移，三指控制旋转
     */
    setOneFingerPan(): void;
    /**
     * 每帧更新
     * @private
     * @param {Number} dtime 和上次绘制的事件间隔 ms
     */
    onUpdate(dtime: any): void;
    /**
     * 获取自动旋转的弧度
     * @private
     */
    getAutoRotationAngle(dtime: any): number;
    /**
     * 获取缩放值
     * @private
     */
    getZoomScale(): number;
    /**
     * 向左旋转一定弧度
     * @property {Number} radian 旋转的弧度值
     */
    rotateLeft(radian: any): void;
    /**
     * 向上旋转一定弧度
     * @property {Number} radian 旋转的弧度值
     */
    rotateUp(radian: any): void;
    /**
     * 向左平移
     * @private
     */
    panLeft(distance: number, worldMatrix: Matrix): void;
    /**
     * 向右平移
     * @private
     */
    panUp(distance: number, worldMatrix: Matrix): void;
    /**
     * 平移
     * @property {Number} deltaX x方向的平移量，屏幕距离
     * @property {Number} deltaY y方向的平移量，屏幕距离
     */
    pan(deltaX: any, deltaY: any): void;
    /**
     * 放大
     * @private
     */
    zoomIn(zoomScale: any): void;
    /**
     * 缩小
     * @private
     */
    zoomOut(zoomScale: any): void;
    /**
     * 鼠标点击时旋转参数更新
     * @private
     */
    handleMouseDownRotate(event: any): void;
    /**
     * 鼠标点击时缩放参数更新
     * @private
     */
    handleMouseDownZoom(event: any): void;
    /**
     * 鼠标点击时平移参数更新
     * @private
     */
    handleMouseDownPan(event: any): void;
    /**
     * 鼠标移动时旋转参数更新
     * @private
     */
    handleMouseMoveRotate(event: any): void;
    /**
     * 鼠标移动时缩放参数更新
     * @private
     */
    handleMouseMoveZoom(event: any): void;
    /**
     * 鼠标移动时平移参数更新
     * @private
     */
    handleMouseMovePan(event: MouseEvent): void;
    /**
     * 鼠标滚轮滚动时缩放参数更新
     * @private
     */
    handleMouseWheel(event: MouseWheelEvent): void;
    /**
     * 键盘按下时平移参数更新
     * @private
     */
    handleKeyDown(event: KeyboardEvent): void;
    /**
     * 触摸落下时旋转参数更新
     * @private
     */
    handleTouchStartRotate(event: TouchEvent): void;
    /**
     * 触摸落下时缩放参数更新
     * @private
     */
    handleTouchStartZoom(event: TouchEvent): void;
    /**
     * 触摸落下时平移参数更新
     * @private
     */
    handleTouchStartPan(event: TouchEvent): void;
    /**
     * 触摸移动时旋转参数更新
     * @private
     */
    handleTouchMoveRotate(event: TouchEvent): void;
    /**
     * 触摸移动时缩放参数更新
     * @private
     */
    handleTouchMoveZoom(event: any): void;
    /**
     * 触摸移动时平移参数更新
     * @private
     */
    handleTouchMovePan(event: TouchEvent): void;
    /**
     * 鼠标按下事件总处理
     * @private
     */
    onMouseDown(event: MouseEvent): void;
    /**
     * 鼠标移动事件总处理
     * @private
     */
    onMouseMove(event: MouseEvent): void;
    /**
     * 鼠标抬起事件总处理
     * @private
     */
    onMouseUp(): void;
    /**
     * 鼠标滚轮滚动事件处理
     * @private
     */
    onMouseWheel(event: MouseWheelEvent): void;
    /**
     * 键盘按下事件总处理
     * @private
     */
    onKeyDown(event: KeyboardEvent): void;
    /**
     * 触摸按下事件总处理
     * @private
     */
    onTouchStart(event: TouchEvent): void;
    /**
     * 触摸移动事件总处理
     * @private
     */
    onTouchMove(event: TouchEvent): void;
    /**
     * 触摸抬起事件总处理
     * @private
     */
    onTouchEnd(): void;
    /**
     * 上下文事件隐藏
     * @private
     */
    onContextMenu(event: any): void;
}
