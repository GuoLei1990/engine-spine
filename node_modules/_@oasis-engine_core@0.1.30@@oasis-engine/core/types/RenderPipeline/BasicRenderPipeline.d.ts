import { Vector4 } from "@oasis-engine/math";
import { MaskList } from "../base";
import { Camera } from "../Camera";
import { Component } from "../Component";
import { SceneVisitor } from "../SceneVisitor";
import { RenderElement } from "./RenderElement";
import { RenderPass } from "./RenderPass";
import { RenderQueue } from "./RenderQueue";
/** @todo: monorepo circle dependence */
declare type RenderTarget = any;
declare type Material = any;
/**
 * 使用指定的CameraComponent对象，渲染当前场景中的所有可见对象
 * @class
 */
export declare class BasicRenderPipeline extends SceneVisitor {
    protected _camera: Camera;
    private _opaqueQueue;
    private _transparentQueue;
    private _defaultPass;
    protected _renderPassArray: Array<RenderPass>;
    private _canvasDepthPass;
    private _separateSpritePass;
    /**
     * 构造函数
     * @param {Camera} camera 摄像机对象
     */
    constructor(camera: any);
    /**
     * 默认的 RenderPass
     */
    get defaultRenderPass(): RenderPass;
    /**
     * 添加一个 Render Pass
     * @param {string|RenderPass} nameOrPass 这个 Pass 的名称或者 RenderPass 对象，当为名称时需提供以下参数
     * @param {number} priority 优先级，小于0在默认Pass之前，大于0在默认Pass之后
     * @param {RenderTarget} renderTarget 指定的 Render Target
     * @param {Material} replaceMaterial 替换模型的默认材质
     * @param {MaskList} mask 与 Component.renderPassFlag 进行 bit and 操作，对这个 Pass 需要渲染的对象进行筛选
     * @param clearParam 清除renderTarget的背景颜色
     */
    addRenderPass(nameOrPass: string | RenderPass, priority?: number, renderTarget?: RenderTarget, replaceMaterial?: Material, mask?: MaskList, clearParam?: Vector4): void;
    /**
     * 通过名称或 RenderPass 对象移除 RenderPass
     * @param {string | RenderPass} nameOrPass RenderPass 名称
     */
    removeRenderPass(nameOrPass: string | RenderPass): void;
    /**
     * 通过名称获取 RenderPass
     * @param {string} name RenderPass 名称
     */
    getRenderPass(name: string): RenderPass;
    /**
     * 不透明对象的渲染队列
     * @member {RenderQueue}
     * @readonly
     */
    get opaqueQueue(): RenderQueue;
    /**
     * 透明对象的渲染队列
     * @member {RenderQueue}
     * @readonly
     */
    get transparentQueue(): RenderQueue;
    /**
     * 释放内部资源
     */
    destroy(): void;
    /**
     * 执行场景渲染
     */
    render(): void;
    private _drawRenderPass;
    /**
     * 将一个 Primitive 对象添加到渲染队列
     * @param {Component} component
     * @param {Primitive} primitive
     * @param {Material} mtl
     */
    pushPrimitive(element: RenderElement): void;
    /**
     * 将一个 Sprite 绘制信息添加到渲染队列
     * @param {Component} component
     * @param {Object} positionQuad  Sprite四个顶点的位置
     * @param {Object} uvRect        Sprite在texture上的纹理坐标
     * @param {vec4}   tintColor     颜色
     * @param {Texture}   texture    纹理信息
     * @param {String}    renderMode    绘制方式， '2D' 或者 '3D'
     * @param {Camera}   camera        相机信息
     */
    pushSprite(component: Component, positionQuad: any, uvRect: any, tintColor: any, texture: any, renderMode: any, camera: Camera): void;
}
export {};
