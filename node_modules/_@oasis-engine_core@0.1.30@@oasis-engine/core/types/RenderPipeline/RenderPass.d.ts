import { MaskList } from "../base";
import { Camera } from "../Camera";
import { Vector4 } from "@oasis-engine/math";
/** @todo: monorepo circle dependence */
declare type RenderTarget = any;
/**
 * RednerPass 对象
 */
declare class RenderPass {
    name: string;
    enabled: boolean;
    priority: number;
    renderTarget: RenderTarget;
    replaceMaterial: any;
    mask: MaskList;
    renderOverride: boolean;
    clearMode: any;
    private _clearParam;
    /**
     * RenderPass 构造函数
     * @param name 这个 Pass 的名称
     * @param priority 优先级，小于0在默认Pass之前，大于0在默认Pass之后
     * @param renderTarget 指定的 Render Target
     * @param replaceMaterial 替换模型的默认材质
     * @param mask 与 Component.renderPassFlag 进行 bit and 操作，对这个 Pass 需要渲染的对象进行筛选
     * @param clearParam 清除renderTarget的背景颜色
     */
    constructor(name?: string, priority?: number, renderTarget?: any, replaceMaterial?: any, mask?: any, clearParam?: Vector4);
    /**
     * 画布清除参数，默认使用 RenderTarget 的 clearColor
     * @type {*}
     */
    get clearParam(): any;
    set clearParam(v: any);
    /**
     * 用于自定义的渲染过程，若 renderOverride 设为了 true 将被执行到
     * @param {Camera} camera 相机
     * @param {RenderQueue} opaqueQueue 不透明物体渲染队列
     * @param {RenderQueue} transparentQueue 透明物体渲染队列
     */
    render(camera: Camera, opaqueQueue: any, transparentQueue: any): void;
    /**
     * Pass 渲染前调用
     * @param {Camera} camera 相机
     * @param {RenderQueue} opaqueQueue 不透明物体渲染队列
     * @param {RenderQueue} transparentQueue 透明物体渲染队列
     */
    preRender(camera: Camera, opaqueQueue: any, transparentQueue: any): void;
    /**
     * Pass 渲染后调用
     * @param {Camera} camera 相机
     * @param {RenderQueue} opaqueQueue 不透明物体渲染队列
     * @param {RenderQueue} transparentQueue 透明物体渲染队列
     */
    postRender(camera: Camera, opaqueQueue: any, transparentQueue: any): void;
}
export { RenderPass };
