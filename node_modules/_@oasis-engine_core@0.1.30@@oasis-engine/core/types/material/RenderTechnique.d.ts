import { AssetObject } from "../asset/AssetObject";
import { DataType, UniformSemantic } from "../base/Constant";
import { Camera } from "../Camera";
import { Primitive } from "../graphic";
import { Material } from "./Material";
import { Attributes, TechniqueStates, Uniforms } from "./type";
/**
 * 渲染单个对象所需的控制对象，作为 Material 的模块使用。对应 glTF 里面的 technique 对象
 */
export declare class RenderTechnique extends AssetObject {
    name: string;
    _glTechnique: any;
    isValid: boolean;
    private _uniforms;
    private _attributes;
    /**
     * 渲染状态控制对象
     * {
     *  enable:[],
     *  disable:[],
     *  functions:{
     *    "func_name":[]
     *  }
     * }
     *
     * function name: "blendColor", "blendEquationSeparate", "blendFuncSeparate",
     * "colorMask", "cullFace", "depthFunc", "depthMask", "depthRange", "frontFace",
     * "lineWidth", "polygonOffset", and "scissor"
     * @member {object}
     */
    states: TechniqueStates;
    /**
     * Vertex Shader 代码
     * @member {string}
     */
    vertexShader: string;
    /**
     * Fragment Shader 代码
     * @member {string}
     */
    fragmentShader: string;
    /**
     * GLSL 原始版本
     * 若 autoConvert = true, WebGL 2 时着色器为旧版本，则升级到 300 版本
     * @member {String} - "100" | "300 es"
     */
    version: string;
    /** 自动转换 GLSL 版本 */
    autoConvert: boolean;
    /**
     * Vertex Shader 的精度
     * @member {String}
     */
    vertexPrecision: string;
    /**
     * Fragment Shader 的精度
     * @member {String}
     */
    fragmentPrecision: string;
    /**
     * 自定义宏
     * @member {Array}
     */
    customMacros: any[];
    /**
     * WebGL 1.0 时着色器中使用的拓展
     * @member {Array}
     */
    shaderExtension100: string[];
    /**
     * WebGL 2.0 时着色器中使用的拓展
     * @member {Array}
     */
    shaderExtension300: any[];
    _needCompile: boolean;
    private _recreateHeader;
    private _vsHeader;
    private _vsCode;
    private _fsHeader;
    private _fsCode;
    private _fogMacro;
    attribLocSet: any;
    /**
     * 构造函数
     * @param {string} name 名称
     */
    constructor(name: string);
    get attributes(): Attributes;
    set attributes(v: Attributes);
    get uniforms(): Uniforms;
    set uniforms(v: Uniforms);
    compile(camera: Camera, component: any, primitive: Primitive, material: Material): void;
    getAttributeDefines(camera: Camera, component: any, primitive: Primitive, material: any): any[];
    parseFog(camera: any): void;
    createMorphConfig(primitive: Primitive, targetNum: number): {};
    static commonAttributes: {
        a_position: {
            name: string;
            semantic: string;
            type: DataType;
        };
        a_uv: {
            name: string;
            semantic: string;
            type: DataType;
        };
        a_normal: {
            name: string;
            semantic: string;
            type: DataType;
        };
        a_tangent: {
            name: string;
            semantic: string;
            type: DataType;
        };
        a_color: {
            name: string;
            semantic: string;
            type: DataType;
        };
        a_joint: {
            name: string;
            semantic: string;
            type: DataType;
        };
        a_weight: {
            name: string;
            semantic: string;
            type: DataType;
        };
    };
    static commonUniforms: {
        u_localMat: {
            name: string;
            semantic: UniformSemantic;
            type: DataType;
        };
        u_modelMat: {
            name: string;
            semantic: UniformSemantic;
            type: DataType;
        };
        u_viewMat: {
            name: string;
            semantic: UniformSemantic;
            type: DataType;
        };
        u_projMat: {
            name: string;
            semantic: UniformSemantic;
            type: DataType;
        };
        u_MVMat: {
            name: string;
            semantic: UniformSemantic;
            type: DataType;
        };
        u_MVPMat: {
            name: string;
            semantic: UniformSemantic;
            type: DataType;
        };
        u_normalMat: {
            name: string;
            semantic: UniformSemantic;
            type: DataType;
        };
        u_cameraPos: {
            name: string;
            type: DataType;
            semantic: UniformSemantic;
        };
        u_time: {
            name: string;
            type: DataType;
            semantic: UniformSemantic;
        };
        u_jointMatrix: {
            name: string;
            semantic: UniformSemantic;
            type: DataType;
        };
        u_jointSampler: {
            name: string;
            semantic: UniformSemantic;
            type: DataType;
        };
        u_jointCount: {
            name: string;
            semantic: UniformSemantic;
            type: DataType;
        };
        u_fogColor: {
            name: string;
            type: DataType;
        };
        u_fogDensity: {
            name: string;
            type: DataType;
        };
        u_fogNear: {
            name: string;
            type: DataType;
        };
        u_fogFar: {
            name: string;
            type: DataType;
        };
    };
    _finalize(): void;
}
