import { RenderColorTexture } from "./RenderColorTexture";
import { RenderDepthTexture } from "./RenderDepthTexture";
import { AssetObject } from "../asset/AssetObject";
import { RenderBufferDepthFormat, TextureCubeFace } from "../base/Constant";
import { Engine } from "../Engine";
/**
 * 用于离屏幕渲染的渲染目标。
 */
export declare class RenderTarget extends AssetObject {
    _frameBuffer: WebGLFramebuffer;
    _MSAAFrameBuffer: WebGLFramebuffer | null;
    private _rhi;
    private _width;
    private _height;
    private _antiAliasing;
    private _colorTextures;
    private _depthTexture;
    private _depthRenderBuffer;
    private _MSAAColorRenderBuffers;
    private _MSAADepthRenderBuffer;
    private _oriDrawBuffers;
    private _blitDrawBuffers;
    /** 渲染目标宽。 */
    get width(): number;
    /** 渲染目标高。 */
    get height(): number;
    /**
     * 颜色纹理数量。
     */
    get colorTextureCount(): number;
    /**
     * 深度纹理。
     */
    get depthTexture(): RenderDepthTexture | null;
    /**
     * 抗锯齿级别。
     * 如果设置的抗锯齿级别大于硬件支持的最大级别，将使用硬件的最大级别。
     */
    get antiAliasing(): number;
    /**
     * 通过颜色纹理和深度格式创建渲染目标，使用内部深度缓冲，无法获取深度纹理。
     * @param width - 宽
     * @param height - 高
     * @param colorTexture - 颜色纹理
     * @param depthFormat - 深度格式,默认 RenderBufferDepthFormat.Depth,自动选择精度
     * @param antiAliasing - 抗锯齿级别,默认 1
     * @param engine - 可选引擎
     */
    constructor(width: number, height: number, colorTexture: RenderColorTexture, depthFormat?: RenderBufferDepthFormat, antiAliasing?: number, engine?: Engine);
    /**
     * 通过颜色纹理和深度纹理创建渲染目标。不传颜色纹理时，只生成深度纹理
     * @param width - 宽
     * @param height - 高
     * @param colorTexture - 颜色纹理
     * @param depthTexture - 深度纹理
     * @param antiAliasing - 抗锯齿级别,默认 1
     * @param engine - 可选引擎
     */
    constructor(width: number, height: number, colorTexture: RenderColorTexture | null, depthTexture: RenderDepthTexture, antiAliasing?: number, engine?: Engine);
    /**
     * 通过颜色纹理数组和深度格式创建渲染目标，使用内部深度缓冲，无法获取深度纹理。
     * @param width - 宽
     * @param height - 高
     * @param colorTextures - 颜色纹理数组
     * @param depthFormat - 深度格式,默认 RenderBufferDepthFormat.Depth,自动选择精度
     * @param antiAliasing - 抗锯齿级别,默认 1
     * @param engine - 可选引擎
     */
    constructor(width: number, height: number, colorTextures: RenderColorTexture[], depthFormat?: RenderBufferDepthFormat, antiAliasing?: number, engine?: Engine);
    /**
     * 通过颜色纹理数组和深度纹理创建渲染目标。
     * @param width - 宽
     * @param height - 高
     * @param colorTextures - 颜色纹理数组
     * @param depthTexture - 深度纹理
     * @param antiAliasing - 抗锯齿级别,默认 1
     * @param engine - 可选引擎
     */
    constructor(width: number, height: number, colorTextures: RenderColorTexture[], depthTexture: RenderDepthTexture, antiAliasing?: number, engine?: Engine);
    /**
     * 通过索引获取颜色纹理。
     * @param index
     */
    getColorTexture(index?: number): RenderColorTexture | null;
    /**
     * 销毁。
     */
    destroy(): void;
    /**
     * 激活 RenderTarget 对象
     * 如果开启 MSAA,则激活 MSAA FBO,后续进行 this._blitRenderTarget() 进行交换 FBO
     * 如果未开启 MSAA,则激活主 FBO
     */
    _activeRenderTarget(): void;
    /**
     * 设置渲染到立方体纹理的哪个面
     * @param faceIndex - 立方体纹理面
     */
    _setRenderTargetFace(faceIndex: TextureCubeFace): void;
    /**
     * Blit FBO.
     */
    _blitRenderTarget(): void;
    /**
     * 绑定主 FBO
     */
    private _bindMainFBO;
    /**
     * 绑定 MSAA FBO
     */
    private _bindMSAAFBO;
    /**
     * 检查 FBO
     */
    private _checkFrameBuffer;
}
