import { EngineObject } from "./EngineObject";
import { Event } from "./Event";
/**
 * 事件派发管理，可作为基类继承
 * @class
 */
export declare class EventDispatcher extends EngineObject {
    private _evts;
    private _evtCount;
    /**
     * 判断是否有事件监听。
     * @param event 事件名
     * @returns 返回是否有对应事件
     */
    hasEvent(event: string): boolean;
    /**
     * 返回注册的所有事件名。
     * @returns 所有的事件名
     */
    eventNames(): string[];
    /**
     * 返回指定事件名的监听函数的数量。
     * @param event 事件名
     * @returns 监听函数的数量
     */
    listenerCount(event: string): number;
    /**
     * 派发指定事件名的事件。
     * @param event 事件名
     * @param data 数据
     * @returns 派发事件是否成功
     */
    dispatch(event: string, data?: any): boolean;
    /**
     * 添加监听函数。
     * @param event 事件名
     * @param fn 函数
     * @returns this
     */
    on(event: string, fn: Function): EventDispatcher;
    /**
     * 添加一次性的监听函数。
     * @param event 事件名
     * @param fn 函数
     * @returns this
     */
    once(event: string, fn: Function): EventDispatcher;
    /**
     * @deprecated 使用 on/once 替换
     * 添加指定事件名的监听函数。
     * @param event 事件名
     * @param fn 函数
     * @param once 是否是一次性监听
     * @returns this
     */
    addEventListener(event: string, fn: Function, once?: boolean): EventDispatcher;
    off(event: string, fn?: Function): EventDispatcher;
    /**
     * @deprecated 使用
     * 移除指定事件名的事件监听。
     * @param event - 事件名
     * @param fn - 函数，若不传则删除所有对应的事件监听
     */
    removeEventListener(event: string, fn?: Function): EventDispatcher;
    /**
     * 移除所有的事件监听。
     * @param event - 事件名，若不传则删除所有事件
     */
    removeAllEventListeners(event?: string): void;
    /**
     * @deprecated 使用 dispatch 替换
     * @param - 事件
     */
    trigger(e: Event): void;
    private _clearEvent;
}
