import { Engine } from "../Engine";
import { CommonMaterial } from "./CommonMaterial";
/**
 * 实现 Lambert 光照模型的材质
 * color = <emission> + <ambient> * al + <diffuse> * max(N * L, 0)
 */
export declare class LambertMaterial extends CommonMaterial {
    private _directLightCount;
    /**
     * Lambert 光照模型材质
     * @param {String} name 名称
     */
    constructor(engine: Engine, name: any);
    /**
     * 环境光反射颜色
     * @member {Vector4|Texture2D}
     */
    get diffuse(): any;
    set diffuse(val: any);
    /**
     * 生成内部的 Technique 对象
     * @private
     */
    _generateTechnique(): void;
    /**
     * 重写基类方法，添加方向光计算
     * @private
     */
    prepareDrawing(context: any, component: any, primitive: any): void;
    /**
     * 添加方向光相关的 uniform 定义
     * @private
     */
    _generateFragmentUniform(): any;
    /**
     * 根据方向光的个数，添加相应的宏定义
     * @private
     */
    _generateMacros(): any[];
}
