import { IClone } from "@oasis-engine/design";
import { Matrix } from "./Matrix";
import { Quaternion } from "./Quaternion";
import { Vector2 } from "./Vector2";
/**
 * 3x3矩阵，我们采用列矩阵的模式存储
 */
export declare class Matrix3x3 implements IClone {
    /**
     * 将两个矩阵相加。
     * @param left - 左矩阵
     * @param right - 右矩阵
     * @param out - 矩阵相加的结果
     */
    static add(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void;
    /**
     * 将两个矩阵相减。
     * @param left - 左矩阵
     * @param right - 右矩阵
     * @param out - 矩阵相减的结果
     */
    static subtract(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void;
    /**
     * 将两个矩阵相乘。
     * @param left - 左矩阵
     * @param right - 右矩阵
     * @param out - 矩阵相乘的结果
     */
    static multiply(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void;
    /**
     * 判断两个矩阵的值是否相等。
     * @param left - 左矩阵
     * @param right - 右矩阵
     * @returns 两个矩阵是否相等，是返回 true，否则返回 false
     */
    static equals(left: Matrix3x3, right: Matrix3x3): boolean;
    /**
     * 从四元数转换为一个3x3矩阵。
     * @param q - 四元数
     * @param out - 转换后的3x3矩阵
     */
    static rotationQuaternion(q: Quaternion, out: Matrix3x3): void;
    /**
     * 通过指定缩放生成3x3矩阵。
     * @param s - 缩放向量
     * @param out - 指定缩放后矩阵
     */
    static scaling(s: Vector2, out: Matrix3x3): void;
    /**
     * 通过指定平移生成3x3矩阵。
     * @param trans - 平移向量
     * @param out - 指定平移后矩阵
     */
    static translation(trans: Vector2, out: Matrix3x3): void;
    /**
     * 计算矩阵 a 的逆矩阵，并将结果输出到 out。
     * @param a - 矩阵
     * @param out - 逆矩阵
     */
    static invert(a: Matrix3x3, out: Matrix3x3): void;
    /**
     * 从4x4矩阵中计算出3x3法线矩阵。
     * @remarks 计算过程为求逆矩阵的转置矩阵。
     * @param mat4 - 4x4矩阵
     * @param out - 3x3法线矩阵
     */
    static normalMatrix(mat4: Matrix, out: Matrix3x3): void;
    /**
     * 将矩阵 a 按给定角度旋转，并将结果输出到 out。
     * @param a - 矩阵
     * @param r - 给定的旋转角度(单位：弧度)
     * @param out - 旋转后的矩阵
     */
    static rotate(a: Matrix3x3, r: number, out: Matrix3x3): void;
    /**
     * 将矩阵 a 按给定向量 v 缩放，并将结果输出到 out。
     * @param m - 矩阵
     * @param s - 缩放向量
     * @param out - 缩放后的矩阵
     */
    static scale(m: Matrix3x3, s: Vector2, out: Matrix3x3): void;
    /**
     * 将矩阵 a 按给定向量 v 转换，并将结果输出到 out。
     * @param m - 矩阵
     * @param trans - 转换向量
     * @param out - 转换后的结果
     */
    static translate(m: Matrix3x3, trans: Vector2, out: Matrix3x3): void;
    /**
     * 计算矩阵 a 的转置矩阵，并将结果输出到 out。
     * @param a - 矩阵
     * @param out - 转置矩阵
     */
    static transpose(a: Matrix3x3, out: Matrix3x3): void;
    /**
     * 矩阵元素数组，采用列矩阵的模式存储。
     * @remarks
     * elements[0] 表示第 1 列第 1 行 m11
     * elements[1] 表示第 1 列第 2 行 m12
     * elements[2] 表示第 1 列第 3 行 m13
     * elements[3] 表示第 2 列第 1 行 m21
     * 依次类推
     */
    elements: Float32Array;
    /**
     * 创建3x3矩阵实例，默认创建单位矩阵，采用列矩阵的模式存储。
     * @param m11 - 默认值1 column 1, row 1
     * @param m12 - 默认值0 column 1, row 2
     * @param m13 - 默认值0 column 1, row 3
     * @param m21 - 默认值0 column 2, row 1
     * @param m22 - 默认值1 column 2, row 2
     * @param m23 - 默认值0 column 2, row 3
     * @param m31 - 默认值0 column 3, row 1
     * @param m32 - 默认值0 column 3, row 2
     * @param m33 - 默认值1 column 3, row 3
     */
    constructor(m11?: number, m12?: number, m13?: number, m21?: number, m22?: number, m23?: number, m31?: number, m32?: number, m33?: number);
    /**
     * 给矩阵设置值，并返回当前值。
     * @param m11
     * @param m12
     * @param m13
     * @param m21
     * @param m22
     * @param m23
     * @param m31
     * @param m32
     * @param m33
     * @returns 当前矩阵
     */
    setValue(m11: number, m12: number, m13: number, m21: number, m22: number, m23: number, m31: number, m32: number, m33: number): Matrix3x3;
    /**
     * 通过数组设置值，并返回当前矩阵。
     * @param array - 数组
     * @param offset - 数组偏移
     * @returns 当前矩阵
     */
    setValueByArray(array: ArrayLike<number>, offset?: number): Matrix3x3;
    /**
     * 从4x4矩阵转换为一个3x3矩阵，upper-left 原则，即忽略第4行第4列。
     * @param a - 4x4矩阵
     * @returns 当前矩阵
     */
    setValueByMatrix(a: Matrix): Matrix3x3;
    /**
     * 拷贝到数组。
     * @param out - 数组。
     * @param outOffset - 数组偏移。
     */
    toArray(out: number[] | Float32Array | Float64Array, outOffset?: number): void;
    /**
     * 创建一个新的矩阵，并用当前矩阵值初始化。
     * @returns 一个新的矩阵，并且拷贝当前矩阵的值
     */
    clone(): Matrix3x3;
    /**
     * 将当前矩阵值拷贝给 out 矩阵。
     * @param out - 目标矩阵
     */
    cloneTo(out: Matrix3x3): Matrix3x3;
    /**
     * 将当前矩阵加上给定的向量 right，并返回当前矩阵。
     * @param right - 给定的向量，右操作数
     * @returns 当前矩阵
     */
    add(right: Matrix3x3): Matrix3x3;
    /**
     * 将当前矩阵减去给定的向量 right，并返回当前矩阵。
     * @param right - 给定的向量，右操作数
     * @returns 当前矩阵
     */
    subtract(right: Matrix3x3): Matrix3x3;
    /**
     * 将当前矩阵乘以给定的向量 right，并返回当前矩阵。
     * @param right - 给定的向量，右操作数
     * @returns 当前矩阵
     */
    multiply(right: Matrix3x3): Matrix3x3;
    /**
     * 计算3x3矩阵的行列式。
     * @returns 当前矩阵的行列式
     */
    determinant(): number;
    /**
     * 将矩阵设置为单位矩阵，并返回。
     * @returns 当前矩阵
     */
    identity(): Matrix3x3;
    /**
     * 计算当前矩阵的逆矩阵，并返回。
     * @returns 当前矩阵
     */
    invert(): Matrix3x3;
    /**
     * 将当前矩阵按给定角度旋转，并返回。
     * @param r - 给定的旋转角度(单位：弧度)
     * @returns 当前矩阵
     */
    rotate(r: number): Matrix3x3;
    /**
     * 将当前矩阵按给定向量 v 缩放，并返回。
     * @param s - 缩放向量
     * @returns 当前矩阵
     */
    scale(s: Vector2): Matrix3x3;
    /**
     * 将当前矩阵按给定向量 v 转换，并返回。
     * @param trans - 转换向量
     * @returns 当前矩阵
     */
    translate(trans: Vector2): Matrix3x3;
    /**
     * 计算当前矩阵的转置矩阵，并返回。
     * @returns 当前矩阵
     */
    transpose(): Matrix3x3;
}
