import { Vector3 } from "./Vector3";
/**
 * 射线。
 */
export declare class Ray {
    /** 射线的起点。*/
    readonly origin: Vector3;
    /** 射线的归一化方向。*/
    readonly direction: Vector3;
    /**
     * 创建射线实例。
     * @param origin - 起点
     * @param direction - 归一化方向
     */
    constructor(origin?: Vector3, direction?: Vector3);
    /**
     * 检测本射线与平面相交
     * @param {Vector3} point 平面上的一个点：(p-p0)·n = 0
     * @param {Vector3} normal 平面的法线
     */
    intersectPlane(point: Vector3, normal: Vector3): number | false;
    /**
     * 射线方向上，距离起点指定距离的坐标
     * @param {number} distance 距离
     */
    getPoint(distance: number): Vector3;
    /**
     * 检测本射线与球体相交
     * @param {Vector3} center 球心坐标
     * @param {number} radius 球的半径
     */
    intersectSphere(center: Vector3, radius: number): number | false;
    /**
     * 检测本射线与轴对齐的Box的相交
     * @param {Vector3} max Box的最大点
     * @param {Vector3} min Box的最小点
     */
    intersectAABB(max: Vector3, min: Vector3): number | false;
    /**
     * solve: ax^2 + bx + c = 0
     * @returns {null|array} null: no answers; [x0 : float, x1 : float] where x0 <= x1
     */
    private _solveQuadratic;
}
