import { Matrix, Quaternion, Vector3 } from "@oasis-engine/math";
import { Component } from "./Component";
import { UpdateFlag } from "./UpdateFlag";
/**
 * 用于实现变换相关功能。
 */
export declare class Transform extends Component {
    private static _tempQuat0;
    private static _tempVec3;
    private static _tempMat30;
    private static _tempMat31;
    private static _tempMat32;
    private static _tempMat40;
    private static _tempMat41;
    private static _tempMat42;
    private static _tempMat43;
    private static _LOCAL_EULER_FLAG;
    private static _LOCAL_QUAT_FLAG;
    private static _WORLD_POSITION_FLAG;
    private static _WORLD_EULER_FLAG;
    private static _WORLD_QUAT_FLAG;
    private static _WORLD_SCALE_FLAG;
    private static _LOCAL_MATRIX_FLAG;
    private static _WORLD_MATRIX_FLAG;
    /** _WORLD_MATRIX_FLAG | _WORLD_POSITION_FLAG */
    private static _WM_WP_FLAGS;
    /** _WORLD_MATRIX_FLAG | _WORLD_EULER_FLAG | _WORLD_QUAT_FLAG */
    private static _WM_WE_WQ_FLAGS;
    /** _WORLD_MATRIX_FLAG | _WORLD_POSITION_FLAG | _WORLD_EULER_FLAG ｜ _WORLD_QUAT_FLAG */
    private static _WM_WP_WE_WQ_FLAGS;
    /** Transform._WORLD_MATRIX_FLAG | Transform._WORLD_SCALE_FLAG */
    private static _WM_WS_FLAGS;
    /** Transform._WORLD_MATRIX_FLAG | Transform._WORLD_POSITION_FLAG | Transform._WORLD_SCALE_FLAG */
    private static _WM_WP_WS_FLAGS;
    /** Transform._WORLD_MATRIX_FLAG | Transform._WORLD_POSITION_FLAG | Transform._WORLD_EULER_FLAG | Transform._WORLD_QUAT_FLAG | Transform._WORLD_SCALE_FLAG */
    private static _WM_WP_WE_WQ_WS_FLAGS;
    private _position;
    private _rotation;
    private _rotationQuaternion;
    private _scale;
    private _worldPosition;
    private _worldRotation;
    private _worldRotationQuaternion;
    private _lossyWorldScale;
    private _localMatrix;
    private _worldMatrix;
    private _changeFlags;
    private _isParentDirty;
    private _parentTransformCache;
    private _dirtyFlag;
    /**
     * 局部位置。
     * @remarks 修改后需要重新赋值,保证修改生效。
     */
    get position(): Vector3;
    set position(value: Vector3);
    /**
     * 世界位置。
     * @remarks 修改后需要重新赋值,保证修改生效。
     */
    get worldPosition(): Vector3;
    set worldPosition(value: Vector3);
    /**
     * 局部旋转，欧拉角表达，单位是角度制，欧拉角的旋转顺序为 Yaw、Pitch、Roll。
     * @remarks 修改后需要重新赋值,保证修改生效。
     */
    get rotation(): Vector3;
    set rotation(value: Vector3);
    /**
     * 世界旋转，欧拉角表达，单位是角度制，欧拉角的旋转顺序为 Yaw、Pitch、Roll。
     * @remarks 修改后需要重新赋值,保证修改生效。
     */
    get worldRotation(): Vector3;
    set worldRotation(value: Vector3);
    /**
     * 局部旋转，四元数表达。
     * @remarks 修改后需要重新赋值,保证修改生效。
     */
    get rotationQuaternion(): Quaternion;
    set rotationQuaternion(value: Quaternion);
    /**
     * 世界旋转，四元数表达。
     * @remarks 修改后需要重新赋值,保证修改生效。
     */
    get worldRotationQuaternion(): Quaternion;
    set worldRotationQuaternion(value: Quaternion);
    /**
     * 局部缩放。
     * @remarks 修改后需要重新赋值,保证修改生效。
     */
    get scale(): Vector3;
    set scale(value: Vector3);
    /**
     * 世界有损缩放。
     * @remarks 某种条件下获取该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用 Vector3 正确表示,必须使用 Matrix3x3 矩阵才能正确表示。
     */
    get lossyWorldScale(): Vector3;
    /**
     * 局部矩阵。
     * @remarks 修改后需要重新赋值,保证修改生效。
     */
    get localMatrix(): Matrix;
    set localMatrix(value: Matrix);
    /**
     * 世界矩阵。
     * @remarks 修改后需要重新赋值,保证修改生效。
     */
    get worldMatrix(): Matrix;
    set worldMatrix(value: Matrix);
    /**
     * 通过位置的 X Y Z 设置局部位置。
     * @param x - 位置的 X 坐标
     * @param y - 位置的 Y 坐标
     * @param z - 位置的 Z 坐标
     */
    setPosition(x: number, y: number, z: number): void;
    /**
     * 通过欧拉角的 X、Y、Z 分量设置局部旋转，单位是角度制，欧拉角的旋转顺序为 Yaw、Pitch、Roll。
     * @param x - 绕 X 轴旋转的角度
     * @param y - 绕 Y 轴旋转的角度
     * @param z - 绕 Z 轴旋转的角度
     */
    setRotation(x: number, y: number, z: number): void;
    /**
     * 通过四元数的 X、Y、Z、W 分量设置局部旋转。
     * @param x - 四元数的 X 分量
     * @param y - 四元数的 Y 分量
     * @param z - 四元数的 Z 分量
     * @param w - 四元数的 W 分量
     */
    setRotationQuaternion(x: number, y: number, z: number, w: number): void;
    /**
     * 通过沿 X、Y、Z 的缩放值设置局部缩放。
     * @param x - 沿 X 缩放
     * @param y - 沿 Y 缩放
     * @param z - 沿 Z 缩放
     */
    setScale(x: number, y: number, z: number): void;
    /**
     * 通过位置的 X Y Z 设置世界位置。
     * @param x - 位置的 X 坐标
     * @param y - 位置的 Y 坐标
     * @param z - 位置的 Z 坐标
     */
    setWorldPosition(x: number, y: number, z: number): void;
    /**
     * 通过欧拉角的 X、Y、Z 分量设置世界旋转，单位是角度制，欧拉角的旋转顺序为 Yaw、Pitch、Roll。
     * @param x - 绕 X 轴旋转的角度
     * @param y - 绕 Y 轴旋转的角度
     * @param z - 绕 Z 轴旋转的角度
     */
    setWorldRotation(x: number, y: number, z: number): void;
    /**
     * 通过四元数的 X、Y、Z、W 分量设置世界旋转。
     * @param x - 四元数的 X 分量
     * @param y - 四元数的 Y 分量
     * @param z - 四元数的 Z 分量
     * @param w - 四元数的 W 分量
     */
    setWorldRotationQuaternion(x: number, y: number, z: number, w: number): void;
    /**
     * 获取世界矩阵的前向量。
     * @param forward - 前向量
     * @returns 前向量
     */
    getWorldForward(forward: Vector3): Vector3;
    /**
     * 获取世界矩阵的右向量。
     * @param right - 右向量
     * @returns 右向量
     */
    getWorldRight(right: Vector3): Vector3;
    /**
     * 获取世界矩阵的上向量。
     * @param up - 上向量
     * @returns 上向量
     */
    getWorldUp(up: Vector3): Vector3;
    /**
     * 在指定的方向和距离上位移。
     * @param translation - 位移的方向和距离
     * @param relativeToLocal - 是否相对局部空间
     */
    translate(translation: Vector3, relativeToLocal?: boolean): void;
    /**
     * 在指定的方向和距离上位移。
     * @param x - X 轴的位移的方向和距离
     * @param y - Y 轴的位移的方向和距离
     * @param z - Z 轴的位移的方向和距离
     * @param relativeToLocal - 是否相对局部空间
     */
    translateXYZ(x: number, y: number, z: number, relativeToLocal?: boolean): void;
    /**
     * 根据指定欧拉角旋转。
     * @param rotation - 旋转角度，欧拉角表达，单位是角度制
     * @param relativeToLocal - 是否相对局部空间
     */
    rotate(rotation: Vector3, relativeToLocal?: boolean): void;
    /**
     * 根据指定欧拉角旋转。
     * @param x - X 轴旋转角度,单位是角度制
     * @param y - Y 轴旋转角度,单位是角度制
     * @param z - Z 轴旋转角度,单位是角度制
     * @param relativeToLocal - 是否相对局部空间
     */
    rotateXYZ(x: number, y: number, z: number, relativeToLocal?: boolean): void;
    /**
     * 根据指定角度围绕指定轴进行旋转。
     * @param axis - 旋转轴
     * @param angle - 旋转角度，单位是角度制
     * @param relativeToLocal - 是否相对局部空间
     */
    rotateByAxis(axis: Vector3, angle: number, relativeToLocal?: boolean): void;
    /**
     * 旋转并且保证世界前向量指向目标世界位置。
     * @param worldPosition - 目标世界位置
     * @param worldUp - 世界上向量，默认是 Vector3(0, 1, 0)
     */
    lookAt(worldPosition: Vector3, worldUp?: Vector3): void;
    /**
     * 注册世界变换改变标记。
     * @returns 改变标记
     */
    registerWorldChangeFlag(): UpdateFlag;
    /**
     * 获取 worldMatrix：会触发自身以及所有父节点的worldMatrix更新
     * 获取 worldPosition：会触发自身 position 和自身 worldMatrix 以及所有父节点的 worldMatrix 更新
     * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix）的脏标记为 false
     */
    private _updateWorldPositionFlag;
    /**
     * 获取worldMatrix：会触发自身以及所有父节点的worldMatrix更新
     * 获取worldPosition：会触发自身position和自身worldMatrix以及所有父节点的worldMatrix更新
     * 获取worldRotationQuaternion：会触发自身以及所有父节点的worldRotationQuaternion更新
     * 获取worldRotation：会触发自身worldRotation和自身worldRotationQuaternion以及所有父节点的worldRotationQuaternion更新
     * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix或orldRotationQuaternion）的脏标记为false
     */
    private _updateWorldRotationFlag;
    /**
     * 获取 worldMatrix：会触发自身以及所有父节点的 worldMatrix 更新
     * 获取 worldPosition：会触发自身 position 和自身 worldMatrix 以及所有父节点的 worldMatrix 更新
     * 获取 worldRotationQuaternion：会触发自身以及所有父节点的 worldRotationQuaternion 更新
     * 获取 worldRotation：会触发自身 worldRotation 和自身 worldRotationQuaternion 以及所有父节点的worldRotationQuaternion更新
     * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix 或 worldRotationQuaternion）的脏标记为false
     */
    private _updateWorldPositionAndRotationFlag;
    /**
     * 获取 worldMatrix：会触发自身以及所有父节点的 worldMatrix 更新
     * 获取 worldPosition：会触发自身 position 和自身 worldMatrix 以及所有父节点的 worldMatrix 更新
     * 获取 worldScale：会触发自身以及所有父节点的 worldMatrix 更新
     * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix）的脏标记为 false。
     */
    private _updateWorldScaleFlag;
    /**
     * 获取 worldMatrix：会触发自身以及所有父节点的 worldMatrix 更新
     * 获取 worldPosition：会触发自身 position 和自身 worldMatrix 以及所有父节点的 worldMatrix 更新
     * 获取 worldScale：会触发自身以及所有父节点的worldMatrix更新
     * 综上所述：任何一个相关变量更新都会造成其中一条完成链路（worldMatrix）的脏标记为 false。
     */
    private _updateWorldPositionAndScaleFlag;
    /**
     * 更新所有世界标记，原理同上。
     */
    private _updateAllWorldFlag;
    private _getParentTransform;
    private _getScaleMatrix;
    private _isContainDirtyFlags;
    private _isContainDirtyFlag;
    private _setDirtyFlagTrue;
    private _setDirtyFlagFalse;
    private _worldAssociatedChange;
    private _rotateByQuat;
}
