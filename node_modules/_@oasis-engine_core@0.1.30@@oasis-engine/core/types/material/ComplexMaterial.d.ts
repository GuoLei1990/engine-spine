import { Engine } from "../Engine";
import { Material } from "./Material";
/**
 * 管理多个 Technique, 根据渲染的需要自动切换内部的 Technique 对象
 * @remarks 典型应用：Shadow Mapping 算法中，场景使用一个统一的 replace material 渲染深度贴图
 */
export declare class ComplexMaterial extends Material {
    private _techniquePool;
    /**
     * 构造函数
     * @param {string} name 名称
     */
    constructor(engine: Engine, name: any);
    /**
     * 在绘制之前，准备好内部的 Technique 对象
     */
    prepareDrawing(context: any, component: any, primitive: any): void;
    /**
     * 清空所有Technique。
     */
    clearTechniques(): void;
    /**
     * 根据当前对象的渲染需求，取得一个可用的 Technique
     */
    _requireTechnique(camera: any, component: any, primitive: any): any;
    /**
     * 由派生类去实现，针对某个特定的对象，生成一个新的它所需要的 Technique 对象
     */
    _generateTechnique(camera: any, component: any, primitive: any): void;
    /**
     * 按照当前对象是否为 skin、骨骼个数，生成一个 Technique 的索引字符串
     */
    _getTechniqueKey(camera: any, component: any, primitive: any): string;
}
