(function (e, t) {
  "object" === typeof exports && "object" === typeof module
    ? (module.exports = t())
    : "function" === typeof define && define.amd
    ? define("@alipay/nian-game-oasis", [], t)
    : "object" === typeof exports
    ? (exports["@alipay/nian-game-oasis"] = t())
    : (e["nianGameOasis"] = t());
})(this, function () {
  return (function (e) {
    var t = {};
    function n(i) {
      if (t[i]) return t[i].exports;
      var r = (t[i] = { i: i, l: !1, exports: {} });
      return e[i].call(r.exports, r, r.exports, n), (r.l = !0), r.exports;
    }
    return (
      (n.m = e),
      (n.c = t),
      (n.d = function (e, t, i) {
        n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: i });
      }),
      (n.r = function (e) {
        "undefined" !== typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
          Object.defineProperty(e, "__esModule", { value: !0 });
      }),
      (n.t = function (e, t) {
        if ((1 & t && (e = n(e)), 8 & t)) return e;
        if (4 & t && "object" === typeof e && e && e.__esModule) return e;
        var i = Object.create(null);
        if ((n.r(i), Object.defineProperty(i, "default", { enumerable: !0, value: e }), 2 & t && "string" != typeof e))
          for (var r in e)
            n.d(
              i,
              r,
              function (t) {
                return e[t];
              }.bind(null, r)
            );
        return i;
      }),
      (n.n = function (e) {
        var t =
          e && e.__esModule
            ? function () {
                return e["default"];
              }
            : function () {
                return e;
              };
        return n.d(t, "a", t), t;
      }),
      (n.o = function (e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      }),
      (n.p = "/"),
      n((n.s = 0))
    );
  })({
    0: function (e, t, n) {
      e.exports = n("2YZa");
    },
    "2YZa": function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        (function (e) {
          (e[(e["Disjoint"] = 0)] = "Disjoint"),
            (e[(e["Contains"] = 1)] = "Contains"),
            (e[(e["Intersects"] = 2)] = "Intersects");
        })(i || (i = {})),
        (function (e) {
          (e[(e["Back"] = 0)] = "Back"), (e[(e["Front"] = 1)] = "Front"), (e[(e["Intersecting"] = 2)] = "Intersecting");
        })(r || (r = {}));
      var a = (function () {
        function e() {}
        return (
          (e.clamp = function (e, t, n) {
            return Math.max(t, Math.min(n, e));
          }),
          (e.equals = function (t, n) {
            return Math.abs(t - n) <= e.zeroTolerance;
          }),
          (e.isPowerOf2 = function (e) {
            return 0 === (e & (e - 1));
          }),
          (e.radianToDegree = function (t) {
            return t * e.radToDegreeFactor;
          }),
          (e.degreeToRadian = function (t) {
            return t * e.degreeToRadFactor;
          }),
          e
        );
      })();
      (a.zeroTolerance = 1e-6), (a.radToDegreeFactor = 180 / Math.PI), (a.degreeToRadFactor = Math.PI / 180);
      var o = (function () {
        function e(e, t, n) {
          void 0 === e && (e = 0),
            void 0 === t && (t = 0),
            void 0 === n && (n = 0),
            (this.x = void 0),
            (this.y = void 0),
            (this.z = void 0),
            (this.x = e),
            (this.y = t),
            (this.z = n);
        }
        (e.add = function (e, t, n) {
          (n.x = e.x + t.x), (n.y = e.y + t.y), (n.z = e.z + t.z);
        }),
          (e.subtract = function (e, t, n) {
            (n.x = e.x - t.x), (n.y = e.y - t.y), (n.z = e.z - t.z);
          }),
          (e.multiply = function (e, t, n) {
            (n.x = e.x * t.x), (n.y = e.y * t.y), (n.z = e.z * t.z);
          }),
          (e.divide = function (e, t, n) {
            (n.x = e.x / t.x), (n.y = e.y / t.y), (n.z = e.z / t.z);
          }),
          (e.dot = function (e, t) {
            return e.x * t.x + e.y * t.y + e.z * t.z;
          }),
          (e.cross = function (e, t, n) {
            var i = e.x,
              r = e.y,
              a = e.z,
              o = t.x,
              s = t.y,
              c = t.z;
            (n.x = r * c - a * s), (n.y = a * o - i * c), (n.z = i * s - r * o);
          }),
          (e.distance = function (e, t) {
            var n = t.x - e.x,
              i = t.y - e.y,
              r = t.z - e.z;
            return Math.sqrt(n * n + i * i + r * r);
          }),
          (e.distanceSquared = function (e, t) {
            var n = t.x - e.x,
              i = t.y - e.y,
              r = t.z - e.z;
            return n * n + i * i + r * r;
          }),
          (e.equals = function (e, t) {
            return a.equals(e.x, t.x) && a.equals(e.y, t.y) && a.equals(e.z, t.z);
          }),
          (e.lerp = function (e, t, n, i) {
            var r = e.x,
              a = e.y,
              o = e.z;
            (i.x = r + (t.x - r) * n), (i.y = a + (t.y - a) * n), (i.z = o + (t.z - o) * n);
          }),
          (e.max = function (e, t, n) {
            (n.x = Math.max(e.x, t.x)), (n.y = Math.max(e.y, t.y)), (n.z = Math.max(e.z, t.z));
          }),
          (e.min = function (e, t, n) {
            (n.x = Math.min(e.x, t.x)), (n.y = Math.min(e.y, t.y)), (n.z = Math.min(e.z, t.z));
          }),
          (e.negate = function (e, t) {
            (t.x = -e.x), (t.y = -e.y), (t.z = -e.z);
          }),
          (e.normalize = function (e, t) {
            var n = e.x,
              i = e.y,
              r = e.z,
              a = Math.sqrt(n * n + i * i + r * r);
            a > 0 && ((a = 1 / a), (t.x = n * a), (t.y = i * a), (t.z = r * a));
          }),
          (e.scale = function (e, t, n) {
            (n.x = e.x * t), (n.y = e.y * t), (n.z = e.z * t);
          }),
          (e.transformNormal = function (e, t, n) {
            var i = e.x,
              r = e.y,
              a = e.z,
              o = t.elements;
            (n.x = i * o[0] + r * o[4] + a * o[8]),
              (n.y = i * o[1] + r * o[5] + a * o[9]),
              (n.z = i * o[2] + r * o[6] + a * o[10]);
          }),
          (e.transformToVec3 = function (e, t, n) {
            var i = e.x,
              r = e.y,
              a = e.z,
              o = t.elements;
            (n.x = i * o[0] + r * o[4] + a * o[8] + o[12]),
              (n.y = i * o[1] + r * o[5] + a * o[9] + o[13]),
              (n.z = i * o[2] + r * o[6] + a * o[10] + o[14]);
          }),
          (e.transformToVec4 = function (e, t, n) {
            var i = e.x,
              r = e.y,
              a = e.z,
              o = t.elements;
            (n.x = i * o[0] + r * o[4] + a * o[8] + o[12]),
              (n.y = i * o[1] + r * o[5] + a * o[9] + o[13]),
              (n.z = i * o[2] + r * o[6] + a * o[10] + o[14]),
              (n.w = i * o[3] + r * o[7] + a * o[11] + o[15]);
          }),
          (e.transformCoordinate = function (e, t, n) {
            var i = e.x,
              r = e.y,
              a = e.z,
              o = t.elements,
              s = i * o[3] + r * o[7] + a * o[11] + o[15];
            (s = 1 / s),
              (n.x = (i * o[0] + r * o[4] + a * o[8] + o[12]) * s),
              (n.y = (i * o[1] + r * o[5] + a * o[9] + o[13]) * s),
              (n.z = (i * o[2] + r * o[6] + a * o[10] + o[14]) * s);
          }),
          (e.transformByQuat = function (e, t, n) {
            var i = e.x,
              r = e.y,
              a = e.z,
              o = t.x,
              s = t.y,
              c = t.z,
              u = t.w,
              l = u * i + s * a - c * r,
              d = u * r + c * i - o * a,
              h = u * a + o * r - s * i,
              f = -o * i - s * r - c * a;
            (n.x = l * u - f * o - d * c + h * s),
              (n.y = d * u - f * s - h * o + l * c),
              (n.z = h * u - f * c - l * s + d * o);
          });
        var t = e.prototype;
        return (
          (t.setValue = function (e, t, n) {
            return (this.x = e), (this.y = t), (this.z = n), this;
          }),
          (t.setValueByArray = function (e, t) {
            return void 0 === t && (t = 0), (this.x = e[t]), (this.y = e[t + 1]), (this.z = e[t + 2]), this;
          }),
          (t.add = function (e) {
            return (this.x += e.x), (this.y += e.y), (this.z += e.z), this;
          }),
          (t.subtract = function (e) {
            return (this.x -= e.x), (this.y -= e.y), (this.z -= e.z), this;
          }),
          (t.multiply = function (e) {
            return (this.x *= e.x), (this.y *= e.y), (this.z *= e.z), this;
          }),
          (t.divide = function (e) {
            return (this.x /= e.x), (this.y /= e.y), (this.z /= e.z), this;
          }),
          (t.length = function () {
            var e = this.x,
              t = this.y,
              n = this.z;
            return Math.sqrt(e * e + t * t + n * n);
          }),
          (t.lengthSquared = function () {
            var e = this.x,
              t = this.y,
              n = this.z;
            return e * e + t * t + n * n;
          }),
          (t.negate = function () {
            return (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), this;
          }),
          (t.normalize = function () {
            return e.normalize(this, this), this;
          }),
          (t.scale = function (e) {
            return (this.x *= e), (this.y *= e), (this.z *= e), this;
          }),
          (t.toArray = function (e, t) {
            void 0 === t && (t = 0), (e[t] = this.x), (e[t + 1] = this.y), (e[t + 2] = this.z);
          }),
          (t.clone = function () {
            return new e(this.x, this.y, this.z);
          }),
          (t.cloneTo = function (e) {
            return (e.x = this.x), (e.y = this.y), (e.z = this.z), e;
          }),
          (t.transformNormal = function (t) {
            return e.transformNormal(this, t, this), this;
          }),
          (t.transformToVec3 = function (t) {
            return e.transformToVec3(this, t, this), this;
          }),
          (t.transformCoordinate = function (t) {
            return e.transformCoordinate(this, t, this), this;
          }),
          (t.transformByQuat = function (t) {
            return e.transformByQuat(this, t, this), this;
          }),
          e
        );
      })();
      (o._zero = new o(0, 0, 0)), (o._one = new o(1, 1, 1)), (o._tempVector3 = new o());
      var s = (function () {
        function e(e, t) {
          void 0 === e && (e = null),
            void 0 === t && (t = 0),
            (this.center = new o()),
            (this.radius = 0),
            e && e.cloneTo(this.center),
            (this.radius = t);
        }
        (e.fromPoints = function (t, n) {
          if (!t || 0 === t.length) throw new Error("points must be array and length must > 0");
          var i = t.length,
            r = e._tempVec30;
          r.x = r.y = r.z = 0;
          for (var a = 0; a < i; ++a) o.add(t[a], r, r);
          o.scale(r, 1 / i, n.center);
          for (var s = 0, c = 0; c < i; ++c) {
            var u = o.distanceSquared(r, t[c]);
            u > s && (s = u);
          }
          n.radius = Math.sqrt(s);
        }),
          (e.fromBox = function (e, t) {
            var n = t.center,
              i = e.min,
              r = e.max;
            (n.x = 0.5 * (i.x + r.x)),
              (n.y = 0.5 * (i.y + r.y)),
              (n.z = 0.5 * (i.z + r.z)),
              (t.radius = o.distance(n, r));
          });
        var t = e.prototype;
        return (
          (t.clone = function () {
            return new e(this.center, this.radius);
          }),
          (t.cloneTo = function (e) {
            return this.center.cloneTo(e.center), (e.radius = this.radius), e;
          }),
          e
        );
      })();
      s._tempVec30 = new o();
      var c = (function () {
        function e(e, t) {
          void 0 === e && (e = null),
            void 0 === t && (t = null),
            (this.min = new o()),
            (this.max = new o()),
            e && e.cloneTo(this.min),
            t && t.cloneTo(this.max);
        }
        (e.fromCenterAndExtent = function (e, t, n) {
          return o.subtract(e, t, n.min), o.add(e, t, n.max), !0;
        }),
          (e.fromPoints = function (e, t) {
            if (!e || 0 === e.length) throw new Error("points must be array and length must > 0");
            var n = t.min,
              i = t.max;
            (n.x = n.y = n.z = Number.MAX_SAFE_INTEGER), (i.x = i.y = i.z = Number.MIN_SAFE_INTEGER);
            for (var r = 0, a = e.length; r < a; ++r) {
              var s = e[r];
              o.min(n, s, n), o.max(i, s, i);
            }
          }),
          (e.fromSphere = function (e, t) {
            var n = e.center,
              i = e.radius,
              r = t.min,
              a = t.max;
            (r.x = n.x - i), (r.y = n.y - i), (r.z = n.z - i), (a.x = n.x + i), (a.y = n.y + i), (a.z = n.z + i);
          }),
          (e.transform = function (t, n, i) {
            var r = e._tempVec30,
              a = e._tempVec31;
            t.getCenter(r), t.getExtent(a), o.transformCoordinate(r, n, r);
            var s = a.x,
              c = a.y,
              u = a.z,
              l = n.elements;
            (a.x = Math.abs(s * l[0]) + Math.abs(c * l[4]) + Math.abs(u * l[8])),
              (a.y = Math.abs(s * l[1]) + Math.abs(c * l[5]) + Math.abs(u * l[9])),
              (a.z = Math.abs(s * l[2]) + Math.abs(c * l[6]) + Math.abs(u * l[10])),
              o.subtract(r, a, i.min),
              o.add(r, a, i.max);
          }),
          (e.merge = function (e, t, n) {
            return o.min(e.min, t.min, n.min), o.max(e.max, t.max, n.max), n;
          });
        var t = e.prototype;
        return (
          (t.clone = function () {
            return new e(this.min, this.max);
          }),
          (t.cloneTo = function (e) {
            return this.min.cloneTo(e.min), this.max.cloneTo(e.max), e;
          }),
          (t.getCenter = function (e) {
            return o.add(this.min, this.max, e), o.scale(e, 0.5, e), e;
          }),
          (t.getExtent = function (e) {
            return o.subtract(this.max, this.min, e), o.scale(e, 0.5, e), e;
          }),
          (t.getCorners = function (e) {
            void 0 === e && (e = []);
            var t = this.min,
              n = this.max,
              i = t.x,
              r = t.y,
              a = t.z,
              s = n.x,
              c = n.y,
              u = n.z,
              l = e.length;
            if (l < 8) for (var d = 0, h = 8 - l; d < h; ++d) e[l + d] = new o();
            return (
              e[0].setValue(i, c, u),
              e[1].setValue(s, c, u),
              e[2].setValue(s, r, u),
              e[3].setValue(i, r, u),
              e[4].setValue(i, c, a),
              e[5].setValue(s, c, a),
              e[6].setValue(s, r, a),
              e[7].setValue(i, r, a),
              e
            );
          }),
          (t.transform = function (t) {
            return e.transform(this, t, this), this;
          }),
          e
        );
      })();
      (c._tempVec30 = new o()), (c._tempVec31 = new o());
      var u = (function () {
        function e() {}
        return (
          (e.distancePlaneAndPoint = function (e, t) {
            return o.dot(e.normal, t) + e.distance;
          }),
          (e.intersectsPlaneAndPoint = function (t, n) {
            var i = e.distancePlaneAndPoint(t, n);
            return i > 0 ? r.Front : i < 0 ? r.Back : r.Intersecting;
          }),
          (e.intersectsPlaneAndBox = function (t, n) {
            var i = n.min,
              a = n.max,
              o = t.normal,
              s = e._tempVec30,
              c = e._tempVec31;
            return (
              o.x >= 0 ? ((s.x = a.x), (c.x = i.x)) : ((s.x = i.x), (c.x = a.x)),
              o.y >= 0 ? ((s.y = a.y), (c.y = i.y)) : ((s.y = i.y), (c.y = a.y)),
              o.z >= 0 ? ((s.z = a.z), (c.z = i.z)) : ((s.z = i.z), (c.z = a.z)),
              e.distancePlaneAndPoint(t, s) < 0 ? r.Back : e.distancePlaneAndPoint(t, c) > 0 ? r.Front : r.Intersecting
            );
          }),
          (e.intersectsPlaneAndSphere = function (t, n) {
            var i = n.center,
              a = n.radius,
              o = e.distancePlaneAndPoint(t, i);
            return o > a ? r.Front : o < -a ? r.Back : r.Intersecting;
          }),
          (e.intersectsRayAndPlane = function (e, t) {
            var n = t.normal,
              i = a.zeroTolerance,
              r = o.dot(n, e.direction);
            if (Math.abs(r) < i) return -1;
            var s = o.dot(n, e.origin),
              c = (-t.distance - s) / r;
            if (c < 0) {
              if (c < -i) return -1;
              c = 0;
            }
            return c;
          }),
          (e.intersectsRayAndBox = function (e, t) {
            var n = a.zeroTolerance,
              i = e.origin,
              r = e.direction,
              o = t.min,
              s = t.max,
              c = r.x,
              u = r.y,
              l = r.z,
              d = i.x,
              h = i.y,
              f = i.z,
              _ = 0,
              p = Number.MAX_SAFE_INTEGER;
            if (Math.abs(c) < n) {
              if (d < o.x || d > s.x) return -1;
            } else {
              var g = 1 / c,
                v = (o.x - d) * g,
                m = (s.x - d) * g;
              if (v > m) {
                var y = v;
                (v = m), (m = y);
              }
              if (((_ = Math.max(v, _)), (p = Math.min(m, p)), _ > p)) return -1;
            }
            if (Math.abs(u) < n) {
              if (h < o.y || h > s.y) return -1;
            } else {
              var x = 1 / u,
                b = (o.y - h) * x,
                w = (s.y - h) * x;
              if (b > w) {
                var A = b;
                (b = w), (w = A);
              }
              if (((_ = Math.max(b, _)), (p = Math.min(w, p)), _ > p)) return -1;
            }
            if (Math.abs(l) < n) {
              if (f < o.z || f > s.z) return -1;
            } else {
              var T = 1 / l,
                M = (o.z - f) * T,
                C = (s.z - f) * T;
              if (M > C) {
                var P = M;
                (M = C), (C = P);
              }
              if (((_ = Math.max(M, _)), (p = Math.min(C, p)), _ > p)) return -1;
            }
            return _;
          }),
          (e.intersectsRayAndSphere = function (t, n) {
            var i = t.origin,
              r = t.direction,
              a = n.center,
              s = n.radius,
              c = e._tempVec30;
            o.subtract(i, a, c);
            var u = o.dot(c, r),
              l = o.dot(c, c) - s * s;
            if (u > 0 && l > 0) return -1;
            var d = u * u - l;
            if (d < 0) return -1;
            var h = -u - Math.sqrt(d);
            return h < 0 && (h = 0), h;
          }),
          (e.intersectsFrustumAndBox = function (t, n) {
            for (var i = n.min, r = n.max, a = e._tempVec30, s = 0; s < 6; ++s) {
              var c = t.getPlane(s),
                u = c.normal;
              if (
                ((a.x = u.x >= 0 ? i.x : r.x),
                (a.y = u.y >= 0 ? i.y : r.y),
                (a.z = u.z >= 0 ? i.z : r.z),
                o.dot(c.normal, a) > -c.distance)
              )
                return !1;
            }
            return !0;
          }),
          (e.frustumContainsBox = function (t, n) {
            for (var a = n.min, o = n.max, s = e._tempVec30, c = e._tempVec31, u = i.Contains, l = 0; l < 6; ++l) {
              var d = t.getPlane(l),
                h = d.normal;
              if (
                (h.x >= 0 ? ((s.x = o.x), (c.x = a.x)) : ((s.x = a.x), (c.x = o.x)),
                h.y >= 0 ? ((s.y = o.y), (c.y = a.y)) : ((s.y = a.y), (c.y = o.y)),
                h.z >= 0 ? ((s.z = o.z), (c.z = a.z)) : ((s.z = a.z), (c.z = o.z)),
                e.intersectsPlaneAndPoint(d, c) === r.Front)
              )
                return i.Disjoint;
              e.intersectsPlaneAndPoint(d, s) === r.Front && (u = i.Intersects);
            }
            return u;
          }),
          (e.frustumContainsSphere = function (t, n) {
            for (var a = i.Contains, o = 0; o < 6; ++o) {
              var s = t.getPlane(o),
                c = e.intersectsPlaneAndSphere(s, n);
              if (c === r.Front) return i.Disjoint;
              if (c === r.Intersecting) {
                a = i.Intersects;
                break;
              }
            }
            return a;
          }),
          e
        );
      })();
      (u._tempVec30 = new o()), (u._tempVec31 = new o());
      var l = (function () {
          function e(e, t) {
            void 0 === e && (e = null),
              void 0 === t && (t = 0),
              (this.normal = new o()),
              (this.distance = 0),
              e && e.cloneTo(this.normal),
              (this.distance = t);
          }
          (e.normalize = function (e, t) {
            var n = e.normal,
              i = 1 / n.length(),
              r = t.normal;
            (r.x = n.x * i), (r.y = n.y * i), (r.z = n.z * i), (t.distance = e.distance * i);
          }),
            (e.fromPoints = function (e, t, n, i) {
              var r = e.x,
                a = e.y,
                o = e.z,
                s = t.x - r,
                c = t.y - a,
                u = t.z - o,
                l = n.x - r,
                d = n.y - a,
                h = n.z - o,
                f = c * h - u * d,
                _ = u * l - s * h,
                p = s * d - c * l,
                g = 1 / Math.sqrt(f * f + _ * _ + p * p),
                v = f * g,
                m = _ * g,
                y = p * g,
                x = i.normal;
              (x.x = v), (x.y = m), (x.z = y), (i.distance = -(v * r + m * a + y * o));
            });
          var t = e.prototype;
          return (
            (t.normalize = function () {
              return e.normalize(this, this), this;
            }),
            (t.clone = function () {
              var t = new e();
              return this.cloneTo(t), t;
            }),
            (t.cloneTo = function (e) {
              return this.normal.cloneTo(e.normal), (e.distance = this.distance), e;
            }),
            e
          );
        })(),
        d = (function () {
          function e(e) {
            void 0 === e && (e = null),
              (this.near = void 0),
              (this.far = void 0),
              (this.left = void 0),
              (this.right = void 0),
              (this.top = void 0),
              (this.bottom = void 0),
              (this.near = new l()),
              (this.far = new l()),
              (this.left = new l()),
              (this.right = new l()),
              (this.top = new l()),
              (this.bottom = new l()),
              e && this.calculateFromMatrix(e);
          }
          var t = e.prototype;
          return (
            (t.clone = function () {
              var t = new e();
              return this.cloneTo(t), t;
            }),
            (t.cloneTo = function (e) {
              return (
                this.near.cloneTo(e.near),
                this.far.cloneTo(e.far),
                this.left.cloneTo(e.left),
                this.right.cloneTo(e.right),
                this.top.cloneTo(e.top),
                this.bottom.cloneTo(e.bottom),
                e
              );
            }),
            (t.getPlane = function (e) {
              switch (e) {
                case 0:
                  return this.near;
                case 1:
                  return this.far;
                case 2:
                  return this.left;
                case 3:
                  return this.right;
                case 4:
                  return this.top;
                case 5:
                  return this.bottom;
                default:
                  return null;
              }
            }),
            (t.calculateFromMatrix = function (e) {
              var t = e.elements,
                n = t[0],
                i = t[1],
                r = t[2],
                a = t[3],
                o = t[4],
                s = t[5],
                c = t[6],
                u = t[7],
                l = t[8],
                d = t[9],
                h = t[10],
                f = t[11],
                _ = t[12],
                p = t[13],
                g = t[14],
                v = t[15],
                m = this.near.normal;
              (m.x = -a - r), (m.y = -u - c), (m.z = -f - h), (this.near.distance = -v - g), this.near.normalize();
              var y = this.far.normal;
              (y.x = r - a), (y.y = c - u), (y.z = h - f), (this.far.distance = g - v), this.far.normalize();
              var x = this.left.normal;
              (x.x = -a - n), (x.y = -u - o), (x.z = -f - l), (this.left.distance = -v - _), this.left.normalize();
              var b = this.right.normal;
              (b.x = n - a), (b.y = o - u), (b.z = l - f), (this.right.distance = _ - v), this.right.normalize();
              var w = this.top.normal;
              (w.x = i - a), (w.y = s - u), (w.z = d - f), (this.top.distance = p - v), this.top.normalize();
              var A = this.bottom.normal;
              (A.x = -a - i), (A.y = -u - s), (A.z = -f - d), (this.bottom.distance = -v - p), this.bottom.normalize();
            }),
            (t.intersectsBox = function (e) {
              return u.intersectsFrustumAndBox(this, e);
            }),
            (t.intersectsSphere = function (e) {
              return u.frustumContainsSphere(this, e) !== i.Disjoint;
            }),
            e
          );
        })(),
        h = (function () {
          function e(e, t, n, i, r, a, o, s, c) {
            void 0 === e && (e = 1),
              void 0 === t && (t = 0),
              void 0 === n && (n = 0),
              void 0 === i && (i = 0),
              void 0 === r && (r = 1),
              void 0 === a && (a = 0),
              void 0 === o && (o = 0),
              void 0 === s && (s = 0),
              void 0 === c && (c = 1),
              (this.elements = new Float32Array(9));
            var u = this.elements;
            (u[0] = e), (u[1] = t), (u[2] = n), (u[3] = i), (u[4] = r), (u[5] = a), (u[6] = o), (u[7] = s), (u[8] = c);
          }
          (e.add = function (e, t, n) {
            var i = e.elements,
              r = t.elements,
              a = n.elements;
            (a[0] = i[0] + r[0]),
              (a[1] = i[1] + r[1]),
              (a[2] = i[2] + r[2]),
              (a[3] = i[3] + r[3]),
              (a[4] = i[4] + r[4]),
              (a[5] = i[5] + r[5]),
              (a[6] = i[6] + r[6]),
              (a[7] = i[7] + r[7]),
              (a[8] = i[8] + r[8]);
          }),
            (e.subtract = function (e, t, n) {
              var i = e.elements,
                r = t.elements,
                a = n.elements;
              (a[0] = i[0] - r[0]),
                (a[1] = i[1] - r[1]),
                (a[2] = i[2] - r[2]),
                (a[3] = i[3] - r[3]),
                (a[4] = i[4] - r[4]),
                (a[5] = i[5] - r[5]),
                (a[6] = i[6] - r[6]),
                (a[7] = i[7] - r[7]),
                (a[8] = i[8] - r[8]);
            }),
            (e.multiply = function (e, t, n) {
              var i = e.elements,
                r = t.elements,
                a = n.elements,
                o = i[0],
                s = i[1],
                c = i[2],
                u = i[3],
                l = i[4],
                d = i[5],
                h = i[6],
                f = i[7],
                _ = i[8],
                p = r[0],
                g = r[1],
                v = r[2],
                m = r[3],
                y = r[4],
                x = r[5],
                b = r[6],
                w = r[7],
                A = r[8];
              (a[0] = o * p + u * g + h * v),
                (a[1] = s * p + l * g + f * v),
                (a[2] = c * p + d * g + _ * v),
                (a[3] = o * m + u * y + h * x),
                (a[4] = s * m + l * y + f * x),
                (a[5] = c * m + d * y + _ * x),
                (a[6] = o * b + u * w + h * A),
                (a[7] = s * b + l * w + f * A),
                (a[8] = c * b + d * w + _ * A);
            }),
            (e.equals = function (e, t) {
              var n = e.elements,
                i = t.elements;
              return (
                a.equals(n[0], i[0]) &&
                a.equals(n[1], i[1]) &&
                a.equals(n[2], i[2]) &&
                a.equals(n[3], i[3]) &&
                a.equals(n[4], i[4]) &&
                a.equals(n[5], i[5]) &&
                a.equals(n[6], i[6]) &&
                a.equals(n[7], i[7]) &&
                a.equals(n[8], i[8])
              );
            }),
            (e.rotationQuaternion = function (e, t) {
              var n = t.elements,
                i = e.x,
                r = e.y,
                a = e.z,
                o = e.w,
                s = i + i,
                c = r + r,
                u = a + a,
                l = i * s,
                d = r * s,
                h = r * c,
                f = a * s,
                _ = a * c,
                p = a * u,
                g = o * s,
                v = o * c,
                m = o * u;
              (n[0] = 1 - h - p),
                (n[3] = d - m),
                (n[6] = f + v),
                (n[1] = d + m),
                (n[4] = 1 - l - p),
                (n[7] = _ - g),
                (n[2] = f - v),
                (n[5] = _ + g),
                (n[8] = 1 - l - h);
            }),
            (e.scaling = function (e, t) {
              var n = t.elements;
              (n[0] = e.x),
                (n[1] = 0),
                (n[2] = 0),
                (n[3] = 0),
                (n[4] = e.y),
                (n[5] = 0),
                (n[6] = 0),
                (n[7] = 0),
                (n[8] = 1);
            }),
            (e.translation = function (e, t) {
              var n = t.elements;
              (n[0] = 1),
                (n[1] = 0),
                (n[2] = 0),
                (n[3] = 0),
                (n[4] = 1),
                (n[5] = 0),
                (n[6] = e.x),
                (n[7] = e.y),
                (n[8] = 1);
            }),
            (e.invert = function (e, t) {
              var n = e.elements,
                i = t.elements,
                r = n[0],
                a = n[1],
                o = n[2],
                s = n[3],
                c = n[4],
                u = n[5],
                l = n[6],
                d = n[7],
                h = n[8],
                f = h * c - u * d,
                _ = -h * s + u * l,
                p = d * s - c * l,
                g = r * f + a * _ + o * p;
              g &&
                ((g = 1 / g),
                (i[0] = f * g),
                (i[1] = (-h * a + o * d) * g),
                (i[2] = (u * a - o * c) * g),
                (i[3] = _ * g),
                (i[4] = (h * r - o * l) * g),
                (i[5] = (-u * r + o * s) * g),
                (i[6] = p * g),
                (i[7] = (-d * r + a * l) * g),
                (i[8] = (c * r - a * s) * g));
            }),
            (e.normalMatrix = function (e, t) {
              var n = e.elements,
                i = t.elements,
                r = n[0],
                a = n[1],
                o = n[2],
                s = n[3],
                c = n[4],
                u = n[5],
                l = n[6],
                d = n[7],
                h = n[8],
                f = n[9],
                _ = n[10],
                p = n[11],
                g = n[12],
                v = n[13],
                m = n[14],
                y = n[15],
                x = r * u - a * c,
                b = r * l - o * c,
                w = r * d - s * c,
                A = a * l - o * u,
                T = a * d - s * u,
                M = o * d - s * l,
                C = h * v - f * g,
                P = h * m - _ * g,
                S = h * y - p * g,
                R = f * m - _ * v,
                E = f * y - p * v,
                O = _ * y - p * m,
                L = x * O - b * E + w * R + A * S - T * P + M * C;
              if (!L) return null;
              (L = 1 / L),
                (i[0] = (u * O - l * E + d * R) * L),
                (i[1] = (l * S - c * O - d * P) * L),
                (i[2] = (c * E - u * S + d * C) * L),
                (i[3] = (o * E - a * O - s * R) * L),
                (i[4] = (r * O - o * S + s * P) * L),
                (i[5] = (a * S - r * E - s * C) * L),
                (i[6] = (v * M - m * T + y * A) * L),
                (i[7] = (m * w - g * M - y * b) * L),
                (i[8] = (g * T - v * w + y * x) * L);
            }),
            (e.rotate = function (e, t, n) {
              var i = e.elements,
                r = n.elements,
                a = Math.sin(t),
                o = Math.cos(t),
                s = i[0],
                c = i[1],
                u = i[2],
                l = i[3],
                d = i[4],
                h = i[5],
                f = i[6],
                _ = i[7],
                p = i[8];
              (r[0] = o * s + a * l),
                (r[1] = o * c + a * d),
                (r[2] = o * u + a * h),
                (r[3] = o * l - a * s),
                (r[4] = o * d - a * c),
                (r[5] = o * h - a * u),
                (r[6] = f),
                (r[7] = _),
                (r[8] = p);
            }),
            (e.scale = function (e, t, n) {
              var i = t.x,
                r = t.y,
                a = e.elements,
                o = n.elements;
              (o[0] = i * a[0]),
                (o[1] = i * a[1]),
                (o[2] = i * a[2]),
                (o[3] = r * a[3]),
                (o[4] = r * a[4]),
                (o[5] = r * a[5]),
                (o[6] = a[6]),
                (o[7] = a[7]),
                (o[8] = a[8]);
            }),
            (e.translate = function (e, t, n) {
              var i = t.x,
                r = t.y,
                a = e.elements,
                o = n.elements,
                s = a[0],
                c = a[1],
                u = a[2],
                l = a[3],
                d = a[4],
                h = a[5],
                f = a[6],
                _ = a[7],
                p = a[8];
              (o[0] = s),
                (o[1] = c),
                (o[2] = u),
                (o[3] = l),
                (o[4] = d),
                (o[5] = h),
                (o[6] = i * s + r * l + f),
                (o[7] = i * c + r * d + _),
                (o[8] = i * u + r * h + p);
            }),
            (e.transpose = function (e, t) {
              var n = e.elements,
                i = t.elements;
              if (t === e) {
                var r = n[1],
                  a = n[2],
                  o = n[5];
                (i[1] = n[3]), (i[2] = n[6]), (i[3] = r), (i[5] = n[7]), (i[6] = a), (i[7] = o);
              } else
                (i[0] = n[0]),
                  (i[1] = n[3]),
                  (i[2] = n[6]),
                  (i[3] = n[1]),
                  (i[4] = n[4]),
                  (i[5] = n[7]),
                  (i[6] = n[2]),
                  (i[7] = n[5]),
                  (i[8] = n[8]);
            });
          var t = e.prototype;
          return (
            (t.setValue = function (e, t, n, i, r, a, o, s, c) {
              var u = this.elements;
              return (
                (u[0] = e),
                (u[1] = t),
                (u[2] = n),
                (u[3] = i),
                (u[4] = r),
                (u[5] = a),
                (u[6] = o),
                (u[7] = s),
                (u[8] = c),
                this
              );
            }),
            (t.setValueByArray = function (e, t) {
              void 0 === t && (t = 0);
              for (var n = this.elements, i = 0; i < 12; i++) n[i] = e[i + t];
              return this;
            }),
            (t.setValueByMatrix = function (e) {
              var t = e.elements,
                n = this.elements;
              return (
                (n[0] = t[0]),
                (n[1] = t[1]),
                (n[2] = t[2]),
                (n[3] = t[4]),
                (n[4] = t[5]),
                (n[5] = t[6]),
                (n[6] = t[8]),
                (n[7] = t[9]),
                (n[8] = t[10]),
                this
              );
            }),
            (t.toArray = function (e, t) {
              void 0 === t && (t = 0);
              var n = this.elements;
              (e[t] = n[0]),
                (e[t + 1] = n[1]),
                (e[t + 2] = n[2]),
                (e[t + 3] = n[3]),
                (e[t + 4] = n[4]),
                (e[t + 5] = n[5]),
                (e[t + 6] = n[6]),
                (e[t + 7] = n[7]),
                (e[t + 8] = n[8]);
            }),
            (t.clone = function () {
              var t = this.elements,
                n = new e(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8]);
              return n;
            }),
            (t.cloneTo = function (e) {
              var t = this.elements,
                n = e.elements;
              return (
                (n[0] = t[0]),
                (n[1] = t[1]),
                (n[2] = t[2]),
                (n[3] = t[3]),
                (n[4] = t[4]),
                (n[5] = t[5]),
                (n[6] = t[6]),
                (n[7] = t[7]),
                (n[8] = t[8]),
                e
              );
            }),
            (t.add = function (t) {
              return e.add(this, t, this), this;
            }),
            (t.subtract = function (t) {
              return e.subtract(this, t, this), this;
            }),
            (t.multiply = function (t) {
              return e.multiply(this, t, this), this;
            }),
            (t.determinant = function () {
              var e = this.elements,
                t = e[0],
                n = e[1],
                i = e[2],
                r = e[3],
                a = e[4],
                o = e[5],
                s = e[6],
                c = e[7],
                u = e[8],
                l = u * a - o * c,
                d = -u * r + o * s,
                h = c * r - a * s;
              return t * l + n * d + i * h;
            }),
            (t.identity = function () {
              var e = this.elements;
              return (
                (e[0] = 1),
                (e[1] = 0),
                (e[2] = 0),
                (e[3] = 0),
                (e[4] = 1),
                (e[5] = 0),
                (e[6] = 0),
                (e[7] = 0),
                (e[8] = 1),
                this
              );
            }),
            (t.invert = function () {
              return e.invert(this, this), this;
            }),
            (t.rotate = function (t) {
              return e.rotate(this, t, this), this;
            }),
            (t.scale = function (t) {
              return e.scale(this, t, this), this;
            }),
            (t.translate = function (t) {
              return e.translate(this, t, this), this;
            }),
            (t.transpose = function () {
              return e.transpose(this, this), this;
            }),
            e
          );
        })(),
        f = (function () {
          function e(e, t, n, i) {
            void 0 === e && (e = 0),
              void 0 === t && (t = 0),
              void 0 === n && (n = 0),
              void 0 === i && (i = 1),
              (this.x = void 0),
              (this.y = void 0),
              (this.z = void 0),
              (this.w = void 0),
              (this.x = e),
              (this.y = t),
              (this.z = n),
              (this.w = i);
          }
          (e.add = function (e, t, n) {
            (n.x = e.x + t.x), (n.y = e.y + t.y), (n.z = e.z + t.z), (n.w = e.w + t.w);
          }),
            (e.multiply = function (e, t, n) {
              var i = e.x,
                r = e.y,
                a = e.z,
                o = e.w,
                s = t.x,
                c = t.y,
                u = t.z,
                l = t.w;
              (n.x = i * l + o * s + r * u - a * c),
                (n.y = r * l + o * c + a * s - i * u),
                (n.z = a * l + o * u + i * c - r * s),
                (n.w = o * l - i * s - r * c - a * u);
            }),
            (e.conjugate = function (e, t) {
              (t.x = -e.x), (t.y = -e.y), (t.z = -e.z), (t.w = e.w);
            }),
            (e.dot = function (e, t) {
              return e.x * t.x + e.y * t.y + e.z * t.z + e.w * t.w;
            }),
            (e.equals = function (e, t) {
              return a.equals(e.x, t.x) && a.equals(e.y, t.y) && a.equals(e.z, t.z) && a.equals(e.w, t.w);
            }),
            (e.rotationAxisAngle = function (t, n, i) {
              var r = e._tempVector3;
              o.normalize(t, r), (n *= 0.5);
              var a = Math.sin(n);
              (i.x = r.x * a), (i.y = r.y * a), (i.z = r.z * a), (i.w = Math.cos(n));
            }),
            (e.rotationEuler = function (t, n, i, r) {
              e.rotationYawPitchRoll(n, t, i, r);
            }),
            (e.rotationYawPitchRoll = function (e, t, n, i) {
              var r = 0.5 * n,
                a = 0.5 * t,
                o = 0.5 * e,
                s = Math.sin(r),
                c = Math.cos(r),
                u = Math.sin(a),
                l = Math.cos(a),
                d = Math.sin(o),
                h = Math.cos(o),
                f = h * l,
                _ = d * u;
              (i.x = h * u * c + d * l * s),
                (i.y = d * l * c - h * u * s),
                (i.z = f * s - _ * c),
                (i.w = f * c + _ * s);
            }),
            (e.rotationMatrix3x3 = function (e, t) {
              var n,
                i,
                r = e.elements,
                a = r[0],
                o = r[1],
                s = r[2],
                c = r[3],
                u = r[4],
                l = r[5],
                d = r[6],
                h = r[7],
                f = r[8],
                _ = a + u + f;
              _ > 0
                ? ((n = Math.sqrt(_ + 1)),
                  (t.w = 0.5 * n),
                  (n = 0.5 / n),
                  (t.x = (l - h) * n),
                  (t.y = (d - s) * n),
                  (t.z = (o - c) * n))
                : a >= u && a >= f
                ? ((n = Math.sqrt(1 + a - u - f)),
                  (i = 0.5 / n),
                  (t.x = 0.5 * n),
                  (t.y = (o + c) * i),
                  (t.z = (s + d) * i),
                  (t.w = (l - h) * i))
                : u > f
                ? ((n = Math.sqrt(1 + u - a - f)),
                  (i = 0.5 / n),
                  (t.x = (c + o) * i),
                  (t.y = 0.5 * n),
                  (t.z = (h + l) * i),
                  (t.w = (d - s) * i))
                : ((n = Math.sqrt(1 + f - a - u)),
                  (i = 0.5 / n),
                  (t.x = (s + d) * i),
                  (t.y = (l + h) * i),
                  (t.z = 0.5 * n),
                  (t.w = (o - c) * i));
            }),
            (e.invert = function (e, t) {
              var n = e.x,
                i = e.y,
                r = e.z,
                o = e.w,
                s = n * n + i * i + r * r + o * o;
              if (s > a.zeroTolerance) {
                var c = 1 / s;
                (t.x = -n * c), (t.y = -i * c), (t.z = -r * c), (t.w = o * c);
              }
            }),
            (e.lerp = function (t, n, i, r) {
              var a = 1 - i;
              e.dot(t, n) >= 0
                ? ((r.x = t.x * a + n.x * i),
                  (r.y = t.y * a + n.y * i),
                  (r.z = t.z * a + n.z * i),
                  (r.w = t.w * a + n.w * i))
                : ((r.x = t.x * a - n.x * i),
                  (r.y = t.y * a - n.y * i),
                  (r.z = t.z * a - n.z * i),
                  (r.w = t.w * a - n.w * i)),
                r.normalize();
            }),
            (e.slerp = function (e, t, n, i) {
              var r,
                o,
                s = e.x,
                c = e.y,
                u = e.z,
                l = e.w,
                d = t.x,
                h = t.y,
                f = t.z,
                _ = t.w,
                p = s * d + c * h + u * f + l * _;
              if ((p < 0 && ((p = -p), (d = -d), (h = -h), (f = -f), (_ = -_)), 1 - p > a.zeroTolerance)) {
                var g = Math.acos(p),
                  v = Math.sin(g);
                (r = Math.sin((1 - n) * g) / v), (o = Math.sin(n * g) / v);
              } else (r = 1 - n), (o = n);
              (i.x = r * s + o * d), (i.y = r * c + o * h), (i.z = r * u + o * f), (i.w = r * l + o * _);
            }),
            (e.normalize = function (e, t) {
              var n = e.x,
                i = e.y,
                r = e.z,
                o = e.w,
                s = Math.sqrt(n * n + i * i + r * r + o * o);
              s > a.zeroTolerance && ((s = 1 / s), (t.x = n * s), (t.y = i * s), (t.z = r * s), (t.w = o * s));
            }),
            (e.rotationX = function (e, t) {
              e *= 0.5;
              var n = Math.sin(e),
                i = Math.cos(e);
              (t.x = n), (t.y = 0), (t.z = 0), (t.w = i);
            }),
            (e.rotationY = function (e, t) {
              e *= 0.5;
              var n = Math.sin(e),
                i = Math.cos(e);
              (t.x = 0), (t.y = n), (t.z = 0), (t.w = i);
            }),
            (e.rotationZ = function (e, t) {
              e *= 0.5;
              var n = Math.sin(e),
                i = Math.cos(e);
              (t.x = 0), (t.y = 0), (t.z = n), (t.w = i);
            }),
            (e.rotateX = function (e, t, n) {
              var i = e.x,
                r = e.y,
                a = e.z,
                o = e.w;
              t *= 0.5;
              var s = Math.sin(t),
                c = Math.cos(t);
              (n.x = i * c + o * s), (n.y = r * c + a * s), (n.z = a * c - r * s), (n.w = o * c - i * s);
            }),
            (e.rotateY = function (e, t, n) {
              var i = e.x,
                r = e.y,
                a = e.z,
                o = e.w;
              t *= 0.5;
              var s = Math.sin(t),
                c = Math.cos(t);
              (n.x = i * c - a * s), (n.y = r * c + o * s), (n.z = a * c + i * s), (n.w = o * c - r * s);
            }),
            (e.rotateZ = function (e, t, n) {
              var i = e.x,
                r = e.y,
                a = e.z,
                o = e.w;
              t *= 0.5;
              var s = Math.sin(t),
                c = Math.cos(t);
              (n.x = i * c + r * s), (n.y = r * c - i * s), (n.z = a * c + o * s), (n.w = o * c - a * s);
            }),
            (e.scale = function (e, t, n) {
              (n.x = e.x * t), (n.y = e.y * t), (n.z = e.z * t), (n.w = e.w * t);
            });
          var t = e.prototype;
          return (
            (t.setValue = function (e, t, n, i) {
              return (this.x = e), (this.y = t), (this.z = n), (this.w = i), this;
            }),
            (t.setValueByArray = function (e, t) {
              return (
                void 0 === t && (t = 0),
                (this.x = e[t]),
                (this.y = e[t + 1]),
                (this.z = e[t + 2]),
                (this.w = e[t + 3]),
                this
              );
            }),
            (t.conjugate = function () {
              return (this.x *= -1), (this.y *= -1), (this.z *= -1), this;
            }),
            (t.getAxisAngle = function (e) {
              var t = this.x,
                n = this.y,
                i = this.z,
                r = t * t + n * n + i * i;
              if (r < a.zeroTolerance) return (e.x = 1), (e.y = 0), (e.z = 0), 0;
              var o = 1 / r;
              return (e.x = this.x * o), (e.y = this.y * o), (e.z = this.z * o), 2 * Math.acos(this.w);
            }),
            (t.identity = function () {
              return (this.x = 0), (this.y = 0), (this.z = 0), (this.w = 1), this;
            }),
            (t.length = function () {
              var e = this.x,
                t = this.y,
                n = this.z,
                i = this.w;
              return Math.sqrt(e * e + t * t + n * n + i * i);
            }),
            (t.lengthSquared = function () {
              var e = this.x,
                t = this.y,
                n = this.z,
                i = this.w;
              return e * e + t * t + n * n + i * i;
            }),
            (t.normalize = function () {
              return e.normalize(this, this), this;
            }),
            (t.toEuler = function (e) {
              this.toYawPitchRoll(e);
              var t = e.x;
              return (e.x = e.y), (e.y = t), e;
            }),
            (t.toYawPitchRoll = function (e) {
              var t = this.x,
                n = this.y,
                i = this.z,
                r = this.w,
                o = t * t,
                s = n * n,
                c = i * i,
                u = t * n,
                l = i * r,
                d = i * t,
                h = n * r,
                f = n * i,
                _ = t * r;
              return (
                (e.y = Math.asin(2 * (_ - f))),
                Math.cos(e.y) > a.zeroTolerance
                  ? ((e.z = Math.atan2(2 * (u + l), 1 - 2 * (c + o))), (e.x = Math.atan2(2 * (d + h), 1 - 2 * (s + o))))
                  : ((e.z = Math.atan2(-2 * (u - l), 1 - 2 * (s + c))), (e.x = 0)),
                e
              );
            }),
            (t.toArray = function (e, t) {
              void 0 === t && (t = 0), (e[t] = this.x), (e[t + 1] = this.y), (e[t + 2] = this.z), (e[t + 3] = this.w);
            }),
            (t.clone = function () {
              return new e(this.x, this.y, this.z, this.w);
            }),
            (t.cloneTo = function (e) {
              return (e.x = this.x), (e.y = this.y), (e.z = this.z), (e.w = this.w), e;
            }),
            (t.rotateX = function (t) {
              return e.rotateX(this, t, this), this;
            }),
            (t.rotateY = function (t) {
              return e.rotateY(this, t, this), this;
            }),
            (t.rotateZ = function (t) {
              return e.rotateZ(this, t, this), this;
            }),
            (t.rotationAxisAngle = function (t, n) {
              return e.rotationAxisAngle(t, n, this), this;
            }),
            (t.multiply = function (t) {
              return e.multiply(this, t, this), this;
            }),
            (t.invert = function () {
              return e.invert(this, this), this;
            }),
            (t.dot = function (t) {
              return e.dot(this, t);
            }),
            (t.lerp = function (t, n) {
              return e.lerp(this, t, n, this), this;
            }),
            e
          );
        })();
      f._tempVector3 = new o();
      var _ = (function () {
        function e(e, t, n, i, r, a, o, s, c, u, l, d, h, f, _, p) {
          void 0 === e && (e = 1),
            void 0 === t && (t = 0),
            void 0 === n && (n = 0),
            void 0 === i && (i = 0),
            void 0 === r && (r = 0),
            void 0 === a && (a = 1),
            void 0 === o && (o = 0),
            void 0 === s && (s = 0),
            void 0 === c && (c = 0),
            void 0 === u && (u = 0),
            void 0 === l && (l = 1),
            void 0 === d && (d = 0),
            void 0 === h && (h = 0),
            void 0 === f && (f = 0),
            void 0 === _ && (_ = 0),
            void 0 === p && (p = 1),
            (this.elements = new Float32Array(16));
          var g = this.elements;
          (g[0] = e),
            (g[1] = t),
            (g[2] = n),
            (g[3] = i),
            (g[4] = r),
            (g[5] = a),
            (g[6] = o),
            (g[7] = s),
            (g[8] = c),
            (g[9] = u),
            (g[10] = l),
            (g[11] = d),
            (g[12] = h),
            (g[13] = f),
            (g[14] = _),
            (g[15] = p);
        }
        (e.multiply = function (e, t, n) {
          var i = e.elements,
            r = t.elements,
            a = n.elements,
            o = i[0],
            s = i[1],
            c = i[2],
            u = i[3],
            l = i[4],
            d = i[5],
            h = i[6],
            f = i[7],
            _ = i[8],
            p = i[9],
            g = i[10],
            v = i[11],
            m = i[12],
            y = i[13],
            x = i[14],
            b = i[15],
            w = r[0],
            A = r[1],
            T = r[2],
            M = r[3],
            C = r[4],
            P = r[5],
            S = r[6],
            R = r[7],
            E = r[8],
            O = r[9],
            L = r[10],
            F = r[11],
            I = r[12],
            z = r[13],
            B = r[14],
            D = r[15];
          (a[0] = o * w + l * A + _ * T + m * M),
            (a[1] = s * w + d * A + p * T + y * M),
            (a[2] = c * w + h * A + g * T + x * M),
            (a[3] = u * w + f * A + v * T + b * M),
            (a[4] = o * C + l * P + _ * S + m * R),
            (a[5] = s * C + d * P + p * S + y * R),
            (a[6] = c * C + h * P + g * S + x * R),
            (a[7] = u * C + f * P + v * S + b * R),
            (a[8] = o * E + l * O + _ * L + m * F),
            (a[9] = s * E + d * O + p * L + y * F),
            (a[10] = c * E + h * O + g * L + x * F),
            (a[11] = u * E + f * O + v * L + b * F),
            (a[12] = o * I + l * z + _ * B + m * D),
            (a[13] = s * I + d * z + p * B + y * D),
            (a[14] = c * I + h * z + g * B + x * D),
            (a[15] = u * I + f * z + v * B + b * D);
        }),
          (e.equals = function (e, t) {
            var n = e.elements,
              i = t.elements;
            return (
              a.equals(n[0], i[0]) &&
              a.equals(n[1], i[1]) &&
              a.equals(n[2], i[2]) &&
              a.equals(n[3], i[3]) &&
              a.equals(n[4], i[4]) &&
              a.equals(n[5], i[5]) &&
              a.equals(n[6], i[6]) &&
              a.equals(n[7], i[7]) &&
              a.equals(n[8], i[8]) &&
              a.equals(n[9], i[9]) &&
              a.equals(n[10], i[10]) &&
              a.equals(n[11], i[11]) &&
              a.equals(n[12], i[12]) &&
              a.equals(n[13], i[13]) &&
              a.equals(n[14], i[14]) &&
              a.equals(n[15], i[15])
            );
          }),
          (e.rotationQuaternion = function (e, t) {
            var n = t.elements,
              i = e.x,
              r = e.y,
              a = e.z,
              o = e.w,
              s = i + i,
              c = r + r,
              u = a + a,
              l = i * s,
              d = r * s,
              h = r * c,
              f = a * s,
              _ = a * c,
              p = a * u,
              g = o * s,
              v = o * c,
              m = o * u;
            (n[0] = 1 - h - p),
              (n[1] = d + m),
              (n[2] = f - v),
              (n[3] = 0),
              (n[4] = d - m),
              (n[5] = 1 - l - p),
              (n[6] = _ + g),
              (n[7] = 0),
              (n[8] = f + v),
              (n[9] = _ - g),
              (n[10] = 1 - l - h),
              (n[11] = 0),
              (n[12] = 0),
              (n[13] = 0),
              (n[14] = 0),
              (n[15] = 1);
          }),
          (e.rotationAxisAngle = function (e, t, n) {
            var i,
              r,
              o,
              s = n.elements,
              c = e.x,
              u = e.y,
              l = e.z,
              d = Math.sqrt(c * c + u * u + l * l);
            Math.abs(d) < a.zeroTolerance ||
              ((d = 1 / d),
              (c *= d),
              (u *= d),
              (l *= d),
              (i = Math.sin(t)),
              (r = Math.cos(t)),
              (o = 1 - r),
              (s[0] = c * c * o + r),
              (s[1] = u * c * o + l * i),
              (s[2] = l * c * o - u * i),
              (s[3] = 0),
              (s[4] = c * u * o - l * i),
              (s[5] = u * u * o + r),
              (s[6] = l * u * o + c * i),
              (s[7] = 0),
              (s[8] = c * l * o + u * i),
              (s[9] = u * l * o - c * i),
              (s[10] = l * l * o + r),
              (s[11] = 0),
              (s[12] = 0),
              (s[13] = 0),
              (s[14] = 0),
              (s[15] = 1));
          }),
          (e.rotationTranslation = function (t, n, i) {
            e.rotationQuaternion(t, i);
            var r = i.elements;
            (r[12] = n.x), (r[13] = n.y), (r[14] = n.z);
          }),
          (e.affineTransformation = function (e, t, n, i) {
            var r = i.elements,
              a = t.x,
              o = t.y,
              s = t.z,
              c = t.w,
              u = a + a,
              l = o + o,
              d = s + s,
              h = a * u,
              f = a * l,
              _ = a * d,
              p = o * l,
              g = o * d,
              v = s * d,
              m = c * u,
              y = c * l,
              x = c * d,
              b = e.x,
              w = e.y,
              A = e.z;
            (r[0] = (1 - (p + v)) * b),
              (r[1] = (f + x) * b),
              (r[2] = (_ - y) * b),
              (r[3] = 0),
              (r[4] = (f - x) * w),
              (r[5] = (1 - (h + v)) * w),
              (r[6] = (g + m) * w),
              (r[7] = 0),
              (r[8] = (_ + y) * A),
              (r[9] = (g - m) * A),
              (r[10] = (1 - (h + p)) * A),
              (r[11] = 0),
              (r[12] = n.x),
              (r[13] = n.y),
              (r[14] = n.z),
              (r[15] = 1);
          }),
          (e.scaling = function (e, t) {
            var n = t.elements;
            (n[0] = e.x),
              (n[1] = 0),
              (n[2] = 0),
              (n[3] = 0),
              (n[4] = 0),
              (n[5] = e.y),
              (n[6] = 0),
              (n[7] = 0),
              (n[8] = 0),
              (n[9] = 0),
              (n[10] = e.z),
              (n[11] = 0),
              (n[12] = 0),
              (n[13] = 0),
              (n[14] = 0),
              (n[15] = 1);
          }),
          (e.translation = function (e, t) {
            var n = t.elements;
            (n[0] = 1),
              (n[1] = 0),
              (n[2] = 0),
              (n[3] = 0),
              (n[4] = 0),
              (n[5] = 1),
              (n[6] = 0),
              (n[7] = 0),
              (n[8] = 0),
              (n[9] = 0),
              (n[10] = 1),
              (n[11] = 0),
              (n[12] = e.x),
              (n[13] = e.y),
              (n[14] = e.z),
              (n[15] = 1);
          }),
          (e.invert = function (e, t) {
            var n = e.elements,
              i = t.elements,
              r = n[0],
              a = n[1],
              o = n[2],
              s = n[3],
              c = n[4],
              u = n[5],
              l = n[6],
              d = n[7],
              h = n[8],
              f = n[9],
              _ = n[10],
              p = n[11],
              g = n[12],
              v = n[13],
              m = n[14],
              y = n[15],
              x = r * u - a * c,
              b = r * l - o * c,
              w = r * d - s * c,
              A = a * l - o * u,
              T = a * d - s * u,
              M = o * d - s * l,
              C = h * v - f * g,
              P = h * m - _ * g,
              S = h * y - p * g,
              R = f * m - _ * v,
              E = f * y - p * v,
              O = _ * y - p * m,
              L = x * O - b * E + w * R + A * S - T * P + M * C;
            if (!L) return null;
            (L = 1 / L),
              (i[0] = (u * O - l * E + d * R) * L),
              (i[1] = (o * E - a * O - s * R) * L),
              (i[2] = (v * M - m * T + y * A) * L),
              (i[3] = (_ * T - f * M - p * A) * L),
              (i[4] = (l * S - c * O - d * P) * L),
              (i[5] = (r * O - o * S + s * P) * L),
              (i[6] = (m * w - g * M - y * b) * L),
              (i[7] = (h * M - _ * w + p * b) * L),
              (i[8] = (c * E - u * S + d * C) * L),
              (i[9] = (a * S - r * E - s * C) * L),
              (i[10] = (g * T - v * w + y * x) * L),
              (i[11] = (f * w - h * T - p * x) * L),
              (i[12] = (u * P - c * R - l * C) * L),
              (i[13] = (r * R - a * P + o * C) * L),
              (i[14] = (v * b - g * A - m * x) * L),
              (i[15] = (h * A - f * b + _ * x) * L);
          }),
          (e.lookAt = function (t, n, i, r) {
            var a = r.elements,
              s = e._tempVec30,
              c = e._tempVec31,
              u = e._tempVec32;
            o.subtract(t, n, u),
              u.normalize(),
              o.cross(i, u, s),
              s.normalize(),
              o.cross(u, s, c),
              (a[0] = s.x),
              (a[1] = c.x),
              (a[2] = u.x),
              (a[3] = 0),
              (a[4] = s.y),
              (a[5] = c.y),
              (a[6] = u.y),
              (a[7] = 0),
              (a[8] = s.z),
              (a[9] = c.z),
              (a[10] = u.z),
              (a[11] = 0),
              (a[12] = -o.dot(s, t)),
              (a[13] = -o.dot(c, t)),
              (a[14] = -o.dot(u, t)),
              (a[15] = 1);
          }),
          (e.ortho = function (e, t, n, i, r, a, o) {
            var s = o.elements,
              c = 1 / (e - t),
              u = 1 / (n - i),
              l = 1 / (r - a);
            (s[0] = -2 * c),
              (s[1] = 0),
              (s[2] = 0),
              (s[3] = 0),
              (s[4] = 0),
              (s[5] = -2 * u),
              (s[6] = 0),
              (s[7] = 0),
              (s[8] = 0),
              (s[9] = 0),
              (s[10] = 2 * l),
              (s[11] = 0),
              (s[12] = (e + t) * c),
              (s[13] = (i + n) * u),
              (s[14] = (a + r) * l),
              (s[15] = 1);
          }),
          (e.perspective = function (e, t, n, i, r) {
            var a = r.elements,
              o = 1 / Math.tan(e / 2),
              s = 1 / (n - i);
            (a[0] = o / t),
              (a[1] = 0),
              (a[2] = 0),
              (a[3] = 0),
              (a[4] = 0),
              (a[5] = o),
              (a[6] = 0),
              (a[7] = 0),
              (a[8] = 0),
              (a[9] = 0),
              (a[10] = (i + n) * s),
              (a[11] = -1),
              (a[12] = 0),
              (a[13] = 0),
              (a[14] = 2 * i * n * s),
              (a[15] = 0);
          }),
          (e.rotateAxisAngle = function (e, t, n, i) {
            var r = t.x,
              o = t.y,
              s = t.z,
              c = Math.sqrt(r * r + o * o + s * s);
            if (!(Math.abs(c) < a.zeroTolerance)) {
              var u,
                l,
                d,
                h = e.elements,
                f = i.elements;
              (c = 1 / c), (r *= c), (o *= c), (s *= c), (u = Math.sin(n)), (l = Math.cos(n)), (d = 1 - l);
              var _ = h[0],
                p = h[1],
                g = h[2],
                v = h[3],
                m = h[4],
                y = h[5],
                x = h[6],
                b = h[7],
                w = h[8],
                A = h[9],
                T = h[10],
                M = h[11],
                C = r * r * d + l,
                P = o * r * d + s * u,
                S = s * r * d - o * u,
                R = r * o * d - s * u,
                E = o * o * d + l,
                O = s * o * d + r * u,
                L = r * s * d + o * u,
                F = o * s * d - r * u,
                I = s * s * d + l;
              (f[0] = _ * C + m * P + w * S),
                (f[1] = p * C + y * P + A * S),
                (f[2] = g * C + x * P + T * S),
                (f[3] = v * C + b * P + M * S),
                (f[4] = _ * R + m * E + w * O),
                (f[5] = p * R + y * E + A * O),
                (f[6] = g * R + x * E + T * O),
                (f[7] = v * R + b * E + M * O),
                (f[8] = _ * L + m * F + w * I),
                (f[9] = p * L + y * F + A * I),
                (f[10] = g * L + x * F + T * I),
                (f[11] = v * L + b * F + M * I),
                e !== i && ((f[12] = h[12]), (f[13] = h[13]), (f[14] = h[14]), (f[15] = h[15]));
            }
          }),
          (e.scale = function (e, t, n) {
            var i = e.elements,
              r = n.elements,
              a = t.x,
              o = t.y,
              s = t.z;
            (r[0] = i[0] * a),
              (r[1] = i[1] * a),
              (r[2] = i[2] * a),
              (r[3] = i[3] * a),
              (r[4] = i[4] * o),
              (r[5] = i[5] * o),
              (r[6] = i[6] * o),
              (r[7] = i[7] * o),
              (r[8] = i[8] * s),
              (r[9] = i[9] * s),
              (r[10] = i[10] * s),
              (r[11] = i[11] * s),
              (r[12] = i[12]),
              (r[13] = i[13]),
              (r[14] = i[14]),
              (r[15] = i[15]);
          }),
          (e.translate = function (e, t, n) {
            var i = e.elements,
              r = n.elements,
              a = t.x,
              o = t.y,
              s = t.z;
            if (e === n)
              (r[12] = i[0] * a + i[4] * o + i[8] * s + i[12]),
                (r[13] = i[1] * a + i[5] * o + i[9] * s + i[13]),
                (r[14] = i[2] * a + i[6] * o + i[10] * s + i[14]),
                (r[15] = i[3] * a + i[7] * o + i[11] * s + i[15]);
            else {
              var c = i[0],
                u = i[1],
                l = i[2],
                d = i[3],
                h = i[4],
                f = i[5],
                _ = i[6],
                p = i[7],
                g = i[8],
                v = i[9],
                m = i[10],
                y = i[11];
              (r[0] = c),
                (r[1] = u),
                (r[2] = l),
                (r[3] = d),
                (r[4] = h),
                (r[5] = f),
                (r[6] = _),
                (r[7] = p),
                (r[8] = g),
                (r[9] = v),
                (r[10] = m),
                (r[11] = y),
                (r[12] = c * a + h * o + g * s + i[12]),
                (r[13] = u * a + f * o + v * s + i[13]),
                (r[14] = l * a + _ * o + m * s + i[14]),
                (r[15] = d * a + p * o + y * s + i[15]);
            }
          }),
          (e.transpose = function (e, t) {
            var n = e.elements,
              i = t.elements;
            if (t === e) {
              var r = n[1],
                a = n[2],
                o = n[3],
                s = n[6],
                c = n[7],
                u = n[11];
              (i[1] = n[4]),
                (i[2] = n[8]),
                (i[3] = n[12]),
                (i[4] = r),
                (i[6] = n[9]),
                (i[7] = n[13]),
                (i[8] = a),
                (i[9] = s),
                (i[11] = n[14]),
                (i[12] = o),
                (i[13] = c),
                (i[14] = u);
            } else
              (i[0] = n[0]),
                (i[1] = n[4]),
                (i[2] = n[8]),
                (i[3] = n[12]),
                (i[4] = n[1]),
                (i[5] = n[5]),
                (i[6] = n[9]),
                (i[7] = n[13]),
                (i[8] = n[2]),
                (i[9] = n[6]),
                (i[10] = n[10]),
                (i[11] = n[14]),
                (i[12] = n[3]),
                (i[13] = n[7]),
                (i[14] = n[11]),
                (i[15] = n[15]);
          });
        var t = e.prototype;
        return (
          (t.setValue = function (e, t, n, i, r, a, o, s, c, u, l, d, h, f, _, p) {
            var g = this.elements;
            return (
              (g[0] = e),
              (g[1] = t),
              (g[2] = n),
              (g[3] = i),
              (g[4] = r),
              (g[5] = a),
              (g[6] = o),
              (g[7] = s),
              (g[8] = c),
              (g[9] = u),
              (g[10] = l),
              (g[11] = d),
              (g[12] = h),
              (g[13] = f),
              (g[14] = _),
              (g[15] = p),
              this
            );
          }),
          (t.setValueByArray = function (e, t) {
            void 0 === t && (t = 0);
            for (var n = this.elements, i = 0; i < 16; i++) n[i] = e[i + t];
            return this;
          }),
          (t.toArray = function (e, t) {
            void 0 === t && (t = 0);
            var n = this.elements;
            (e[t] = n[0]),
              (e[t + 1] = n[1]),
              (e[t + 2] = n[2]),
              (e[t + 3] = n[3]),
              (e[t + 4] = n[4]),
              (e[t + 5] = n[5]),
              (e[t + 6] = n[6]),
              (e[t + 7] = n[7]),
              (e[t + 8] = n[8]),
              (e[t + 9] = n[9]),
              (e[t + 10] = n[10]),
              (e[t + 11] = n[11]),
              (e[t + 12] = n[12]),
              (e[t + 13] = n[13]),
              (e[t + 14] = n[14]),
              (e[t + 15] = n[15]);
          }),
          (t.clone = function () {
            var t = this.elements,
              n = new e(
                t[0],
                t[1],
                t[2],
                t[3],
                t[4],
                t[5],
                t[6],
                t[7],
                t[8],
                t[9],
                t[10],
                t[11],
                t[12],
                t[13],
                t[14],
                t[15]
              );
            return n;
          }),
          (t.cloneTo = function (e) {
            var t = this.elements,
              n = e.elements;
            return (
              (n[0] = t[0]),
              (n[1] = t[1]),
              (n[2] = t[2]),
              (n[3] = t[3]),
              (n[4] = t[4]),
              (n[5] = t[5]),
              (n[6] = t[6]),
              (n[7] = t[7]),
              (n[8] = t[8]),
              (n[9] = t[9]),
              (n[10] = t[10]),
              (n[11] = t[11]),
              (n[12] = t[12]),
              (n[13] = t[13]),
              (n[14] = t[14]),
              (n[15] = t[15]),
              e
            );
          }),
          (t.multiply = function (t) {
            return e.multiply(this, t, this), this;
          }),
          (t.determinant = function () {
            var e = this.elements,
              t = e[0],
              n = e[1],
              i = e[2],
              r = e[3],
              a = e[4],
              o = e[5],
              s = e[6],
              c = e[7],
              u = e[8],
              l = e[9],
              d = e[10],
              h = e[11],
              f = e[12],
              _ = e[13],
              p = e[14],
              g = e[15],
              v = t * o - n * a,
              m = t * s - i * a,
              y = t * c - r * a,
              x = n * s - i * o,
              b = n * c - r * o,
              w = i * c - r * s,
              A = u * _ - l * f,
              T = u * p - d * f,
              M = u * g - h * f,
              C = l * p - d * _,
              P = l * g - h * _,
              S = d * g - h * p;
            return v * S - m * P + y * C + x * M - b * T + w * A;
          }),
          (t.decompose = function (t, n, i) {
            var r = e._tempMat30,
              o = this.elements,
              s = r.elements,
              c = o[0],
              u = o[1],
              l = o[2],
              d = o[3],
              h = o[4],
              _ = o[5],
              p = o[6],
              g = o[7],
              v = o[8],
              m = o[9],
              y = o[10],
              x = o[11];
            (t.x = o[12]), (t.y = o[13]), (t.z = o[14]);
            var b = Math.sign(c * u * l * d) < 0 ? -1 : 1,
              w = Math.sign(h * _ * p * g) < 0 ? -1 : 1,
              A = Math.sign(v * m * y * x) < 0 ? -1 : 1,
              T = b * Math.sqrt(c * c + u * u + l * l),
              M = w * Math.sqrt(h * h + _ * _ + p * p),
              C = A * Math.sqrt(v * v + m * m + y * y);
            if (
              ((i.x = T),
              (i.y = M),
              (i.z = C),
              Math.abs(T) < a.zeroTolerance || Math.abs(M) < a.zeroTolerance || Math.abs(C) < a.zeroTolerance)
            )
              return n.identity(), !1;
            var P = 1 / T,
              S = 1 / M,
              R = 1 / C;
            return (
              (s[0] = c * P),
              (s[1] = u * P),
              (s[2] = l * P),
              (s[3] = h * S),
              (s[4] = _ * S),
              (s[5] = p * S),
              (s[6] = v * R),
              (s[7] = m * R),
              (s[8] = y * R),
              f.rotationMatrix3x3(r, n),
              !0
            );
          }),
          (t.getRotation = function (e) {
            var t = this.elements,
              n = t[0] + t[5] + t[10];
            if (n > a.zeroTolerance) {
              var i = 2 * Math.sqrt(n + 1);
              (e.w = 0.25 * i), (e.x = (t[6] - t[9]) / i), (e.y = (t[8] - t[2]) / i), (e.z = (t[1] - t[4]) / i);
            } else if (t[0] > t[5] && t[0] > t[10]) {
              var r = 2 * Math.sqrt(1 + t[0] - t[5] - t[10]);
              (e.w = (t[6] - t[9]) / r), (e.x = 0.25 * r), (e.y = (t[1] + t[4]) / r), (e.z = (t[8] + t[2]) / r);
            } else if (t[5] > t[10]) {
              var o = 2 * Math.sqrt(1 + t[5] - t[0] - t[10]);
              (e.w = (t[8] - t[2]) / o), (e.x = (t[1] + t[4]) / o), (e.y = 0.25 * o), (e.z = (t[6] + t[9]) / o);
            } else {
              var s = 2 * Math.sqrt(1 + t[10] - t[0] - t[5]);
              (e.w = (t[1] - t[4]) / s), (e.x = (t[8] + t[2]) / s), (e.y = (t[6] + t[9]) / s), (e.z = 0.25 * s);
            }
            return e;
          }),
          (t.getScaling = function (e) {
            var t = this.elements,
              n = t[0],
              i = t[1],
              r = t[2],
              a = t[4],
              o = t[5],
              s = t[6],
              c = t[8],
              u = t[9],
              l = t[10];
            return (
              (e.x = Math.sqrt(n * n + i * i + r * r)),
              (e.y = Math.sqrt(a * a + o * o + s * s)),
              (e.z = Math.sqrt(c * c + u * u + l * l)),
              e
            );
          }),
          (t.getTranslation = function (e) {
            var t = this.elements;
            return (e.x = t[12]), (e.y = t[13]), (e.z = t[14]), e;
          }),
          (t.identity = function () {
            var e = this.elements;
            return (
              (e[0] = 1),
              (e[1] = 0),
              (e[2] = 0),
              (e[3] = 0),
              (e[4] = 0),
              (e[5] = 1),
              (e[6] = 0),
              (e[7] = 0),
              (e[8] = 0),
              (e[9] = 0),
              (e[10] = 1),
              (e[11] = 0),
              (e[12] = 0),
              (e[13] = 0),
              (e[14] = 0),
              (e[15] = 1),
              this
            );
          }),
          (t.invert = function () {
            return e.invert(this, this), this;
          }),
          (t.rotateAxisAngle = function (t, n) {
            return e.rotateAxisAngle(this, t, n, this), this;
          }),
          (t.scale = function (t) {
            return e.scale(this, t, this), this;
          }),
          (t.translate = function (t) {
            return e.translate(this, t, this), this;
          }),
          (t.transpose = function () {
            return e.transpose(this, this), this;
          }),
          e
        );
      })();
      (_._tempVec30 = new o()),
        (_._tempVec31 = new o()),
        (_._tempVec32 = new o()),
        (_._tempMat30 = new h()),
        (_._identity = new _(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1));
      var p = (function () {
          function e(e, t) {
            void 0 === e && (e = null),
              void 0 === t && (t = null),
              (this.origin = new o()),
              (this.direction = new o()),
              e && e.cloneTo(this.origin),
              t && t.cloneTo(this.direction);
          }
          var t = e.prototype;
          return (
            (t.intersectPlane = function (e) {
              return u.intersectsRayAndPlane(this, e);
            }),
            (t.intersectSphere = function (e) {
              return u.intersectsRayAndSphere(this, e);
            }),
            (t.intersectBox = function (e) {
              return u.intersectsRayAndBox(this, e);
            }),
            (t.getPoint = function (e, t) {
              return o.scale(this.direction, e, t), t.add(this.origin);
            }),
            e
          );
        })(),
        g = a.zeroTolerance,
        v = (function () {
          function e(e, t, n) {
            (this.radius = void 0),
              (this.phi = void 0),
              (this.theta = void 0),
              (this.radius = void 0 !== e ? e : 1),
              (this.phi = void 0 !== t ? t : 0),
              (this.theta = void 0 !== n ? n : 0);
          }
          var t = e.prototype;
          return (
            (t.set = function (e, t, n) {
              return (this.radius = e), (this.phi = t), (this.theta = n), this;
            }),
            (t.makeSafe = function () {
              return (this.phi = a.clamp(this.phi, g, Math.PI - g)), this;
            }),
            (t.setFromVec3 = function (e) {
              return (
                (this.radius = e.length()),
                0 === this.radius
                  ? ((this.theta = 0), (this.phi = 0))
                  : ((this.theta = Math.atan2(e.x, e.z)), (this.phi = Math.acos(a.clamp(e.y / this.radius, -1, 1)))),
                this
              );
            }),
            (t.setToVec3 = function (e) {
              var t = Math.sin(this.phi) * this.radius;
              return (
                (e.x = t * Math.sin(this.theta)),
                (e.y = Math.cos(this.phi) * this.radius),
                (e.z = t * Math.cos(this.theta)),
                this
              );
            }),
            e
          );
        })(),
        m = (function () {
          function e(e, t) {
            void 0 === e && (e = 0),
              void 0 === t && (t = 0),
              (this.x = void 0),
              (this.y = void 0),
              (this.x = e),
              (this.y = t);
          }
          (e.add = function (e, t, n) {
            (n.x = e.x + t.x), (n.y = e.y + t.y);
          }),
            (e.subtract = function (e, t, n) {
              (n.x = e.x - t.x), (n.y = e.y - t.y);
            }),
            (e.multiply = function (e, t, n) {
              (n.x = e.x * t.x), (n.y = e.y * t.y);
            }),
            (e.divide = function (e, t, n) {
              (n.x = e.x / t.x), (n.y = e.y / t.y);
            }),
            (e.dot = function (e, t) {
              return e.x * t.x + e.y * t.y;
            }),
            (e.distance = function (e, t) {
              var n = t.x - e.x,
                i = t.y - e.y;
              return Math.sqrt(n * n + i * i);
            }),
            (e.distanceSquared = function (e, t) {
              var n = t.x - e.x,
                i = t.y - e.y;
              return n * n + i * i;
            }),
            (e.equals = function (e, t) {
              return a.equals(e.x, t.x) && a.equals(e.y, t.y);
            }),
            (e.lerp = function (e, t, n, i) {
              var r = e.x,
                a = e.y;
              (i.x = r + (t.x - r) * n), (i.y = a + (t.y - a) * n);
            }),
            (e.max = function (e, t, n) {
              (n.x = Math.max(e.x, t.x)), (n.y = Math.max(e.y, t.y));
            }),
            (e.min = function (e, t, n) {
              (n.x = Math.min(e.x, t.x)), (n.y = Math.min(e.y, t.y));
            }),
            (e.negate = function (e, t) {
              (t.x = -e.x), (t.y = -e.y);
            }),
            (e.normalize = function (e, t) {
              var n = e.x,
                i = e.y,
                r = Math.sqrt(n * n + i * i);
              r > a.zeroTolerance && ((r = 1 / r), (t.x = n * r), (t.y = i * r));
            }),
            (e.scale = function (e, t, n) {
              (n.x = e.x * t), (n.y = e.y * t);
            });
          var t = e.prototype;
          return (
            (t.setValue = function (e, t) {
              return (this.x = e), (this.y = t), this;
            }),
            (t.setValueByArray = function (e, t) {
              return void 0 === t && (t = 0), (this.x = e[t]), (this.y = e[t + 1]), this;
            }),
            (t.add = function (e) {
              return (this.x += e.x), (this.y += e.y), this;
            }),
            (t.subtract = function (e) {
              return (this.x -= e.x), (this.y -= e.y), this;
            }),
            (t.multiply = function (e) {
              return (this.x *= e.x), (this.y *= e.y), this;
            }),
            (t.divide = function (e) {
              return (this.x /= e.x), (this.y /= e.y), this;
            }),
            (t.length = function () {
              var e = this.x,
                t = this.y;
              return Math.sqrt(e * e + t * t);
            }),
            (t.lengthSquared = function () {
              var e = this.x,
                t = this.y;
              return e * e + t * t;
            }),
            (t.negate = function () {
              return (this.x = -this.x), (this.y = -this.y), this;
            }),
            (t.normalize = function () {
              return e.normalize(this, this), this;
            }),
            (t.scale = function (e) {
              return (this.x *= e), (this.y *= e), this;
            }),
            (t.toArray = function (e, t) {
              void 0 === t && (t = 0), (e[t] = this.x), (e[t + 1] = this.y);
            }),
            (t.clone = function () {
              return new e(this.x, this.y);
            }),
            (t.cloneTo = function (e) {
              return (e.x = this.x), (e.y = this.y), e;
            }),
            e
          );
        })();
      (m._zero = new m(0, 0)), (m._one = new m(1, 1));
      var y = (function () {
        function e(e, t, n, i) {
          void 0 === e && (e = 0),
            void 0 === t && (t = 0),
            void 0 === n && (n = 0),
            void 0 === i && (i = 0),
            (this.x = void 0),
            (this.y = void 0),
            (this.z = void 0),
            (this.w = void 0),
            (this.x = e),
            (this.y = t),
            (this.z = n),
            (this.w = i);
        }
        (e.add = function (e, t, n) {
          (n.x = e.x + t.x), (n.y = e.y + t.y), (n.z = e.z + t.z), (n.w = e.w + t.w);
        }),
          (e.subtract = function (e, t, n) {
            (n.x = e.x - t.x), (n.y = e.y - t.y), (n.z = e.z - t.z), (n.w = e.w - t.w);
          }),
          (e.multiply = function (e, t, n) {
            (n.x = e.x * t.x), (n.y = e.y * t.y), (n.z = e.z * t.z), (n.w = e.w * t.w);
          }),
          (e.divide = function (e, t, n) {
            (n.x = e.x / t.x), (n.y = e.y / t.y), (n.z = e.z / t.z), (n.w = e.w / t.w);
          }),
          (e.dot = function (e, t) {
            return e.x * t.x + e.y * t.y + e.z * t.z + e.w * t.w;
          }),
          (e.distance = function (e, t) {
            var n = t.x - e.x,
              i = t.y - e.y,
              r = t.z - e.z,
              a = t.w - e.w;
            return Math.sqrt(n * n + i * i + r * r + a * a);
          }),
          (e.distanceSquared = function (e, t) {
            var n = t.x - e.x,
              i = t.y - e.y,
              r = t.z - e.z,
              a = t.w - e.w;
            return n * n + i * i + r * r + a * a;
          }),
          (e.equals = function (e, t) {
            return a.equals(e.x, t.x) && a.equals(e.y, t.y) && a.equals(e.z, t.z) && a.equals(e.w, t.w);
          }),
          (e.lerp = function (e, t, n, i) {
            var r = e.x,
              a = e.y,
              o = e.z,
              s = e.w;
            (i.x = r + (t.x - r) * n), (i.y = a + (t.y - a) * n), (i.z = o + (t.z - o) * n), (i.w = s + (t.w - s) * n);
          }),
          (e.max = function (e, t, n) {
            (n.x = Math.max(e.x, t.x)),
              (n.y = Math.max(e.y, t.y)),
              (n.z = Math.max(e.z, t.z)),
              (n.w = Math.max(e.w, t.w));
          }),
          (e.min = function (e, t, n) {
            (n.x = Math.min(e.x, t.x)),
              (n.y = Math.min(e.y, t.y)),
              (n.z = Math.min(e.z, t.z)),
              (n.w = Math.min(e.w, t.w));
          }),
          (e.negate = function (e, t) {
            (t.x = -e.x), (t.y = -e.y), (t.z = -e.z), (t.w = -e.w);
          }),
          (e.normalize = function (e, t) {
            var n = e.x,
              i = e.y,
              r = e.z,
              o = e.w,
              s = Math.sqrt(n * n + i * i + r * r + o * o);
            s > a.zeroTolerance && ((s = 1 / s), (t.x = n * s), (t.y = i * s), (t.z = r * s), (t.w = o * s));
          }),
          (e.scale = function (e, t, n) {
            (n.x = e.x * t), (n.y = e.y * t), (n.z = e.z * t), (n.w = e.w * t);
          }),
          (e.transform = function (e, t, n) {
            var i = e.x,
              r = e.y,
              a = e.z,
              o = e.w,
              s = t.elements;
            (n.x = i * s[0] + r * s[4] + a * s[8] + o * s[12]),
              (n.y = i * s[1] + r * s[5] + a * s[9] + o * s[13]),
              (n.z = i * s[2] + r * s[6] + a * s[10] + o * s[14]),
              (n.w = i * s[3] + r * s[7] + a * s[11] + o * s[15]);
          }),
          (e.transformByQuat = function (e, t, n) {
            var i = e.x,
              r = e.y,
              a = e.z,
              o = e.w,
              s = t.x,
              c = t.y,
              u = t.z,
              l = t.w,
              d = l * i + c * a - u * r,
              h = l * r + u * i - s * a,
              f = l * a + s * r - c * i,
              _ = -s * i - c * r - u * a;
            (n.x = d * l - _ * s - h * u + f * c),
              (n.y = h * l - _ * c - f * s + d * u),
              (n.z = f * l - _ * u - d * c + h * s),
              (n.w = o);
          });
        var t = e.prototype;
        return (
          (t.setValue = function (e, t, n, i) {
            return (this.x = e), (this.y = t), (this.z = n), (this.w = i), this;
          }),
          (t.setValueByArray = function (e, t) {
            return (
              void 0 === t && (t = 0),
              (this.x = e[t]),
              (this.y = e[t + 1]),
              (this.z = e[t + 2]),
              (this.w = e[t + 3]),
              this
            );
          }),
          (t.add = function (e) {
            return (this.x += e.x), (this.y += e.y), (this.z += e.z), (this.w += e.w), this;
          }),
          (t.subtract = function (e) {
            return (this.x -= e.x), (this.y -= e.y), (this.z -= e.z), (this.w -= e.w), this;
          }),
          (t.multiply = function (e) {
            return (this.x *= e.x), (this.y *= e.y), (this.z *= e.z), (this.w *= e.w), this;
          }),
          (t.divide = function (e) {
            return (this.x /= e.x), (this.y /= e.y), (this.z /= e.z), (this.w /= e.w), this;
          }),
          (t.length = function () {
            var e = this.x,
              t = this.y,
              n = this.z,
              i = this.w;
            return Math.sqrt(e * e + t * t + n * n + i * i);
          }),
          (t.lengthSquared = function () {
            var e = this.x,
              t = this.y,
              n = this.z,
              i = this.w;
            return e * e + t * t + n * n + i * i;
          }),
          (t.negate = function () {
            return (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), (this.w = -this.w), this;
          }),
          (t.normalize = function () {
            return e.normalize(this, this), this;
          }),
          (t.scale = function (e) {
            return (this.x *= e), (this.y *= e), (this.z *= e), (this.w *= e), this;
          }),
          (t.toArray = function (e, t) {
            void 0 === t && (t = 0), (e[t] = this.x), (e[t + 1] = this.y), (e[t + 2] = this.z), (e[t + 3] = this.w);
          }),
          (t.clone = function () {
            var t = new e(this.x, this.y, this.z, this.w);
            return t;
          }),
          (t.cloneTo = function (e) {
            return (e.x = this.x), (e.y = this.y), (e.z = this.z), (e.w = this.w), e;
          }),
          e
        );
      })();
      (y._zero = new y(0, 0, 0, 0)), (y._one = new y(1, 1, 1, 1));
      var x,
        b = (function () {
          function e(e, t, n, i) {
            void 0 === e && (e = 1),
              void 0 === t && (t = 1),
              void 0 === n && (n = 1),
              void 0 === i && (i = 1),
              (this.r = void 0),
              (this.g = void 0),
              (this.b = void 0),
              (this.a = void 0),
              (this.r = e),
              (this.g = t),
              (this.b = n),
              (this.a = i);
          }
          (e.gammaToLinearSpace = function (e) {
            return e <= 0
              ? 0
              : e <= 0.04045
              ? e / 12.92
              : e < 1
              ? Math.pow((e + 0.055) / 1.055, 2.4)
              : Math.pow(e, 2.4);
          }),
            (e.linearToGammaSpace = function (e) {
              return e <= 0
                ? 0
                : e < 0.0031308
                ? 12.92 * e
                : e < 1
                ? 1.055 * Math.pow(e, 0.41666) - 0.055
                : Math.pow(e, 0.41666);
            }),
            (e.equals = function (e, t) {
              return a.equals(e.r, t.r) && a.equals(e.g, t.g) && a.equals(e.b, t.b) && a.equals(e.a, t.a);
            });
          var t = e.prototype;
          return (
            (t.clone = function () {
              var t = new e(this.r, this.g, this.b, this.a);
              return t;
            }),
            (t.cloneTo = function (e) {
              return (e.r = this.r), (e.g = this.g), (e.b = this.b), (e.a = this.a), e;
            }),
            (t.toLinear = function (t) {
              return (
                (t.r = e.gammaToLinearSpace(this.r)),
                (t.g = e.gammaToLinearSpace(this.g)),
                (t.b = e.gammaToLinearSpace(this.b)),
                t
              );
            }),
            (t.toGamma = function (t) {
              return (
                (t.r = e.linearToGammaSpace(this.r)),
                (t.g = e.linearToGammaSpace(this.g)),
                (t.b = e.linearToGammaSpace(this.b)),
                t
              );
            }),
            e
          );
        })();
      function w(e, t) {
        for (var n = 0; n < t.length; n++) {
          var i = t[n];
          (i.enumerable = i.enumerable || !1),
            (i.configurable = !0),
            "value" in i && (i.writable = !0),
            Object.defineProperty(e, i.key, i);
        }
      }
      function A(e, t, n) {
        return t && w(e.prototype, t), n && w(e, n), e;
      }
      function T(e, t, n) {
        return (
          t in e
            ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 })
            : (e[t] = n),
          e
        );
      }
      function M() {
        return (
          (M =
            Object.assign ||
            function (e) {
              for (var t = 1; t < arguments.length; t++) {
                var n = arguments[t];
                for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && (e[i] = n[i]);
              }
              return e;
            }),
          M.apply(this, arguments)
        );
      }
      function C(e, t) {
        var n = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(e);
          t &&
            (i = i.filter(function (t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function P(e) {
        for (var t = 1; t < arguments.length; t++) {
          var n = null != arguments[t] ? arguments[t] : {};
          t % 2
            ? C(Object(n), !0).forEach(function (t) {
                T(e, t, n[t]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n))
            : C(Object(n)).forEach(function (t) {
                Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
              });
        }
        return e;
      }
      function S(e, t) {
        (e.prototype = Object.create(t.prototype)), (e.prototype.constructor = e), (e.__proto__ = t);
      }
      function R(e) {
        return (
          (R = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function (e) {
                return e.__proto__ || Object.getPrototypeOf(e);
              }),
          R(e)
        );
      }
      function E(e, t) {
        return (
          (E =
            Object.setPrototypeOf ||
            function (e, t) {
              return (e.__proto__ = t), e;
            }),
          E(e, t)
        );
      }
      function O() {
        if ("undefined" === typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ("function" === typeof Proxy) return !0;
        try {
          return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
        } catch (e) {
          return !1;
        }
      }
      function L(e, t, n) {
        return (
          (L = O()
            ? Reflect.construct
            : function (e, t, n) {
                var i = [null];
                i.push.apply(i, t);
                var r = Function.bind.apply(e, i),
                  a = new r();
                return n && E(a, n.prototype), a;
              }),
          L.apply(null, arguments)
        );
      }
      function F(e) {
        return -1 !== Function.toString.call(e).indexOf("[native code]");
      }
      function I(e) {
        var t = "function" === typeof Map ? new Map() : void 0;
        return (
          (I = function (e) {
            if (null === e || !F(e)) return e;
            if ("function" !== typeof e) throw new TypeError("Super expression must either be null or a function");
            if ("undefined" !== typeof t) {
              if (t.has(e)) return t.get(e);
              t.set(e, n);
            }
            function n() {
              return L(e, arguments, R(this).constructor);
            }
            return (
              (n.prototype = Object.create(e.prototype, {
                constructor: { value: n, enumerable: !1, writable: !0, configurable: !0 }
              })),
              E(n, e)
            );
          }),
          I(e)
        );
      }
      function z(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
      }
      function B(e, t) {
        if (e) {
          if ("string" === typeof e) return D(e, t);
          var n = Object.prototype.toString.call(e).slice(8, -1);
          return (
            "Object" === n && e.constructor && (n = e.constructor.name),
            "Map" === n || "Set" === n
              ? Array.from(e)
              : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
              ? D(e, t)
              : void 0
          );
        }
      }
      function D(e, t) {
        (null == t || t > e.length) && (t = e.length);
        for (var n = 0, i = new Array(t); n < t; n++) i[n] = e[n];
        return i;
      }
      function N(e, t) {
        var n;
        if ("undefined" === typeof Symbol || null == e[Symbol.iterator]) {
          if (Array.isArray(e) || (n = B(e)) || (t && e && "number" === typeof e.length)) {
            n && (e = n);
            var i = 0;
            return function () {
              return i >= e.length ? { done: !0 } : { done: !1, value: e[i++] };
            };
          }
          throw new TypeError(
            "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
          );
        }
        return (n = e[Symbol.iterator]()), n.next.bind(n);
      }
      function G(e, t, n, i) {
        n &&
          Object.defineProperty(e, t, {
            enumerable: n.enumerable,
            configurable: n.configurable,
            writable: n.writable,
            value: n.initializer ? n.initializer.call(i) : void 0
          });
      }
      function U(e, t, n, i, r) {
        var a = {};
        return (
          Object.keys(i).forEach(function (e) {
            a[e] = i[e];
          }),
          (a.enumerable = !!a.enumerable),
          (a.configurable = !!a.configurable),
          ("value" in a || a.initializer) && (a.writable = !0),
          (a = n
            .slice()
            .reverse()
            .reduce(function (n, i) {
              return i(e, t, n) || n;
            }, a)),
          r &&
            void 0 !== a.initializer &&
            ((a.value = a.initializer ? a.initializer.call(r) : void 0), (a.initializer = void 0)),
          void 0 === a.initializer && (Object.defineProperty(e, t, a), (a = null)),
          a
        );
      }
      (function (e) {
        (e[(e["Success"] = 0)] = "Success"), (e[(e["Pending"] = 1)] = "Pending"), (e[(e["Failed"] = 2)] = "Failed");
      })(x || (x = {}));
      var k = (function (e) {
          S(n, e),
            (n.all = function (e) {
              return new n(function (t, n, i) {
                if (!Array.isArray(e)) return t([e]);
                var r = 0,
                  a = e.length,
                  o = new Array(a);
                e.forEach(function (e, s) {
                  Promise.resolve(e)
                    .then(function (e) {
                      (o[s] = e), (r += 1), i(r / a), r == a && t(o);
                    })
                    ["catch"](function (e) {
                      return n(e);
                    });
                });
              });
            });
          var t = n.prototype;
          function n(t) {
            var n,
              i,
              r = function (e) {
                if (!(e <= n._progress)) {
                  n._progress = e;
                  for (var t, i = N(n._listeners); !(t = i()).done; ) {
                    var r = t.value;
                    r(e);
                  }
                }
              };
            return (
              (n =
                e.call(this, function (e, a) {
                  (i = function (e) {
                    Promise.resolve().then(function () {
                      (n._status = x.Failed), a(e);
                    });
                  }),
                    t(
                      function (t) {
                        Promise.resolve().then(function () {
                          r(1), (n._status = x.Success), e(t);
                        });
                      },
                      i,
                      function (e) {
                        Promise.resolve().then(function () {
                          r(e);
                        });
                      }
                    );
                }) || this),
              (n._status = void 0),
              (n._progress = void 0),
              (n._reject = void 0),
              (n._listeners = void 0),
              (n._reject = i),
              (n._listeners = new Set()),
              (n._progress = 0),
              (n._status = x.Pending),
              n
            );
          }
          return (
            (t.onProgress = function (e) {
              return this._listeners.add(e), this;
            }),
            (t.cancel = function () {
              return this._status !== x.Pending ? this : (this._reject("Promise Canceled"), this);
            }),
            A(n, [
              {
                key: "status",
                get: function () {
                  return this._status;
                }
              },
              {
                key: "progress",
                get: function () {
                  return this._progress;
                }
              }
            ]),
            n
          );
        })(I(Promise)),
        V = {
          isArray:
            "isArray" in Array
              ? Array.isArray
              : function (e) {
                  return "[object Array]" === toString.call(e);
                },
          isArrayLike: function (e) {
            return !!e && "number" === typeof e.length && "function" !== typeof e;
          },
          clone: function (e) {
            if ("object" !== typeof e || null === e) return e;
            var t;
            if (V.isArrayLike(e)) {
              t = e.slice();
              for (var n = 0, i = e.length; n < i; n++) t[n] = V.clone(e[n]);
            } else for (var r in ((t = {}), e)) e.hasOwnProperty(r) && (t[r] = V.clone(e[r]));
            return t;
          },
          downloadBlob: function (e, t) {
            if ((void 0 === t && (t = ""), navigator && navigator.msSaveBlob)) navigator.msSaveBlob(e, t);
            else {
              var n = window.URL.createObjectURL(e),
                i = document.createElement("a");
              document.body.appendChild(i),
                (i.style.display = "none"),
                (i.href = n),
                (i.download = t),
                i.addEventListener("click", function () {
                  i.parentElement && i.parentElement.removeChild(i);
                }),
                i.click(),
                window.URL.revokeObjectURL(n);
            }
          }
        };
      function H(e, t) {
        var n = e.indexOf(t);
        if (n < 0) return !1;
        var i = e.length - 1;
        if (n !== i) {
          var r = e[i];
          e[n] = r;
        }
        return e.length--, !0;
      }
      function W(e) {
        return Object.keys(e).map(function (t) {
          return e[t];
        });
      }
      var j = (function () {
        function e(e) {
          (this.engine = e),
            (this.retryCount = 1),
            (this.retryInterval = 0),
            (this.timeout = 2e4),
            (this._assetPool = Object.create(null)),
            (this._assetUrlPool = Object.create(null)),
            (this._refObjectPool = Object.create(null)),
            (this._loadingPromises = {});
        }
        (e._addLoader = function (e, t, n) {
          this._loaders[e] = t;
          for (var i = 0, r = n.length; i < r; i++) this._extTypeMapping[n[i]] = e;
        }),
          (e._getTypeByUrl = function (e) {
            var t = e.split("?")[0];
            return this._extTypeMapping[t.substring(t.lastIndexOf(".") + 1)];
          });
        var t = e.prototype;
        return (
          (t.load = function (e) {
            var t = this;
            if (!Array.isArray(e)) return this._loadSingleItem(e);
            var n = e.map(function (e) {
              return t._loadSingleItem(e);
            });
            return k.all(n);
          }),
          (t.cancelNotLoaded = function (e) {
            var t = this;
            if (e)
              if ("string" === typeof e) {
                var n;
                null === (n = this._loadingPromises[e]) || void 0 === n || n.cancel();
              } else
                e.forEach(function (e) {
                  var n;
                  null === (n = t._loadingPromises[e]) || void 0 === n || n.cancel();
                });
            else
              W(this._loadingPromises).forEach(function (e) {
                e.cancel();
              });
          }),
          (t.gc = function () {
            for (var e = W(this._refObjectPool), t = 0, n = e.length; t < n; t++) e[t].isGCIgnored || e[t].destroy();
          }),
          (t.getAssetPath = function (e) {
            return this._assetPool[e];
          }),
          (t._addAsset = function (e, t) {
            (this._assetPool[t.instanceId] = e), (this._assetUrlPool[e] = t);
          }),
          (t._deleteAsset = function (e) {
            var t = e.instanceId,
              n = this._assetPool[t];
            n && (delete this._assetPool[t], delete this._assetUrlPool[n]);
          }),
          (t._addRefObject = function (e, t) {
            this._refObjectPool[e] = t;
          }),
          (t._deleteRefObject = function (e) {
            delete this._refObjectPool[e];
          }),
          (t._assignDefaultOptions = function (t) {
            var n, i, r, a, o;
            if (((t.type = null != (n = t.type) ? n : e._getTypeByUrl(t.url)), void 0 === t.type))
              throw "asset type should be specified: " + t.url;
            return (
              (t.retryCount = null != (i = t.retryCount) ? i : this.retryCount),
              (t.timeout = null != (r = t.timeout) ? r : this.timeout),
              (t.retryInterval = null != (a = t.retryInterval) ? a : this.retryInterval),
              (t.url = null != (o = t.url) ? o : t.urls.join(",")),
              t
            );
          }),
          (t._loadSingleItem = function (t) {
            var n = this,
              i = this._assignDefaultOptions("string" === typeof t ? { url: t } : t),
              r = i.url;
            if (this._assetUrlPool[r])
              return new k(function (e) {
                e(n._assetUrlPool[r]);
              });
            if (this._loadingPromises[r]) return this._loadingPromises[i.url];
            var a = e._loaders[i.type],
              o = a.load(i, this);
            return (
              (this._loadingPromises[r] = o),
              o
                .then(function (e) {
                  a.useCache && n._addAsset(r, e), delete n._loadingPromises[r];
                })
                ["catch"](function () {}),
              o
            );
          }),
          e
        );
      })();
      function X(e, t, n) {
        return (
          void 0 === n && (n = !0),
          function (i) {
            var r = new i(n);
            j._addLoader(e, r, t);
          }
        );
      }
      (j._loaders = {}), (j._extTypeMapping = {});
      var K,
        q = (function () {
          function e(e, t, n, i) {
            void 0 === t && (t = null),
              void 0 === n && (n = {}),
              void 0 === i && (i = !0),
              (this.data = void 0),
              (this._timeStamp = void 0),
              (this._target = void 0),
              (this._currentTarget = void 0),
              (this._bubbles = void 0),
              (this._propagationStopped = void 0),
              (this._type = void 0),
              (this._timeStamp = new Date().getTime()),
              (this._target = t),
              (this.data = n),
              (this._currentTarget = null),
              (this._bubbles = i),
              (this._propagationStopped = !1),
              (this._type = e);
          }
          A(e, [
            {
              key: "propagationStopped",
              get: function () {
                return this._propagationStopped;
              }
            },
            {
              key: "target",
              get: function () {
                return this._target;
              },
              set: function (e) {
                this._target = e;
              }
            },
            {
              key: "timeStamp",
              get: function () {
                return this._timeStamp;
              }
            },
            {
              key: "currentTarget",
              get: function () {
                return this._currentTarget;
              },
              set: function (e) {
                this._currentTarget = e;
              }
            },
            {
              key: "bubbles",
              get: function () {
                return this._bubbles;
              }
            },
            {
              key: "type",
              get: function () {
                return this._type;
              }
            }
          ]);
          var t = e.prototype;
          return (
            (t.stopPropagation = function () {
              this._propagationStopped = !0;
            }),
            e
          );
        })();
      function Q(e, t) {
        re.registerCloneMode(e, t, K.Ignore);
      }
      function Y(e, t) {
        re.registerCloneMode(e, t, K.Assignment);
      }
      function J(e, t) {
        re.registerCloneMode(e, t, K.Shallow);
      }
      function Z(e, t) {
        re.registerCloneMode(e, t, K.Deep);
      }
      (function (e) {
        (e[(e["Ignore"] = 0)] = "Ignore"),
          (e[(e["Assignment"] = 1)] = "Assignment"),
          (e[(e["Shallow"] = 2)] = "Shallow"),
          (e[(e["Deep"] = 3)] = "Deep");
      })(K || (K = {}));
      var $,
        ee,
        te,
        ne,
        ie,
        re = (function () {
          function e() {}
          return (
            (e.registerCloneMode = function (t, n, i) {
              var r = e._subCloneModeMap.get(t.constructor);
              r || ((r = Object.create(null)), e._subCloneModeMap.set(t.constructor, r)), (r[n] = i);
            }),
            (e.getCloneMode = function (t) {
              var n = e._cloneModeMap.get(t);
              if (!n) {
                (n = Object.create(null)), e._cloneModeMap.set(t, n);
                var i = e._obejctType,
                  r = e._subCloneModeMap;
                while (t !== i) {
                  var a = r.get(t);
                  a && M(n, a), (t = Object.getPrototypeOf(t));
                }
              }
              return n;
            }),
            (e.deepCloneObject = function (t, n) {
              var i = t.constructor;
              switch (i) {
                case Uint8Array:
                case Uint16Array:
                case Uint32Array:
                case Int8Array:
                case Int16Array:
                case Int32Array:
                case Float32Array:
                case Float64Array:
                  n.set(t);
                  break;
                case Array:
                  for (var r = 0, a = t.length; r < a; r++) e._deepCloneObjectItem(t, n, r);
                  break;
                default:
                  var o = t;
                  if (o.clone && o.cloneTo) o.cloneTo(n);
                  else for (var s = Object.keys(t), c = 0, u = s.length; c < u; c++) e._deepCloneObjectItem(t, n, s[c]);
              }
            }),
            (e._deepCloneObjectItem = function (t, n, i) {
              var r = t[i];
              if (r instanceof Object) {
                var a = r.constructor;
                switch (a) {
                  case Uint8Array:
                  case Uint16Array:
                  case Uint32Array:
                  case Int8Array:
                  case Int16Array:
                  case Int32Array:
                  case Float32Array:
                  case Float64Array:
                    var o = r,
                      s = n[i];
                    null == s ? (n[i] = o.slice()) : s.set(o);
                    break;
                  case Array:
                    var c = r,
                      u = n[i];
                    null == u ? (n[i] = new Array(c.length)) : (u.length = c.length), e.deepCloneObject(c, u);
                    break;
                  default:
                    if (!r.clone || !r.cloneTo) {
                      var l = n[i];
                      null == l && (n[i] = l = new r.constructor()), e.deepCloneObject(r, l);
                      break;
                    }
                    var d = r,
                      h = n[i];
                    h ? d.cloneTo(h) : (n[i] = d.clone());
                }
              } else n[i] = r;
            }),
            e
          );
        })();
      (re._subCloneModeMap = new Map()),
        (re._cloneModeMap = new Map()),
        (re._obejctType = Object.getPrototypeOf(Object));
      var ae,
        oe,
        se,
        ce,
        ue,
        le,
        de,
        he,
        fe,
        _e,
        pe,
        ge,
        ve,
        me,
        ye,
        xe,
        be =
          ((ie = ne = function (e) {
            G(this, "instanceId", ee, this), G(this, "_engine", te, this), (this._engine = e);
          }),
          (ne._instanceIdCounter = 0),
          ($ = ie),
          (ee = U($.prototype, "instanceId", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return ++be._instanceIdCounter;
            }
          })),
          (te = U($.prototype, "_engine", [Q], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          $),
        we =
          ((se = (function (e) {
            function t() {
              for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
              return (t = e.call.apply(e, [this].concat(i)) || this), G(t, "_evts", oe, z(t)), (t._evtCount = 0), t;
            }
            S(t, e);
            var n = t.prototype;
            return (
              (n.hasEvent = function (e) {
                return null != this._evts[e];
              }),
              (n.eventNames = function () {
                return 0 === this._evtCount ? [] : Object.keys(this._evts);
              }),
              (n.listenerCount = function (e) {
                var t = this._evts[e];
                return t ? (t.fn ? 1 : t.length) : 0;
              }),
              (n.dispatch = function (e, t) {
                if (!this._evts[e]) return !1;
                var n = this._evts[e];
                if (n.fn) n.once && this.removeEventListener(e, n.fn), n.fn(t);
                else
                  for (var i = n.length, r = 0; r < i; r++)
                    n[r].once && this.removeEventListener(e, n[r].fn), n[r].fn(t);
                return !0;
              }),
              (n.on = function (e, t) {
                return this.addEventListener(e, t);
              }),
              (n.once = function (e, t) {
                return this.addEventListener(e, t, !0);
              }),
              (n.addEventListener = function (e, t, n) {
                var i = { fn: t, once: n },
                  r = this._evts;
                return r[e] ? (r[e].fn ? (r[e] = [r[e], i]) : r[e].push(i)) : ((r[e] = i), this._evtCount++), this;
              }),
              (n.off = function (e, t) {
                if (!this._evts[e]) return this;
                if (!t) return this._clearEvent(e), this;
                var n = this._evts[e];
                if (n.fn && n.fn === t) this._clearEvent(e);
                else {
                  var i = n.indexOf(t);
                  if (i > -1) {
                    var r = n[n.length - 1];
                    (n[i] = r), n.length--, 1 === n.length && (this._evts[e] = n[0]);
                  }
                }
                return this;
              }),
              (n.removeEventListener = function (e, t) {
                return this.off(e, t);
              }),
              (n.removeAllEventListeners = function (e) {
                e ? this._evts[e] && this._clearEvent(e) : ((this._evts = Object.create(null)), (this._evtCount = 0));
              }),
              (n.trigger = function (e) {
                this.dispatch(e.type, e.data);
              }),
              (n._clearEvent = function (e) {
                0 === --this._evtCount ? (this._evts = Object.create(null)) : delete this._evts[e];
              }),
              t
            );
          })(be)),
          (ae = se),
          (oe = U(ae.prototype, "_evts", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return Object.create(null);
            }
          })),
          ae),
        Ae = function (e) {},
        Te = console.log.bind(console),
        Me = console.info.bind(console),
        Ce = console.warn.bind(console),
        Pe = console.error.bind(console),
        Se = {
          debug: Ae,
          info: Ae,
          warn: Ae,
          error: Ae,
          isEnabled: !1,
          enable: function () {
            (this.debug = Te), (this.info = Me), (this.warn = Ce), (this.error = Pe), (this.isEnabled = !0);
          },
          disable: function () {
            (this.debug = Ae), (this.info = Ae), (this.warn = Ae), (this.error = Ae), (this.isEnabled = !1);
          }
        },
        Re = (function () {
          function e() {
            (this._clock = void 0),
              (this._timeScale = void 0),
              (this._deltaTime = void 0),
              (this._startTime = void 0),
              (this._lastTickTime = void 0),
              (this._clock = performance || Date),
              (this._timeScale = 1),
              (this._deltaTime = 1e-4);
            var e = this._clock.now();
            (this._startTime = e), (this._lastTickTime = e);
          }
          var t = e.prototype;
          return (
            (t.reset = function () {
              this._lastTickTime = this._clock.now();
            }),
            (t.tick = function () {
              var e = this.nowTime;
              (this._deltaTime = (e - this._lastTickTime) * this._timeScale), (this._lastTickTime = e);
            }),
            A(e, [
              {
                key: "nowTime",
                get: function () {
                  return this._clock.now();
                }
              },
              {
                key: "deltaTime",
                get: function () {
                  return this._deltaTime;
                }
              },
              {
                key: "timeScale",
                get: function () {
                  return this._timeScale;
                },
                set: function (e) {
                  this._timeScale = e;
                }
              },
              {
                key: "unscaledDeltaTime",
                get: function () {
                  return this._deltaTime / this._timeScale;
                }
              },
              {
                key: "timeSinceStartup",
                get: function () {
                  return this.nowTime - this._startTime;
                }
              }
            ]),
            e
          );
        })();
      (function (e) {
        (e[(e["Scene"] = 1)] = "Scene"), (e[(e["Cache"] = 2)] = "Cache");
      })(ce || (ce = {})),
        (function (e) {
          (e[(e["DONT_CLEAR"] = 0)] = "DONT_CLEAR"),
            (e[(e["SOLID_COLOR"] = 1)] = "SOLID_COLOR"),
            (e[(e["DEPTH_ONLY"] = 2)] = "DEPTH_ONLY"),
            (e[(e["COLOR_ONLY"] = 3)] = "COLOR_ONLY"),
            (e[(e["STENCIL_ONLY"] = 4)] = "STENCIL_ONLY"),
            (e[(e["ALL_CLEAR"] = 5)] = "ALL_CLEAR");
        })(ue || (ue = {})),
        (function (e) {
          (e[(e["OPAQUE"] = 1e3)] = "OPAQUE"), (e[(e["TRANSPARENT"] = 2e3)] = "TRANSPARENT");
        })(le || (le = {})),
        (function (e) {
          (e[(e["BLEND"] = 3042)] = "BLEND"),
            (e[(e["CULL_FACE"] = 2884)] = "CULL_FACE"),
            (e[(e["DEPTH_TEST"] = 2929)] = "DEPTH_TEST"),
            (e[(e["ALPHA_TEST"] = 3008)] = "ALPHA_TEST"),
            (e[(e["POLYGON_OFFSET_FILL"] = 32823)] = "POLYGON_OFFSET_FILL"),
            (e[(e["SAMPLE_ALPHA_TO_COVERAGE"] = 32926)] = "SAMPLE_ALPHA_TO_COVERAGE"),
            (e[(e["SCISSOR_TEST"] = 3089)] = "SCISSOR_TEST");
        })(de || (de = {})),
        (function (e) {
          (e[(e["CW"] = 2304)] = "CW"), (e[(e["CCW"] = 2305)] = "CCW");
        })(he || (he = {})),
        (function (e) {
          (e[(e["FRONT"] = 1028)] = "FRONT"),
            (e[(e["BACK"] = 1029)] = "BACK"),
            (e[(e["FRONT_AND_BACK"] = 1032)] = "FRONT_AND_BACK");
        })(fe || (fe = {})),
        (function (e) {
          (e[(e["FRONT"] = 0)] = "FRONT"),
            (e[(e["BACK"] = 1)] = "BACK"),
            (e[(e["NONE"] = 2)] = "NONE"),
            (e[(e["DOUBLE"] = 3)] = "DOUBLE");
        })(_e || (_e = {})),
        (function (e) {
          (e[(e["NEVER"] = 512)] = "NEVER"),
            (e[(e["LESS"] = 513)] = "LESS"),
            (e[(e["EQUAL"] = 514)] = "EQUAL"),
            (e[(e["LEQUAL"] = 515)] = "LEQUAL"),
            (e[(e["GREATER"] = 516)] = "GREATER"),
            (e[(e["NOTEQUAL"] = 517)] = "NOTEQUAL"),
            (e[(e["GEQUAL"] = 518)] = "GEQUAL"),
            (e[(e["ALWAYS"] = 519)] = "ALWAYS");
        })(pe || (pe = {})),
        (function (e) {
          (e[(e["FLOAT"] = 5126)] = "FLOAT"),
            (e[(e["FLOAT_VEC2"] = 35664)] = "FLOAT_VEC2"),
            (e[(e["FLOAT_VEC3"] = 35665)] = "FLOAT_VEC3"),
            (e[(e["FLOAT_VEC4"] = 35666)] = "FLOAT_VEC4"),
            (e[(e["INT"] = 5124)] = "INT"),
            (e[(e["INT_VEC2"] = 35667)] = "INT_VEC2"),
            (e[(e["INT_VEC3"] = 35668)] = "INT_VEC3"),
            (e[(e["INT_VEC4"] = 35669)] = "INT_VEC4"),
            (e[(e["BOOL"] = 35670)] = "BOOL"),
            (e[(e["BOOL_VEC2"] = 35671)] = "BOOL_VEC2"),
            (e[(e["BOOL_VEC3"] = 35672)] = "BOOL_VEC3"),
            (e[(e["BOOL_VEC4"] = 35673)] = "BOOL_VEC4"),
            (e[(e["FLOAT_MAT2"] = 35674)] = "FLOAT_MAT2"),
            (e[(e["FLOAT_MAT3"] = 35675)] = "FLOAT_MAT3"),
            (e[(e["FLOAT_MAT4"] = 35676)] = "FLOAT_MAT4"),
            (e[(e["FLOAT_ARRAY"] = 35677)] = "FLOAT_ARRAY"),
            (e[(e["FLOAT_VEC2_ARRAY"] = 1e5)] = "FLOAT_VEC2_ARRAY"),
            (e[(e["FLOAT_VEC3_ARRAY"] = 100001)] = "FLOAT_VEC3_ARRAY"),
            (e[(e["FLOAT_VEC4_ARRAY"] = 100002)] = "FLOAT_VEC4_ARRAY"),
            (e[(e["INT_ARRAY"] = 100003)] = "INT_ARRAY"),
            (e[(e["INT_VEC2_ARRAY"] = 100004)] = "INT_VEC2_ARRAY"),
            (e[(e["INT_VEC3_ARRAY"] = 100005)] = "INT_VEC3_ARRAY"),
            (e[(e["INT_VEC4_ARRAY"] = 100006)] = "INT_VEC4_ARRAY"),
            (e[(e["FLOAT_MAT2_ARRAY"] = 100007)] = "FLOAT_MAT2_ARRAY"),
            (e[(e["FLOAT_MAT3_ARRAY"] = 100008)] = "FLOAT_MAT3_ARRAY"),
            (e[(e["FLOAT_MAT4_ARRAY"] = 100009)] = "FLOAT_MAT4_ARRAY"),
            (e[(e["SAMPLER_2D_ARRAY"] = 100010)] = "SAMPLER_2D_ARRAY"),
            (e[(e["SAMPLER_CUBE_ARRAY"] = 100011)] = "SAMPLER_CUBE_ARRAY"),
            (e[(e["SAMPLER_2D"] = 35678)] = "SAMPLER_2D"),
            (e[(e["SAMPLER_CUBE"] = 35680)] = "SAMPLER_CUBE"),
            (e[(e["BYTE"] = 5120)] = "BYTE"),
            (e[(e["UNSIGNED_BYTE"] = 5121)] = "UNSIGNED_BYTE"),
            (e[(e["SHORT"] = 5122)] = "SHORT"),
            (e[(e["UNSIGNED_SHORT"] = 5123)] = "UNSIGNED_SHORT"),
            (e[(e["UNSIGNED_INT"] = 5125)] = "UNSIGNED_INT");
        })(ge || (ge = {})),
        (function (e) {
          (e[(e["LOCAL"] = 1)] = "LOCAL"),
            (e[(e["MODEL"] = 2)] = "MODEL"),
            (e[(e["VIEW"] = 3)] = "VIEW"),
            (e[(e["PROJECTION"] = 4)] = "PROJECTION"),
            (e[(e["MODELVIEW"] = 5)] = "MODELVIEW"),
            (e[(e["VIEWPROJECTION"] = 21)] = "VIEWPROJECTION"),
            (e[(e["MODELVIEWPROJECTION"] = 6)] = "MODELVIEWPROJECTION"),
            (e[(e["MODELINVERSE"] = 7)] = "MODELINVERSE"),
            (e[(e["VIEWINVERSE"] = 8)] = "VIEWINVERSE"),
            (e[(e["PROJECTIONINVERSE"] = 9)] = "PROJECTIONINVERSE"),
            (e[(e["MODELVIEWINVERSE"] = 10)] = "MODELVIEWINVERSE"),
            (e[(e["MODELVIEWPROJECTIONINVERSE"] = 11)] = "MODELVIEWPROJECTIONINVERSE"),
            (e[(e["MODELINVERSETRANSPOSE"] = 12)] = "MODELINVERSETRANSPOSE"),
            (e[(e["MODELVIEWINVERSETRANSPOSE"] = 13)] = "MODELVIEWINVERSETRANSPOSE"),
            (e[(e["VIEWPORT"] = 14)] = "VIEWPORT"),
            (e[(e["JOINTMATRIX"] = 15)] = "JOINTMATRIX"),
            (e[(e["MORPHWEIGHTS"] = 16)] = "MORPHWEIGHTS"),
            (e[(e["EYEPOS"] = 17)] = "EYEPOS"),
            (e[(e["TIME"] = 18)] = "TIME"),
            (e[(e["JOINTTEXTURE"] = 19)] = "JOINTTEXTURE"),
            (e[(e["JOINTCOUNT"] = 20)] = "JOINTCOUNT");
        })(ve || (ve = {})),
        (function (e) {
          (e[(e["ZERO"] = 0)] = "ZERO"),
            (e[(e["ONE"] = 1)] = "ONE"),
            (e[(e["SRC_COLOR"] = 768)] = "SRC_COLOR"),
            (e[(e["ONE_MINUS_SRC_COLOR"] = 769)] = "ONE_MINUS_SRC_COLOR"),
            (e[(e["SRC_ALPHA"] = 770)] = "SRC_ALPHA"),
            (e[(e["ONE_MINUS_SRC_ALPHA"] = 771)] = "ONE_MINUS_SRC_ALPHA"),
            (e[(e["DST_ALPHA"] = 772)] = "DST_ALPHA"),
            (e[(e["ONE_MINUS_DST_ALPHA"] = 773)] = "ONE_MINUS_DST_ALPHA"),
            (e[(e["DST_COLOR"] = 774)] = "DST_COLOR"),
            (e[(e["ONE_MINUS_DST_COLOR"] = 775)] = "ONE_MINUS_DST_COLOR"),
            (e[(e["SRC_ALPHA_SATURATE"] = 776)] = "SRC_ALPHA_SATURATE"),
            (e[(e["enumANT_COLOR"] = 32769)] = "enumANT_COLOR"),
            (e[(e["ONE_MINUS_enumANT_COLOR"] = 32770)] = "ONE_MINUS_enumANT_COLOR"),
            (e[(e["enumANT_ALPHA"] = 32771)] = "enumANT_ALPHA"),
            (e[(e["ONE_MINUS_enumANT_ALPHA"] = 32772)] = "ONE_MINUS_enumANT_ALPHA");
        })(me || (me = {})),
        (function (e) {
          (e[(e["ONCE"] = 1)] = "ONCE"), (e[(e["EVERYFRAME"] = 2)] = "EVERYFRAME");
        })(ye || (ye = {})),
        (function (e) {
          (e["standardDerivatives"] = "OES_standard_derivatives"),
            (e["shaderTextureLod"] = "EXT_shader_texture_lod"),
            (e["elementIndexUint"] = "OES_element_index_uint"),
            (e["depthTexture"] = "WEBGL_depth_texture"),
            (e["drawBuffers"] = "WEBGL_draw_buffers"),
            (e["vertexArrayObject"] = "OES_vertex_array_object"),
            (e["instancedArrays"] = "ANGLE_instanced_arrays"),
            (e["multipleSample"] = "multipleSampleOnlySupportedInWebGL2"),
            (e["textureFloat"] = "OES_texture_float"),
            (e["textureFloatLinear"] = "OES_texture_float_linear"),
            (e["textureHalfFloat"] = "OES_texture_half_float"),
            (e["textureHalfFloatLinear"] = "OES_texture_half_float_linear"),
            (e["WEBGL_colorBufferFloat"] = "WEBGL_color_buffer_float"),
            (e["colorBufferFloat"] = "EXT_color_buffer_float"),
            (e["colorBufferHalfFloat"] = "EXT_color_buffer_half_float"),
            (e["textureFilterAnisotropic"] = "EXT_texture_filter_anisotropic"),
            (e["astc"] = "WEBGL_compressed_texture_astc"),
            (e["astc_webkit"] = "WEBKIT_WEBGL_compressed_texture_astc"),
            (e["etc"] = "WEBGL_compressed_texture_etc"),
            (e["etc_webkit"] = "WEBKIT_WEBGL_compressed_texture_etc"),
            (e["etc1"] = "WEBGL_compressed_texture_etc1"),
            (e["etc1_webkit"] = "WEBKIT_WEBGL_compressed_texture_etc1"),
            (e["pvrtc"] = "WEBGL_compressed_texture_pvrtc"),
            (e["pvrtc_webkit"] = "WEBKIT_WEBGL_compressed_texture_pvrtc"),
            (e["s3tc"] = "WEBGL_compressed_texture_s3tc"),
            (e["s3tc_webkit"] = "WEBKIT_WEBGL_compressed_texture_s3tc");
        })(xe || (xe = {}));
      var Ee,
        Oe,
        Le,
        Fe,
        Ie,
        ze,
        Be,
        De = (function () {
          function e(e) {
            void 0 === e && (e = 0), (this._elements = void 0), (this.length = 0), (this._elements = new Array(e));
          }
          var t = e.prototype;
          return (
            (t.add = function (e) {
              this.length === this._elements.length ? this._elements.push(e) : (this._elements[this.length] = e),
                this.length++;
            }),
            (t["delete"] = function (e) {
              var t = this._elements.indexOf(e);
              this.deleteByIndex(t);
            }),
            (t.deleteByIndex = function (e) {
              var t = this._elements,
                n = null,
                i = this.length - 1;
              return e !== i && ((n = t[i]), (t[e] = n)), this.length--, n;
            }),
            (t.garbageCollection = function () {
              this._elements.length = this.length;
            }),
            e
          );
        })(),
        Ne = (function () {
          function e() {
            (this._mask = []), (this._length = 0);
          }
          e.unionCollection = function (e, t, n) {
            var i,
              r,
              a,
              o,
              s = n._mask;
            e._length < t._length
              ? ((i = e._length), (r = t._length), (a = e._mask), (o = t._mask))
              : ((i = t._length), (r = e._length), (a = t._mask), (o = e._mask));
            var c = 0;
            for (s.length < r && (s.length = r); c < i; c++) s[c] = a[c] | o[c];
            for (; c < r; c++) s[c] = o[c];
            n._length = r;
          };
          var t = e.prototype;
          return (
            (t.enable = function (e) {
              var t = e._index,
                n = t + 1,
                i = this._mask,
                r = this._length;
              if (r < n) {
                for (i.length < n && (i.length = n); r < t; r++) i[r] = 0;
                (i[t] = e._value), (this._length = n);
              } else i[t] |= e._value;
            }),
            (t.disable = function (e) {
              var t = e._index,
                n = this._mask,
                i = this._length - 1;
              if (!(t > i)) {
                var r = n[t] & ~e._value;
                t == i && 0 === r ? this._length-- : (n[t] = r);
              }
            }),
            (t.unionCollection = function (e) {
              var t = e._mask,
                n = e._length,
                i = this._mask,
                r = this._length;
              if (r < n) {
                i.length < n && (i.length = n);
                for (var a = 0; a < r; a++) i[a] |= t[a];
                for (; a < n; a++) i[a] = t[a];
                this._length = n;
              } else for (var o = 0; o < n; o++) i[o] |= t[o];
            }),
            (t.complementaryCollection = function (e) {
              for (var t = e._mask, n = this._mask, i = this._length - 1, r = Math.min(e._length - 1, i); r >= 0; r--) {
                var a = n[r] & ~t[r];
                r == i && 0 === a ? (i--, this._length--) : (n[r] = a);
              }
            }),
            (t.intersectionCollection = function (e) {
              for (var t = e._mask, n = this._mask, i = this._length - 1; i >= 0; i--) {
                var r = n[i] & t[i];
                0 == r && i == this._length - 1 ? this._length-- : (n[i] = r);
              }
            }),
            (t.isEnable = function (e) {
              var t = e._index;
              return !(t >= this._length) && 0 !== (this._mask[t] & e._value);
            }),
            (t.clear = function () {
              this._length = 0;
            }),
            e
          );
        })(),
        Ge = (function () {
          function e() {
            (this._onStartScripts = new De()),
              (this._onUpdateScripts = new De()),
              (this._onLateUpdateScripts = new De()),
              (this._destoryComponents = []),
              (this._onUpdateAnimations = new De()),
              (this._renderers = new De()),
              (this._onUpdateRenderers = new De()),
              (this._componentsContainerPool = []);
          }
          var t = e.prototype;
          return (
            (t.addRenderer = function (e) {
              (e._rendererIndex = this._renderers.length), this._renderers.add(e);
            }),
            (t.removeRenderer = function (e) {
              var t = this._renderers.deleteByIndex(e._rendererIndex);
              t && (t._rendererIndex = e._rendererIndex), (e._rendererIndex = -1);
            }),
            (t.addOnStartScript = function (e) {
              (e._onStartIndex = this._onStartScripts.length), this._onStartScripts.add(e);
            }),
            (t.removeOnStartScript = function (e) {
              var t = this._onStartScripts.deleteByIndex(e._onStartIndex);
              t && (t._onStartIndex = e._onStartIndex), (e._onStartIndex = -1);
            }),
            (t.addOnUpdateScript = function (e) {
              (e._onUpdateIndex = this._onUpdateScripts.length), this._onUpdateScripts.add(e);
            }),
            (t.removeOnUpdateScript = function (e) {
              var t = this._onUpdateScripts.deleteByIndex(e._onUpdateIndex);
              t && (t._onUpdateIndex = e._onUpdateIndex), (e._onUpdateIndex = -1);
            }),
            (t.addOnLateUpdateScript = function (e) {
              (e._onLateUpdateIndex = this._onLateUpdateScripts.length), this._onLateUpdateScripts.add(e);
            }),
            (t.removeOnLateUpdateScript = function (e) {
              var t = this._onLateUpdateScripts.deleteByIndex(e._onLateUpdateIndex);
              t && (t._onLateUpdateIndex = e._onLateUpdateIndex), (e._onLateUpdateIndex = -1);
            }),
            (t.addOnUpdateAnimations = function (e) {
              (e._onUpdateIndex = this._onUpdateAnimations.length), this._onUpdateAnimations.add(e);
            }),
            (t.removeOnUpdateAnimations = function (e) {
              var t = this._onUpdateAnimations.deleteByIndex(e._onUpdateIndex);
              t && (t._onUpdateIndex = e._onUpdateIndex), (e._onUpdateIndex = -1);
            }),
            (t.addOnUpdateRenderers = function (e) {
              (e._onUpdateIndex = this._onUpdateRenderers.length), this._onUpdateRenderers.add(e);
            }),
            (t.removeOnUpdateRenderers = function (e) {
              var t = this._onUpdateRenderers.deleteByIndex(e._onUpdateIndex);
              t && (t._onUpdateIndex = e._onUpdateIndex), (e._onUpdateIndex = -1);
            }),
            (t.addDestoryComponent = function (e) {
              this._destoryComponents.push(e);
            }),
            (t.callScriptOnStart = function () {
              var e = this._onStartScripts;
              if (e.length > 0) {
                for (var t = e._elements, n = 0; n < e.length; n++) {
                  var i = t[n];
                  (i._started = !0), (i._onStartIndex = -1), i.onStart();
                }
                e.length = 0;
              }
            }),
            (t.callScriptOnUpdate = function (e) {
              for (var t = this._onUpdateScripts._elements, n = this._onUpdateScripts.length - 1; n >= 0; --n) {
                var i = t[n];
                i._started && i.onUpdate(e);
              }
            }),
            (t.callScriptOnLateUpdate = function (e) {
              for (var t = this._onLateUpdateScripts._elements, n = this._onLateUpdateScripts.length - 1; n >= 0; --n) {
                var i = t[n];
                i._started && i.onLateUpdate(e);
              }
            }),
            (t.callAnimationUpdate = function (e) {
              for (var t = this._onUpdateAnimations._elements, n = this._onUpdateAnimations.length - 1; n >= 0; --n)
                t[n].update(e);
            }),
            (t.callRendererOnUpdate = function (e) {
              for (var t = this._onUpdateRenderers._elements, n = this._onUpdateRenderers.length - 1; n >= 0; --n)
                t[n].update(e);
            }),
            (t.callRender = function (e) {
              for (var t = e._camera, n = this._renderers._elements, i = this._renderers.length - 1; i >= 0; --i) {
                var r = n[i];
                t.cullingMask & r._entity.layer &&
                  ((t.enableFrustumCulling && ((r.isCulled = !t._frustum.intersectsBox(r.bounds)), r.isCulled)) ||
                    (r._updateShaderData(e),
                    Ne.unionCollection(t._globalShaderMacro, r.shaderData._macroCollection, r._globalShaderMacro),
                    r._render(t)));
              }
            }),
            (t.callComponentDestory = function () {
              var e = this._destoryComponents,
                t = e.length;
              if (t > 0) {
                for (var n = t - 1; n >= 0; --n) e[n].onDestroy();
                e.length = 0;
              }
            }),
            (t.callCameraOnBeginRender = function (e) {
              for (var t = e.entity._components, n = t.length - 1; n >= 0; --n) {
                var i = t[n];
                i.onBeginRender && i.onBeginRender(e);
              }
            }),
            (t.callCameraOnEndRender = function (e) {
              for (var t = e.entity._components, n = t.length - 1; n >= 0; --n) {
                var i = t[n];
                i.onBeginRender && i.onEndRender(e);
              }
            }),
            (t.getActiveChangedTempList = function () {
              return this._componentsContainerPool.length ? this._componentsContainerPool.pop() : [];
            }),
            (t.putActiveChangedTempList = function (e) {
              (e.length = 0), this._componentsContainerPool.push(e);
            }),
            e
          );
        })(),
        Ue = (function () {
          function e() {}
          return (
            (e.cloneComponent = function (e, t) {
              for (var n = re.getCloneMode(e.constructor), i = Object.keys(e), r = 0, a = i.length; r < a; r++) {
                var o = i[r],
                  s = n[o];
                switch (s) {
                  case void 0:
                  case K.Assignment:
                    t[o] = e[o];
                    break;
                  case K.Shallow:
                    var c = e[o];
                    if (c instanceof Object) {
                      var u = t[o];
                      null == u && (u = t[o] = c.constructor()), M(u, c);
                    } else t[o] = c;
                    break;
                  case K.Deep:
                    var l = e[o];
                    if (l instanceof Object) {
                      var d = t[o];
                      null == d && (d = t[o] = l.constructor()), re.deepCloneObject(l, d);
                    } else t[o] = l;
                    break;
                }
              }
            }),
            e
          );
        })(),
        ke = (function () {
          function e() {}
          return (
            (e.register = function (e, t) {
              this._addDependency(e, t, this._dependenciesMap), this._addDependency(t, e, this._invDependenciesMap);
            }),
            (e._addCheck = function (t, n) {
              var i = e._dependenciesMap.get(n);
              if (i)
                for (var r = 0, a = i.length; r < a; r++)
                  if (!t.getComponent(i[r])) throw "you should add " + i[r] + " before adding " + n;
            }),
            (e._removeCheck = function (t, n) {
              var i = e._invDependenciesMap.get(n);
              if (i)
                for (var r = 0, a = i.length; r < a; r++)
                  if (t.getComponent(i[r])) throw "you should remove " + i[r] + " before adding " + n;
            }),
            (e._addDependency = function (e, t, n) {
              var i = n.get(e);
              i || ((i = []), n.set(e, i)), -1 === i.indexOf(t) && i.push(t);
            }),
            e
          );
        })();
      function Ve() {
        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) t[n] = arguments[n];
        return function (e) {
          t.forEach(function (t) {
            return ke.register(e, t);
          });
        };
      }
      (ke._dependenciesMap = new Map()),
        (ke._invDependenciesMap = new Map()),
        (function (e) {
          (e[(e["Layer0"] = 1)] = "Layer0"),
            (e[(e["Layer1"] = 2)] = "Layer1"),
            (e[(e["Layer2"] = 4)] = "Layer2"),
            (e[(e["Layer3"] = 8)] = "Layer3"),
            (e[(e["Layer4"] = 16)] = "Layer4"),
            (e[(e["Layer5"] = 32)] = "Layer5"),
            (e[(e["Layer6"] = 64)] = "Layer6"),
            (e[(e["Layer7"] = 128)] = "Layer7"),
            (e[(e["Layer8"] = 256)] = "Layer8"),
            (e[(e["Layer9"] = 512)] = "Layer9"),
            (e[(e["Layer10"] = 1024)] = "Layer10"),
            (e[(e["Layer11"] = 2048)] = "Layer11"),
            (e[(e["Layer12"] = 4096)] = "Layer12"),
            (e[(e["Layer13"] = 8192)] = "Layer13"),
            (e[(e["Layer14"] = 16384)] = "Layer14"),
            (e[(e["Layer15"] = 32768)] = "Layer15"),
            (e[(e["Layer16"] = 65536)] = "Layer16"),
            (e[(e["Layer17"] = 131072)] = "Layer17"),
            (e[(e["Layer18"] = 262144)] = "Layer18"),
            (e[(e["Layer19"] = 524288)] = "Layer19"),
            (e[(e["Layer20"] = 1048576)] = "Layer20"),
            (e[(e["Layer21"] = 2097152)] = "Layer21"),
            (e[(e["Layer22"] = 4194304)] = "Layer22"),
            (e[(e["Layer23"] = 8388608)] = "Layer23"),
            (e[(e["Layer24"] = 16777216)] = "Layer24"),
            (e[(e["Layer25"] = 33554432)] = "Layer25"),
            (e[(e["Layer26"] = 67108864)] = "Layer26"),
            (e[(e["Layer27"] = 134217728)] = "Layer27"),
            (e[(e["Layer28"] = 268435456)] = "Layer28"),
            (e[(e["Layer29"] = 536870912)] = "Layer29"),
            (e[(e["Layer30"] = 1073741824)] = "Layer30"),
            (e[(e["Layer31"] = 2147483648)] = "Layer31"),
            (e[(e["Everything"] = 4294967295)] = "Everything"),
            (e[(e["Nothing"] = 0)] = "Nothing");
        })(Ee || (Ee = {}));
      var He,
        We,
        je,
        Xe,
        Ke,
        qe,
        Qe,
        Ye,
        Je,
        Ze,
        $e,
        et,
        tt,
        nt,
        it,
        rt,
        at =
          ((Be = (function (e) {
            function t(t) {
              var n;
              return (
                (n = e.call(this, t.engine) || this),
                G(n, "_entity", Le, z(n)),
                G(n, "_destroyed", Fe, z(n)),
                G(n, "_enabled", Ie, z(n)),
                G(n, "_awaked", ze, z(n)),
                (n._renderPriority = 0),
                (n._entity = t),
                n
              );
            }
            S(t, e),
              A(t, [
                {
                  key: "enabled",
                  get: function () {
                    return this._enabled;
                  },
                  set: function (e) {
                    e !== this._enabled &&
                      ((this._enabled = e),
                      e
                        ? this._entity.isActiveInHierarchy && this._onEnable()
                        : this._entity.isActiveInHierarchy && this._onDisable());
                  }
                },
                {
                  key: "destroyed",
                  get: function () {
                    return this._destroyed;
                  }
                },
                {
                  key: "entity",
                  get: function () {
                    return this._entity;
                  }
                },
                {
                  key: "scene",
                  get: function () {
                    return this._entity.scene;
                  }
                },
                {
                  key: "engine",
                  get: function () {
                    return this._entity.engine;
                  }
                }
              ]);
            var n = t.prototype;
            return (
              (n.destroy = function () {
                this._destroyed ||
                  (this._entity._removeComponent(this),
                  this._entity.isActiveInHierarchy && (this._enabled && this._onDisable(), this._onInActive()),
                  (this._destroyed = !0),
                  this._onDestroy());
              }),
              (n._onAwake = function () {}),
              (n._onEnable = function () {}),
              (n._onDisable = function () {}),
              (n._onDestroy = function () {}),
              (n._onActive = function () {}),
              (n._onInActive = function () {}),
              (n._setActive = function (e) {
                e
                  ? (this._awaked || ((this._awaked = !0), this._onAwake()),
                    this._entity._isActiveInHierarchy && (this._onActive(), this._enabled && this._onEnable()))
                  : (this._enabled && this._onDisable(), this._onInActive());
              }),
              A(t, [
                {
                  key: "renderPriority",
                  get: function () {
                    return this._renderPriority;
                  },
                  set: function (e) {
                    this._renderPriority = e;
                  }
                }
              ]),
              t
            );
          })(be)),
          (Oe = Be),
          (Le = U(Oe.prototype, "_entity", [Q], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          (Fe = U(Oe.prototype, "_destroyed", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return !1;
            }
          })),
          (Ie = U(Oe.prototype, "_enabled", [Y], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return !0;
            }
          })),
          (ze = U(Oe.prototype, "_awaked", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return !1;
            }
          })),
          Oe),
        ot = (function () {
          function e(e) {
            void 0 === e && (e = []), (this._flags = e), (this.flag = !0);
          }
          var t = e.prototype;
          return (
            (t.destroy = function () {
              var e = this._flags;
              H(e, this), (this._flags = null);
            }),
            e
          );
        })(),
        st =
          ((rt = it = (function (e) {
            function t() {
              for (var n, i = arguments.length, r = new Array(i), a = 0; a < i; a++) r[a] = arguments[a];
              return (
                (n = e.call.apply(e, [this].concat(r)) || this),
                G(n, "_position", We, z(n)),
                G(n, "_rotation", je, z(n)),
                G(n, "_rotationQuaternion", Xe, z(n)),
                G(n, "_scale", Ke, z(n)),
                G(n, "_worldPosition", qe, z(n)),
                G(n, "_worldRotation", Qe, z(n)),
                G(n, "_worldRotationQuaternion", Ye, z(n)),
                G(n, "_lossyWorldScale", Je, z(n)),
                G(n, "_localMatrix", Ze, z(n)),
                G(n, "_worldMatrix", $e, z(n)),
                G(n, "_changeFlags", et, z(n)),
                G(n, "_isParentDirty", tt, z(n)),
                G(n, "_parentTransformCache", nt, z(n)),
                (n._dirtyFlag = t._WM_WP_WE_WQ_WS_FLAGS),
                n
              );
            }
            S(t, e);
            var n = t.prototype;
            return (
              (n.setPosition = function (e, t, n) {
                this._position.setValue(e, t, n), (this.position = this._position);
              }),
              (n.setRotation = function (e, t, n) {
                this._rotation.setValue(e, t, n), (this.rotation = this._rotation);
              }),
              (n.setRotationQuaternion = function (e, t, n, i) {
                this._rotationQuaternion.setValue(e, t, n, i), (this.rotationQuaternion = this._rotationQuaternion);
              }),
              (n.setScale = function (e, t, n) {
                this._scale.setValue(e, t, n), (this.scale = this._scale);
              }),
              (n.setWorldPosition = function (e, t, n) {
                this._worldPosition.setValue(e, t, n), (this.worldPosition = this._worldPosition);
              }),
              (n.setWorldRotation = function (e, t, n) {
                this._worldRotation.setValue(e, t, n), (this.worldRotation = this._worldRotation);
              }),
              (n.setWorldRotationQuaternion = function (e, t, n, i) {
                this._worldRotationQuaternion.setValue(e, t, n, i),
                  (this.worldRotationQuaternion = this._worldRotationQuaternion);
              }),
              (n.getWorldForward = function (e) {
                var t = this.worldMatrix.elements;
                return e.setValue(-t[8], -t[9], -t[10]), e.normalize();
              }),
              (n.getWorldRight = function (e) {
                var t = this.worldMatrix.elements;
                return e.setValue(t[0], t[1], t[2]), e.normalize();
              }),
              (n.getWorldUp = function (e) {
                var t = this.worldMatrix.elements;
                return e.setValue(t[4], t[5], t[6]), e.normalize();
              }),
              (n.translate = function (e, n, i, r) {
                if ("number" === typeof e) {
                  var a = t._tempVec3;
                  a.setValue(e, n, i), this._translate(a, r);
                } else this._translate(e, n);
              }),
              (n.rotate = function (e, t, n, i) {
                "number" === typeof e ? this._rotateXYZ(e, t, n, i) : this._rotateXYZ(e.x, e.y, e.z, t);
              }),
              (n.rotateByAxis = function (e, n, i) {
                void 0 === i && (i = !0);
                var r = n * a.degreeToRadFactor;
                f.rotationAxisAngle(e, r, t._tempQuat0), this._rotateByQuat(t._tempQuat0, i);
              }),
              (n.lookAt = function (e, n) {
                var i,
                  r = this.worldPosition,
                  o = a.zeroTolerance;
                if (!(Math.abs(r.x - e.x) < o && Math.abs(r.y - e.y) < o && Math.abs(r.z - e.z) < o)) {
                  var s = t._tempMat43,
                    c = this._worldRotationQuaternion;
                  (n = null != (i = n) ? i : t._tempVec3.setValue(0, 1, 0)),
                    _.lookAt(r, e, n, s),
                    s.getRotation(c).invert(),
                    (this.worldRotationQuaternion = c);
                }
              }),
              (n.registerWorldChangeFlag = function () {
                var e = new ot(this._changeFlags);
                return this._changeFlags.push(e), e;
              }),
              (n._parentChange = function () {
                (this._isParentDirty = !0), this._updateAllWorldFlag();
              }),
              (n._updateWorldPositionFlag = function () {
                if (!this._isContainDirtyFlags(t._WM_WP_FLAGS)) {
                  this._worldAssociatedChange(t._WM_WP_FLAGS);
                  for (var e = this._entity._children, n = 0, i = e.length; n < i; n++) {
                    var r;
                    null === (r = e[n].transform) || void 0 === r || r._updateWorldPositionFlag();
                  }
                }
              }),
              (n._updateWorldRotationFlag = function () {
                if (!this._isContainDirtyFlags(t._WM_WE_WQ_FLAGS)) {
                  this._worldAssociatedChange(t._WM_WE_WQ_FLAGS);
                  for (var e = this._entity._children, n = 0, i = e.length; n < i; n++) {
                    var r;
                    null === (r = e[n].transform) || void 0 === r || r._updateWorldPositionAndRotationFlag();
                  }
                }
              }),
              (n._updateWorldPositionAndRotationFlag = function () {
                if (!this._isContainDirtyFlags(t._WM_WP_WE_WQ_FLAGS)) {
                  this._worldAssociatedChange(t._WM_WP_WE_WQ_FLAGS);
                  for (var e = this._entity._children, n = 0, i = e.length; n < i; n++) {
                    var r;
                    null === (r = e[n].transform) || void 0 === r || r._updateWorldPositionAndRotationFlag();
                  }
                }
              }),
              (n._updateWorldScaleFlag = function () {
                if (!this._isContainDirtyFlags(t._WM_WS_FLAGS)) {
                  this._worldAssociatedChange(t._WM_WS_FLAGS);
                  for (var e = this._entity._children, n = 0, i = e.length; n < i; n++) {
                    var r;
                    null === (r = e[n].transform) || void 0 === r || r._updateWorldPositionAndScaleFlag();
                  }
                }
              }),
              (n._updateWorldPositionAndScaleFlag = function () {
                if (!this._isContainDirtyFlags(t._WM_WP_WS_FLAGS)) {
                  this._worldAssociatedChange(t._WM_WP_WS_FLAGS);
                  for (var e = this._entity._children, n = 0, i = e.length; n < i; n++) {
                    var r;
                    null === (r = e[n].transform) || void 0 === r || r._updateWorldPositionAndScaleFlag();
                  }
                }
              }),
              (n._updateAllWorldFlag = function () {
                if (!this._isContainDirtyFlags(t._WM_WP_WE_WQ_WS_FLAGS)) {
                  this._worldAssociatedChange(t._WM_WP_WE_WQ_WS_FLAGS);
                  for (var e = this._entity._children, n = 0, i = e.length; n < i; n++) {
                    var r;
                    null === (r = e[n].transform) || void 0 === r || r._updateAllWorldFlag();
                  }
                }
              }),
              (n._getParentTransform = function () {
                if (!this._isParentDirty) return this._parentTransformCache;
                var e = null,
                  t = this._entity.parent;
                while (t) {
                  var n = t.transform;
                  if (n) {
                    e = n;
                    break;
                  }
                  t = t.parent;
                }
                return (this._parentTransformCache = e), (this._isParentDirty = !1), e;
              }),
              (n._getScaleMatrix = function () {
                var e = t._tempQuat0,
                  n = t._tempMat30,
                  i = t._tempMat31,
                  r = t._tempMat32;
                return (
                  i.setValueByMatrix(this.worldMatrix),
                  f.invert(this.worldRotationQuaternion, e),
                  h.rotationQuaternion(e, n),
                  h.multiply(n, i, r),
                  r
                );
              }),
              (n._isContainDirtyFlags = function (e) {
                return (this._dirtyFlag & e) === e;
              }),
              (n._isContainDirtyFlag = function (e) {
                return 0 != (this._dirtyFlag & e);
              }),
              (n._setDirtyFlagTrue = function (e) {
                this._dirtyFlag |= e;
              }),
              (n._setDirtyFlagFalse = function (e) {
                this._dirtyFlag &= ~e;
              }),
              (n._worldAssociatedChange = function (e) {
                this._dirtyFlag |= e;
                for (var t = this._changeFlags.length, n = t - 1; n >= 0; n--) this._changeFlags[n].flag = !0;
              }),
              (n._rotateByQuat = function (e, t) {
                t
                  ? (f.multiply(this.rotationQuaternion, e, this._rotationQuaternion),
                    (this.rotationQuaternion = this._rotationQuaternion))
                  : (f.multiply(this.worldRotationQuaternion, e, this._worldRotationQuaternion),
                    (this.worldRotationQuaternion = this._worldRotationQuaternion));
              }),
              (n._translate = function (e, n) {
                if ((void 0 === n && (n = !0), n)) {
                  var i = t._tempMat40;
                  _.rotationQuaternion(this.rotationQuaternion, i),
                    o.transformCoordinate(e, i, t._tempVec3),
                    (this.position = this._position.add(t._tempVec3));
                } else this.worldPosition = this._worldPosition.add(e);
              }),
              (n._rotateXYZ = function (e, n, i, r) {
                void 0 === r && (r = !0);
                var o = a.degreeToRadFactor,
                  s = t._tempQuat0;
                f.rotationEuler(e * o, n * o, i * o, s), this._rotateByQuat(s, r);
              }),
              (n.translateXYZ = function (e, t, n, i) {
                void 0 === i && (i = !0), this.translate(e, t, n, i);
              }),
              (n.rotateXYZ = function (e, t, n, i) {
                void 0 === i && (i = !0), this.rotate(e, t, n, i);
              }),
              A(t, [
                {
                  key: "position",
                  get: function () {
                    return this._position;
                  },
                  set: function (e) {
                    this._position !== e && e.cloneTo(this._position),
                      this._setDirtyFlagTrue(t._LOCAL_MATRIX_FLAG),
                      this._updateWorldPositionFlag();
                  }
                },
                {
                  key: "worldPosition",
                  get: function () {
                    return (
                      this._isContainDirtyFlag(t._WORLD_POSITION_FLAG) &&
                        (this._getParentTransform()
                          ? this.worldMatrix.getTranslation(this._worldPosition)
                          : this._position.cloneTo(this._worldPosition),
                        this._setDirtyFlagFalse(t._WORLD_POSITION_FLAG)),
                      this._worldPosition
                    );
                  },
                  set: function (e) {
                    this._worldPosition !== e && e.cloneTo(this._worldPosition);
                    var n = this._getParentTransform();
                    n
                      ? (_.invert(n.worldMatrix, t._tempMat41), o.transformCoordinate(e, t._tempMat41, this._position))
                      : e.cloneTo(this._position),
                      (this.position = this._position),
                      this._setDirtyFlagFalse(t._WORLD_POSITION_FLAG);
                  }
                },
                {
                  key: "rotation",
                  get: function () {
                    return (
                      this._isContainDirtyFlag(t._LOCAL_EULER_FLAG) &&
                        (this._rotationQuaternion.toEuler(this._rotation),
                        this._rotation.scale(a.radToDegreeFactor),
                        this._setDirtyFlagFalse(t._LOCAL_EULER_FLAG)),
                      this._rotation
                    );
                  },
                  set: function (e) {
                    this._rotation !== e && e.cloneTo(this._rotation),
                      this._setDirtyFlagTrue(t._LOCAL_MATRIX_FLAG | t._LOCAL_QUAT_FLAG),
                      this._setDirtyFlagFalse(t._LOCAL_EULER_FLAG),
                      this._updateWorldRotationFlag();
                  }
                },
                {
                  key: "worldRotation",
                  get: function () {
                    return (
                      this._isContainDirtyFlag(t._WORLD_EULER_FLAG) &&
                        (this.worldRotationQuaternion.toEuler(this._worldRotation),
                        this._worldRotation.scale(a.radToDegreeFactor),
                        this._setDirtyFlagFalse(t._WORLD_EULER_FLAG)),
                      this._worldRotation
                    );
                  },
                  set: function (e) {
                    this._worldRotation !== e && e.cloneTo(this._worldRotation),
                      f.rotationEuler(
                        a.degreeToRadian(e.x),
                        a.degreeToRadian(e.y),
                        a.degreeToRadian(e.z),
                        this._worldRotationQuaternion
                      ),
                      (this.worldRotationQuaternion = this._worldRotationQuaternion),
                      this._setDirtyFlagFalse(t._WORLD_EULER_FLAG);
                  }
                },
                {
                  key: "rotationQuaternion",
                  get: function () {
                    return (
                      this._isContainDirtyFlag(t._LOCAL_QUAT_FLAG) &&
                        (f.rotationEuler(
                          a.degreeToRadian(this._rotation.x),
                          a.degreeToRadian(this._rotation.y),
                          a.degreeToRadian(this._rotation.z),
                          this._rotationQuaternion
                        ),
                        this._setDirtyFlagFalse(t._LOCAL_QUAT_FLAG)),
                      this._rotationQuaternion
                    );
                  },
                  set: function (e) {
                    this._rotationQuaternion !== e && e.cloneTo(this._rotationQuaternion),
                      this._setDirtyFlagTrue(t._LOCAL_MATRIX_FLAG | t._LOCAL_EULER_FLAG),
                      this._setDirtyFlagFalse(t._LOCAL_QUAT_FLAG),
                      this._updateWorldRotationFlag();
                  }
                },
                {
                  key: "worldRotationQuaternion",
                  get: function () {
                    if (this._isContainDirtyFlag(t._WORLD_QUAT_FLAG)) {
                      var e = this._getParentTransform();
                      null != e
                        ? f.multiply(e.worldRotationQuaternion, this.rotationQuaternion, this._worldRotationQuaternion)
                        : this.rotationQuaternion.cloneTo(this._worldRotationQuaternion),
                        this._setDirtyFlagFalse(t._WORLD_QUAT_FLAG);
                    }
                    return this._worldRotationQuaternion;
                  },
                  set: function (e) {
                    this._worldRotationQuaternion !== e && e.cloneTo(this._worldRotationQuaternion);
                    var n = this._getParentTransform();
                    n
                      ? (f.invert(n.worldRotationQuaternion, t._tempQuat0),
                        f.multiply(e, t._tempQuat0, this._rotationQuaternion))
                      : e.cloneTo(this._rotationQuaternion),
                      (this.rotationQuaternion = this._rotationQuaternion),
                      this._setDirtyFlagFalse(t._WORLD_QUAT_FLAG);
                  }
                },
                {
                  key: "scale",
                  get: function () {
                    return this._scale;
                  },
                  set: function (e) {
                    this._scale !== e && e.cloneTo(this._scale),
                      this._setDirtyFlagTrue(t._LOCAL_MATRIX_FLAG),
                      this._updateWorldScaleFlag();
                  }
                },
                {
                  key: "lossyWorldScale",
                  get: function () {
                    if (this._isContainDirtyFlag(t._WORLD_SCALE_FLAG)) {
                      if (this._getParentTransform()) {
                        var e = this._getScaleMatrix(),
                          n = e.elements;
                        this._lossyWorldScale.setValue(n[0], n[4], n[8]);
                      } else this._scale.cloneTo(this._lossyWorldScale);
                      this._setDirtyFlagFalse(t._WORLD_SCALE_FLAG);
                    }
                    return this._lossyWorldScale;
                  }
                },
                {
                  key: "localMatrix",
                  get: function () {
                    return (
                      this._isContainDirtyFlag(t._LOCAL_MATRIX_FLAG) &&
                        (_.affineTransformation(
                          this._scale,
                          this.rotationQuaternion,
                          this._position,
                          this._localMatrix
                        ),
                        this._setDirtyFlagFalse(t._LOCAL_MATRIX_FLAG)),
                      this._localMatrix
                    );
                  },
                  set: function (e) {
                    this._localMatrix !== e && e.cloneTo(this._localMatrix),
                      this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale),
                      this._setDirtyFlagTrue(t._LOCAL_EULER_FLAG),
                      this._setDirtyFlagFalse(t._LOCAL_MATRIX_FLAG),
                      this._updateAllWorldFlag();
                  }
                },
                {
                  key: "worldMatrix",
                  get: function () {
                    if (this._isContainDirtyFlag(t._WORLD_MATRIX_FLAG)) {
                      var e = this._getParentTransform();
                      e
                        ? _.multiply(e.worldMatrix, this.localMatrix, this._worldMatrix)
                        : this.localMatrix.cloneTo(this._worldMatrix),
                        this._setDirtyFlagFalse(t._WORLD_MATRIX_FLAG);
                    }
                    return this._worldMatrix;
                  },
                  set: function (e) {
                    this._worldMatrix !== e && e.cloneTo(this._worldMatrix);
                    var n = this._getParentTransform();
                    n
                      ? (_.invert(n.worldMatrix, t._tempMat42), _.multiply(e, t._tempMat42, this._localMatrix))
                      : e.cloneTo(this._localMatrix),
                      (this.localMatrix = this._localMatrix),
                      this._setDirtyFlagFalse(t._WORLD_MATRIX_FLAG);
                  }
                }
              ]),
              t
            );
          })(at)),
          (it._tempQuat0 = new f()),
          (it._tempVec3 = new o()),
          (it._tempMat30 = new h()),
          (it._tempMat31 = new h()),
          (it._tempMat32 = new h()),
          (it._tempMat40 = new _()),
          (it._tempMat41 = new _()),
          (it._tempMat42 = new _()),
          (it._tempMat43 = new _()),
          (it._LOCAL_EULER_FLAG = 1),
          (it._LOCAL_QUAT_FLAG = 2),
          (it._WORLD_POSITION_FLAG = 4),
          (it._WORLD_EULER_FLAG = 8),
          (it._WORLD_QUAT_FLAG = 16),
          (it._WORLD_SCALE_FLAG = 32),
          (it._LOCAL_MATRIX_FLAG = 64),
          (it._WORLD_MATRIX_FLAG = 128),
          (it._WM_WP_FLAGS = 132),
          (it._WM_WE_WQ_FLAGS = 152),
          (it._WM_WP_WE_WQ_FLAGS = 156),
          (it._WM_WS_FLAGS = 160),
          (it._WM_WP_WS_FLAGS = 164),
          (it._WM_WP_WE_WQ_WS_FLAGS = 188),
          (He = rt),
          (We = U(He.prototype, "_position", [Z], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new o();
            }
          })),
          (je = U(He.prototype, "_rotation", [Z], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new o();
            }
          })),
          (Xe = U(He.prototype, "_rotationQuaternion", [Z], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new f();
            }
          })),
          (Ke = U(He.prototype, "_scale", [Z], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new o(1, 1, 1);
            }
          })),
          (qe = U(He.prototype, "_worldPosition", [Z], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new o();
            }
          })),
          (Qe = U(He.prototype, "_worldRotation", [Z], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new o();
            }
          })),
          (Ye = U(He.prototype, "_worldRotationQuaternion", [Z], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new f();
            }
          })),
          (Je = U(He.prototype, "_lossyWorldScale", [Z], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new o(1, 1, 1);
            }
          })),
          (Ze = U(He.prototype, "_localMatrix", [Z], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new _();
            }
          })),
          ($e = U(He.prototype, "_worldMatrix", [Z], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new _();
            }
          })),
          (et = U(He.prototype, "_changeFlags", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return [];
            }
          })),
          (tt = U(He.prototype, "_isParentDirty", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return !0;
            }
          })),
          (nt = U(He.prototype, "_parentTransformCache", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return null;
            }
          })),
          He),
        ct = (function (e) {
          function t(n, i) {
            var r;
            return (
              (r = e.call(this, n) || this),
              (r.name = void 0),
              (r.layer = Ee.Layer0),
              (r.transform = void 0),
              (r._isActiveInHierarchy = !1),
              (r._components = []),
              (r._children = []),
              (r._scene = void 0),
              (r._isRoot = !1),
              (r._isActive = !0),
              (r._parent = null),
              (r._activeChangedComponents = void 0),
              (r._invModelMatrix = new _()),
              (r._inverseWorldMatFlag = void 0),
              t._entitys.add(z(r)),
              (r.name = i),
              (r.transform = r.addComponent(st)),
              (r._inverseWorldMatFlag = r.transform.registerWorldChangeFlag()),
              r
            );
          }
          S(t, e),
            (t.findByName = function (e) {
              for (var n = t._entitys, i = n._elements, r = n.length - 1; r >= 0; r--) {
                var a = i[r];
                if (a.name === e) return a;
              }
              return null;
            }),
            (t.findByPath = function (e, t) {
              return e.findEntityByPath(t);
            }),
            (t._findChildByName = function (e, t) {
              for (var n = e._children, i = n.length - 1; i >= 0; i--) {
                var r = n[i];
                if (r.name === t) return r;
              }
              return null;
            }),
            (t._traverseSetOwnerScene = function (e, t) {
              e._scene = t;
              for (var n = e._children, i = e.childCount - 1; i >= 0; i--) this._traverseSetOwnerScene(n[i], t);
            }),
            A(t, [
              {
                key: "isActive",
                get: function () {
                  return this._isActive;
                },
                set: function (e) {
                  if (e !== this._isActive)
                    if (((this._isActive = e), e)) {
                      var t = this._parent;
                      ((null !== t && void 0 !== t && t._isActiveInHierarchy) ||
                        (this._isRoot && this._scene._isActiveInEngine)) &&
                        this._processActive();
                    } else this._isActiveInHierarchy && this._processInActive();
                }
              },
              {
                key: "isActiveInHierarchy",
                get: function () {
                  return this._isActiveInHierarchy;
                }
              },
              {
                key: "parent",
                get: function () {
                  return this._parent;
                },
                set: function (e) {
                  if (e !== this._parent) {
                    var n = this._removeFromParent(),
                      i = (this._parent = e);
                    if (i) {
                      i._children.push(this);
                      var r = i._scene;
                      this._scene !== r && t._traverseSetOwnerScene(this, r),
                        i._isActiveInHierarchy
                          ? !this._isActiveInHierarchy && this._isActive && this._processActive()
                          : this._isActiveInHierarchy && this._processInActive();
                    } else
                      this._isActiveInHierarchy && this._processInActive(), n && t._traverseSetOwnerScene(this, null);
                    this._setTransformDirty();
                  }
                }
              },
              {
                key: "children",
                get: function () {
                  return this._children;
                }
              },
              {
                key: "childCount",
                get: function () {
                  return this._children.length;
                }
              },
              {
                key: "scene",
                get: function () {
                  return this._scene;
                }
              },
              {
                key: "engine",
                get: function () {
                  return this._engine;
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.addComponent = function (e) {
              ke._addCheck(this, e);
              var t = new e(this);
              return this._components.push(t), this._isActiveInHierarchy && t._setActive(!0), t;
            }),
            (n.getComponent = function (e) {
              for (var t = this._components.length - 1; t >= 0; t--) {
                var n = this._components[t];
                if (n instanceof e) return n;
              }
            }),
            (n.getComponents = function (e, t) {
              t.length = 0;
              for (var n = this._components.length - 1; n >= 0; n--) {
                var i = this._components[n];
                i instanceof e && t.push(i);
              }
              return t;
            }),
            (n.getComponentsIncludeChildren = function (e, t) {
              return (t.length = 0), this._getComponentsInChildren(e, t), t;
            }),
            (n.addChild = function (e) {
              e.parent = this;
            }),
            (n.removeChild = function (e) {
              e.parent = null;
            }),
            (n.getChild = function (e) {
              return this._children[e];
            }),
            (n.findByName = function (e) {
              var n = this._children,
                i = t._findChildByName(this, e);
              if (i) return i;
              for (var r = n.length - 1; r >= 0; r--) {
                var a = n[r],
                  o = a.findByName(e);
                if (o) return o;
              }
              return null;
            }),
            (n.findByPath = function (e) {
              for (var n = e.split("/"), i = this, r = 0, a = n.length; r < a; ++r) {
                var o = n[r];
                if (o && ((i = t._findChildByName(i, o)), !i)) return null;
              }
              return i;
            }),
            (n.createChild = function (e) {
              var n = new t(this.engine, e);
              return (n.layer = this.layer), (n.parent = this), n;
            }),
            (n.clearChildren = function () {
              for (var e = this._children, n = e.length - 1; n >= 0; n--) {
                var i = e[n];
                (i._parent = null), i._isActiveInHierarchy && i._processInActive(), t._traverseSetOwnerScene(i, null);
              }
              e.length = 0;
            }),
            (n.clone = function () {
              var e = new t(this._engine, this.name);
              (e._isActive = this._isActive), (e.transform.localMatrix = this.transform.localMatrix);
              for (var n = this._children, i = 0, r = this._children.length; i < r; i++) {
                var a = n[i];
                e.addChild(a.clone());
              }
              for (var o = this._components, s = 0, c = o.length; s < c; s++) {
                var u = o[s];
                if (!(u instanceof st)) {
                  var l = e.addComponent(u.constructor);
                  Ue.cloneComponent(u, l);
                }
              }
              return e;
            }),
            (n.destroy = function () {
              for (var e = this._components, n = e.length - 1; n >= 0; n--) e[n].destroy();
              this._components.length = 0;
              for (var i = this._children, r = i.length - 1; r >= 0; r--) i[r].destroy();
              if (((this._children.length = 0), null != this._parent)) {
                var a = this._parent._children;
                a.splice(a.indexOf(this), 1);
              }
              (this._parent = null), t._entitys["delete"](this);
            }),
            (n._removeComponent = function (e) {
              ke._removeCheck(this, e.constructor);
              var t = this._components;
              t.splice(t.indexOf(e), 1);
            }),
            (n._removeFromParent = function () {
              var e = this._parent;
              if (null != e) {
                var t = e._children;
                t.splice(t.indexOf(this), 1), (this._parent = null);
              }
              return e;
            }),
            (n._processActive = function () {
              if (this._activeChangedComponents)
                throw "Note: can't set the 'main inActive entity' active in hierarchy, if the operation is in main inActive entity or it's children script's onDisable Event.";
              (this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList()),
                this._setActiveInHierarchy(this._activeChangedComponents),
                this._setActiveComponents(!0);
            }),
            (n._processInActive = function () {
              if (this._activeChangedComponents)
                throw "Note: can't set the 'main active entity' inActive in hierarchy, if the operation is in main active entity or it's children script's onEnable Event.";
              (this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList()),
                this._setInActiveInHierarchy(this._activeChangedComponents),
                this._setActiveComponents(!1);
            }),
            (n._getComponentsInChildren = function (e, t) {
              for (var n = this._components.length - 1; n >= 0; n--) {
                var i = this._components[n];
                i instanceof e && t.push(i);
              }
              for (var r = this._children.length - 1; r >= 0; r--) this._children[r]._getComponentsInChildren(e, t);
            }),
            (n._setActiveComponents = function (e) {
              for (var t = this._activeChangedComponents, n = 0, i = t.length; n < i; ++n) t[n]._setActive(e);
              this._engine._componentsManager.putActiveChangedTempList(t), (this._activeChangedComponents = null);
            }),
            (n._setActiveInHierarchy = function (e) {
              this._isActiveInHierarchy = !0;
              for (var t = this._components, n = t.length - 1; n >= 0; n--) e.push(t[n]);
              for (var i = this._children, r = i.length - 1; r >= 0; r--) {
                var a = i[r];
                a.isActive && a._setActiveInHierarchy(e);
              }
            }),
            (n._setInActiveInHierarchy = function (e) {
              this._isActiveInHierarchy = !1;
              for (var t = this._components, n = t.length - 1; n >= 0; n--) e.push(t[n]);
              for (var i = this._children, r = i.length - 1; r >= 0; r--) {
                var a = i[r];
                a.isActive && a._setInActiveInHierarchy(e);
              }
            }),
            (n._setTransformDirty = function () {
              if (this.transform) this.transform._parentChange();
              else for (var e = 0, t = this._children.length; e < t; e++) this._children[e]._setTransformDirty();
            }),
            (n.getInvModelMatrix = function () {
              return (
                this._inverseWorldMatFlag.flag &&
                  (_.invert(this.transform.worldMatrix, this._invModelMatrix), (this._inverseWorldMatFlag.flag = !1)),
                this._invModelMatrix
              );
            }),
            A(t, [
              {
                key: "position",
                get: function () {
                  return this.transform.position;
                },
                set: function (e) {
                  this.transform.position = e;
                }
              },
              {
                key: "worldPosition",
                get: function () {
                  return this.transform.worldPosition;
                },
                set: function (e) {
                  this.transform.worldPosition = e;
                }
              },
              {
                key: "rotation",
                get: function () {
                  return this.transform.rotationQuaternion;
                },
                set: function (e) {
                  this.transform.rotationQuaternion = e;
                }
              },
              {
                key: "scale",
                get: function () {
                  return this.transform.scale;
                },
                set: function (e) {
                  this.transform.scale = e;
                }
              }
            ]),
            t
          );
        })(be);
      ct._entitys = new De();
      var ut = (function () {
          function e() {
            (this._features = []), (this._objects = []);
          }
          var t = e.prototype;
          return (
            (t.registerFeature = function (e) {
              for (var t = this._features, n = 0, i = t.length; n < i; n++) if (t[n] === e) return;
              t.push(e);
              for (var r = this._objects, a = 0, o = r.length; a < o; a++) r[a].features.push(new e());
            }),
            (t.addObject = function (e) {
              e.features = [];
              for (var t = 0, n = this._features.length; t < n; t++) {
                var i;
                e.features.push(new this._features[t](null != (i = e.engine) ? i : e));
              }
              this._objects.push(e);
            }),
            (t.callFeatureMethod = function (e, t, n) {
              for (var i = e.features, r = i.length, a = 0; a < r; a++) {
                var o = i[a];
                o[t] && o[t].apply(o, n);
              }
            }),
            (t.findFeature = function (e, t) {
              for (var n = e.features, i = n.length, r = 0; r < i; r++) {
                var a = n[r];
                if (a.constructor === t) return a;
              }
            }),
            e
          );
        })(),
        lt = (function () {
          function e() {
            (this.component = void 0),
              (this.primitive = void 0),
              (this.subPrimitive = void 0),
              (this.material = void 0);
          }
          (e.getFromPool = function () {
            var t = e._elementPoolIndex,
              n = e._elementPool;
            if ((e._elementPoolIndex++, n.length === t)) {
              var i = new e();
              return n.push(i), i;
            }
            return n[t];
          }),
            (e._restPool = function () {
              e._elementPoolIndex = 0;
            });
          var t = e.prototype;
          return (
            (t.setValue = function (e, t, n, i) {
              (this.component = e), (this.primitive = t), (this.subPrimitive = n), (this.material = i);
            }),
            e
          );
        })();
      (lt._elementPoolIndex = 0), (lt._elementPool = []);
      var dt,
        ht,
        ft,
        _t,
        pt,
        gt,
        vt,
        mt = (function () {
          function e() {}
          var t = e.prototype;
          return (
            (t.preUpdate = function (e) {}),
            (t.postUpdate = function (e) {}),
            (t.preRender = function (e, t) {}),
            (t.postRender = function (e, t) {}),
            (t.destroy = function (e) {}),
            e
          );
        })();
      (function (e) {
        (e[(e["Zero"] = 0)] = "Zero"),
          (e[(e["One"] = 1)] = "One"),
          (e[(e["SourceColor"] = 2)] = "SourceColor"),
          (e[(e["OneMinusSourceColor"] = 3)] = "OneMinusSourceColor"),
          (e[(e["DestinationColor"] = 4)] = "DestinationColor"),
          (e[(e["OneMinusDestinationColor"] = 5)] = "OneMinusDestinationColor"),
          (e[(e["SourceAlpha"] = 6)] = "SourceAlpha"),
          (e[(e["OneMinusSourceAlpha"] = 7)] = "OneMinusSourceAlpha"),
          (e[(e["DestinationAlpha"] = 8)] = "DestinationAlpha"),
          (e[(e["OneMinusDestinationAlpha"] = 9)] = "OneMinusDestinationAlpha"),
          (e[(e["SourceAlphaSaturate"] = 10)] = "SourceAlphaSaturate"),
          (e[(e["BlendColor"] = 11)] = "BlendColor"),
          (e[(e["OneMinusBlendColor"] = 12)] = "OneMinusBlendColor");
      })(dt || (dt = {})),
        (function (e) {
          (e[(e["Add"] = 0)] = "Add"),
            (e[(e["Subtract"] = 1)] = "Subtract"),
            (e[(e["ReverseSubtract"] = 2)] = "ReverseSubtract"),
            (e[(e["Min"] = 3)] = "Min"),
            (e[(e["Max"] = 4)] = "Max");
        })(ht || (ht = {})),
        (function (e) {
          (e[(e["None"] = 0)] = "None"),
            (e[(e["Red"] = 1)] = "Red"),
            (e[(e["Green"] = 2)] = "Green"),
            (e[(e["Blue"] = 4)] = "Blue"),
            (e[(e["Alpha"] = 8)] = "Alpha"),
            (e[(e["All"] = 15)] = "All");
        })(ft || (ft = {})),
        (function (e) {
          (e[(e["Never"] = 0)] = "Never"),
            (e[(e["Less"] = 1)] = "Less"),
            (e[(e["Equal"] = 2)] = "Equal"),
            (e[(e["LessEqual"] = 3)] = "LessEqual"),
            (e[(e["Greater"] = 4)] = "Greater"),
            (e[(e["NotEqual"] = 5)] = "NotEqual"),
            (e[(e["GreaterEqual"] = 6)] = "GreaterEqual"),
            (e[(e["Always"] = 7)] = "Always");
        })(_t || (_t = {})),
        (function (e) {
          (e[(e["Off"] = 0)] = "Off"), (e[(e["Front"] = 1)] = "Front"), (e[(e["Back"] = 2)] = "Back");
        })(pt || (pt = {})),
        (function (e) {
          (e[(e["Keep"] = 0)] = "Keep"),
            (e[(e["Zero"] = 1)] = "Zero"),
            (e[(e["Replace"] = 2)] = "Replace"),
            (e[(e["IncrementSaturate"] = 3)] = "IncrementSaturate"),
            (e[(e["DecrementSaturate"] = 4)] = "DecrementSaturate"),
            (e[(e["Invert"] = 5)] = "Invert"),
            (e[(e["IncrementWrap"] = 6)] = "IncrementWrap"),
            (e[(e["DecrementWrap"] = 7)] = "DecrementWrap");
        })(gt || (gt = {})),
        (function (e) {
          (e[(e["Opaque"] = 1e3)] = "Opaque"),
            (e[(e["AlphaTest"] = 2e3)] = "AlphaTest"),
            (e[(e["Transparent"] = 3e3)] = "Transparent");
        })(vt || (vt = {}));
      var yt = (function () {
        function e() {
          this.items = [];
        }
        var t = e.prototype;
        return (
          (t.pushPrimitive = function (e) {
            this.items.push(e);
          }),
          (t.sort = function (e) {
            var t = this;
            this.items.sort(function (n, i) {
              var r = t._isPrimitive(n),
                a = t._isPrimitive(i);
              if (r && a) {
                var s = n,
                  c = i,
                  u = s.material.renderQueueType,
                  l = c.material.renderQueueType;
                if (u > l) return 1;
                if (u < l) return -1;
                if (u >= vt.Transparent && l >= vt.Transparent) {
                  var d = o.distanceSquared(s.component.entity.transform.worldPosition, e),
                    h = o.distanceSquared(c.component.entity.transform.worldPosition, e);
                  return h - d;
                }
                return s.material.shader.name.localeCompare(c.material.shader.name);
              }
              return r && !a ? -1 : !r && a ? 1 : void 0;
            });
          }),
          (t.pushSprite = function (e, t, n, i, r, a, o) {
            var s = { component: e, positionQuad: t, uvRect: n, tintColor: i, texture: r, renderMode: a, camera: o };
            this.items.push(s);
          }),
          (t.render = function (t, n, i) {
            var r = this.items;
            if (0 !== r.length) {
              for (
                var a = t._renderPipeline._defaultSpriteMaterial,
                  o = t.engine,
                  s = t.scene,
                  c = o._renderCount,
                  u = o._hardwareRenderer,
                  l = s.shaderData,
                  d = t.shaderData,
                  h = 0,
                  f = r.length;
                h < f;
                h++
              ) {
                var _ = r[h],
                  p = _.component.entity.layer;
                if (p & i)
                  if (this._isPrimitive(_)) {
                    u.flushSprite(o, a);
                    var g = e.compileMacros,
                      v = _,
                      m = v.component,
                      y = n || v.material,
                      x = m.shaderData,
                      b = y.shaderData;
                    y._preRender(v),
                      Ne.unionCollection(m._globalShaderMacro, b._macroCollection, g),
                      g.unionCollection(v.primitive._macroCollection);
                    var w = y.shader._getShaderProgram(o, g);
                    if (!w.isValid) continue;
                    var A = w.bind(),
                      T = c !== w._uploadRenderCount;
                    T
                      ? (w.groupingOtherUniformBlock(),
                        w.uploadAll(w.sceneUniformBlock, l),
                        w.uploadAll(w.cameraUniformBlock, d),
                        w.uploadAll(w.rendererUniformBlock, x),
                        w.uploadAll(w.materialUniformBlock, b),
                        (w._uploadCamera = t),
                        (w._uploadRenderer = m),
                        (w._uploadMaterial = y),
                        (w._uploadRenderCount = c))
                      : (w._uploadCamera !== t && (w.uploadUniforms(w.cameraUniformBlock, d), (w._uploadCamera = t)),
                        w._uploadRenderer !== m &&
                          (w.uploadUniforms(w.rendererUniformBlock, x), (w._uploadRenderer = m)),
                        w._uploadMaterial !== y &&
                          (w.uploadUniforms(w.materialUniformBlock, b), (w._uploadMaterial = y)),
                        A &&
                          (w.uploadTextures(w.sceneUniformBlock, l),
                          w.uploadTextures(w.cameraUniformBlock, d),
                          w.uploadTextures(w.rendererUniformBlock, x),
                          w.uploadTextures(w.materialUniformBlock, b))),
                      y.renderState._apply(t.engine),
                      u.drawPrimitive(v.primitive, v.subPrimitive, w);
                  } else {
                    var M = _;
                    u.drawSprite(a, M.positionQuad, M.uvRect, M.tintColor, M.texture, M.renderMode, M.camera);
                  }
              }
              u.flushSprite(o, a);
            }
          }),
          (t.clear = function () {
            this.items.length = 0;
          }),
          (t._isPrimitive = function (e) {
            return !!e.primitive;
          }),
          e
        );
      })();
      yt.compileMacros = new Ne();
      var xt =
          "#define PI 3.14159265359\n#define LOG2 1.442695\n\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\n\n// nosie common\n#include <noise_common>\n",
        bt =
          "attribute vec3 POSITION;\n\n#ifdef O3_HAS_UV\n\nattribute vec2 TEXCOORD_0;\n\n#endif\n\n#ifdef O3_HAS_NORMAL\n\nattribute vec3 NORMAL;\n\n#endif\n\n#ifdef O3_HAS_TANGENT\n\nattribute vec4 TANGENT;\n\n#endif\n\n#ifdef O3_HAS_VERTEXCOLOR\n\nattribute vec4 COLOR_0;\n\n#endif\n\n#ifdef O3_HAS_SKIN\n    attribute vec4 JOINTS_0;\n    attribute vec4 WEIGHTS_0;\n\n    #ifdef O3_USE_JOINT_TEXTURE\n        uniform sampler2D u_jointSampler;\n        uniform float u_jointCount;\n\n        mat4 getJointMatrix(sampler2D smp, float index)\n        {\n            float base = index / u_jointCount;\n            float hf = 0.5 / u_jointCount;\n            float v = base + hf;\n\n            vec4 m0 = texture2D(smp, vec2(0.125, v ));\n            vec4 m1 = texture2D(smp, vec2(0.375, v ));\n            vec4 m2 = texture2D(smp, vec2(0.625, v ));\n            vec4 m3 = texture2D(smp, vec2(0.875, v ));\n\n            return mat4(m0, m1, m2, m3);\n\n        }\n\n    #else\n        uniform mat4 u_jointMatrix[ O3_JOINTS_NUM ];\n    #endif\n#endif\n\nuniform mat4 u_localMat;\nuniform mat4 u_modelMat;\nuniform mat4 u_viewMat;\nuniform mat4 u_projMat;\nuniform mat4 u_MVMat;\nuniform mat4 u_MVPMat;\nuniform mat4 u_normalMat;\nuniform vec3 u_cameraPos;\n",
        wt =
          "uniform O3_VERTEX_PRECISION mat4 u_localMat;\nuniform O3_VERTEX_PRECISION mat4 u_modelMat;\nuniform O3_VERTEX_PRECISION mat4 u_viewMat;\nuniform O3_VERTEX_PRECISION mat4 u_projMat;\nuniform O3_VERTEX_PRECISION mat4 u_MVMat;\nuniform O3_VERTEX_PRECISION mat4 u_MVPMat;\nuniform O3_VERTEX_PRECISION mat4 u_normalMat;\nuniform O3_VERTEX_PRECISION vec3 u_cameraPos;",
        At = "#ifdef O3_HAS_VERTEXCOLOR\n\nvarying vec4 v_color;\n\n#endif\n",
        Tt =
          "#ifdef O3_HAS_NORMAL\n\n    #if defined( O3_HAS_TANGENT ) && defined( O3_HAS_NORMALMAP )\n\n    varying mat3 v_TBN;\n\n    #else\n\n    varying vec3 v_normal;\n\n    #endif\n\n#endif\n",
        Mt = "varying vec2 v_uv;\n",
        Ct =
          "#if defined( O3_NEED_WORLDPOS ) || defined( O3_HAS_ENVMAP ) || defined( O3_HAS_LIGHTMAP ) || defined(O3_CLIPPLANE_NUM)\n\nvarying vec3 v_pos;\n\n#endif\n",
        Pt =
          "#ifdef O3_GENERATE_SHADOW_MAP\n\nuniform mat4 u_viewMatFromLight;\nuniform mat4 u_projMatFromLight;\n\n#endif\n\n#ifdef O3_SHADOW_MAP_COUNT\n\nuniform mat4 u_viewMatFromLight[O3_SHADOW_MAP_COUNT];\nuniform mat4 u_projMatFromLight[O3_SHADOW_MAP_COUNT];\nvarying vec4 v_PositionFromLight[O3_SHADOW_MAP_COUNT];\n\n#endif\n",
        St =
          "#ifdef O3_HAS_FOG\n\nvarying vec3 v_fogDepth;\n\nuniform O3_VERTEX_PRECISION vec3 u_fogColor;\n\n    #ifdef O3_FOG_EXP2\n\n        uniform O3_VERTEX_PRECISION float u_fogDensity;\n\n    #else\n\n        uniform O3_VERTEX_PRECISION float u_fogNear;\n        uniform O3_VERTEX_PRECISION float u_fogFar;\n\n    #endif\n\n#endif\n",
        Rt =
          "    #ifdef O3_HAS_NORMAL\n\n    vec3 normal = vec3( NORMAL );\n\n        #if defined( O3_HAS_TANGENT ) && defined( O3_HAS_NORMALMAP )\n\n        vec4 tangent = vec4( TANGENT );\n\n        #endif\n\n    #endif\n",
        Et = "    vec4 position = vec4( POSITION , 1.0 );\n",
        Ot =
          "#ifdef O3_HAS_MORPH\n\n    uniform float u_morphWeights[ O3_MORPH_NUM ];\n\n    #ifdef O3_MORPH_POSITION\n\n    attribute vec3 a_position0;\n\n    #endif\n\n    #ifdef O3_MORPH_NORMAL\n\n    attribute vec3 a_normal0;\n\n    #endif\n\n    #ifdef O3_MORPH_TANGENT\n\n    attribute vec3 a_tangent0;\n\n    #endif\n\n    #if O3_MORPH_NUM > 1\n\n        #ifdef O3_MORPH_POSITION\n\n        attribute vec3 a_position1;\n\n        #endif\n\n        #ifdef O3_MORPH_NORMAL\n\n        attribute vec3 a_normal1;\n\n        #endif\n\n        #ifdef O3_MORPH_TANGENT\n\n        attribute vec3 a_tangent1;\n\n        #endif\n\n    #endif\n\n    #if O3_MORPH_NUM > 2\n\n        #ifdef O3_MORPH_POSITION\n\n        attribute vec3 a_position2;\n\n        #endif\n\n        #ifdef O3_MORPH_NORMAL\n\n        attribute vec3 a_normal2;\n\n        #endif\n\n        #ifdef O3_MORPH_TANGENT\n\n        attribute vec3 a_tangent2;\n\n        #endif\n\n    #endif\n\n    #if O3_MORPH_NUM > 3\n\n        #ifdef O3_MORPH_POSITION\n\n        attribute vec3 a_position3;\n\n        #endif\n\n        #ifdef O3_MORPH_NORMAL\n\n        attribute vec3 a_normal3;\n\n        #endif\n\n        #ifdef O3_MORPH_TANGENT\n\n        attribute vec3 a_tangent3;\n\n        #endif\n\n    #endif\n\n    #if O3_MORPH_NUM > 4\n\n        #ifdef O3_MORPH_POSITION\n\n        attribute vec3 a_position4;\n\n        #endif\n\n        #ifdef O3_MORPH_NORMAL\n\n        attribute vec3 a_normal4;\n\n        #endif\n\n        #ifdef O3_MORPH_TANGENT\n\n        attribute vec3 a_tangent4;\n\n        #endif\n\n    #endif\n\n    #if O3_MORPH_NUM > 5\n\n        #ifdef O3_MORPH_POSITION\n\n        attribute vec3 a_position5;\n\n        #endif\n\n        #ifdef O3_MORPH_NORMAL\n\n        attribute vec3 a_normal5;\n\n        #endif\n\n        #ifdef O3_MORPH_TANGENT\n\n        attribute vec3 a_tangent5;\n\n        #endif\n\n    #endif\n\n    #if O3_MORPH_NUM > 6\n\n        #ifdef O3_MORPH_POSITION\n\n        attribute vec3 a_position6;\n\n        #endif\n\n        #ifdef O3_MORPH_NORMAL\n\n        attribute vec3 a_normal6;\n\n        #endif\n\n        #ifdef O3_MORPH_TANGENT\n\n        attribute vec3 a_tangent6;\n\n        #endif\n\n    #endif\n\n    #if O3_MORPH_NUM > 7\n\n        #ifdef O3_MORPH_POSITION\n\n        attribute vec3 a_position7;\n\n        #endif\n\n        #ifdef O3_MORPH_NORMAL\n\n        attribute vec3 a_normal7;\n\n        #endif\n\n        #ifdef O3_MORPH_TANGENT\n\n        attribute vec3 a_tangent7;\n\n        #endif\n\n    #endif\n\n#endif\n",
        Lt = "    #ifndef O3_GENERATE_SHADOW_MAP\n\n    gl_Position = u_MVPMat * position;\n\n    #endif\n",
        Ft = "    #ifdef O3_HAS_VERTEXCOLOR\n\n    v_color = COLOR_0;\n\n    #endif\n",
        It =
          "    #ifdef O3_HAS_NORMAL\n\n        #if defined( O3_HAS_TANGENT ) && defined( O3_HAS_NORMALMAP )\n\n        vec3 normalW = normalize( mat3(u_normalMat) * normal.xyz );\n        vec3 tangentW = normalize( mat3(u_normalMat) * tangent.xyz );\n        vec3 bitangentW = cross( normalW, tangentW ) * tangent.w;\n        v_TBN = mat3( tangentW, bitangentW, normalW );\n\n        #else\n\n        v_normal = normalize( mat3(u_normalMat) * normal );\n\n        #endif\n\n    #endif\n",
        zt =
          "#ifdef O3_HAS_SKIN\n\n        #ifdef O3_USE_JOINT_TEXTURE\n            mat4 skinMatrix =\n                WEIGHTS_0.x * getJointMatrix(u_jointSampler, JOINTS_0.x ) +\n                WEIGHTS_0.y * getJointMatrix(u_jointSampler, JOINTS_0.y ) +\n                WEIGHTS_0.z * getJointMatrix(u_jointSampler, JOINTS_0.z ) +\n                WEIGHTS_0.w * getJointMatrix(u_jointSampler, JOINTS_0.w );\n\n        #else\n            mat4 skinMatrix =\n                WEIGHTS_0.x * u_jointMatrix[ int( JOINTS_0.x ) ] +\n                WEIGHTS_0.y * u_jointMatrix[ int( JOINTS_0.y ) ] +\n                WEIGHTS_0.z * u_jointMatrix[ int( JOINTS_0.z ) ] +\n                WEIGHTS_0.w * u_jointMatrix[ int( JOINTS_0.w ) ];\n        #endif\n\n        position = skinMatrix * position;\n\n        #ifdef O3_HAS_NORMAL\n            normal = vec4( skinMatrix * vec4( normal, 0.0 ) ).xyz;\n            #if defined( O3_HAS_TANGENT ) && defined( O3_HAS_NORMALMAP )\n                tangent.xyz = vec4( skinMatrix * vec4( tangent.xyz, 0.0 ) ).xyz;\n            #endif\n\n        #endif\n\n#endif\n",
        Bt =
          "    #ifdef O3_HAS_UV\n\n    v_uv = TEXCOORD_0;\n\n    #else\n\n    // may need this calculate normal\n    v_uv = vec2( 0., 0. );\n\n    #endif\n",
        Dt =
          "    #if defined( O3_NEED_WORLDPOS ) || defined( O3_HAS_ENVMAP ) || defined( O3_HAS_LIGHTMAP ) || defined(O3_CLIPPLANE_NUM)\n\n    vec4 temp_pos = u_modelMat * position;\n    v_pos = temp_pos.xyz / temp_pos.w;\n\n    #endif\n",
        Nt =
          "    #ifdef O3_GENERATE_SHADOW_MAP\n\n    gl_Position = u_projMatFromLight * u_viewMatFromLight * u_modelMat * position;\n\n    #endif\n\n    #ifdef O3_SHADOW_MAP_COUNT\n\n    for (int i = 0; i < O3_SHADOW_MAP_COUNT; i++) {\n\n        v_PositionFromLight[i] = u_projMatFromLight[i] * u_viewMatFromLight[i] * u_modelMat * vec4( POSITION, 1.0 );\n\n    }\n\n    #endif\n",
        Gt =
          "    #ifdef O3_HAS_MORPH\n\n        #if defined( O3_MORPH_POSITION )\n\n        position.xyz += u_morphWeights[ 0 ] * a_position0;\n\n            #if O3_MORPH_NUM > 1\n\n            position.xyz += u_morphWeights[ 1 ] * a_position1;\n\n            #endif\n\n            #if O3_MORPH_NUM > 2\n\n            position.xyz += u_morphWeights[ 2 ] * a_position2;\n\n            #endif\n\n            #if O3_MORPH_NUM > 3\n\n            position.xyz += u_morphWeights[ 3 ] * a_position3;\n\n            #endif\n\n            #if O3_MORPH_NUM > 4\n\n            position.xyz += u_morphWeights[ 4 ] * a_position4;\n\n            #endif\n\n            #if O3_MORPH_NUM > 5\n\n            position.xyz += u_morphWeights[ 5 ] * a_position5;\n\n            #endif\n\n            #if O3_MORPH_NUM > 6\n\n            position.xyz += u_morphWeights[ 6 ] * a_position6;\n\n            #endif\n\n            #if O3_MORPH_NUM > 7\n\n            position.xyz += u_morphWeights[ 7 ] * a_position7;\n\n            #endif\n\n        #endif\n\n        #if defined( O3_HAS_NORMAL ) && defined( O3_MORPH_NORMAL )\n\n        normal.xyz += u_morphWeights[ 0 ] * a_normal0;\n\n            #if O3_MORPH_NUM > 1\n\n            normal.xyz += u_morphWeights[ 1 ] * a_normal1;\n\n            #endif\n\n            #if O3_MORPH_NUM > 2\n\n            normal.xyz += u_morphWeights[ 2 ] * a_normal2;\n\n            #endif\n\n            #if O3_MORPH_NUM > 3\n\n            normal.xyz += u_morphWeights[ 3 ] * a_normal3;\n\n            #endif\n\n            #if O3_MORPH_NUM > 4\n\n            normal.xyz += u_morphWeights[ 4 ] * a_normal4;\n\n            #endif\n\n            #if O3_MORPH_NUM > 5\n\n            normal.xyz += u_morphWeights[ 5 ] * a_normal5;\n\n            #endif\n\n            #if O3_MORPH_NUM > 6\n\n            normal.xyz += u_morphWeights[ 6 ] * a_normal6;\n\n            #endif\n\n            #if O3_MORPH_NUM > 7\n\n            normal.xyz += u_morphWeights[ 7 ] * a_normal7;\n\n            #endif\n\n        #endif\n\n        #if defined( O3_HAS_TANGENT ) && defined( O3_MORPH_TANGENT ) && defined( O3_HAS_NORMALMAP )\n\n        tangent.xyz += u_morphWeights[ 0 ] * a_tangent0;\n\n            #if O3_MORPH_NUM > 1\n\n            tangent.xyz += u_morphWeights[ 1 ] * a_tangent1;\n\n            #endif\n\n            #if O3_MORPH_NUM > 2\n\n            tangent.xyz += u_morphWeights[ 2 ] * a_tangent2;\n\n            #endif\n\n            #if O3_MORPH_NUM > 3\n\n            tangent.xyz += u_morphWeights[ 3 ] * a_tangent3;\n\n            #endif\n\n            #if O3_MORPH_NUM > 4\n\n            tangent.xyz += u_morphWeights[ 4 ] * a_tangent4;\n\n            #endif\n\n            #if O3_MORPH_NUM > 5\n\n            tangent.xyz += u_morphWeights[ 5 ] * a_tangent5;\n\n            #endif\n\n            #if O3_MORPH_NUM > 6\n\n            tangent.xyz += u_morphWeights[ 6 ] * a_tangent6;\n\n            #endif\n\n            #if O3_MORPH_NUM > 7\n\n            tangent.xyz += u_morphWeights[ 7 ] * a_tangent7;\n\n            #endif\n\n        #endif\n\n    #endif\n",
        Ut = "    #ifdef O3_HAS_FOG\n\n    v_fogDepth = ( u_MVMat * position ).xyz;\n\n    #endif\n",
        kt = "#ifdef O3_HAS_AMBIENT_LIGHT\n\n\nuniform vec3 u_ambientLightColor;\n\n#endif\n",
        Vt =
          "#ifdef O3_DIRECT_LIGHT_COUNT\n\nstruct DirectLight {\n    vec3 color;\n    vec3 direction;\n};\n\nuniform vec3 u_directLightColor[O3_DIRECT_LIGHT_COUNT];\nuniform vec3 u_directLightDirection[O3_DIRECT_LIGHT_COUNT];\n#endif\n",
        Ht =
          "#ifdef O3_POINT_LIGHT_COUNT\n\nstruct PointLight {\n    vec3 color;\n    vec3 position;\n    float distance;\n    float decay;\n};\nuniform vec3 u_pointLightColor[ O3_POINT_LIGHT_COUNT ];\nuniform vec3 u_pointLightPosition[ O3_POINT_LIGHT_COUNT ];\nuniform float u_pointLightDistance[ O3_POINT_LIGHT_COUNT ];\nuniform float u_pointLightDecay[ O3_POINT_LIGHT_COUNT ];\n\n#endif\n",
        Wt =
          "#ifdef O3_SPOT_LIGHT_COUNT\n\nstruct SpotLight {\n    vec3 color;\n    vec3 position;\n    vec3 direction;\n    float distance;\n    float decay;\n    float angle;\n    float penumbra;\n    float penumbraCos;\n    float coneCos;\n};\n\nuniform vec3 u_spotLightColor[ O3_SPOT_LIGHT_COUNT ];\nuniform vec3 u_spotLightPosition[ O3_SPOT_LIGHT_COUNT ];\nuniform vec3 u_spotLightDirection[ O3_SPOT_LIGHT_COUNT ];\nuniform float u_spotLightDistance[ O3_SPOT_LIGHT_COUNT ];\nuniform float u_spotLightDecay[ O3_SPOT_LIGHT_COUNT ];\nuniform float u_spotLightAngle[ O3_SPOT_LIGHT_COUNT ];\nuniform float u_spotLightPenumbra[ O3_SPOT_LIGHT_COUNT ];\nuniform float u_spotLightPenumbraCos[ O3_SPOT_LIGHT_COUNT ];\nuniform float u_spotLightConeCos[ O3_SPOT_LIGHT_COUNT ];\n\n#endif\n",
        jt =
          "uniform vec4 u_ambientColor;\nuniform vec4 u_emissiveColor;\nuniform vec4 u_diffuseColor;\nuniform vec4 u_specularColor;\nuniform float u_shininess;\n\n#ifdef O3_AMBIENT_TEXTURE\n\nuniform sampler2D u_ambientTexture;\n\n#endif\n\n#ifdef O3_EMISSIVE_TEXTURE\n\nuniform sampler2D u_emissiveTexture;\n\n#endif\n\n#ifdef O3_DIFFUSE_TEXTURE\n\nuniform sampler2D u_diffuseTexture;\n\n#endif\n\n#ifdef O3_SPECULAR_TEXTURE\n\nuniform sampler2D u_specularTexture;\n\n#endif\n",
        Xt =
          "    #ifdef O3_HAS_FOG\n\n    float fogDepth = length( v_fogDepth );\n\n        #ifdef O3_FOG_EXP2\n\n            float fogFactor = whiteCompliment( exp2( - u_fogDensity * u_fogDensity * fogDepth * fogDepth * LOG2 ) );\n\n        #else\n\n            float fogFactor = smoothstep( u_fogNear, u_fogFar, fogDepth );\n\n        #endif\n\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, u_fogColor, fogFactor );\n\n    #endif\n",
        Kt =
          "    vec4 ambient = u_ambientColor;\n    vec4 emission = u_emissiveColor;\n    vec4 diffuse = u_diffuseColor;\n    vec4 specular = u_specularColor;\n      \n     #ifdef O3_HAS_AMBIENT_LIGHT\n        ambient *= vec4(u_ambientLightColor, 1.0);\n        #ifdef O3_AMBIENT_TEXTURE\n            ambient *= texture2D(u_ambientTexture, v_uv);\n         #endif\n    #endif\n\n    #ifdef O3_EMISSIVE_TEXTURE\n\n        emission *= texture2D(u_emissiveTexture, v_uv);\n\n    #else\n\n    #endif\n\n    #ifdef O3_DIFFUSE_TEXTURE\n\n    diffuse *= texture2D(u_diffuseTexture, v_uv);\n\n    #endif\n\n    #ifdef O3_SPECULAR_TEXTURE\n\n    specular *= texture2D(u_specularTexture, v_uv);\n\n    #endif\n",
        qt =
          "    #ifdef O3_HAS_NORMAL\n\n        #if defined( O3_HAS_TANGENT ) && defined( O3_HAS_NORMALMAP )\n\n        vec3 N = normalize( v_TBN[ 2 ] );\n\n        #else\n\n        vec3 N = normalize( v_normal );\n\n        #endif\n\n    #endif\n",
        Qt =
          "    #if defined( O3_NEED_WORLDPOS ) || defined( O3_HAS_ENVMAP ) || defined( O3_HAS_LIGHTMAP )\n\n    vec3 V =  normalize( u_cameraPos - v_pos );\n\n    #endif\n",
        Yt =
          "    #ifdef O3_HAS_NORMAL\n         N *= float( gl_FrontFacing ) * 2.0 - 1.0;\n    #else\n         vec3 N = vec3(0, 0, 1);\n    #endif\n\n\n    vec3 lightDiffuse = vec3( 0.0, 0.0, 0.0 );\n    vec3 lightSpecular = vec3( 0.0, 0.0, 0.0 );\n\n    #ifdef O3_DIRECT_LIGHT_COUNT\n    \n    DirectLight lgt;\n\n    for( int i = 0; i < O3_DIRECT_LIGHT_COUNT; i++ ) {\n        lgt.color = u_directLightColor[i];\n        lgt.direction = u_directLightDirection[i];\n\n        float d = max(dot(N, -lgt.direction), 0.0);\n        lightDiffuse += lgt.color*d;\n\n        vec3 halfDir = normalize( V - lgt.direction );\n        float s = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), u_shininess );\n        lightSpecular += lgt.color * s;\n    }\n\n    #endif\n\n    #ifdef O3_POINT_LIGHT_COUNT\n    \n    PointLight lgt;\n\n    for( int i = 0; i < O3_POINT_LIGHT_COUNT; i++ ) {\n        lgt.color = u_pointLightColor[i];\n        lgt.position = u_pointLightPosition[i];\n        lgt.distance = u_pointLightDistance[i];\n        lgt.decay = u_pointLightDecay[i];\n\n        vec3 direction = v_pos - lgt.position;\n        float dist = length( direction );\n        direction /= dist;\n        float decay = pow( max( 0.0, 1.0-dist / lgt.distance ), 2.0 );\n\n        float d =  max( dot( N, -direction ), 0.0 ) * decay;\n        lightDiffuse += lgt.color * d;\n\n        vec3 halfDir = normalize( V - direction );\n        float s = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), u_shininess )  * decay;\n        lightSpecular += lgt.color * s;\n\n    }\n\n    #endif\n\n    #ifdef O3_SPOT_LIGHT_COUNT\n   \n    SpotLight lgt;\n\n    for( int i = 0; i < O3_SPOT_LIGHT_COUNT; i++) {\n        lgt.color = u_spotLightColor[i];\n        lgt.position = u_spotLightPosition[i];\n        lgt.direction = u_spotLightDirection[i];\n        lgt.distance = u_spotLightDistance[i];\n        lgt.decay = u_spotLightDecay[i];\n        lgt.angle = u_spotLightAngle[i];\n        lgt.penumbra = u_spotLightPenumbra[i];\n\n        vec3 direction = v_pos - lgt.position;\n        float angle = acos( dot( normalize( direction ), normalize( lgt.direction ) ) );\n        float dist = length( direction );\n        direction /= dist;\n        float decay = pow( max( 0.0, 1.0 - dist / lgt.distance ), 2.0 );\n\n        float hasLight = step( angle, lgt.angle );\n        float hasPenumbra = step( lgt.angle, angle ) * step( angle, lgt.angle * ( 1.0 + lgt.penumbra ) );\n        float penumbra = hasPenumbra * ( 1.0 - ( angle - lgt.angle ) / ( lgt.angle * lgt.penumbra ) );\n        float d = max( dot( N, -direction ), 0.0 )  * decay * ( penumbra + hasLight );\n        lightDiffuse += lgt.color * d;\n\n        vec3 halfDir = normalize( V - direction );\n        float s = pow( clamp( dot( N, halfDir ), 0.0, 1.0 ), u_shininess ) * decay * ( penumbra + hasLight );\n        lightSpecular += lgt.color * s;\n\n    }\n\n    #endif\n\n    diffuse *= vec4( lightDiffuse, 1.0 );\n    specular *= vec4( lightSpecular, 1.0 );\n",
        Jt =
          "    vec3 totalLight = vec3(0.0, 0.0, 0.0);\n    #ifdef O3_DIRECT_LIGHT_COUNT\n    for( int i = 0; i < O3_DIRECT_LIGHT_COUNT; i++ ){\n        vec3 lightColor = u_directLightColor[i];\n        lightColor *= max( dot( N, -u_directLightDirection[i] ), 0.0 );\n\n        totalLight += lightColor;\n    }\n    #endif\n    diffuse *= vec4( totalLight, 1.0 );\n",
        Zt =
          "// Modulo 289 without a division (only multiplications)\nvec4 mod289( vec4 x ) {\n\n    return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0;\n\n}\n\nvec3 mod289( vec3 x ) {\n\n    return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0;\n\n}\n\nvec2 mod289( vec2 x ) {\n\n    return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0;\n\n}\n\nfloat mod289( float x ) {\n\n    return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0;\n\n}\n\n// Modulo 7 without a division\nvec4 mod7( vec4 x ) {\n\n    return x - floor( x * ( 1.0 / 7.0 ) ) * 7.0;\n\n}\n\nvec3 mod7( vec3 x ) {\n\n    return x - floor( x * ( 1.0 / 7.0 ) ) * 7.0;\n\n}\n\n// Permutation polynomial: (34x^2 + x) mod 289\nvec4 permute( vec4 x ) {\n\n    return mod289( ( 34.0 * x + 1.0 ) * x);\n\n}\n\nvec3 permute( vec3 x ) {\n\n    return mod289( ( 34.0 * x + 1.0 ) * x );\n\n}\n\nfloat permute( float x ) {\n\n  return mod289( ( ( x * 34.0 ) + 1.0 ) * x );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n    return 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat taylorInvSqrt( float r ) {\n\n    return 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nvec4 fade( vec4 t ) {\n\n    return t * t * t * ( t * ( t * 6.0 - 15.0 ) + 10.0 );\n\n}\n\nvec3 fade( vec3 t ) {\n\n    return t * t * t * ( t * ( t * 6.0 - 15.0 ) + 10.0 );\n\n}\n\nvec2 fade( vec2 t ) {\n\n    return t * t * t * ( t * ( t * 6.0 - 15.0 ) + 10.0 );\n\n}\n\n#define K 0.142857142857 // 1/7\n#define Ko 0.428571428571 // 1/2-K/2\n#define K2 0.020408163265306 // 1/(7*7)\n#define Kd2 0.0714285714285 // K/2\n#define Kz 0.166666666667 // 1/6\n#define Kzo 0.416666666667 // 1/2-1/6*2\n#define jitter 1.0 // smaller jitter gives more regular pattern\n#define jitter1 0.8 // smaller jitter gives less errors in F1 F2\n",
        $t =
          '\n// Cellular noise ("Worley noise") in 2D in GLSL.\n// Copyright (c) Stefan Gustavson 2011-04-19. All rights reserved.\n// This code is released under the conditions of the MIT license.\n// See LICENSE file for details.\n// https://github.com/stegu/webgl-noise\n\n// Cellular noise, returning F1 and F2 in a vec2.\n// Standard 3x3 search window for good F1 and F2 values\nvec2 cellular( vec2 P ) {\n\n\tvec2 Pi = mod289( floor( P ) );\n \tvec2 Pf = fract( P );\n\tvec3 oi = vec3( -1.0, 0.0, 1.0);\n\tvec3 of = vec3( -0.5, 0.5, 1.5);\n\tvec3 px = permute( Pi.x + oi );\n\tvec3 p = permute( px.x + Pi.y + oi ); // p11, p12, p13\n\tvec3 ox = fract( p * K ) - Ko;\n\tvec3 oy = mod7( floor( p * K ) ) * K - Ko;\n\tvec3 dx = Pf.x + 0.5 + jitter * ox;\n\tvec3 dy = Pf.y - of + jitter * oy;\n\tvec3 d1 = dx * dx + dy * dy; // d11, d12 and d13, squared\n\tp = permute( px.y + Pi.y + oi ); // p21, p22, p23\n\tox = fract( p * K ) - Ko;\n\toy = mod7( floor( p * K ) ) * K - Ko;\n\tdx = Pf.x - 0.5 + jitter * ox;\n\tdy = Pf.y - of + jitter * oy;\n\tvec3 d2 = dx * dx + dy * dy; // d21, d22 and d23, squared\n\tp = permute( px.z + Pi.y + oi ); // p31, p32, p33\n\tox = fract( p * K ) - Ko;\n\toy = mod7( floor( p * K ) ) * K - Ko;\n\tdx = Pf.x - 1.5 + jitter * ox;\n\tdy = Pf.y - of + jitter * oy;\n\tvec3 d3 = dx * dx + dy * dy; // d31, d32 and d33, squared\n\t// Sort out the two smallest distances (F1, F2)\n\tvec3 d1a = min( d1, d2 );\n\td2 = max( d1, d2 ); // Swap to keep candidates for F2\n\td2 = min( d2, d3 ); // neither F1 nor F2 are now in d3\n\td1 = min( d1a, d2 ); // F1 is now in d1\n\td2 = max( d1a, d2 ); // Swap to keep candidates for F2\n\td1.xy = ( d1.x < d1.y ) ? d1.xy : d1.yx; // Swap if smaller\n\td1.xz = ( d1.x < d1.z ) ? d1.xz : d1.zx; // F1 is in d1.x\n\td1.yz = min( d1.yz, d2.yz ); // F2 is now not in d2.yz\n\td1.y = min( d1.y, d1.z ); // nor in  d1.z\n\td1.y = min( d1.y, d2.x ); // F2 is in d1.y, we\'re done.\n\treturn sqrt( d1.xy );\n\n}\n',
        en =
          '\n// Cellular noise ("Worley noise") in 2D in GLSL.\n// Copyright (c) Stefan Gustavson 2011-04-19. All rights reserved.\n// This code is released under the conditions of the MIT license.\n// See LICENSE file for details.\n// https://github.com/stegu/webgl-noise\n\n// Cellular noise, returning F1 and F2 in a vec2.\n// Speeded up by using 2x2 search window instead of 3x3,\n// at the expense of some strong pattern artifacts.\n// F2 is often wrong and has sharp discontinuities.\n// If you need a smooth F2, use the slower 3x3 version.\n// F1 is sometimes wrong, too, but OK for most purposes.\nvec2 cellular2x2( vec2 P ) {\n\n\tvec2 Pi = mod289( floor( P ) );\n \tvec2 Pf = fract( P );\n\tvec4 Pfx = Pf.x + vec4( -0.5, -1.5, -0.5, -1.5 );\n\tvec4 Pfy = Pf.y + vec4( -0.5, -0.5, -1.5, -1.5 );\n\tvec4 p = permute( Pi.x + vec4( 0.0, 1.0, 0.0, 1.0 ) );\n\tp = permute( p + Pi.y + vec4( 0.0, 0.0, 1.0, 1.0 ) );\n\tvec4 ox = mod7( p ) * K + Kd2;\n\tvec4 oy = mod7( floor( p * K ) ) * K + Kd2;\n\tvec4 dx = Pfx + jitter1 * ox;\n\tvec4 dy = Pfy + jitter1 * oy;\n\tvec4 d = dx * dx + dy * dy; // d11, d12, d21 and d22, squared\n\n\t// Do it right and find both F1 and F2\n\td.xy = ( d.x < d.y ) ? d.xy : d.yx; // Swap if smaller\n\td.xz = ( d.x < d.z ) ? d.xz : d.zx;\n\td.xw = ( d.x < d.w ) ? d.xw : d.wx;\n\td.y = min( d.y, d.z );\n\td.y = min( d.y, d.w );\n\treturn sqrt( d.xy );\n\n}\n',
        tn =
          '\n// Cellular noise ("Worley noise") in 3D in GLSL.\n// Copyright (c) Stefan Gustavson 2011-04-19. All rights reserved.\n// This code is released under the conditions of the MIT license.\n// See LICENSE file for details.\n// https://github.com/stegu/webgl-noise\n\n// Cellular noise, returning F1 and F2 in a vec2.\n// Speeded up by using 2x2x2 search window instead of 3x3x3,\n// at the expense of some pattern artifacts.\n// F2 is often wrong and has sharp discontinuities.\n// If you need a good F2, use the slower 3x3x3 version.\nvec2 cellular2x2x2(vec3 P) {\n\n\tvec3 Pi = mod289( floor( P ) );\n \tvec3 Pf = fract( P );\n\tvec4 Pfx = Pf.x + vec4( 0.0, -1.0, 0.0, -1.0 );\n\tvec4 Pfy = Pf.y + vec4( 0.0, 0.0, -1.0, -1.0 );\n\tvec4 p = permute( Pi.x + vec4( 0.0, 1.0, 0.0, 1.0 ) );\n\tp = permute( p + Pi.y + vec4( 0.0, 0.0, 1.0, 1.0 ) );\n\tvec4 p1 = permute( p + Pi.z ); // z+0\n\tvec4 p2 = permute( p + Pi.z + vec4( 1.0 ) ); // z+1\n\tvec4 ox1 = fract( p1 * K ) - Ko;\n\tvec4 oy1 = mod7( floor( p1 * K ) ) * K - Ko;\n\tvec4 oz1 = floor( p1 * K2 ) * Kz - Kzo; // p1 < 289 guaranteed\n\tvec4 ox2 = fract( p2 * K ) - Ko;\n\tvec4 oy2 = mod7( floor( p2 * K ) ) * K - Ko;\n\tvec4 oz2 = floor( p2 * K2 ) * Kz - Kzo;\n\tvec4 dx1 = Pfx + jitter1 * ox1;\n\tvec4 dy1 = Pfy + jitter1 * oy1;\n\tvec4 dz1 = Pf.z + jitter1 * oz1;\n\tvec4 dx2 = Pfx + jitter1 * ox2;\n\tvec4 dy2 = Pfy + jitter1 * oy2;\n\tvec4 dz2 = Pf.z - 1.0 + jitter1 * oz2;\n\tvec4 d1 = dx1 * dx1 + dy1 * dy1 + dz1 * dz1; // z+0\n\tvec4 d2 = dx2 * dx2 + dy2 * dy2 + dz2 * dz2; // z+1\n\n\t// Do it right and sort out both F1 and F2\n\tvec4 d = min( d1, d2 ); // F1 is now in d\n\td2 = max( d1, d2 ); // Make sure we keep all candidates for F2\n\td.xy = ( d.x < d.y ) ? d.xy : d.yx; // Swap smallest to d.x\n\td.xz = ( d.x < d.z ) ? d.xz : d.zx;\n\td.xw = ( d.x < d.w ) ? d.xw : d.wx; // F1 is now in d.x\n\td.yzw = min( d.yzw, d2.yzw ); // F2 now not in d2.yzw\n\td.y = min( d.y, d.z ); // nor in d.z\n\td.y = min( d.y, d.w ); // nor in d.w\n\td.y = min( d.y, d2.x ); // F2 is now in d.y\n\treturn sqrt( d.xy ); // F1 and F2\n\n}\n',
        nn =
          '\n// Cellular noise ("Worley noise") in 3D in GLSL.\n// Copyright (c) Stefan Gustavson 2011-04-19. All rights reserved.\n// This code is released under the conditions of the MIT license.\n// See LICENSE file for details.\n// https://github.com/stegu/webgl-noise\n\n// Cellular noise, returning F1 and F2 in a vec2.\n// 3x3x3 search region for good F2 everywhere, but a lot\n// slower than the 2x2x2 version.\n// The code below is a bit scary even to its author,\n// but it has at least half decent performance on a\n// modern GPU. In any case, it beats any software\n// implementation of Worley noise hands down.\n\nvec2 cellular( vec3 P ) {\n\n\tvec3 Pi = mod289( floor( P ) );\n \tvec3 Pf = fract( P ) - 0.5;\n\n\tvec3 Pfx = Pf.x + vec3( 1.0, 0.0, -1.0 );\n\tvec3 Pfy = Pf.y + vec3( 1.0, 0.0, -1.0 );\n\tvec3 Pfz = Pf.z + vec3( 1.0, 0.0, -1.0 );\n\n\tvec3 p = permute( Pi.x + vec3( -1.0, 0.0, 1.0 ) );\n\tvec3 p1 = permute( p + Pi.y - 1.0 );\n\tvec3 p2 = permute( p + Pi.y );\n\tvec3 p3 = permute( p + Pi.y + 1.0 );\n\n\tvec3 p11 = permute( p1 + Pi.z - 1.0 );\n\tvec3 p12 = permute( p1 + Pi.z );\n\tvec3 p13 = permute( p1 + Pi.z + 1.0 );\n\n\tvec3 p21 = permute( p2 + Pi.z - 1.0 );\n\tvec3 p22 = permute( p2 + Pi.z );\n\tvec3 p23 = permute( p2 + Pi.z + 1.0 );\n\n\tvec3 p31 = permute( p3 + Pi.z - 1.0 );\n\tvec3 p32 = permute( p3 + Pi.z );\n\tvec3 p33 = permute( p3 + Pi.z + 1.0 );\n\n\tvec3 ox11 = fract( p11 * K ) - Ko;\n\tvec3 oy11 = mod7( floor( p11 * K ) ) * K - Ko;\n\tvec3 oz11 = floor( p11 * K2 ) * Kz - Kzo; // p11 < 289 guaranteed\n\n\tvec3 ox12 = fract( p12 * K ) - Ko;\n\tvec3 oy12 = mod7( floor( p12 * K ) ) * K - Ko;\n\tvec3 oz12 = floor( p12 * K2 ) * Kz - Kzo;\n\n\tvec3 ox13 = fract( p13 * K ) - Ko;\n\tvec3 oy13 = mod7( floor( p13 * K ) ) * K - Ko;\n\tvec3 oz13 = floor( p13 * K2 ) * Kz - Kzo;\n\n\tvec3 ox21 = fract( p21 * K ) - Ko;\n\tvec3 oy21 = mod7( floor( p21 * K ) ) * K - Ko;\n\tvec3 oz21 = floor( p21 * K2 ) * Kz - Kzo;\n\n\tvec3 ox22 = fract( p22 * K ) - Ko;\n\tvec3 oy22 = mod7( floor( p22 * K ) ) * K - Ko;\n\tvec3 oz22 = floor( p22 * K2 ) * Kz - Kzo;\n\n\tvec3 ox23 = fract( p23 * K ) - Ko;\n\tvec3 oy23 = mod7( floor( p23 * K ) ) * K - Ko;\n\tvec3 oz23 = floor( p23 * K2 ) * Kz - Kzo;\n\n\tvec3 ox31 = fract( p31 * K ) - Ko;\n\tvec3 oy31 = mod7( floor( p31 * K ) ) * K - Ko;\n\tvec3 oz31 = floor( p31 * K2 ) * Kz - Kzo;\n\n\tvec3 ox32 = fract( p32 * K ) - Ko;\n\tvec3 oy32 = mod7( floor( p32 * K ) ) * K - Ko;\n\tvec3 oz32 = floor( p32 * K2 ) * Kz - Kzo;\n\n\tvec3 ox33 = fract( p33 * K ) - Ko;\n\tvec3 oy33 = mod7( floor( p33 * K ) ) * K - Ko;\n\tvec3 oz33 = floor( p33 * K2 ) * Kz - Kzo;\n\n\tvec3 dx11 = Pfx + jitter * ox11;\n\tvec3 dy11 = Pfy.x + jitter * oy11;\n\tvec3 dz11 = Pfz.x + jitter * oz11;\n\n\tvec3 dx12 = Pfx + jitter * ox12;\n\tvec3 dy12 = Pfy.x + jitter * oy12;\n\tvec3 dz12 = Pfz.y + jitter * oz12;\n\n\tvec3 dx13 = Pfx + jitter * ox13;\n\tvec3 dy13 = Pfy.x + jitter * oy13;\n\tvec3 dz13 = Pfz.z + jitter * oz13;\n\n\tvec3 dx21 = Pfx + jitter * ox21;\n\tvec3 dy21 = Pfy.y + jitter * oy21;\n\tvec3 dz21 = Pfz.x + jitter * oz21;\n\n\tvec3 dx22 = Pfx + jitter * ox22;\n\tvec3 dy22 = Pfy.y + jitter * oy22;\n\tvec3 dz22 = Pfz.y + jitter * oz22;\n\n\tvec3 dx23 = Pfx + jitter * ox23;\n\tvec3 dy23 = Pfy.y + jitter * oy23;\n\tvec3 dz23 = Pfz.z + jitter * oz23;\n\n\tvec3 dx31 = Pfx + jitter * ox31;\n\tvec3 dy31 = Pfy.z + jitter * oy31;\n\tvec3 dz31 = Pfz.x + jitter * oz31;\n\n\tvec3 dx32 = Pfx + jitter * ox32;\n\tvec3 dy32 = Pfy.z + jitter * oy32;\n\tvec3 dz32 = Pfz.y + jitter * oz32;\n\n\tvec3 dx33 = Pfx + jitter * ox33;\n\tvec3 dy33 = Pfy.z + jitter * oy33;\n\tvec3 dz33 = Pfz.z + jitter * oz33;\n\n\tvec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;\n\tvec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;\n\tvec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;\n\tvec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;\n\tvec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;\n\tvec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;\n\tvec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;\n\tvec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;\n\tvec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;\n\n\t// Do it right and sort out both F1 and F2\n\tvec3 d1a = min( d11, d12 );\n\td12 = max( d11, d12 );\n\td11 = min( d1a, d13 ); // Smallest now not in d12 or d13\n\td13 = max( d1a, d13 );\n\td12 = min( d12, d13 ); // 2nd smallest now not in d13\n\tvec3 d2a = min( d21, d22 );\n\td22 = max( d21, d22 );\n\td21 = min( d2a, d23 ); // Smallest now not in d22 or d23\n\td23 = max( d2a, d23 );\n\td22 = min( d22, d23 ); // 2nd smallest now not in d23\n\tvec3 d3a = min( d31, d32 );\n\td32 = max( d31, d32 );\n\td31 = min( d3a, d33 ); // Smallest now not in d32 or d33\n\td33 = max( d3a, d33 );\n\td32 = min( d32, d33 ); // 2nd smallest now not in d33\n\tvec3 da = min( d11, d21 );\n\td21 = max( d11, d21 );\n\td11 = min( da, d31 ); // Smallest now in d11\n\td31 = max( da, d31 ); // 2nd smallest now not in d31\n\td11.xy = ( d11.x < d11.y ) ? d11.xy : d11.yx;\n\td11.xz = ( d11.x < d11.z ) ? d11.xz : d11.zx; // d11.x now smallest\n\td12 = min( d12, d21 ); // 2nd smallest now not in d21\n\td12 = min( d12, d22 ); // nor in d22\n\td12 = min( d12, d31 ); // nor in d31\n\td12 = min( d12, d32 ); // nor in d32\n\td11.yz = min( d11.yz, d12.xy ); // nor in d12.yz\n\td11.y = min( d11.y, d12.z ); // Only two more to go\n\td11.y = min( d11.y, d11.z ); // Done! (Phew! )\n\treturn sqrt( d11.xy ); // F1, F2\n\n}\n',
        rn =
          "#include <noise_cellular_2D>\n#include <noise_cellular_3D>\n#include <noise_cellular_2x2>\n#include <noise_cellular_2x2x2>\n",
        an =
          '//\n// GLSL textureless classic 2D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/stegu/webgl-noise\n//\n\n// Classic Perlin noise\nfloat perlin( vec2 P ) {\n\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n    Pi = mod289(Pi); // To avoid truncation effects in permutation\n    vec4 ix = Pi.xzxz;\n    vec4 iy = Pi.yyww;\n    vec4 fx = Pf.xzxz;\n    vec4 fy = Pf.yyww;\n\n    vec4 i = permute(permute(ix) + iy);\n\n    vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n    vec4 gy = abs(gx) - 0.5 ;\n    vec4 tx = floor(gx + 0.5);\n    gx = gx - tx;\n\n    vec2 g00 = vec2(gx.x,gy.x);\n    vec2 g10 = vec2(gx.y,gy.y);\n    vec2 g01 = vec2(gx.z,gy.z);\n    vec2 g11 = vec2(gx.w,gy.w);\n\n    vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n    g00 *= norm.x;\n    g01 *= norm.y;\n    g10 *= norm.z;\n    g11 *= norm.w;\n\n    float n00 = dot(g00, vec2(fx.x, fy.x));\n    float n10 = dot(g10, vec2(fx.y, fy.y));\n    float n01 = dot(g01, vec2(fx.z, fy.z));\n    float n11 = dot(g11, vec2(fx.w, fy.w));\n\n    vec2 fade_xy = fade(Pf.xy);\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n    return 2.3 * n_xy;\n\n}\n\n// Classic Perlin noise, periodic variant\nfloat perlin( vec2 P, vec2 rep ) {\n\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n    Pi = mod(Pi, rep.xyxy); // To create noise with explicit period\n    Pi = mod289(Pi);        // To avoid truncation effects in permutation\n    vec4 ix = Pi.xzxz;\n    vec4 iy = Pi.yyww;\n    vec4 fx = Pf.xzxz;\n    vec4 fy = Pf.yyww;\n\n    vec4 i = permute(permute(ix) + iy);\n\n    vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n    vec4 gy = abs(gx) - 0.5 ;\n    vec4 tx = floor(gx + 0.5);\n    gx = gx - tx;\n\n    vec2 g00 = vec2(gx.x,gy.x);\n    vec2 g10 = vec2(gx.y,gy.y);\n    vec2 g01 = vec2(gx.z,gy.z);\n    vec2 g11 = vec2(gx.w,gy.w);\n\n    vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n    g00 *= norm.x;\n    g01 *= norm.y;\n    g10 *= norm.z;\n    g11 *= norm.w;\n\n    float n00 = dot(g00, vec2(fx.x, fy.x));\n    float n10 = dot(g10, vec2(fx.y, fy.y));\n    float n01 = dot(g01, vec2(fx.z, fy.z));\n    float n11 = dot(g11, vec2(fx.w, fy.w));\n\n    vec2 fade_xy = fade(Pf.xy);\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n    return 2.3 * n_xy;\n\n}\n',
        on =
          '//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/stegu/webgl-noise\n//\n\n// Classic Perlin noise\nfloat perlin( vec3 P ) {\n\n    vec3 Pi0 = floor(P); // Integer part for indexing\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n    Pi0 = mod289(Pi0);\n    Pi1 = mod289(Pi1);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 * (1.0 / 7.0);\n    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 * (1.0 / 7.0);\n    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n    return 2.2 * n_xyz;\n\n}\n\n// Classic Perlin noise, periodic variant\nfloat perlin( vec3 P, vec3 rep ) {\n\n    vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n    vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n    Pi0 = mod289(Pi0);\n    Pi1 = mod289(Pi1);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 * (1.0 / 7.0);\n    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 * (1.0 / 7.0);\n    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n    return 2.2 * n_xyz;\n\n}\n',
        sn =
          '//\n// GLSL textureless classic 4D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/stegu/webgl-noise\n//\n\n// Classic Perlin noise\nfloat perlin( vec4 P ) {\n\n    vec4 Pi0 = floor(P); // Integer part for indexing\n    vec4 Pi1 = Pi0 + 1.0; // Integer part + 1\n    Pi0 = mod289(Pi0);\n    Pi1 = mod289(Pi1);\n    vec4 Pf0 = fract(P); // Fractional part for interpolation\n    vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = vec4(Pi0.zzzz);\n    vec4 iz1 = vec4(Pi1.zzzz);\n    vec4 iw0 = vec4(Pi0.wwww);\n    vec4 iw1 = vec4(Pi1.wwww);\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n    vec4 ixy00 = permute(ixy0 + iw0);\n    vec4 ixy01 = permute(ixy0 + iw1);\n    vec4 ixy10 = permute(ixy1 + iw0);\n    vec4 ixy11 = permute(ixy1 + iw1);\n\n    vec4 gx00 = ixy00 * (1.0 / 7.0);\n    vec4 gy00 = floor(gx00) * (1.0 / 7.0);\n    vec4 gz00 = floor(gy00) * (1.0 / 6.0);\n    gx00 = fract(gx00) - 0.5;\n    gy00 = fract(gy00) - 0.5;\n    gz00 = fract(gz00) - 0.5;\n    vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\n    vec4 sw00 = step(gw00, vec4(0.0));\n    gx00 -= sw00 * (step(0.0, gx00) - 0.5);\n    gy00 -= sw00 * (step(0.0, gy00) - 0.5);\n\n    vec4 gx01 = ixy01 * (1.0 / 7.0);\n    vec4 gy01 = floor(gx01) * (1.0 / 7.0);\n    vec4 gz01 = floor(gy01) * (1.0 / 6.0);\n    gx01 = fract(gx01) - 0.5;\n    gy01 = fract(gy01) - 0.5;\n    gz01 = fract(gz01) - 0.5;\n    vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\n    vec4 sw01 = step(gw01, vec4(0.0));\n    gx01 -= sw01 * (step(0.0, gx01) - 0.5);\n    gy01 -= sw01 * (step(0.0, gy01) - 0.5);\n\n    vec4 gx10 = ixy10 * (1.0 / 7.0);\n    vec4 gy10 = floor(gx10) * (1.0 / 7.0);\n    vec4 gz10 = floor(gy10) * (1.0 / 6.0);\n    gx10 = fract(gx10) - 0.5;\n    gy10 = fract(gy10) - 0.5;\n    gz10 = fract(gz10) - 0.5;\n    vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\n    vec4 sw10 = step(gw10, vec4(0.0));\n    gx10 -= sw10 * (step(0.0, gx10) - 0.5);\n    gy10 -= sw10 * (step(0.0, gy10) - 0.5);\n\n    vec4 gx11 = ixy11 * (1.0 / 7.0);\n    vec4 gy11 = floor(gx11) * (1.0 / 7.0);\n    vec4 gz11 = floor(gy11) * (1.0 / 6.0);\n    gx11 = fract(gx11) - 0.5;\n    gy11 = fract(gy11) - 0.5;\n    gz11 = fract(gz11) - 0.5;\n    vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\n    vec4 sw11 = step(gw11, vec4(0.0));\n    gx11 -= sw11 * (step(0.0, gx11) - 0.5);\n    gy11 -= sw11 * (step(0.0, gy11) - 0.5);\n\n    vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\n    vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\n    vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\n    vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\n    vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\n    vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\n    vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\n    vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\n    vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\n    vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\n    vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\n    vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\n    vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\n    vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\n    vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\n    vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\n\n    vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\n    g0000 *= norm00.x;\n    g0100 *= norm00.y;\n    g1000 *= norm00.z;\n    g1100 *= norm00.w;\n\n    vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\n    g0001 *= norm01.x;\n    g0101 *= norm01.y;\n    g1001 *= norm01.z;\n    g1101 *= norm01.w;\n\n    vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\n    g0010 *= norm10.x;\n    g0110 *= norm10.y;\n    g1010 *= norm10.z;\n    g1110 *= norm10.w;\n\n    vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\n    g0011 *= norm11.x;\n    g0111 *= norm11.y;\n    g1011 *= norm11.z;\n    g1111 *= norm11.w;\n\n    float n0000 = dot(g0000, Pf0);\n    float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\n    float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\n    float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\n    float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\n    float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\n    float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\n    float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\n    float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\n    float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\n    float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\n    float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\n    float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\n    float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\n    float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\n    float n1111 = dot(g1111, Pf1);\n\n    vec4 fade_xyzw = fade(Pf0);\n    vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\n    vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\n    vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\n    vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\n    float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\n    return 2.2 * n_xyzw;\n\n}\n\n// Classic Perlin noise, periodic version\nfloat perlin( vec4 P, vec4 rep ) {\n\n    vec4 Pi0 = mod(floor(P), rep); // Integer part modulo rep\n    vec4 Pi1 = mod(Pi0 + 1.0, rep); // Integer part + 1 mod rep\n    Pi0 = mod289(Pi0);\n    Pi1 = mod289(Pi1);\n    vec4 Pf0 = fract(P); // Fractional part for interpolation\n    vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = vec4(Pi0.zzzz);\n    vec4 iz1 = vec4(Pi1.zzzz);\n    vec4 iw0 = vec4(Pi0.wwww);\n    vec4 iw1 = vec4(Pi1.wwww);\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n    vec4 ixy00 = permute(ixy0 + iw0);\n    vec4 ixy01 = permute(ixy0 + iw1);\n    vec4 ixy10 = permute(ixy1 + iw0);\n    vec4 ixy11 = permute(ixy1 + iw1);\n\n    vec4 gx00 = ixy00 * (1.0 / 7.0);\n    vec4 gy00 = floor(gx00) * (1.0 / 7.0);\n    vec4 gz00 = floor(gy00) * (1.0 / 6.0);\n    gx00 = fract(gx00) - 0.5;\n    gy00 = fract(gy00) - 0.5;\n    gz00 = fract(gz00) - 0.5;\n    vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\n    vec4 sw00 = step(gw00, vec4(0.0));\n    gx00 -= sw00 * (step(0.0, gx00) - 0.5);\n    gy00 -= sw00 * (step(0.0, gy00) - 0.5);\n\n    vec4 gx01 = ixy01 * (1.0 / 7.0);\n    vec4 gy01 = floor(gx01) * (1.0 / 7.0);\n    vec4 gz01 = floor(gy01) * (1.0 / 6.0);\n    gx01 = fract(gx01) - 0.5;\n    gy01 = fract(gy01) - 0.5;\n    gz01 = fract(gz01) - 0.5;\n    vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\n    vec4 sw01 = step(gw01, vec4(0.0));\n    gx01 -= sw01 * (step(0.0, gx01) - 0.5);\n    gy01 -= sw01 * (step(0.0, gy01) - 0.5);\n\n    vec4 gx10 = ixy10 * (1.0 / 7.0);\n    vec4 gy10 = floor(gx10) * (1.0 / 7.0);\n    vec4 gz10 = floor(gy10) * (1.0 / 6.0);\n    gx10 = fract(gx10) - 0.5;\n    gy10 = fract(gy10) - 0.5;\n    gz10 = fract(gz10) - 0.5;\n    vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\n    vec4 sw10 = step(gw10, vec4(0.0));\n    gx10 -= sw10 * (step(0.0, gx10) - 0.5);\n    gy10 -= sw10 * (step(0.0, gy10) - 0.5);\n\n    vec4 gx11 = ixy11 * (1.0 / 7.0);\n    vec4 gy11 = floor(gx11) * (1.0 / 7.0);\n    vec4 gz11 = floor(gy11) * (1.0 / 6.0);\n    gx11 = fract(gx11) - 0.5;\n    gy11 = fract(gy11) - 0.5;\n    gz11 = fract(gz11) - 0.5;\n    vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\n    vec4 sw11 = step(gw11, vec4(0.0));\n    gx11 -= sw11 * (step(0.0, gx11) - 0.5);\n    gy11 -= sw11 * (step(0.0, gy11) - 0.5);\n\n    vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\n    vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\n    vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\n    vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\n    vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\n    vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\n    vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\n    vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\n    vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\n    vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\n    vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\n    vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\n    vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\n    vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\n    vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\n    vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\n\n    vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\n    g0000 *= norm00.x;\n    g0100 *= norm00.y;\n    g1000 *= norm00.z;\n    g1100 *= norm00.w;\n\n    vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\n    g0001 *= norm01.x;\n    g0101 *= norm01.y;\n    g1001 *= norm01.z;\n    g1101 *= norm01.w;\n\n    vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\n    g0010 *= norm10.x;\n    g0110 *= norm10.y;\n    g1010 *= norm10.z;\n    g1110 *= norm10.w;\n\n    vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\n    g0011 *= norm11.x;\n    g0111 *= norm11.y;\n    g1011 *= norm11.z;\n    g1111 *= norm11.w;\n\n    float n0000 = dot(g0000, Pf0);\n    float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\n    float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\n    float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\n    float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\n    float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\n    float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\n    float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\n    float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\n    float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\n    float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\n    float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\n    float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\n    float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\n    float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\n    float n1111 = dot(g1111, Pf1);\n\n    vec4 fade_xyzw = fade(Pf0);\n    vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\n    vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\n    vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\n    vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\n    float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\n    return 2.2 * n_xyzw;\n\n}\n',
        cn = "#include <noise_perlin_2D>\n#include <noise_perlin_3D>\n#include <noise_perlin_4D>\n",
        un =
          '// Periodic (tiling) 2-D simplex noise (hexagonal lattice gradient noise)\n// with rotating gradients and analytic derivatives.\n// Variants also without the derivative (no "d" in the name), without\n// the tiling property (no "p" in the name) and without the rotating\n// gradients (no "r" in the name).\n//\n// This is (yet) another variation on simplex noise. It\'s similar to the\n// version presented by Ken Perlin, but the grid is axis-aligned and\n// slightly stretched in the y direction to permit rectangular tiling.\n//\n// The noise can be made to tile seamlessly to any integer period in x and\n// any even integer period in y. Odd periods may be specified for y, but\n// then the actual tiling period will be twice that number.\n//\n// The rotating gradients give the appearance of a swirling motion, and can\n// serve a similar purpose for animation as motion along z in 3-D noise.\n// The rotating gradients in conjunction with the analytic derivatives\n// can make "flow noise" effects as presented by Perlin and Neyret.\n//\n// vec3 {p}s{r}dnoise(vec2 pos {, vec2 per} {, float rot})\n// "pos" is the input (x,y) coordinate\n// "per" is the x and y period, where per.x is a positive integer\n//    and per.y is a positive even integer\n// "rot" is the angle to rotate the gradients (any float value,\n//    where 0.0 is no rotation and 1.0 is one full turn)\n// The first component of the 3-element return vector is the noise value.\n// The second and third components are the x and y partial derivatives.\n//\n// float {p}s{r}noise(vec2 pos {, vec2 per} {, float rot})\n// "pos" is the input (x,y) coordinate\n// "per" is the x and y period, where per.x is a positive integer\n//    and per.y is a positive even integer\n// "rot" is the angle to rotate the gradients (any float value,\n//    where 0.0 is no rotation and 1.0 is one full turn)\n// The return value is the noise value.\n// Partial derivatives are not computed, making these functions faster.\n//\n// Author: Stefan Gustavson (stefan.gustavson@gmail.com)\n// Version 2016-05-10.\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// idea of using a permutation polynomial.\n//\n// Copyright (c) 2016 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/stegu/webgl-noise\n//\n\n// Hashed 2-D gradients with an extra rotation.\n// (The constant 0.0243902439 is 1/41)\nvec2 rgrad2( vec2 p, float rot ) {\n\n    // For more isotropic gradients, sin/cos can be used instead.\n    float u = permute( permute( p.x ) + p.y ) * 0.0243902439 + rot; // Rotate by shift\n    u = fract( u ) * 6.28318530718; // 2*pi\n    return vec2( cos( u ), sin( u ));\n\n}\n\n//\n// 2-D tiling simplex noise with rotating gradients and analytical derivative.\n// The first component of the 3-element return vector is the noise value,\n// and the second and third components are the x and y partial derivatives.\n//\nvec3 psrdnoise(vec2 pos, vec2 per, float rot) {\n  // Hack: offset y slightly to hide some rare artifacts\n  pos.y += 0.01;\n  // Skew to hexagonal grid\n  vec2 uv = vec2(pos.x + pos.y*0.5, pos.y);\n\n  vec2 i0 = floor(uv);\n  vec2 f0 = fract(uv);\n  // Traversal order\n  vec2 i1 = (f0.x > f0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n\n  // Unskewed grid points in (x,y) space\n  vec2 p0 = vec2(i0.x - i0.y * 0.5, i0.y);\n  vec2 p1 = vec2(p0.x + i1.x - i1.y * 0.5, p0.y + i1.y);\n  vec2 p2 = vec2(p0.x + 0.5, p0.y + 1.0);\n\n  // Integer grid point indices in (u,v) space\n  i1 = i0 + i1;\n  vec2 i2 = i0 + vec2(1.0, 1.0);\n\n  // Vectors in unskewed (x,y) coordinates from\n  // each of the simplex corners to the evaluation point\n  vec2 d0 = pos - p0;\n  vec2 d1 = pos - p1;\n  vec2 d2 = pos - p2;\n\n  // Wrap i0, i1 and i2 to the desired period before gradient hashing:\n  // wrap points in (x,y), map to (u,v)\n  vec3 xw = mod(vec3(p0.x, p1.x, p2.x), per.x);\n  vec3 yw = mod(vec3(p0.y, p1.y, p2.y), per.y);\n  vec3 iuw = xw + 0.5 * yw;\n  vec3 ivw = yw;\n\n  // Create gradients from indices\n  vec2 g0 = rgrad2(vec2(iuw.x, ivw.x), rot);\n  vec2 g1 = rgrad2(vec2(iuw.y, ivw.y), rot);\n  vec2 g2 = rgrad2(vec2(iuw.z, ivw.z), rot);\n\n  // Gradients dot vectors to corresponding corners\n  // (The derivatives of this are simply the gradients)\n  vec3 w = vec3(dot(g0, d0), dot(g1, d1), dot(g2, d2));\n\n  // Radial weights from corners\n  // 0.8 is the square of 2/sqrt(5), the distance from\n  // a grid point to the nearest simplex boundary\n  vec3 t = 0.8 - vec3(dot(d0, d0), dot(d1, d1), dot(d2, d2));\n\n  // Partial derivatives for analytical gradient computation\n  vec3 dtdx = -2.0 * vec3(d0.x, d1.x, d2.x);\n  vec3 dtdy = -2.0 * vec3(d0.y, d1.y, d2.y);\n\n  // Set influence of each surflet to zero outside radius sqrt(0.8)\n  if (t.x < 0.0) {\n    dtdx.x = 0.0;\n    dtdy.x = 0.0;\n\tt.x = 0.0;\n  }\n  if (t.y < 0.0) {\n    dtdx.y = 0.0;\n    dtdy.y = 0.0;\n\tt.y = 0.0;\n  }\n  if (t.z < 0.0) {\n    dtdx.z = 0.0;\n    dtdy.z = 0.0;\n\tt.z = 0.0;\n  }\n\n  // Fourth power of t (and third power for derivative)\n  vec3 t2 = t * t;\n  vec3 t4 = t2 * t2;\n  vec3 t3 = t2 * t;\n\n  // Final noise value is:\n  // sum of ((radial weights) times (gradient dot vector from corner))\n  float n = dot(t4, w);\n\n  // Final analytical derivative (gradient of a sum of scalar products)\n  vec2 dt0 = vec2(dtdx.x, dtdy.x) * 4.0 * t3.x;\n  vec2 dn0 = t4.x * g0 + dt0 * w.x;\n  vec2 dt1 = vec2(dtdx.y, dtdy.y) * 4.0 * t3.y;\n  vec2 dn1 = t4.y * g1 + dt1 * w.y;\n  vec2 dt2 = vec2(dtdx.z, dtdy.z) * 4.0 * t3.z;\n  vec2 dn2 = t4.z * g2 + dt2 * w.z;\n\n  return 11.0*vec3(n, dn0 + dn1 + dn2);\n}\n\n//\n// 2-D tiling simplex noise with fixed gradients\n// and analytical derivative.\n// This function is implemented as a wrapper to "psrdnoise",\n// at the minimal cost of three extra additions.\n//\nvec3 psdnoise(vec2 pos, vec2 per) {\n  return psrdnoise(pos, per, 0.0);\n}\n\n//\n// 2-D tiling simplex noise with rotating gradients,\n// but without the analytical derivative.\n//\nfloat psrnoise(vec2 pos, vec2 per, float rot) {\n  // Offset y slightly to hide some rare artifacts\n  pos.y += 0.001;\n  // Skew to hexagonal grid\n  vec2 uv = vec2(pos.x + pos.y*0.5, pos.y);\n\n  vec2 i0 = floor(uv);\n  vec2 f0 = fract(uv);\n  // Traversal order\n  vec2 i1 = (f0.x > f0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n\n  // Unskewed grid points in (x,y) space\n  vec2 p0 = vec2(i0.x - i0.y * 0.5, i0.y);\n  vec2 p1 = vec2(p0.x + i1.x - i1.y * 0.5, p0.y + i1.y);\n  vec2 p2 = vec2(p0.x + 0.5, p0.y + 1.0);\n\n  // Integer grid point indices in (u,v) space\n  i1 = i0 + i1;\n  vec2 i2 = i0 + vec2(1.0, 1.0);\n\n  // Vectors in unskewed (x,y) coordinates from\n  // each of the simplex corners to the evaluation point\n  vec2 d0 = pos - p0;\n  vec2 d1 = pos - p1;\n  vec2 d2 = pos - p2;\n\n  // Wrap i0, i1 and i2 to the desired period before gradient hashing:\n  // wrap points in (x,y), map to (u,v)\n  vec3 xw = mod(vec3(p0.x, p1.x, p2.x), per.x);\n  vec3 yw = mod(vec3(p0.y, p1.y, p2.y), per.y);\n  vec3 iuw = xw + 0.5 * yw;\n  vec3 ivw = yw;\n\n  // Create gradients from indices\n  vec2 g0 = rgrad2(vec2(iuw.x, ivw.x), rot);\n  vec2 g1 = rgrad2(vec2(iuw.y, ivw.y), rot);\n  vec2 g2 = rgrad2(vec2(iuw.z, ivw.z), rot);\n\n  // Gradients dot vectors to corresponding corners\n  // (The derivatives of this are simply the gradients)\n  vec3 w = vec3(dot(g0, d0), dot(g1, d1), dot(g2, d2));\n\n  // Radial weights from corners\n  // 0.8 is the square of 2/sqrt(5), the distance from\n  // a grid point to the nearest simplex boundary\n  vec3 t = 0.8 - vec3(dot(d0, d0), dot(d1, d1), dot(d2, d2));\n\n  // Set influence of each surflet to zero outside radius sqrt(0.8)\n  t = max(t, 0.0);\n\n  // Fourth power of t\n  vec3 t2 = t * t;\n  vec3 t4 = t2 * t2;\n\n  // Final noise value is:\n  // sum of ((radial weights) times (gradient dot vector from corner))\n  float n = dot(t4, w);\n\n  // Rescale to cover the range [-1,1] reasonably well\n  return 11.0*n;\n}\n\n//\n// 2-D tiling simplex noise with fixed gradients,\n// without the analytical derivative.\n// This function is implemented as a wrapper to "psrnoise",\n// at the minimal cost of three extra additions.\n//\nfloat psnoise(vec2 pos, vec2 per) {\n  return psrnoise(pos, per, 0.0);\n}\n\n//\n// 2-D non-tiling simplex noise with rotating gradients and analytical derivative.\n// The first component of the 3-element return vector is the noise value,\n// and the second and third components are the x and y partial derivatives.\n//\nvec3 srdnoise(vec2 pos, float rot) {\n  // Offset y slightly to hide some rare artifacts\n  pos.y += 0.001;\n  // Skew to hexagonal grid\n  vec2 uv = vec2(pos.x + pos.y*0.5, pos.y);\n\n  vec2 i0 = floor(uv);\n  vec2 f0 = fract(uv);\n  // Traversal order\n  vec2 i1 = (f0.x > f0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n\n  // Unskewed grid points in (x,y) space\n  vec2 p0 = vec2(i0.x - i0.y * 0.5, i0.y);\n  vec2 p1 = vec2(p0.x + i1.x - i1.y * 0.5, p0.y + i1.y);\n  vec2 p2 = vec2(p0.x + 0.5, p0.y + 1.0);\n\n  // Integer grid point indices in (u,v) space\n  i1 = i0 + i1;\n  vec2 i2 = i0 + vec2(1.0, 1.0);\n\n  // Vectors in unskewed (x,y) coordinates from\n  // each of the simplex corners to the evaluation point\n  vec2 d0 = pos - p0;\n  vec2 d1 = pos - p1;\n  vec2 d2 = pos - p2;\n\n  vec3 x = vec3(p0.x, p1.x, p2.x);\n  vec3 y = vec3(p0.y, p1.y, p2.y);\n  vec3 iuw = x + 0.5 * y;\n  vec3 ivw = y;\n\n  // Avoid precision issues in permutation\n  iuw = mod289(iuw);\n  ivw = mod289(ivw);\n\n  // Create gradients from indices\n  vec2 g0 = rgrad2(vec2(iuw.x, ivw.x), rot);\n  vec2 g1 = rgrad2(vec2(iuw.y, ivw.y), rot);\n  vec2 g2 = rgrad2(vec2(iuw.z, ivw.z), rot);\n\n  // Gradients dot vectors to corresponding corners\n  // (The derivatives of this are simply the gradients)\n  vec3 w = vec3(dot(g0, d0), dot(g1, d1), dot(g2, d2));\n\n  // Radial weights from corners\n  // 0.8 is the square of 2/sqrt(5), the distance from\n  // a grid point to the nearest simplex boundary\n  vec3 t = 0.8 - vec3(dot(d0, d0), dot(d1, d1), dot(d2, d2));\n\n  // Partial derivatives for analytical gradient computation\n  vec3 dtdx = -2.0 * vec3(d0.x, d1.x, d2.x);\n  vec3 dtdy = -2.0 * vec3(d0.y, d1.y, d2.y);\n\n  // Set influence of each surflet to zero outside radius sqrt(0.8)\n  if (t.x < 0.0) {\n    dtdx.x = 0.0;\n    dtdy.x = 0.0;\n\tt.x = 0.0;\n  }\n  if (t.y < 0.0) {\n    dtdx.y = 0.0;\n    dtdy.y = 0.0;\n\tt.y = 0.0;\n  }\n  if (t.z < 0.0) {\n    dtdx.z = 0.0;\n    dtdy.z = 0.0;\n\tt.z = 0.0;\n  }\n\n  // Fourth power of t (and third power for derivative)\n  vec3 t2 = t * t;\n  vec3 t4 = t2 * t2;\n  vec3 t3 = t2 * t;\n\n  // Final noise value is:\n  // sum of ((radial weights) times (gradient dot vector from corner))\n  float n = dot(t4, w);\n\n  // Final analytical derivative (gradient of a sum of scalar products)\n  vec2 dt0 = vec2(dtdx.x, dtdy.x) * 4.0 * t3.x;\n  vec2 dn0 = t4.x * g0 + dt0 * w.x;\n  vec2 dt1 = vec2(dtdx.y, dtdy.y) * 4.0 * t3.y;\n  vec2 dn1 = t4.y * g1 + dt1 * w.y;\n  vec2 dt2 = vec2(dtdx.z, dtdy.z) * 4.0 * t3.z;\n  vec2 dn2 = t4.z * g2 + dt2 * w.z;\n\n  return 11.0*vec3(n, dn0 + dn1 + dn2);\n}\n\n//\n// 2-D non-tiling simplex noise with fixed gradients and analytical derivative.\n// This function is implemented as a wrapper to "srdnoise",\n// at the minimal cost of three extra additions.\n//\nvec3 sdnoise(vec2 pos) {\n  return srdnoise(pos, 0.0);\n}\n\n//\n// 2-D non-tiling simplex noise with rotating gradients,\n// without the analytical derivative.\n//\nfloat srnoise(vec2 pos, float rot) {\n  // Offset y slightly to hide some rare artifacts\n  pos.y += 0.001;\n  // Skew to hexagonal grid\n  vec2 uv = vec2(pos.x + pos.y*0.5, pos.y);\n\n  vec2 i0 = floor(uv);\n  vec2 f0 = fract(uv);\n  // Traversal order\n  vec2 i1 = (f0.x > f0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n\n  // Unskewed grid points in (x,y) space\n  vec2 p0 = vec2(i0.x - i0.y * 0.5, i0.y);\n  vec2 p1 = vec2(p0.x + i1.x - i1.y * 0.5, p0.y + i1.y);\n  vec2 p2 = vec2(p0.x + 0.5, p0.y + 1.0);\n\n  // Integer grid point indices in (u,v) space\n  i1 = i0 + i1;\n  vec2 i2 = i0 + vec2(1.0, 1.0);\n\n  // Vectors in unskewed (x,y) coordinates from\n  // each of the simplex corners to the evaluation point\n  vec2 d0 = pos - p0;\n  vec2 d1 = pos - p1;\n  vec2 d2 = pos - p2;\n\n  // Wrap i0, i1 and i2 to the desired period before gradient hashing:\n  // wrap points in (x,y), map to (u,v)\n  vec3 x = vec3(p0.x, p1.x, p2.x);\n  vec3 y = vec3(p0.y, p1.y, p2.y);\n  vec3 iuw = x + 0.5 * y;\n  vec3 ivw = y;\n\n  // Avoid precision issues in permutation\n  iuw = mod289(iuw);\n  ivw = mod289(ivw);\n\n  // Create gradients from indices\n  vec2 g0 = rgrad2(vec2(iuw.x, ivw.x), rot);\n  vec2 g1 = rgrad2(vec2(iuw.y, ivw.y), rot);\n  vec2 g2 = rgrad2(vec2(iuw.z, ivw.z), rot);\n\n  // Gradients dot vectors to corresponding corners\n  // (The derivatives of this are simply the gradients)\n  vec3 w = vec3(dot(g0, d0), dot(g1, d1), dot(g2, d2));\n\n  // Radial weights from corners\n  // 0.8 is the square of 2/sqrt(5), the distance from\n  // a grid point to the nearest simplex boundary\n  vec3 t = 0.8 - vec3(dot(d0, d0), dot(d1, d1), dot(d2, d2));\n\n  // Set influence of each surflet to zero outside radius sqrt(0.8)\n  t = max(t, 0.0);\n\n  // Fourth power of t\n  vec3 t2 = t * t;\n  vec3 t4 = t2 * t2;\n\n  // Final noise value is:\n  // sum of ((radial weights) times (gradient dot vector from corner))\n  float n = dot(t4, w);\n\n  // Rescale to cover the range [-1,1] reasonably well\n  return 11.0*n;\n}\n\n//\n// 2-D non-tiling simplex noise with fixed gradients,\n// without the analytical derivative.\n// This function is implemented as a wrapper to "srnoise",\n// at the minimal cost of three extra additions.\n// Note: if this kind of noise is all you want, there are faster\n// GLSL implementations of non-tiling simplex noise out there.\n// This one is included mainly for completeness and compatibility\n// with the other functions in the file.\n//\nfloat snoise(vec2 pos) {\n  return srnoise(pos, 0.0);\n}\n',
        ln =
          "//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n//\n\nfloat simplex( vec2 v ) {\n\n    const vec4 C = vec4( 0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439 ); // 1.0 / 41.0\n    // First corner\n    vec2 i  = floor( v + dot( v, C.yy ) );\n    vec2 x0 = v - i + dot( i, C.xx );\n\n    // Other corners\n    vec2 i1;\n    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n    //i1.y = 1.0 - i1.x;\n    i1 = ( x0.x > x0.y ) ? vec2( 1.0, 0.0 ) : vec2( 0.0, 1.0 );\n    // x0 = x0 - 0.0 + 0.0 * C.xx ;\n    // x1 = x0 - i1 + 1.0 * C.xx ;\n    // x2 = x0 - 1.0 + 2.0 * C.xx ;\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n\n    // Permutations\n    i = mod289( i ); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3( 0.0, i1.y, 1.0 ) )\n        + i.x + vec3( 0.0, i1.x, 1.0 ) );\n\n    vec3 m = max( 0.5 - vec3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract( p * C.www ) - 1.0;\n    vec3 h = abs( x ) - 0.5;\n    vec3 ox = floor( x + 0.5 );\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );\n\n    // Compute final noise value at P\n    vec3 g;\n    g.x  = a0.x * x0.x + h.x * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot( m, g );\n\n}\n",
        dn =
          "//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20150104 (JcBernack)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n//\n\nfloat simplex( vec3 v, out vec3 gradient ) {\n\n    const vec2  C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n    const vec4  D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n    // First corner\n    vec3 i  = floor( v + dot( v, C.yyy ) );\n    vec3 x0 = v - i + dot( i, C.xxx ) ;\n\n    // Other corners\n    vec3 g = step( x0.yzx, x0.xyz );\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n    // Permutations\n    i = mod289( i );\n    vec4 p = permute( permute( permute(\n                i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n            + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n            + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3 ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ * ns.x + ns.yyyy;\n    vec4 y = y_ * ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs( x ) - abs( y );\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    vec4 s0 = floor( b0 ) * 2.0 + 1.0;\n    vec4 s1 = floor( b1 ) * 2.0 + 1.0;\n    vec4 sh = - step( h, vec4( 0.0 ) );\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n    vec3 p0 = vec3( a0.xy, h.x );\n    vec3 p1 = vec3( a0.zw, h.y );\n    vec3 p2 = vec3( a1.xy, h.z );\n    vec3 p3 = vec3( a1.zw, h.w );\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n    vec4 m2 = m * m;\n    vec4 m4 = m2 * m2;\n    vec4 pdotx = vec4( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 ), dot( p3, x3 ) );\n\n    // Determine noise gradient\n    vec4 temp = m2 * m * pdotx;\n    gradient = - 8.0 * ( temp.x * x0 + temp.y * x1 + temp.z * x2 + temp.w * x3 );\n    gradient += m4.x * p0 + m4.y * p1 + m4.z * p2 + m4.w * p3;\n    gradient *= 42.0;\n\n    return 42.0 * dot( m4, pdotx );\n\n}\n",
        hn =
          "//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n//\n\nfloat simplex( vec3 v ) {\n\n    const vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n    const vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n    // First corner\n    vec3 i  = floor( v + dot( v, C.yyy ) );\n    vec3 x0 = v - i + dot( i, C.xxx );\n\n    // Other corners\n    vec3 g = step( x0.yzx, x0.xyz );\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n    // Permutations\n    i = mod289( i );\n    vec4 p = permute( permute( permute(\n                i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n            + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n            + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3 ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor( p * ns.z * ns.z );  //  mod(p,7*7)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs( x ) - abs( y );\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    vec4 s0 = floor( b0 ) * 2.0 + 1.0;\n    vec4 s1 = floor( b1 ) * 2.0 + 1.0;\n    vec4 sh = - step( h, vec4( 0.0 ) );\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww ;\n\n    vec3 p0 = vec3( a0.xy, h.x );\n    vec3 p1 = vec3( a0.zw, h.y );\n    vec3 p2 = vec3( a1.xy, h.z );\n    vec3 p3 = vec3( a1.zw, h.w );\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n                                dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n",
        fn =
          "//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n//\n\nvec4 grad4( float j, vec4 ip ) {\n\n    const vec4 ones = vec4( 1.0, 1.0, 1.0, -1.0 );\n    vec4 p, s;\n\n    p.xyz = floor( fract( vec3( j ) * ip.xyz ) * 7.0 ) * ip.z - 1.0;\n    p.w = 1.5 - dot( abs( p.xyz ), ones.xyz );\n    s = vec4( lessThan( p, vec4( 0.0 ) ) );\n    p.xyz = p.xyz + ( s.xyz * 2.0 - 1.0 ) * s.www;\n\n    return p;\n\n}\n\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat simplex(vec4 v) {\n\n    const vec4 C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                        -0.447213595499958); // -1 + 4 * G4\n\n    // First corner\n    vec4 i  = floor( v + dot( v, vec4( F4 ) ) );\n    vec4 x0 = v - i + dot( i, C.xxxx );\n\n    // Other corners\n\n    // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n    vec4 i0;\n    vec3 isX = step( x0.yzw, x0.xxx );\n    vec3 isYZ = step( x0.zww, x0.yyz );\n    i0.x = isX.x + isX.y + isX.z;\n    i0.yzw = 1.0 - isX;\n    i0.y += isYZ.x + isYZ.y;\n    i0.zw += 1.0 - isYZ.xy;\n    i0.z += isYZ.z;\n    i0.w += 1.0 - isYZ.z;\n\n    vec4 i3 = clamp( i0, 0.0, 1.0 );\n    vec4 i2 = clamp( i0 - 1.0, 0.0, 1.0 );\n    vec4 i1 = clamp( i0 - 2.0, 0.0, 1.0 );\n\n    vec4 x1 = x0 - i1 + C.xxxx;\n    vec4 x2 = x0 - i2 + C.yyyy;\n    vec4 x3 = x0 - i3 + C.zzzz;\n    vec4 x4 = x0 + C.wwww;\n\n    // Permutations\n    i = mod289( i );\n    float j0 = permute( permute( permute( permute( i.w ) + i.z ) + i.y ) + i.x );\n    vec4 j1 = permute( permute( permute( permute (\n                i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n            + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n            + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n            + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n    // Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n    // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n    vec4 ip = vec4( 1.0 / 294.0, 1.0 / 49.0, 1.0 / 7.0, 0.0 );\n\n    vec4 p0 = grad4(j0,   ip);\n    vec4 p1 = grad4(j1.x, ip);\n    vec4 p2 = grad4(j1.y, ip);\n    vec4 p3 = grad4(j1.z, ip);\n    vec4 p4 = grad4(j1.w, ip);\n\n    // Normalise gradients\n    vec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    p4 *= taylorInvSqrt( dot( p4, p4 ) );\n\n    // Mix contributions from the five corners\n    vec3 m0 = max( 0.6 - vec3( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ) ), 0.0 );\n    vec2 m1 = max( 0.6 - vec2( dot( x3, x3 ), dot( x4, x4 ) ), 0.0 );\n    m0 = m0 * m0;\n    m1 = m1 * m1;\n    return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n                + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}\n",
        _n =
          "#include <noise_simplex_2D>\n#include <noise_simplex_3D>\n#include <noise_simplex_3D_grad>\n#include <noise_simplex_4D>\n",
        pn =
          "#ifdef HAS_PERTURBATIONMAP\n  uniform sampler2D u_perturbationSampler;\n  uniform float u_perturbationUOffset;\n  uniform float u_perturbationVOffset;\n#endif\n",
        gn =
          "#ifdef HAS_PERTURBATIONMAP\n  vec2 getScreenUv(){\n    return gl_FragCoord.xy / u_resolution;\n  }\n\n  vec4 screenColor = texture2D(u_perturbationSampler, getScreenUv() + normalize(u_viewMat * vec4(normal, 1.)).xy * vec2(u_perturbationUOffset, u_perturbationVOffset));\n  gl_FragColor = mix(screenColor, gl_FragColor, gl_FragColor.a);\n\n#endif\n",
        vn =
          "#ifdef HAS_REFRACTIONMAP\n\n    uniform sampler2D u_refractionSampler;\n    uniform mat4 u_PTMMatrix;\n    uniform float u_refractionDepth;\n\n#endif\n",
        mn =
          "#ifdef HAS_REFRACTIONMAP\n  vec4 refractionColor = vec4(0.);\n  vec3 refractDir = normalize(refract(-geometry.viewDir, geometry.normal, u_refractionRatio));\n  vec3 newPos = v_pos + refractDir * u_refractionDepth;\n  vec4 projectionPos = u_PTMMatrix * u_projMat * u_viewMat * vec4(newPos, 1.0);\n  vec2 projectionUv = projectionPos.xy / projectionPos.w;\n  refractionColor = texture2D(u_refractionSampler, projectionUv);\n  gl_FragColor = mix(refractionColor, gl_FragColor, gl_FragColor.a);\n\n#endif\n",
        yn =
          "#ifdef O3_CLIPPLANE_NUM\n    uniform vec4 u_clipPlanes[O3_CLIPPLANE_NUM];\n    varying float v_clipDistances[O3_CLIPPLANE_NUM];\n#endif\n",
        xn =
          "#ifdef O3_CLIPPLANE_NUM\n    for(int i = 0; i < O3_CLIPPLANE_NUM; i++){\n        v_clipDistances[i] = dot(vec4(v_pos,1.0), u_clipPlanes[i]);\n    }\n#endif\n",
        bn = "#ifdef O3_CLIPPLANE_NUM\n    varying float v_clipDistances[O3_CLIPPLANE_NUM];\n#endif\n",
        wn =
          "#ifdef O3_CLIPPLANE_NUM\n    for(int i = 0; i < O3_CLIPPLANE_NUM; i++){\n        if(v_clipDistances[i] < 0.0){\n            discard;\n        }\n    }\n#endif\n",
        An =
          "#ifdef GAMMA\n    float gamma = 2.2;\n    gl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1.0 / gamma));\n#endif\n",
        Tn =
          "#ifndef EPSILON\n#define EPSILON 1e-6\n#endif\n\n#ifndef RECIPROCAL_PI\n    #define RECIPROCAL_PI 0.31830988618\n#endif\n\n\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\n\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n",
        Mn =
          "vec4 SRGBtoLINEAR(vec4 srgbIn)\n{\n    #ifdef MANUAL_SRGB\n\n        #ifdef SRGB_FAST_APPROXIMATION\n\n            vec3 linOut = pow(srgbIn.xyz, vec3(2.2));\n        #else\n\n         vec3 bLess = step(vec3(0.04045), srgbIn.xyz);\n         vec3 linOut = mix(srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055), vec3(2.4)), bLess);\n\n        #endif\n\n    return vec4(linOut, srgbIn.w);;\n\n    #else\n\n    return srgbIn;\n\n    #endif\n}\n\nfloat pow2( const in float x ) {\n    return x * x;\n}\n\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n    return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\n\n// todo: enhance\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\n    if( decayExponent > 0.0 ) {\n\n        #if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\n        // based upon Frostbite 3 Moving to Physically-based Rendering\n        // page 32, equation 26: E[window1]\n        // https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n        // this is intended to be used on spot and point lights who are represented as luminous intensity\n        // but who must be converted to luminous irradiance for surface lighting calculation\n        float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n        float maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n        return distanceFalloff * maxDistanceCutoffFactor;\n\n        #else\n\n        return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\n        #endif\n\n    }\n\n    return 1.0;\n\n}\n\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\n\treturn RECIPROCAL_PI * diffuseColor;\n\n}\n\n// source: http://simonstechblog.blogspot.ca/2011/12/microfacet-brdf.html\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n    return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\n\n\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\n    return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n\n}\n\n// \u4eae\u5ea6\u503c\nfloat getLuminance(vec3 color)\n{\n    return dot(color, vec3(0.2126, 0.7152, 0.0722));\n}\n",
        Cn =
          "#ifdef O3_HAS_ENVMAP_LIGHT\n\nstruct EnvMapLight {\n    vec3 diffuse;\n    vec3 specular;\n    float mipMapLevel;\n    float diffuseIntensity;\n    float specularIntensity;\n    mat4 transformMatrix;\n};\n\n\nuniform EnvMapLight u_envMapLight;\n\n#ifdef O3_USE_DIFFUSE_ENV\n    uniform samplerCube u_env_diffuseSampler;\n#endif\n\n#ifdef O3_USE_SPECULAR_ENV\n    uniform samplerCube u_env_specularSampler;\n#endif\n\n#endif\n",
        Pn =
          "uniform float u_alphaCutoff;\n\nuniform vec4 u_baseColorFactor;\nuniform float u_metal;\nuniform float u_roughness;\nuniform vec3 u_specularFactor;\nuniform float u_glossinessFactor;\n\nuniform float u_envMapIntensity;\nuniform float u_refractionRatio;\n\nuniform vec2 u_resolution;\n\n// todo: delete\nuniform float u_normalScale;\nuniform float u_occlusionStrength;\n\n",
        Sn =
          "#ifdef HAS_BASECOLORMAP\n\nuniform sampler2D u_baseColorSampler;\n\n#endif\n\n#ifdef O3_HAS_NORMALMAP\n\nuniform sampler2D u_normalSampler;\n\n#endif\n\n#ifdef HAS_EMISSIVEMAP\n\nuniform sampler2D u_emissiveSampler;\nuniform vec3 u_emissiveFactor;\n\n#endif\n\n#ifdef HAS_METALMAP\n\nuniform sampler2D u_metallicSampler;\n\n#endif\n\n#ifdef HAS_ROUGHNESSMAP\n\nuniform sampler2D u_roughnessSampler;\n\n#endif\n\n#ifdef HAS_METALROUGHNESSMAP\n\nuniform sampler2D u_metallicRoughnessSampler;\n\n#endif\n\n\n#ifdef HAS_SPECULARGLOSSINESSMAP\n\nuniform sampler2D u_specularGlossinessSampler;\n\n#endif\n\n#ifdef HAS_OCCLUSIONMAP\n\nuniform sampler2D u_occlusionSampler;\n\n#endif\n\n#ifdef HAS_OPACITYMAP\n\nuniform sampler2D u_opacitySampler;\n\n#endif\n\n#ifdef HAS_REFLECTIONMAP\n\nuniform samplerCube u_reflectionSampler;\n\n#endif\n",
        Rn =
          "struct IncidentLight {\n    vec3 color;\n    vec3 direction;\n    bool visible;\n};\nstruct ReflectedLight {\n    vec3 directDiffuse;\n    vec3 directSpecular;\n    vec3 indirectDiffuse;\n    vec3 indirectSpecular;\n};\nstruct GeometricContext {\n    vec3 position;\n    vec3 normal;\n    vec3 viewDir;\n};\nstruct PhysicalMaterial {\n    vec3    diffuseColor;\n    float   specularRoughness;\n    vec3    specularColor;\n};\n",
        En =
          "vec3 getNormal()\n{\n  #ifdef O3_HAS_NORMALMAP\n    #ifndef O3_HAS_TANGENT\n        #ifdef HAS_DERIVATIVES\n            vec3 pos_dx = dFdx(v_pos);\n            vec3 pos_dy = dFdy(v_pos);\n            vec3 tex_dx = dFdx(vec3(v_uv, 0.0));\n            vec3 tex_dy = dFdy(vec3(v_uv, 0.0));\n            vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\n            #ifdef O3_HAS_NORMAL\n                vec3 ng = normalize(v_normal);\n            #else\n                vec3 ng = normalize( cross(pos_dx, pos_dy) );\n            #endif\n            t = normalize(t - ng * dot(ng, t));\n            vec3 b = normalize(cross(ng, t));\n            mat3 tbn = mat3(t, b, ng);\n        #else\n            #ifdef O3_HAS_NORMAL\n                vec3 ng = normalize(v_normal);\n            #else\n                vec3 ng = vec3(0.0, 0.0, 1.0);\n            #endif\n            mat3 tbn = mat3(vec3(0.0), vec3(0.0), ng);\n        #endif\n    #else\n        mat3 tbn = v_TBN;\n    #endif\n        vec3 n = texture2D(u_normalSampler, v_uv ).rgb;\n        n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_normalScale, u_normalScale, 1.0)));\n  #else\n    #ifdef O3_HAS_NORMAL\n        vec3 n = normalize(v_normal);\n    #elif defined(HAS_DERIVATIVES)\n        vec3 pos_dx = dFdx(v_pos);\n        vec3 pos_dy = dFdy(v_pos);\n        vec3 n = normalize( cross(pos_dx, pos_dy) );\n    #else\n        vec3 n= vec3(0.0,0.0,1.0);\n    #endif\n  #endif\n\n  n *= float( gl_FrontFacing ) * 2.0 - 1.0;\n\n  return n;\n}\n",
        On =
          "vec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\n\t// Original approximation by Christophe Schlick '94\n\t// float fresnel = pow( 1.0 - dotLH, 5.0 );\n\n\t// Optimized variant (presented by Epic at SIGGRAPH '13)\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n\n} // validated\n\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\n\tfloat a2 = pow2( alpha );\n\n\t// dotNL and dotNV are explicitly swapped. This is not a mistake.\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\n\treturn 0.5 / max( gv + gl, EPSILON );\n\n}\n\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is \"roughness squared\" in Disney\u2019s reparameterization\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\n\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n\n}\n\n// GGX Distribution, Schlick Fresnel, GGX-Smith Visibility\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\n\tfloat alpha = pow2( roughness ); // UE4's roughness\n\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\n\tfloat D = D_GGX( alpha, dotNH );\n\n\treturn F * ( G * D );\n\n} // validated\n",
        Ln =
          "void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n    float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\n    vec3 irradiance = dotNL * directLight.color;\n\n    #ifndef PHYSICALLY_CORRECT_LIGHTS\n\n        irradiance *= PI; // punctual light\n\n    #endif\n\n\n\n    reflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\n    reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n}\n\n\n\n#ifdef O3_DIRECT_LIGHT_COUNT\n\n    void getDirectionalDirectLightIrradiance( const in DirectLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n        directLight.color = directionalLight.color;\n        directLight.direction = -directionalLight.direction;\n        directLight.visible = true;\n    }\n\n#endif\n\n#ifdef O3_POINT_LIGHT_COUNT\n\n\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\n\t}\n\n#endif\n\n#ifdef O3_SPOT_LIGHT_COUNT\n\n\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\n\t\tif ( angleCos > spotLight.coneCos ) {\n\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\n\t\t} else {\n\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\n\t\t}\n\t}\n\n\n#endif\n",
        Fn =
          "// ref: https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\n    float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\n    const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\n    const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\n    vec4 r = roughness * c0 + c1;\n\n    float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\n    vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\n    return specularColor * AB.x + AB.y;\n\n} // validated\n\n\n// taken from here: http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\nfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\n    //float envMapWidth = pow( 2.0, maxMIPLevelScalar );\n    //float desiredMIPLevel = log2( envMapWidth * sqrt( 3.0 ) ) - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\n    float maxMIPLevelScalar = float( maxMIPLevel );\n    float desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\n    // clamp to allowable LOD ranges.\n    return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\n}\n\n#ifdef O3_HAS_ENVMAP_LIGHT\n\nvec3 getLightProbeIndirectRadiance( /*const in SpecularLightProbe specularLightProbe,*/ const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\n    #if !defined(O3_USE_SPECULAR_ENV) && !defined(HAS_REFLECTIONMAP)\n\n        return u_envMapLight.specular * u_envMapLight.specularIntensity * u_envMapIntensity;\n\n    #else\n\n    #ifdef ENVMAPMODE_REFRACT\n\n        vec3 reflectVec = refract( -geometry.viewDir, geometry.normal, u_refractionRatio );\n\n    #else\n\n        vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\n    #endif\n//        reflectVec = inverseTransformDirection( reflectVec, u_viewMat );\n\n        reflectVec =  mat3(u_envMapLight.transformMatrix) * reflectVec;\n\n        float specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\n        #ifdef HAS_TEX_LOD\n            #ifdef HAS_REFLECTIONMAP\n                 vec4 envMapColor = textureCubeLodEXT( u_reflectionSampler, reflectVec, specularMIPLevel );\n            #else\n                vec4 envMapColor = textureCubeLodEXT( u_env_specularSampler, reflectVec, specularMIPLevel );\n            #endif\n\n        #else\n            #ifdef HAS_REFLECTIONMAP\n                 vec4 envMapColor = textureCube( u_reflectionSampler, reflectVec, specularMIPLevel );\n            #else\n                 vec4 envMapColor = textureCube( u_env_specularSampler, reflectVec, specularMIPLevel );\n            #endif\n        #endif\n\n        envMapColor.rgb = SRGBtoLINEAR( envMapColor * u_envMapLight.specularIntensity * u_envMapIntensity).rgb;\n\n        return envMapColor.rgb;\n\n    #endif\n\n}\n#endif\n\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n    float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n    float dotNL = dotNV;\n\n\treflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\n}\n",
        In =
          "void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n    reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n}\n\n#ifdef O3_HAS_AMBIENT_LIGHT\n\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\n    vec3 irradiance = ambientLightColor;\n\n    #ifndef PHYSICALLY_CORRECT_LIGHTS\n\n        irradiance *= PI;\n\n    #endif\n\n    return irradiance;\n\n}\n\n#endif\n",
        zn =
          "    vec3 normal = getNormal();\n    vec4 diffuseColor = u_baseColorFactor;\n    vec3 totalEmissiveRadiance = vec3(0.0);\n    float metalnessFactor = u_metal;\n    float roughnessFactor = u_roughness;\n    vec3 specularFactor = u_specularFactor;\n    float glossinessFactor = u_glossinessFactor;\n\n    ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n    PhysicalMaterial material;\n    GeometricContext geometry;\n    IncidentLight directLight;\n\n    #ifdef HAS_BASECOLORMAP\n\n        vec4 baseMapColor = texture2D( u_baseColorSampler, v_uv );\n        baseMapColor = SRGBtoLINEAR( baseMapColor );\n        diffuseColor *= baseMapColor;\n\n    #endif\n\n    #ifdef O3_HAS_VERTEXCOLOR\n\n        diffuseColor.rgb *= v_color.rgb;\n\n        #ifdef O3_HAS_VERTEXALPHA\n\n            diffuseColor.a *= v_color.a;\n\n        #endif\n\n    #endif\n\n    #ifdef ALPHA_CUTOFF\n\n        if( diffuseColor.a < u_alphaCutoff ) {\n            discard;\n        }\n\n    #endif\n\n\n    #if defined(ALPHA_BLEND) && defined(HAS_OPACITYMAP)\n\n        #ifdef GETOPACITYFROMRGB\n            diffuseColor.a *= getLuminance(texture2D( u_opacitySampler, v_uv ).rgb);\n        #else\n            diffuseColor.a *= texture2D( u_opacitySampler, v_uv ).a;\n        #endif\n\n    #endif\n\n    #ifdef UNLIT\n\n        gl_FragColor = vec4( diffuseColor.rgb, diffuseColor.a );\n\n    #else\n\n\n\n        #ifdef HAS_METALROUGHNESSMAP\n\n            vec4 metalRoughMapColor = texture2D( u_metallicRoughnessSampler, v_uv );\n            metalnessFactor *= metalRoughMapColor.b;\n            roughnessFactor *= metalRoughMapColor.g;\n\n        #else\n            #ifdef HAS_METALMAP\n\n            vec4 metalMapColor = texture2D( u_metallicSampler, v_uv );\n            metalnessFactor *= metalMapColor.b;\n\n            #endif\n\n            #ifdef HAS_ROUGHNESSMAP\n\n            vec4 roughMapColor = texture2D( u_roughnessSampler, v_uv );\n            roughnessFactor *= roughMapColor.g;\n\n            #endif\n        #endif\n\n        #ifdef HAS_SPECULARGLOSSINESSMAP\n\n            vec4 specularGlossinessColor = texture2D(u_specularGlossinessSampler, v_uv );\n            specularFactor *= specularGlossinessColor.rgb;\n            glossinessFactor *= specularGlossinessColor.a;\n\n        #endif\n\n\n        #ifdef IS_METALLIC_WORKFLOW\n            material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\n            material.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n//          material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n            material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT /* pow2( reflectivity )*/ ), diffuseColor.rgb, metalnessFactor );\n        #else\n            float specularStrength = max( max( specularFactor.r, specularFactor.g ), specularFactor.b );\n            material.diffuseColor = diffuseColor.rgb * ( 1.0 - specularStrength );\n            material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );\n            material.specularColor = specularFactor;\n        #endif\n\n        geometry.position = v_pos;\n        geometry.normal = normal;\n        geometry.viewDir = normalize( u_cameraPos - v_pos );\n",
        Bn =
          "        #if defined( O3_DIRECT_LIGHT_COUNT ) && defined( RE_Direct )\n\n            DirectLight directionalLight;\n\n            for ( int i = 0; i < O3_DIRECT_LIGHT_COUNT; i ++ ) {\n\n                directionalLight.color = u_directLightColor[i];\n                directionalLight.direction = u_directLightDirection[i];\n                \n                getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\n                RE_Direct( directLight, geometry, material, reflectedLight );\n\n            }\n\n        #endif\n\n        #if defined( O3_POINT_LIGHT_COUNT ) && defined( RE_Direct )\n\n            PointLight pointLight;\n\n            for ( int i = 0; i < O3_POINT_LIGHT_COUNT; i ++ ) {\n\n                pointLight.color = u_pointLightColor[i];\n                pointLight.position = u_pointLightPosition[i];\n                pointLight.distance = u_pointLightDistance[i];\n                pointLight.decay = u_pointLightDecay[i];\n\n                getPointDirectLightIrradiance( pointLight, geometry, directLight );\n\n                RE_Direct( directLight, geometry, material, reflectedLight );\n\n            }\n\n        #endif\n\n        #if defined( O3_SPOT_LIGHT_COUNT ) && defined( RE_Direct )\n\n            SpotLight spotLight;\n\n            for ( int i = 0; i < O3_SPOT_LIGHT_COUNT; i ++ ) {\n\n                spotLight.color = u_spotLightColor[i];\n                spotLight.position = u_spotLightPosition[i];\n                spotLight.direction = u_spotLightDirection[i];\n                spotLight.distance = u_spotLightDistance[i];\n                spotLight.decay = u_spotLightDecay[i];\n                spotLight.angle = u_spotLightAngle[i];\n                spotLight.penumbra = u_spotLightPenumbra[i];\n                spotLight.penumbraCos = u_spotLightPenumbraCos[i];\n                spotLight.coneCos = u_spotLightConeCos[i];\n\n                getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\n                RE_Direct( directLight, geometry, material, reflectedLight );\n\n            }\n\n        #endif\n",
        Dn =
          "#if defined(RE_IndirectDiffuse)\n\n    vec3 irradiance = vec3(0);\n\n    #if defined(O3_HAS_AMBIENT_LIGHT)\n        irradiance += getAmbientLightIrradiance(u_ambientLightColor);\n    #endif\n\n    #if defined(O3_HAS_ENVMAP_LIGHT)\n\n        #ifdef O3_USE_DIFFUSE_ENV\n            vec3 lightMapIrradiance = textureCube(u_env_diffuseSampler, geometry.normal).rgb * u_envMapLight.diffuseIntensity;\n        #else\n            vec3 lightMapIrradiance = u_envMapLight.diffuse * u_envMapLight.diffuseIntensity;\n        #endif\n\n        #ifndef PHYSICALLY_CORRECT_LIGHTS\n            lightMapIrradiance *= PI;\n        #endif\n\n        irradiance += lightMapIrradiance;\n\n    #endif\n\n    RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n\n#endif\n\n\n",
        Nn =
          "#if defined( RE_IndirectSpecular )\n\n    vec3 radiance = vec3( 0.0 );\n\n#endif\n\n\n\n#if defined( O3_HAS_ENVMAP_LIGHT ) && defined( RE_IndirectSpecular )\n\n    radiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), int(u_envMapLight.mipMapLevel) );\n\n#endif\n\n\n#if defined( RE_IndirectSpecular )\n\n    RE_IndirectSpecular( radiance, geometry, material, reflectedLight );\n\n#endif\n",
        Gn =
          "#ifdef HAS_OCCLUSIONMAP\n\n    float ambientOcclusion = (texture2D(u_occlusionSampler, v_uv).r - 1.0) * u_occlusionStrength + 1.0;\n    reflectedLight.indirectDiffuse *= ambientOcclusion;\n\n    #if defined(O3_USE_SPECULAR_ENV)\n\n        float dotNV = saturate(dot(geometry.normal, geometry.viewDir));\n        reflectedLight.indirectSpecular *= computeSpecularOcclusion(dotNV, ambientOcclusion, material.specularRoughness);\n\n    #endif\n\n#endif\n\n#ifdef HAS_EMISSIVEMAP\n\n    vec4 emissiveMapColor = texture2D(u_emissiveSampler, v_uv);\n    emissiveMapColor = SRGBtoLINEAR(emissiveMapColor);\n    totalEmissiveRadiance += u_emissiveFactor * emissiveMapColor.rgb;\n\n#endif\n\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\ngl_FragColor = vec4(outgoingLight, diffuseColor.a);\n\n#endif\n",
        Un = {
          pbr_common_frag_define: Tn,
          pbr_util_frag_define: Mn,
          pbr_envmap_light_frag_define: Cn,
          pbr_base_frag_define: Pn,
          pbr_texture_frag_define: Sn,
          pbr_runtime_frag_define: Rn,
          pbr_normal_frag_define: En,
          pbr_brdf_cook_torrance_frag_define: On,
          pbr_direct_irradiance_frag_define: Ln,
          pbr_ibl_specular_frag_define: Fn,
          pbr_ibl_diffuse_frag_define: In,
          pbr_begin_frag: zn,
          pbr_direct_irradiance_frag: Bn,
          pbr_ibl_diffuse_frag: Dn,
          pbr_ibl_specular_frag: Nn,
          pbr_end_frag: Gn
        },
        kn =
          "#if defined(ALPHA_BLEND) && defined(OIT_ENABLE)\n    if(gl_FragCoord.z > texture2D(u_depthSampler, gl_FragCoord.xy / u_resolution).r){\n        discard;\n    }\n    vec4 oitColor = gl_FragColor;\n\n    // Bavoil and Myers\u2019 Method\n    gl_FragData[0]= vec4(oitColor.rgb * oitColor.a, oitColor.a);\n    gl_FragData[1]= vec4(1)/ 255.0; // \u517c\u5bb9\u975e\u6d6e\u70b9\u8f93\u51fa\n\n\n    // Depth Weights Improve Occlusion\n//    float w = weight(gl_FragCoord.z, oitColor.a);\n//    gl_FragData[0] = vec4(oitColor.rgb * oitColor.a * w, oitColor.a);\n//    gl_FragData[1].r =oitColor.a * w;\n#endif\n",
        Vn =
          "#if defined(ALPHA_BLEND) && defined(OIT_ENABLE)\n\n    uniform sampler2D u_depthSampler;\n\n    float weight(float z, float a) {\n        return a * clamp(3e3 * pow(1.0 - z, 3.0), 1e-2, 3e3);\n//          return pow(z,-5.0);\n    }\n#endif\n",
        Hn = P(
          {
            common: xt,
            common_vert: bt,
            common_frag: wt,
            color_share: At,
            normal_share: Tt,
            uv_share: Mt,
            worldpos_share: Ct,
            shadow_share: Pt,
            fog_share: St,
            begin_normal_vert: Rt,
            begin_position_vert: Et,
            morph_target_vert: Ot,
            position_vert: Lt,
            color_vert: Ft,
            normal_vert: It,
            skinning_vert: zt,
            uv_vert: Bt,
            worldpos_vert: Dt,
            shadow_vert: Nt,
            morph_vert: Gt,
            fog_vert: Ut,
            ambient_light_frag: kt,
            direct_light_frag: Vt,
            point_light_frag: Ht,
            spot_light_frag: Wt,
            mobile_material_frag: jt,
            fog_frag: Xt,
            begin_mobile_frag: Kt,
            begin_normal_frag: qt,
            begin_viewdir_frag: Qt,
            mobile_blinnphong_frag: Yt,
            mobile_lambert_frag: Jt,
            noise_common: Zt,
            noise_cellular_2D: $t,
            noise_cellular_2x2: en,
            noise_cellular_2x2x2: tn,
            noise_cellular_3D: nn,
            noise_cellular: rn,
            noise_perlin_2D: an,
            noise_perlin_3D: on,
            noise_perlin_4D: sn,
            noise_perlin: cn,
            noise_psrd_2D: un,
            noise_simplex_2D: ln,
            noise_simplex_3D_grad: dn,
            noise_simplex_3D: hn,
            noise_simplex_4D: fn,
            noise_simplex: _n,
            perturbation_share: pn,
            perturbation_frag: gn,
            refraction_share: vn,
            refraction_frag: mn,
            clipPlane_vert_define: yn,
            clipPlane_vert: xn,
            clipPlane_frag_define: bn,
            clipPlane_frag: wn,
            gamma_frag: An,
            oit_frag: kn,
            oit_frag_define: Vn
          },
          Un
        );
      function Wn(e) {
        M(Hn, e);
      }
      var jn,
        Xn = (function () {
          function e() {}
          return (
            (e.parseVersion = function (e) {
              return void 0 === e && (e = "100"), "#version " + e + "\n";
            }),
            (e.parsePrecision = function (e, t, n) {
              var i = "mediump";
              return (
                "\n        #ifdef GL_FRAGMENT_PRECISION_HIGH\n          precision " +
                (n ? e : t) +
                " float;\n          precision " +
                (n ? e : t) +
                " int;\n\n          #define O3_VERTEX_PRECISION " +
                e +
                "\n          #define O3_FRAGMENT_PRECISION " +
                t +
                "\n        #else\n          precision " +
                i +
                " float;\n          precision " +
                i +
                " int;\n\n          #define O3_VERTEX_PRECISION " +
                i +
                "\n          #define O3_FRAGMENT_PRECISION " +
                i +
                "\n        #endif\n      "
              );
            }),
            (e.parseShaderName = function (e) {
              return "#define O3_SHADER_NAME " + e + "\n";
            }),
            (e.parseAttributeMacros = function (e) {
              return (
                "#define O3_ATTRIBUTE_MACROS_START\n" +
                e
                  .map(function (e) {
                    return "#define " + e + "\n";
                  })
                  .join("") +
                "#define O3_ATTRIBUTE_MACROS_END\n"
              );
            }),
            (e.parseCustomMacros = function (e) {
              return (
                "#define O3_CUSTOM_MACROS_START\n" +
                e
                  .map(function (e) {
                    return "#define " + e + "\n";
                  })
                  .join("") +
                "#define O3_CUSTOM_MACROS_END\n"
              );
            }),
            (e.parseShader = function (t) {
              return e.parseIncludes(t);
            }),
            (e.parseIncludes = function (t) {
              var n = /^[ \t]*#include +<([\w\d.]+)>/gm;
              function i(t, n) {
                var i = Hn[n];
                return void 0 === i
                  ? (Se.error('Shader slice "' + t.trim() + '" not founded.'), "")
                  : e.parseIncludes(i);
              }
              return t.replace(n, i);
            }),
            (e.InjectShaderSlices = function (e) {
              Wn(e);
            }),
            (e.parseExtension = function (e) {
              return (
                "#define O3_EXTENSION_START\n" +
                e
                  .map(function (e) {
                    return "#extension " + e + " : enable\n";
                  })
                  .join("") +
                "#define O3_EXTENSION_END\n"
              );
            }),
            (e.convertTo300 = function (e, t) {
              if (
                ((e = e.replace(/\battribute\b/g, "in")),
                (e = e.replace(/\bvarying\b/g, t ? "in" : "out")),
                (e = e.replace(/\btexture(2D|Cube)\s*\(/g, "texture(")),
                (e = e.replace(/\btexture(2D|Cube)LodEXT\s*\(/g, "textureLod(")),
                t)
              ) {
                var n = /\bgl_FragData\[.+?\]/g.test(e);
                if (n) {
                  e = e.replace(/\bgl_FragColor\b/g, "gl_FragData[0]");
                  var i = e.match(/\bgl_FragData\[.+?\]/g);
                  e = this.replaceMRTShader(e, i);
                } else
                  (e = e.replace(/void\s+?main\s*\(/g, "out vec4 glFragColor;\nvoid main(")),
                    (e = e.replace(/\bgl_FragColor\b/g, "glFragColor"));
              }
              return e;
            }),
            (e.getMaxDrawBuffers = function (e) {
              for (var t = new Set(), n = e.match(/\bgl_FragData\[.+?\]/g) || [], i = 0; i < n.length; i++) {
                var r = n[i].match(/\bgl_FragData\[(.+?)\]/);
                t.add(r[1]);
              }
              return t.size;
            }),
            (e.compatible = function (e) {
              var t = /\bgl_FragData\[.+?\]/g.test(e);
              return t && (e = e.replace(/\bgl_FragColor\b/g, "gl_FragData[0]")), e;
            }),
            (e.replaceMRTShader = function (e, t) {
              for (var n = "", i = new Set(), r = 0; r < t.length; r++) {
                var a = t[r].match(/\bgl_FragData\[(.+?)\]/);
                i.add(a[1]);
              }
              return (
                i.forEach(function (e) {
                  n += "layout(location=" + e + ") out vec4 fragOutColor" + e + ";\n";
                }),
                (n += "void main("),
                (e = e.replace(/\bgl_FragData\[(.+?)\]/g, "fragOutColor$1")),
                (e = e.replace(/void\s+?main\s*\(/g, n)),
                e
              );
            }),
            e
          );
        })(),
        Kn = function (e, t, n) {
          (this.name = void 0),
            (this._index = void 0),
            (this._value = void 0),
            (this.name = e),
            (this._index = t),
            (this._value = n);
        };
      (function (e) {
        (e[(e["Scene"] = 0)] = "Scene"),
          (e[(e["Camera"] = 1)] = "Camera"),
          (e[(e["Renderer"] = 2)] = "Renderer"),
          (e[(e["Material"] = 3)] = "Material");
      })(jn || (jn = {}));
      var qn = (function () {
          function e(e) {
            (this.name = void 0),
              (this.propertyId = void 0),
              (this.location = void 0),
              (this.textureIndex = void 0),
              (this.applyFunc = void 0),
              (this.cacheValue = void 0),
              (this._rhi = void 0),
              (this._gl = void 0);
            var t = e._hardwareRenderer;
            (this._rhi = t), (this._gl = t.gl);
          }
          var t = e.prototype;
          return (
            (t.upload1f = function (e, t) {
              this.cacheValue !== t && (this._gl.uniform1f(e.location, t), (this.cacheValue = t));
            }),
            (t.upload1fv = function (e, t) {
              this._gl.uniform1fv(e.location, t);
            }),
            (t.upload2f = function (e, t) {
              var n = this.cacheValue;
              void 0 !== t.r
                ? (n.x === t.r && n.y === t.g) || (this._gl.uniform2f(e.location, t.r, t.g), (n.x = t.r), (n.y = t.g))
                : (n.x === t.x && n.y === t.y) || (this._gl.uniform2f(e.location, t.x, t.y), (n.x = t.x), (n.y = t.y));
            }),
            (t.upload2fv = function (e, t) {
              this._gl.uniform2fv(e.location, t);
            }),
            (t.upload3f = function (e, t) {
              var n = this.cacheValue;
              void 0 !== t.r
                ? (n.x === t.r && n.y === t.g && n.z === t.b) ||
                  (this._gl.uniform3f(e.location, t.r, t.g, t.b), (n.x = t.r), (n.y = t.g), (n.z = t.b))
                : (n.x === t.x && n.y === t.y && n.z === t.z) ||
                  (this._gl.uniform3f(e.location, t.x, t.y, t.z), (n.x = t.x), (n.y = t.y), (n.z = t.z));
            }),
            (t.upload3fv = function (e, t) {
              this._gl.uniform3fv(e.location, t);
            }),
            (t.upload4f = function (e, t) {
              var n = this.cacheValue;
              void 0 !== t.r
                ? (n.x === t.r && n.y === t.g && n.z === t.b && n.w === t.a) ||
                  (this._gl.uniform4f(e.location, t.r, t.g, t.b, t.a),
                  (n.x = t.r),
                  (n.y = t.g),
                  (n.z = t.b),
                  (n.w = t.a))
                : (n.x === t.x && n.y === t.y && n.z === t.z && n.w === t.w) ||
                  (this._gl.uniform4f(e.location, t.x, t.y, t.z, t.w),
                  (n.x = t.x),
                  (n.y = t.y),
                  (n.z = t.z),
                  (n.w = t.w));
            }),
            (t.upload4fv = function (e, t) {
              this._gl.uniform4fv(e.location, t);
            }),
            (t.upload1i = function (e, t) {
              this.cacheValue !== t && this._gl.uniform1i(e.location, t);
            }),
            (t.upload1iv = function (e, t) {
              this._gl.uniform1iv(e.location, t);
            }),
            (t.upload2i = function (e, t) {
              var n = this.cacheValue;
              void 0 !== t.r
                ? (n.x === t.r && n.y === t.g) || (this._gl.uniform2i(e.location, t.r, t.g), (n.x = t.r), (n.y = t.g))
                : (n.x === t.x && n.y === t.y) || (this._gl.uniform2i(e.location, t.x, t.y), (n.x = t.x), (n.y = t.y));
            }),
            (t.upload2iv = function (e, t) {
              this._gl.uniform2iv(e.location, t);
            }),
            (t.upload3i = function (e, t) {
              var n = this.cacheValue;
              void 0 !== t.r
                ? (n.x === t.r && n.y === t.g && n.z === t.b) ||
                  (this._gl.uniform3i(e.location, t.r, t.g, t.b), (n.x = t.r), (n.y = t.g), (n.z = t.b))
                : (n.x === t.x && n.y === t.y && n.z === t.z) ||
                  (this._gl.uniform3i(e.location, t.x, t.y, t.z), (n.x = t.x), (n.y = t.y), (n.z = t.z));
            }),
            (t.upload3iv = function (e, t) {
              this._gl.uniform3iv(e.location, t);
            }),
            (t.upload4i = function (e, t) {
              var n = this.cacheValue;
              void 0 !== t.r
                ? (n.x === t.r && n.y === t.g && n.z === t.b && n.w === t.a) ||
                  (this._gl.uniform4i(e.location, t.r, t.g, t.b, t.a),
                  (n.x = t.r),
                  (n.y = t.g),
                  (n.z = t.b),
                  (n.w = t.a))
                : (n.x === t.x && n.y === t.y && n.z === t.z && n.w === t.w) ||
                  (this._gl.uniform4i(e.location, t.x, t.y, t.z, t.w),
                  (n.x = t.x),
                  (n.y = t.y),
                  (n.z = t.z),
                  (n.w = t.w));
            }),
            (t.upload4iv = function (e, t) {
              this._gl.uniform4iv(e.location, t);
            }),
            (t.uploadMat4 = function (e, t) {
              this._gl.uniformMatrix4fv(e.location, !1, t.elements);
            }),
            (t.uploadMat4v = function (e, t) {
              this._gl.uniformMatrix4fv(e.location, !1, t);
            }),
            (t.uploadTexture = function (e, t) {
              var n = this._rhi;
              n.activeTexture(e.textureIndex), n.bindTexture(t._target, t._glTexture);
            }),
            (t.uploadTextureArray = function (e, t) {
              for (var n = this._rhi, i = e.textureIndex, r = 0; r < t.length; r++) {
                var a = t[r];
                n.activeTexture(i[r]), n.bindTexture(a._target, a._glTexture);
              }
            }),
            e
          );
        })(),
        Qn = function () {
          (this.constUniforms = []), (this.textureUniforms = []);
        },
        Yn = (function () {
          function e(t, n, i) {
            (this.id = void 0),
              (this.sceneUniformBlock = new Qn()),
              (this.cameraUniformBlock = new Qn()),
              (this.rendererUniformBlock = new Qn()),
              (this.materialUniformBlock = new Qn()),
              (this.otherUniformBlock = new Qn()),
              (this._uploadRenderCount = -1),
              (this._uploadCamera = void 0),
              (this._uploadRenderer = void 0),
              (this._uploadMaterial = void 0),
              (this.attributeLocation = Object.create(null)),
              (this._isValid = void 0),
              (this._engine = void 0),
              (this._gl = void 0),
              (this._vertexShader = void 0),
              (this._fragmentShader = void 0),
              (this._glProgram = void 0),
              (this._activeTextureUint = 0),
              (this._engine = t),
              (this._gl = t._hardwareRenderer.gl),
              (this._glProgram = this._createProgram(n, i)),
              this._glProgram ? ((this._isValid = !0), this._recordLocation()) : (this._isValid = !1),
              (this.id = e._counter++);
          }
          (e._addLineNum = function (e) {
            var t,
              n = e.split("\n"),
              i = (n.length + 1).toString().length + 6;
            return n
              .map(function (e, n) {
                if (((t = "0:" + (n + 1)), t.length >= i)) return t.substring(0, i) + e;
                for (var r = 0; r < i - t.length; r++) t += " ";
                return t + e;
              })
              .join("\n");
          }),
            A(e, [
              {
                key: "isValid",
                get: function () {
                  return this._isValid;
                }
              }
            ]);
          var t = e.prototype;
          return (
            (t.uploadAll = function (e, t) {
              this.uploadUniforms(e, t), this.uploadTextures(e, t);
            }),
            (t.uploadUniforms = function (e, t) {
              for (var n = t._properties, i = e.constUniforms, r = 0, a = i.length; r < a; r++) {
                var o = i[r],
                  s = n[o.propertyId];
                null != s && o.applyFunc(o, s);
              }
            }),
            (t.uploadTextures = function (e, t) {
              var n = t._properties,
                i = e.textureUniforms;
              if (i)
                for (var r = 0, a = i.length; r < a; r++) {
                  var o = i[r];
                  o.applyFunc(o, n[o.propertyId]);
                }
            }),
            (t.groupingOtherUniformBlock = function () {
              var e = this.otherUniformBlock,
                t = e.constUniforms,
                n = e.textureUniforms;
              t.length > 0 && this._groupingSubOtherUniforms(t, !1),
                n.length > 0 && this._groupingSubOtherUniforms(n, !0);
            }),
            (t.bind = function () {
              var e = this._engine._hardwareRenderer;
              return e._currentBind !== this && (this._gl.useProgram(this._glProgram), (e._currentBind = this), !0);
            }),
            (t.destroy = function () {
              var e = this._gl;
              this._vertexShader && e.deleteShader(this._vertexShader),
                this._fragmentShader && e.deleteShader(this._fragmentShader),
                this._glProgram && e.deleteProgram(this._glProgram);
            }),
            (t._groupingSubOtherUniforms = function (e, t) {
              for (var n = e.length - 1; n >= 0; n--) {
                var i = e[n],
                  r = Zn._getShaderPropertyGroup(i.name);
                void 0 !== r && (e.splice(e.indexOf(i), 1), this._groupingUniform(i, r, t));
              }
            }),
            (t._groupingUniform = function (e, t, n) {
              switch (t) {
                case jn.Scene:
                  n ? this.sceneUniformBlock.textureUniforms.push(e) : this.sceneUniformBlock.constUniforms.push(e);
                  break;
                case jn.Camera:
                  n ? this.cameraUniformBlock.textureUniforms.push(e) : this.cameraUniformBlock.constUniforms.push(e);
                  break;
                case jn.Renderer:
                  n
                    ? this.rendererUniformBlock.textureUniforms.push(e)
                    : this.rendererUniformBlock.constUniforms.push(e);
                  break;
                case jn.Material:
                  n
                    ? this.materialUniformBlock.textureUniforms.push(e)
                    : this.materialUniformBlock.constUniforms.push(e);
                  break;
                default:
                  n ? this.otherUniformBlock.textureUniforms.push(e) : this.otherUniformBlock.constUniforms.push(e);
              }
            }),
            (t._createProgram = function (e, t) {
              var n = this._gl,
                i = this._createShader(n.VERTEX_SHADER, e);
              if (!i) return null;
              var r = this._createShader(n.FRAGMENT_SHADER, t);
              if (!r) return null;
              var a = n.createProgram();
              return (
                n.attachShader(a, i),
                n.attachShader(a, r),
                n.linkProgram(a),
                n.validateProgram(a),
                n.isContextLost()
                  ? (Se.error("Contex lost while linking program."), n.deleteShader(i), n.deleteShader(r), null)
                  : n.getProgramParameter(a, n.LINK_STATUS)
                  ? ((this._vertexShader = i), (this._fragmentShader = r), a)
                  : (Se.error("Could not link WebGL program. \n" + n.getProgramInfoLog(a)), n.deleteProgram(a), null)
              );
            }),
            (t._createShader = function (t, n) {
              var i = this._gl,
                r = i.createShader(t);
              return (
                i.shaderSource(r, n),
                i.compileShader(r),
                i.isContextLost()
                  ? (Se.error("Contex lost while compiling shader."), i.deleteShader(r), null)
                  : i.getShaderParameter(r, i.COMPILE_STATUS)
                  ? r
                  : (Se.error("Could not compile WebGL shader.\n" + i.getShaderInfoLog(r), e._addLineNum(n)),
                    i.deleteShader(r),
                    null)
              );
            }),
            (t._recordLocation = function () {
              var e = this,
                t = this._gl,
                n = this._glProgram,
                i = this._getUniformInfos(),
                r = this._getAttributeInfos();
              i.forEach(function (i) {
                var r = i.name,
                  a = i.size,
                  s = i.type,
                  c = new qn(e._engine),
                  u = !1,
                  l = !1;
                r.indexOf("[0]") > 0 && ((r = r.substr(0, r.length - 3)), (u = !0));
                var d = Zn._getShaderPropertyGroup(r),
                  h = t.getUniformLocation(n, r);
                switch (((c.name = r), (c.propertyId = Zn.getPropertyByName(r)._uniqueId), (c.location = h), s)) {
                  case t.FLOAT:
                    u ? (c.applyFunc = c.upload1fv) : ((c.applyFunc = c.upload1f), (c.cacheValue = 0));
                    break;
                  case t.FLOAT_VEC2:
                    u ? (c.applyFunc = c.upload2fv) : ((c.applyFunc = c.upload2f), (c.cacheValue = new m(0, 0)));
                    break;
                  case t.FLOAT_VEC3:
                    u ? (c.applyFunc = c.upload3fv) : ((c.applyFunc = c.upload3f), (c.cacheValue = new o(0, 0, 0)));
                    break;
                  case t.FLOAT_VEC4:
                    u ? (c.applyFunc = c.upload4fv) : ((c.applyFunc = c.upload4f), (c.cacheValue = new y(0, 0, 0, 0)));
                    break;
                  case t.BOOL:
                  case t.INT:
                    u ? (c.applyFunc = c.upload1iv) : ((c.applyFunc = c.upload1i), (c.cacheValue = 0));
                    break;
                  case t.BOOL_VEC2:
                  case t.INT_VEC2:
                    u ? (c.applyFunc = c.upload2iv) : ((c.applyFunc = c.upload2i), (c.cacheValue = new m(0, 0)));
                    break;
                  case t.BOOL_VEC3:
                  case t.INT_VEC3:
                    (c.applyFunc = u ? c.upload3iv : c.upload3i), (c.cacheValue = new o(0, 0, 0));
                    break;
                  case t.BOOL_VEC4:
                  case t.INT_VEC4:
                    u ? (c.applyFunc = c.upload4iv) : ((c.applyFunc = c.upload4i), (c.cacheValue = new y(0, 0, 0)));
                    break;
                  case t.FLOAT_MAT4:
                    c.applyFunc = u ? c.uploadMat4v : c.uploadMat4;
                    break;
                  case t.SAMPLER_2D:
                  case t.SAMPLER_CUBE:
                    if (((l = !0), u)) {
                      for (var f = new Int32Array(a), _ = new Array(a), p = 0; p < a; p++)
                        (f[p] = e._activeTextureUint), (_[p] = t.TEXTURE0 + e._activeTextureUint++);
                      (c.textureIndex = _), (c.applyFunc = c.uploadTextureArray), e.bind(), t.uniform1iv(h, f);
                    } else {
                      var g = t.TEXTURE0 + e._activeTextureUint;
                      (c.textureIndex = g),
                        (c.applyFunc = c.uploadTexture),
                        e.bind(),
                        t.uniform1i(h, e._activeTextureUint++);
                    }
                    break;
                }
                e._groupingUniform(c, d, l);
              }),
                r.forEach(function (i) {
                  var r = i.name;
                  e.attributeLocation[r] = t.getAttribLocation(n, r);
                });
            }),
            (t._getUniformInfos = function () {
              for (
                var e = this._gl, t = this._glProgram, n = [], i = e.getProgramParameter(t, e.ACTIVE_UNIFORMS), r = 0;
                r < i;
                ++r
              ) {
                var a = e.getActiveUniform(t, r);
                n[r] = a;
              }
              return n;
            }),
            (t._getAttributeInfos = function () {
              for (
                var e = this._gl, t = this._glProgram, n = [], i = e.getProgramParameter(t, e.ACTIVE_ATTRIBUTES), r = 0;
                r < i;
                ++r
              ) {
                var a = e.getActiveAttrib(t, r);
                n[r] = a;
              }
              return n;
            }),
            e
          );
        })();
      Yn._counter = 0;
      var Jn = function e() {
        (this._uniqueId = void 0), (this._group = void 0), (this._uniqueId = e._propertyNameCounter++);
      };
      Jn._propertyNameCounter = 0;
      var Zn = (function () {
        function e(t, n, i) {
          (this.name = void 0),
            (this._shaderId = 0),
            (this._vertexSource = void 0),
            (this._fragmentSource = void 0),
            (this._shaderId = e._shaderCounter++),
            (this.name = t),
            (this._vertexSource = n),
            (this._fragmentSource = i);
        }
        (e.create = function (t, n, i) {
          var r = e._shaderMap;
          if (r[t]) throw 'Shader named "' + t + '" already exists.';
          return (r[t] = new e(t, n, i));
        }),
          (e.find = function (t) {
            return e._shaderMap[t];
          }),
          (e.getMacroByName = function (t) {
            var n = e._macroMap[t];
            if (!n) {
              var i = e._macroMaskMap,
                r = e._macroCounter,
                a = Math.floor(r / 32),
                o = r % 32;
              (n = new Kn(t, a, 1 << o)),
                (e._macroMap[t] = n),
                a == i.length && (i.length++, (i[a] = new Array(32))),
                (i[a][o] = t),
                e._macroCounter++;
            }
            return n;
          }),
          (e.getPropertyByName = function (t) {
            var n = e._propertyNameMap;
            if (null != n[t]) return n[t];
            var i = new Jn();
            return (n[t] = i), i;
          }),
          (e._getShaderPropertyGroup = function (t) {
            var n = e._propertyNameMap[t];
            return null === n || void 0 === n ? void 0 : n._group;
          }),
          (e._getNamesByMacros = function (t, n) {
            var i = e._macroMaskMap,
              r = t._mask;
            n.length = 0;
            for (var a = 0, o = t._length; a < o; a++)
              for (var s = i[a], c = r[a], u = c < 0 ? 32 : Math.floor(Math.log2(c)) + 1, l = 0; l < u; l++)
                c & (1 << l) && n.push(s[l]);
          });
        var t = e.prototype;
        return (
          (t.compileVariant = function (t, n) {
            var i = yt.compileMacros;
            i.clear();
            for (var r = 0, a = n.length; r < a; r++) i.enable(e.getMacroByName(n[r]));
            this._getShaderProgram(t, i);
          }),
          (t._getShaderProgram = function (t, n) {
            var i = t._getShaderProgramPool(this),
              r = i.get(n);
            if (r) return r;
            var a = t._hardwareRenderer.isWebGL2,
              o = [];
            e._getNamesByMacros(n, o);
            var s = Xn.parseCustomMacros(o),
              c = Xn.parseShaderName(this.name || "VOID"),
              u = a ? "#version 300 es" : "#version 100",
              l =
                "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      precision highp int;\n      #define O3_VERTEX_PRECISION highp\n      #define O3_FRAGMENT_PRECISION highp\n    #else\n      precision mediump float;\n      precision mediump int;\n      #define O3_VERTEX_PRECISION mediump\n      #define O3_FRAGMENT_PRECISION mediump\n    #endif\n    ",
              d = Xn.parseShader(
                " " + u + "\n        " + c + "\n        " + l + "\n        " + s + "\n        " + this._vertexSource
              ),
              h = Xn.parseShader(
                " " +
                  u +
                  "\n        " +
                  c +
                  "\n        " +
                  (a ? "" : Xn.parseExtension(e._shaderExtension)) +
                  "\n        " +
                  l +
                  "\n        " +
                  s +
                  "\n      " +
                  this._fragmentSource
              );
            return a && ((d = Xn.convertTo300(d)), (h = Xn.convertTo300(h, !0))), (r = new Yn(t, d, h)), i.cache(r), r;
          }),
          e
        );
      })();
      (Zn._shaderCounter = 0),
        (Zn._shaderMap = Object.create(null)),
        (Zn._propertyNameMap = Object.create(null)),
        (Zn._macroMaskMap = []),
        (Zn._macroCounter = 0),
        (Zn._macroMap = Object.create(null)),
        (Zn._shaderExtension = ["GL_EXT_shader_texture_lod", "GL_OES_standard_derivatives", "GL_EXT_draw_buffers"]);
      new o(0, 1, 0);
      var $n = (function (e) {
        function t() {
          for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
          return (
            (t = e.call.apply(e, [this].concat(i)) || this), (t._viewMat = void 0), (t._inverseViewMat = void 0), t
          );
        }
        S(t, e);
        var n = t.prototype;
        return (
          (n._onEnable = function () {
            this.scene.findFeature(oi).attachRenderLight(this);
          }),
          (n._onDisable = function () {
            this.scene.findFeature(oi).detachRenderLight(this);
          }),
          A(t, [
            {
              key: "viewMatrix",
              get: function () {
                return (
                  this._viewMat || (this._viewMat = new _()),
                  _.invert(this.entity.transform.worldMatrix, this._viewMat),
                  this._viewMat
                );
              }
            },
            {
              key: "inverseViewMatrix",
              get: function () {
                return (
                  this._inverseViewMat || (this._inverseViewMat = new _()),
                  _.invert(this.viewMatrix, this._inverseViewMat),
                  this._inverseViewMat
                );
              }
            }
          ]),
          t
        );
      })(at);
      $n._maxLight = 10;
      var ei = (function (e) {
        function t(t) {
          var n;
          return (
            (n = e.call(this, t) || this),
            (n._color = new b(1, 1, 1, 1)),
            (n._intensity = 1),
            (n._lightColor = new b(1, 1, 1, 1)),
            (n.color = n._color),
            n
          );
        }
        return (
          S(t, e),
          A(t, [
            {
              key: "color",
              get: function () {
                return this._color;
              },
              set: function (e) {
                (this._color = e), this.scene.shaderData.setColor(t._colorProperty, this.lightColor);
              }
            },
            {
              key: "intensity",
              get: function () {
                return this._intensity;
              },
              set: function (e) {
                (this._intensity = e), this.scene.shaderData.setColor(t._colorProperty, this.lightColor);
              }
            },
            {
              key: "lightColor",
              get: function () {
                return (
                  (this._lightColor.r = this._color.r * this._intensity),
                  (this._lightColor.g = this._color.g * this._intensity),
                  (this._lightColor.b = this._color.b * this._intensity),
                  (this._lightColor.a = this._color.a * this._intensity),
                  this._lightColor
                );
              }
            }
          ]),
          t
        );
      })($n);
      ei._colorProperty = Zn.getPropertyByName("u_ambientLightColor");
      var ti = (function (e) {
        function t() {
          for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
          return (
            (t = e.call.apply(e, [this].concat(i)) || this),
            (t.color = new b(1, 1, 1, 1)),
            (t.intensity = 1),
            (t._forward = new o()),
            (t._lightColor = new b(1, 1, 1, 1)),
            (t._reverseDirection = new o()),
            t
          );
        }
        S(t, e),
          (t._updateShaderData = function (e) {
            var n = t._combinedData;
            e.setFloatArray(t._colorProperty, n.color), e.setFloatArray(t._directionProperty, n.direction);
          });
        var n = t.prototype;
        return (
          (n.appendData = function (e) {
            var n = 3 * e,
              i = 3 * e,
              r = this.lightColor,
              a = this.direction,
              o = t._combinedData;
            (o.color[n] = r.r),
              (o.color[n + 1] = r.g),
              (o.color[n + 2] = r.b),
              (o.direction[i] = a.x),
              (o.direction[i + 1] = a.y),
              (o.direction[i + 2] = a.z);
          }),
          A(t, [
            {
              key: "direction",
              get: function () {
                return this.entity.transform.getWorldForward(this._forward), this._forward;
              }
            },
            {
              key: "lightColor",
              get: function () {
                return (
                  (this._lightColor.r = this.color.r * this.intensity),
                  (this._lightColor.g = this.color.g * this.intensity),
                  (this._lightColor.b = this.color.b * this.intensity),
                  (this._lightColor.a = this.color.a * this.intensity),
                  this._lightColor
                );
              }
            },
            {
              key: "reverseDirection",
              get: function () {
                return o.scale(this.direction, -1, this._reverseDirection), this._reverseDirection;
              }
            }
          ]),
          t
        );
      })($n);
      (ti._colorProperty = Zn.getPropertyByName("u_directLightColor")),
        (ti._directionProperty = Zn.getPropertyByName("u_directLightDirection")),
        (ti._combinedData = {
          color: new Float32Array(3 * $n._maxLight),
          direction: new Float32Array(3 * $n._maxLight)
        });
      var ni = (function (e) {
        function t(t) {
          var n;
          return (
            (n = e.call(this, t) || this),
            (n._diffuseTexture = void 0),
            (n._specularTexture = void 0),
            (n._diffuseColor = new b(0.3, 0.3, 0.3, 1)),
            (n._specularColor = new b(0.5, 0.5, 0.5, 1)),
            (n._diffuseIntensity = 1),
            (n._specularIntensity = 1),
            (n.diffuseColor = n._diffuseColor),
            (n.specularColor = n._specularColor),
            (n.diffuseIntensity = n._diffuseIntensity),
            (n.specularIntensity = n._specularIntensity),
            n
          );
        }
        return (
          S(t, e),
          (t._updateShaderData = function (e, n) {
            var i = n.entity.transform.worldMatrix;
            e.setMatrix(t._transformMatrixProperty, i);
          }),
          A(t, [
            {
              key: "diffuseTexture",
              get: function () {
                return this._diffuseTexture;
              },
              set: function (e) {
                this._diffuseTexture = e;
                var n = this.scene.shaderData;
                e
                  ? (n.setTexture(t._diffuseTextureProperty, e), n.enableMacro(t._diffuseMacro))
                  : n.disableMacro(t._diffuseMacro);
              }
            },
            {
              key: "specularTexture",
              get: function () {
                return this._specularTexture;
              },
              set: function (e) {
                this._specularTexture = e;
                var n = this.scene.shaderData;
                e
                  ? (n.setTexture(t._specularTextureProperty, e),
                    n.setFloat(t._mipLevelProperty, this.specularTexture.mipmapCount),
                    n.enableMacro(t._specularMacro))
                  : n.disableMacro(t._specularMacro);
              }
            },
            {
              key: "diffuseColor",
              get: function () {
                return this._diffuseColor;
              },
              set: function (e) {
                (this._diffuseColor = e), this.scene.shaderData.setColor(t._diffuseColorProperty, e);
              }
            },
            {
              key: "specularColor",
              get: function () {
                return this._specularColor;
              },
              set: function (e) {
                (this._specularColor = e), this.scene.shaderData.setColor(t._specularColorProperty, e);
              }
            },
            {
              key: "diffuseIntensity",
              get: function () {
                return this._diffuseIntensity;
              },
              set: function (e) {
                (this._diffuseIntensity = e), this.scene.shaderData.setFloat(t._diffuseIntensityProperty, e);
              }
            },
            {
              key: "specularIntensity",
              get: function () {
                return this._specularIntensity;
              },
              set: function (e) {
                (this._specularIntensity = e), this.scene.shaderData.setFloat(t._specularIntensityProperty, e);
              }
            }
          ]),
          t
        );
      })($n);
      (ni._diffuseMacro = Zn.getMacroByName("O3_USE_DIFFUSE_ENV")),
        (ni._specularMacro = Zn.getMacroByName("O3_USE_SPECULAR_ENV")),
        (ni._diffuseTextureProperty = Zn.getPropertyByName("u_env_diffuseSampler")),
        (ni._specularTextureProperty = Zn.getPropertyByName("u_env_specularSampler")),
        (ni._mipLevelProperty = Zn.getPropertyByName("u_envMapLight.mipMapLevel")),
        (ni._diffuseColorProperty = Zn.getPropertyByName("u_envMapLight.diffuse")),
        (ni._specularColorProperty = Zn.getPropertyByName("u_envMapLight.specular")),
        (ni._diffuseIntensityProperty = Zn.getPropertyByName("u_envMapLight.diffuseIntensity")),
        (ni._specularIntensityProperty = Zn.getPropertyByName("u_envMapLight.specularIntensity")),
        (ni._transformMatrixProperty = Zn.getPropertyByName("u_envMapLight.transformMatrix"));
      var ii = (function (e) {
        function t() {
          for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
          return (
            (t = e.call.apply(e, [this].concat(i)) || this),
            (t.color = new b(1, 1, 1, 1)),
            (t.intensity = 1),
            (t.distance = 100),
            (t.decay = 0),
            (t._lightColor = new b(1, 1, 1, 1)),
            t
          );
        }
        S(t, e),
          (t._updateShaderData = function (e) {
            var n = t._combinedData;
            e.setFloatArray(t._colorProperty, n.color),
              e.setFloatArray(t._positionProperty, n.position),
              e.setFloatArray(t._distanceProperty, n.distance),
              e.setFloatArray(t._decayProperty, n.decay);
          });
        var n = t.prototype;
        return (
          (n.appendData = function (e) {
            var n = 3 * e,
              i = 3 * e,
              r = e,
              a = e,
              o = this.lightColor,
              s = this.position,
              c = t._combinedData;
            (c.color[n] = o.r),
              (c.color[n + 1] = o.g),
              (c.color[n + 2] = o.b),
              (c.position[i] = s.x),
              (c.position[i + 1] = s.y),
              (c.position[i + 2] = s.z),
              (c.distance[r] = this.distance),
              (c.decay[a] = this.decay);
          }),
          A(t, [
            {
              key: "position",
              get: function () {
                return this.entity.transform.worldPosition;
              }
            },
            {
              key: "lightColor",
              get: function () {
                return (
                  (this._lightColor.r = this.color.r * this.intensity),
                  (this._lightColor.g = this.color.g * this.intensity),
                  (this._lightColor.b = this.color.b * this.intensity),
                  (this._lightColor.a = this.color.a * this.intensity),
                  this._lightColor
                );
              }
            }
          ]),
          t
        );
      })($n);
      (ii._colorProperty = Zn.getPropertyByName("u_pointLightColor")),
        (ii._positionProperty = Zn.getPropertyByName("u_pointLightPosition")),
        (ii._distanceProperty = Zn.getPropertyByName("u_pointLightDistance")),
        (ii._decayProperty = Zn.getPropertyByName("u_pointLightDecay")),
        (ii._combinedData = {
          color: new Float32Array(3 * $n._maxLight),
          position: new Float32Array(3 * $n._maxLight),
          distance: new Float32Array($n._maxLight),
          decay: new Float32Array($n._maxLight)
        });
      var ri = (function (e) {
        function t() {
          for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
          return (
            (t = e.call.apply(e, [this].concat(i)) || this),
            (t.color = new b(1, 1, 1, 1)),
            (t.penumbra = 0.2),
            (t.distance = 100),
            (t.intensity = 1),
            (t.decay = 0),
            (t.angle = Math.PI / 6),
            (t._forward = new o()),
            (t._lightColor = new b(1, 1, 1, 1)),
            (t._inverseDirection = new o()),
            t
          );
        }
        S(t, e),
          (t._updateShaderData = function (e) {
            var n = t._combinedData;
            e.setFloatArray(t._colorProperty, n.color),
              e.setFloatArray(t._positionProperty, n.position),
              e.setFloatArray(t._directionProperty, n.direction),
              e.setFloatArray(t._distanceProperty, n.distance),
              e.setFloatArray(t._decayProperty, n.decay),
              e.setFloatArray(t._angleProperty, n.angle),
              e.setFloatArray(t._penumbraProperty, n.penumbra),
              e.setFloatArray(t._penumbraCosProperty, n.penumbraCos),
              e.setFloatArray(t._coneCosProperty, n.coneCos);
          });
        var n = t.prototype;
        return (
          (n.appendData = function (e) {
            var n = 3 * e,
              i = 3 * e,
              r = 3 * e,
              a = e,
              o = e,
              s = e,
              c = e,
              u = e,
              l = e,
              d = this.lightColor,
              h = this.position,
              f = this.direction,
              _ = t._combinedData;
            (_.color[n] = d.r),
              (_.color[n + 1] = d.g),
              (_.color[n + 2] = d.b),
              (_.position[i] = h.x),
              (_.position[i + 1] = h.y),
              (_.position[i + 2] = h.z),
              (_.direction[r] = f.x),
              (_.direction[r + 1] = f.y),
              (_.direction[r + 2] = f.z),
              (_.distance[a] = this.distance),
              (_.decay[o] = this.decay),
              (_.angle[s] = this.angle),
              (_.penumbra[c] = this.penumbra),
              (_.penumbraCos[u] = Math.cos(this.angle * (1 - this.penumbra))),
              (_.coneCos[l] = Math.cos(this.angle));
          }),
          A(t, [
            {
              key: "position",
              get: function () {
                return this.entity.transform.worldPosition;
              }
            },
            {
              key: "direction",
              get: function () {
                return this.entity.transform.getWorldForward(this._forward), this._forward;
              }
            },
            {
              key: "reverseDirection",
              get: function () {
                return o.scale(this.direction, -1, this._inverseDirection), this._inverseDirection;
              }
            },
            {
              key: "lightColor",
              get: function () {
                return (
                  (this._lightColor.r = this.color.r * this.intensity),
                  (this._lightColor.g = this.color.g * this.intensity),
                  (this._lightColor.b = this.color.b * this.intensity),
                  (this._lightColor.a = this.color.a * this.intensity),
                  this._lightColor
                );
              }
            }
          ]),
          t
        );
      })($n);
      function ai() {
        return this.findFeature(oi).visibleLights.length > 0;
      }
      (ri._colorProperty = Zn.getPropertyByName("u_spotLightColor")),
        (ri._positionProperty = Zn.getPropertyByName("u_spotLightPosition")),
        (ri._directionProperty = Zn.getPropertyByName("u_spotLightDirection")),
        (ri._distanceProperty = Zn.getPropertyByName("u_spotLightDistance")),
        (ri._decayProperty = Zn.getPropertyByName("u_spotLightDecay")),
        (ri._angleProperty = Zn.getPropertyByName("u_spotLightAngle")),
        (ri._penumbraProperty = Zn.getPropertyByName("u_spotLightPenumbra")),
        (ri._penumbraCosProperty = Zn.getPropertyByName("u_spotLightPenumbraCos")),
        (ri._coneCosProperty = Zn.getPropertyByName("u_spotLightConeCos")),
        (ri._combinedData = {
          color: new Float32Array(3 * $n._maxLight),
          position: new Float32Array(3 * $n._maxLight),
          direction: new Float32Array(3 * $n._maxLight),
          distance: new Float32Array($n._maxLight),
          decay: new Float32Array($n._maxLight),
          angle: new Float32Array($n._maxLight),
          penumbra: new Float32Array($n._maxLight),
          penumbraCos: new Float32Array($n._maxLight),
          coneCos: new Float32Array($n._maxLight)
        });
      var oi = (function (e) {
        function t() {
          var t;
          return (t = e.call(this) || this), (t.visibleLights = void 0), (t.visibleLights = []), t;
        }
        S(t, e);
        var n = t.prototype;
        return (
          (n.attachRenderLight = function (e) {
            var t = this.visibleLights.indexOf(e);
            -1 == t ? this.visibleLights.push(e) : Se.warn("Light already attached.");
          }),
          (n.detachRenderLight = function (e) {
            var t = this.visibleLights.indexOf(e);
            -1 != t && this.visibleLights.splice(t, 1);
          }),
          (n._updateShaderData = function (e) {
            for (var n = 0, i = 0, r = 0, a = 0, o = 0, s = this.visibleLights, c = 0, u = s.length; c < u; c++) {
              var l = s[c];
              l instanceof ei
                ? n++
                : l instanceof ni
                ? (ni._updateShaderData(e, l), i++)
                : l instanceof ti
                ? l.appendData(r++)
                : l instanceof ii
                ? l.appendData(a++)
                : l instanceof ri && l.appendData(o++);
            }
            n ? e.enableMacro(t._ambientMacro) : e.disableMacro(t._ambientMacro),
              i ? e.enableMacro(t._envMacro) : e.disableMacro(t._envMacro),
              r
                ? (ti._updateShaderData(e), e.enableMacro("O3_DIRECT_LIGHT_COUNT", r.toString()))
                : e.disableMacro("O3_DIRECT_LIGHT_COUNT"),
              a
                ? (ii._updateShaderData(e), e.enableMacro("O3_POINT_LIGHT_COUNT", a.toString()))
                : e.disableMacro("O3_POINT_LIGHT_COUNT"),
              o
                ? (ri._updateShaderData(e), e.enableMacro("O3_SPOT_LIGHT_COUNT", o.toString()))
                : e.disableMacro("O3_SPOT_LIGHT_COUNT");
          }),
          t
        );
      })(mt);
      (oi._ambientMacro = Zn.getMacroByName("O3_HAS_AMBIENT_LIGHT")),
        (oi._envMacro = Zn.getMacroByName("O3_HAS_ENVMAP_LIGHT"));
      var si,
        ci,
        ui,
        li,
        di,
        hi,
        fi = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, t) || this),
              (n.isGCIgnored = !1),
              (n._refCount = 0),
              (n._destroyed = !1),
              t.resourceManager._addRefObject(n.instanceId, z(n)),
              n
            );
          }
          S(t, e),
            A(t, [
              {
                key: "refCount",
                get: function () {
                  return this._refCount;
                }
              },
              {
                key: "destroyed",
                get: function () {
                  return this._destroyed;
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.destroy = function (e) {
              if ((void 0 === e && (e = !1), this._destroyed)) return !0;
              if (!e && 0 !== this._refCount) return !1;
              var t = this._engine.resourceManager;
              t && (t._deleteAsset(this), t._deleteRefObject(this.instanceId));
              var n = this._getRefCount();
              return (
                n > 0 && this._addRefCount(-n), (this._engine = null), this._onDestroy(), (this._destroyed = !0), !0
              );
            }),
            (n._getRefCount = function () {
              return this._refCount;
            }),
            (n._addRefCount = function (e) {
              this._refCount += e;
            }),
            (n._addToResourceManager = function (e) {
              this._engine.resourceManager._addAsset(e, this);
            }),
            t
          );
        })(be);
      (function (e) {
        (e[(e["RGBA_ASTC_4X4_KHR"] = 37808)] = "RGBA_ASTC_4X4_KHR"),
          (e[(e["RGBA_ASTC_5X4_KHR"] = 37809)] = "RGBA_ASTC_5X4_KHR"),
          (e[(e["RGBA_ASTC_5X5_KHR"] = 37810)] = "RGBA_ASTC_5X5_KHR"),
          (e[(e["RGBA_ASTC_6X5_KHR"] = 37811)] = "RGBA_ASTC_6X5_KHR"),
          (e[(e["RGBA_ASTC_6X6_KHR"] = 37812)] = "RGBA_ASTC_6X6_KHR"),
          (e[(e["RGBA_ASTC_8X5_KHR"] = 37813)] = "RGBA_ASTC_8X5_KHR"),
          (e[(e["RGBA_ASTC_8X6_KHR"] = 37814)] = "RGBA_ASTC_8X6_KHR"),
          (e[(e["RGBA_ASTC_8X8_KHR"] = 37815)] = "RGBA_ASTC_8X8_KHR"),
          (e[(e["RGBA_ASTC_10X5_KHR"] = 37816)] = "RGBA_ASTC_10X5_KHR"),
          (e[(e["RGBA_ASTC_10X6_KHR"] = 37817)] = "RGBA_ASTC_10X6_KHR"),
          (e[(e["RGBA_ASTC_10X8_KHR"] = 37818)] = "RGBA_ASTC_10X8_KHR"),
          (e[(e["RGBA_ASTC_10X10_KHR"] = 37819)] = "RGBA_ASTC_10X10_KHR"),
          (e[(e["RGBA_ASTC_12X10_KHR"] = 37820)] = "RGBA_ASTC_12X10_KHR"),
          (e[(e["RGBA_ASTC_12X12_KHR"] = 37821)] = "RGBA_ASTC_12X12_KHR"),
          (e[(e["SRGB8_ALPHA8_ASTC_4X4_KHR"] = 37840)] = "SRGB8_ALPHA8_ASTC_4X4_KHR"),
          (e[(e["SRGB8_ALPHA8_ASTC_5X4_KHR"] = 37841)] = "SRGB8_ALPHA8_ASTC_5X4_KHR"),
          (e[(e["SRGB8_ALPHA8_ASTC_5X5_KHR"] = 37842)] = "SRGB8_ALPHA8_ASTC_5X5_KHR"),
          (e[(e["SRGB8_ALPHA8_ASTC_6X5_KHR"] = 37843)] = "SRGB8_ALPHA8_ASTC_6X5_KHR"),
          (e[(e["SRGB8_ALPHA8_ASTC_6X6_KHR"] = 37844)] = "SRGB8_ALPHA8_ASTC_6X6_KHR"),
          (e[(e["SRGB8_ALPHA8_ASTC_8X5_KHR"] = 37845)] = "SRGB8_ALPHA8_ASTC_8X5_KHR"),
          (e[(e["SRGB8_ALPHA8_ASTC_8X6_KHR"] = 37846)] = "SRGB8_ALPHA8_ASTC_8X6_KHR"),
          (e[(e["SRGB8_ALPHA8_ASTC_8X8_KHR"] = 37847)] = "SRGB8_ALPHA8_ASTC_8X8_KHR"),
          (e[(e["SRGB8_ALPHA8_ASTC_10X5_KHR"] = 37848)] = "SRGB8_ALPHA8_ASTC_10X5_KHR"),
          (e[(e["SRGB8_ALPHA8_ASTC_10X6_KHR"] = 37849)] = "SRGB8_ALPHA8_ASTC_10X6_KHR"),
          (e[(e["SRGB8_ALPHA8_ASTC_10X8_KHR"] = 37850)] = "SRGB8_ALPHA8_ASTC_10X8_KHR"),
          (e[(e["SRGB8_ALPHA8_ASTC_10X10_KHR"] = 37851)] = "SRGB8_ALPHA8_ASTC_10X10_KHR"),
          (e[(e["SRGB8_ALPHA8_ASTC_12X10_KHR"] = 37852)] = "SRGB8_ALPHA8_ASTC_12X10_KHR"),
          (e[(e["SRGB8_ALPHA8_ASTC_12X12_KHR"] = 37853)] = "SRGB8_ALPHA8_ASTC_12X12_KHR"),
          (e[(e["RGB_ETC1_WEBGL"] = 36196)] = "RGB_ETC1_WEBGL"),
          (e[(e["R11_EAC"] = 37488)] = "R11_EAC"),
          (e[(e["SIGNED_R11_EAC"] = 37489)] = "SIGNED_R11_EAC"),
          (e[(e["RG11_EAC"] = 37490)] = "RG11_EAC"),
          (e[(e["SIGNED_RG11_EAC"] = 37491)] = "SIGNED_RG11_EAC"),
          (e[(e["RGB8_ETC2"] = 37492)] = "RGB8_ETC2"),
          (e[(e["SRGB8_ETC2"] = 37493)] = "SRGB8_ETC2"),
          (e[(e["RGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37494)] = "RGB8_PUNCHTHROUGH_ALPHA1_ETC2"),
          (e[(e["SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37495)] = "SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"),
          (e[(e["RGBA8_ETC2_EAC"] = 37496)] = "RGBA8_ETC2_EAC"),
          (e[(e["SRGB8_ALPHA8_ETC2_EAC"] = 37497)] = "SRGB8_ALPHA8_ETC2_EAC"),
          (e[(e["RGB_PVRTC_4BPPV1_IMG"] = 35840)] = "RGB_PVRTC_4BPPV1_IMG"),
          (e[(e["RGB_PVRTC_2BPPV1_IMG"] = 35841)] = "RGB_PVRTC_2BPPV1_IMG"),
          (e[(e["RGBA_PVRTC_4BPPV1_IMG"] = 35842)] = "RGBA_PVRTC_4BPPV1_IMG"),
          (e[(e["RGBA_PVRTC_2BPPV1_IMG"] = 35843)] = "RGBA_PVRTC_2BPPV1_IMG"),
          (e[(e["RGB_S3TC_DXT1_EXT"] = 33776)] = "RGB_S3TC_DXT1_EXT"),
          (e[(e["RGBA_S3TC_DXT1_EXT"] = 33777)] = "RGBA_S3TC_DXT1_EXT"),
          (e[(e["RGBA_S3TC_DXT3_EXT"] = 33778)] = "RGBA_S3TC_DXT3_EXT"),
          (e[(e["RGBA_S3TC_DXT5_EXT"] = 33779)] = "RGBA_S3TC_DXT5_EXT");
      })(si || (si = {})),
        (function (e) {
          (e[(e["R8G8B8"] = 0)] = "R8G8B8"),
            (e[(e["R8G8B8A8"] = 1)] = "R8G8B8A8"),
            (e[(e["R4G4B4A4"] = 2)] = "R4G4B4A4"),
            (e[(e["R5G5B5A1"] = 3)] = "R5G5B5A1"),
            (e[(e["R5G6B5"] = 4)] = "R5G6B5"),
            (e[(e["Alpha8"] = 5)] = "Alpha8"),
            (e[(e["R16G16B16A16"] = 6)] = "R16G16B16A16"),
            (e[(e["R32G32B32A32"] = 7)] = "R32G32B32A32");
        })(ci || (ci = {})),
        (function (e) {
          (e[(e["Depth"] = 0)] = "Depth"),
            (e[(e["DepthStencil"] = 1)] = "DepthStencil"),
            (e[(e["Stencil"] = 2)] = "Stencil"),
            (e[(e["Depth16"] = 3)] = "Depth16"),
            (e[(e["Depth24"] = 4)] = "Depth24"),
            (e[(e["Depth32"] = 5)] = "Depth32"),
            (e[(e["Depth24Stencil8"] = 6)] = "Depth24Stencil8"),
            (e[(e["Depth32Stencil8"] = 7)] = "Depth32Stencil8");
        })(ui || (ui = {})),
        (function (e) {
          (e[(e["Point"] = 0)] = "Point"),
            (e[(e["Bilinear"] = 1)] = "Bilinear"),
            (e[(e["Trilinear"] = 2)] = "Trilinear");
        })(li || (li = {})),
        (function (e) {
          (e[(e["R8G8B8"] = 0)] = "R8G8B8"),
            (e[(e["R8G8B8A8"] = 1)] = "R8G8B8A8"),
            (e[(e["R4G4B4A4"] = 2)] = "R4G4B4A4"),
            (e[(e["R5G5B5A1"] = 3)] = "R5G5B5A1"),
            (e[(e["R5G6B5"] = 4)] = "R5G6B5"),
            (e[(e["Alpha8"] = 5)] = "Alpha8"),
            (e[(e["R32G32B32A32"] = 6)] = "R32G32B32A32"),
            (e[(e["DXT1"] = 7)] = "DXT1"),
            (e[(e["DXT5"] = 8)] = "DXT5"),
            (e[(e["ETC1_RGB"] = 9)] = "ETC1_RGB"),
            (e[(e["ETC2_RGB"] = 10)] = "ETC2_RGB"),
            (e[(e["ETC2_RGBA5"] = 11)] = "ETC2_RGBA5"),
            (e[(e["ETC2_RGBA8"] = 12)] = "ETC2_RGBA8"),
            (e[(e["PVRTC_RGB2"] = 13)] = "PVRTC_RGB2"),
            (e[(e["PVRTC_RGBA2"] = 14)] = "PVRTC_RGBA2"),
            (e[(e["PVRTC_RGB4"] = 15)] = "PVRTC_RGB4"),
            (e[(e["PVRTC_RGBA4"] = 16)] = "PVRTC_RGBA4"),
            (e[(e["ASTC_4x4"] = 17)] = "ASTC_4x4"),
            (e[(e["ASTC_5x5"] = 18)] = "ASTC_5x5"),
            (e[(e["ASTC_6x6"] = 19)] = "ASTC_6x6"),
            (e[(e["ASTC_8x8"] = 20)] = "ASTC_8x8"),
            (e[(e["ASTC_10x10"] = 21)] = "ASTC_10x10"),
            (e[(e["ASTC_12x12"] = 22)] = "ASTC_12x12");
        })(di || (di = {})),
        (function (e) {
          (e[(e["Clamp"] = 0)] = "Clamp"), (e[(e["Repeat"] = 1)] = "Repeat"), (e[(e["Mirror"] = 2)] = "Mirror");
        })(hi || (hi = {}));
      var _i = (function (e) {
        S(n, e),
          (n._isPowerOf2 = function (e) {
            return 0 === (e & (e - 1));
          }),
          (n._getFormatDetail = function (e, t, n) {
            switch (e) {
              case di.R8G8B8:
                return {
                  internalFormat: n ? t.RGB8 : t.RGB,
                  baseFormat: t.RGB,
                  dataType: t.UNSIGNED_BYTE,
                  isCompressed: !1
                };
              case di.R8G8B8A8:
                return {
                  internalFormat: n ? t.RGBA8 : t.RGBA,
                  baseFormat: t.RGBA,
                  dataType: t.UNSIGNED_BYTE,
                  isCompressed: !1
                };
              case di.R4G4B4A4:
                return {
                  internalFormat: n ? t.RGBA4 : t.RGBA,
                  baseFormat: t.RGBA,
                  dataType: t.UNSIGNED_SHORT_4_4_4_4,
                  isCompressed: !1
                };
              case di.R5G5B5A1:
                return {
                  internalFormat: n ? t.RGB5_A1 : t.RGBA,
                  baseFormat: t.RGBA,
                  dataType: t.UNSIGNED_SHORT_5_5_5_1,
                  isCompressed: !1
                };
              case di.R5G6B5:
                return {
                  internalFormat: n ? t.RGB565 : t.RGB,
                  baseFormat: t.RGB,
                  dataType: t.UNSIGNED_SHORT_5_6_5,
                  isCompressed: !1
                };
              case di.Alpha8:
                return { internalFormat: t.ALPHA, baseFormat: t.ALPHA, dataType: t.UNSIGNED_BYTE, isCompressed: !1 };
              case di.R32G32B32A32:
                return { internalFormat: t.RGBA32F, baseFormat: t.RGBA, dataType: t.FLOAT, isCompressed: !1 };
              case di.DXT1:
                return { internalFormat: si.RGB_S3TC_DXT1_EXT, isCompressed: !0 };
              case di.DXT5:
                return { internalFormat: si.RGBA_S3TC_DXT5_EXT, isCompressed: !0 };
              case di.ETC1_RGB:
                return { internalFormat: si.RGB_ETC1_WEBGL, isCompressed: !0 };
              case di.ETC2_RGB:
                return { internalFormat: si.RGB8_ETC2, isCompressed: !0 };
              case di.ETC2_RGBA5:
                return { internalFormat: si.RGB8_PUNCHTHROUGH_ALPHA1_ETC2, isCompressed: !0 };
              case di.ETC2_RGBA8:
                return { internalFormat: si.RGBA8_ETC2_EAC, isCompressed: !0 };
              case di.PVRTC_RGB2:
                return { internalFormat: si.RGB_PVRTC_2BPPV1_IMG, isCompressed: !0 };
              case di.PVRTC_RGBA2:
                return { internalFormat: si.RGBA_PVRTC_2BPPV1_IMG, isCompressed: !0 };
              case di.PVRTC_RGB4:
                return { internalFormat: si.RGB_PVRTC_4BPPV1_IMG, isCompressed: !0 };
              case di.PVRTC_RGBA4:
                return { internalFormat: si.RGBA_PVRTC_4BPPV1_IMG, isCompressed: !0 };
              case di.ASTC_4x4:
                return { internalFormat: si.RGBA_ASTC_4X4_KHR, isCompressed: !0 };
              case di.ASTC_5x5:
                return { internalFormat: si.RGBA_ASTC_5X5_KHR, isCompressed: !0 };
              case di.ASTC_6x6:
                return { internalFormat: si.RGBA_ASTC_6X6_KHR, isCompressed: !0 };
              case di.ASTC_8x8:
                return { internalFormat: si.RGBA_ASTC_8X8_KHR, isCompressed: !0 };
              case di.ASTC_10x10:
                return { internalFormat: si.RGBA_ASTC_10X10_KHR, isCompressed: !0 };
              case di.ASTC_12x12:
                return { internalFormat: si.RGBA_ASTC_12X12_KHR, isCompressed: !0 };
              default:
                throw new Error("this TextureFormat is not supported in Oasis Engine: " + e);
            }
          }),
          (n._getRenderBufferColorFormatDetail = function (e, t, n) {
            switch (e) {
              case ci.R8G8B8:
                return {
                  internalFormat: n ? t.RGB8 : t.RGB,
                  baseFormat: t.RGB,
                  dataType: t.UNSIGNED_BYTE,
                  isCompressed: !1
                };
              case ci.R8G8B8A8:
                return {
                  internalFormat: n ? t.RGBA8 : t.RGBA,
                  baseFormat: t.RGBA,
                  dataType: t.UNSIGNED_BYTE,
                  isCompressed: !1
                };
              case ci.R4G4B4A4:
                return {
                  internalFormat: n ? t.RGBA4 : t.RGBA,
                  baseFormat: t.RGBA,
                  dataType: t.UNSIGNED_SHORT_4_4_4_4,
                  isCompressed: !1
                };
              case ci.R5G5B5A1:
                return {
                  internalFormat: n ? t.RGB5_A1 : t.RGBA,
                  baseFormat: t.RGBA,
                  dataType: t.UNSIGNED_SHORT_5_5_5_1,
                  isCompressed: !1
                };
              case ci.R5G6B5:
                return {
                  internalFormat: n ? t.RGB565 : t.RGB,
                  baseFormat: t.RGB,
                  dataType: t.UNSIGNED_SHORT_5_6_5,
                  isCompressed: !1
                };
              case ci.Alpha8:
                return { internalFormat: t.ALPHA, baseFormat: t.ALPHA, dataType: t.UNSIGNED_BYTE, isCompressed: !1 };
              case ci.R16G16B16A16:
                return { internalFormat: t.RGBA16F, baseFormat: t.RGBA, dataType: t.HALF_FLOAT, isCompressed: !1 };
              case ci.R32G32B32A32:
                return { internalFormat: t.RGBA32F, baseFormat: t.RGBA, dataType: t.FLOAT, isCompressed: !1 };
              default:
                throw new Error("this RenderBufferColorFormat is not supported in Oasis Engine: " + e);
            }
          }),
          (n._getRenderBufferDepthFormatDetail = function (e, t, n) {
            switch (e) {
              case ui.Depth:
                return {
                  internalFormat: n ? t.DEPTH_COMPONENT32F : t.DEPTH_COMPONENT16,
                  baseFormat: t.DEPTH_COMPONENT,
                  dataType: n ? t.FLOAT : t.UNSIGNED_INT,
                  isCompressed: !1,
                  attachment: t.DEPTH_ATTACHMENT
                };
              case ui.DepthStencil:
                return {
                  internalFormat: n ? t.DEPTH24_STENCIL8 : t.DEPTH_STENCIL,
                  baseFormat: t.DEPTH_STENCIL,
                  dataType: t.UNSIGNED_INT_24_8,
                  isCompressed: !1,
                  attachment: t.DEPTH_STENCIL_ATTACHMENT
                };
              case ui.Stencil:
                return {
                  internalFormat: t.STENCIL_INDEX8,
                  baseFormat: t.STENCIL_ATTACHMENT,
                  dataType: t.UNSIGNED_BYTE,
                  isCompressed: !1,
                  attachment: t.STENCIL_ATTACHMENT
                };
              case ui.Depth16:
                return {
                  internalFormat: t.DEPTH_COMPONENT16,
                  baseFormat: t.DEPTH_COMPONENT,
                  dataType: t.UNSIGNED_INT,
                  isCompressed: !1,
                  attachment: t.DEPTH_ATTACHMENT
                };
              case ui.Depth24:
                return {
                  internalFormat: t.DEPTH_COMPONENT24,
                  baseFormat: t.DEPTH_COMPONENT,
                  dataType: t.UNSIGNED_INT,
                  isCompressed: !1,
                  attachment: t.DEPTH_ATTACHMENT
                };
              case ui.Depth32:
                return {
                  internalFormat: t.DEPTH_COMPONENT32F,
                  baseFormat: t.DEPTH_COMPONENT,
                  dataType: t.FLOAT,
                  isCompressed: !1,
                  attachment: t.DEPTH_ATTACHMENT
                };
              case ui.Depth24Stencil8:
                return {
                  internalFormat: n ? t.DEPTH24_STENCIL8 : t.DEPTH_STENCIL,
                  baseFormat: t.DEPTH_STENCIL,
                  dataType: t.UNSIGNED_INT_24_8,
                  isCompressed: !1,
                  attachment: t.DEPTH_STENCIL_ATTACHMENT
                };
              case ui.Depth32Stencil8:
                return {
                  internalFormat: t.DEPTH32F_STENCIL8,
                  baseFormat: t.DEPTH_STENCIL,
                  dataType: t.FLOAT_32_UNSIGNED_INT_24_8_REV,
                  isCompressed: !1,
                  attachment: t.DEPTH_STENCIL_ATTACHMENT
                };
              default:
                throw new Error("this RenderBufferDepthFormat is not supported in Oasis Engine: " + e);
            }
          }),
          (n._supportTextureFormat = function (e, t) {
            var n = !0;
            switch (e) {
              case di.R32G32B32A32:
                t.canIUse(xe.textureFloat) || (n = !1);
                break;
            }
            return n;
          }),
          (n._supportRenderBufferColorFormat = function (e, t) {
            var n = !0;
            switch (e) {
              case ci.R32G32B32A32:
                (t.canIUse(xe.colorBufferFloat) && t.canIUse(xe.textureFloat)) || (n = !1);
                break;
              case ci.R16G16B16A16:
                (t.canIUse(xe.colorBufferHalfFloat) && t.canIUse(xe.textureHalfFloat)) || (n = !1);
                break;
            }
            return n;
          }),
          (n._supportRenderBufferDepthFormat = function (e, t, n) {
            var i = t.isWebGL2,
              r = !0;
            if (n && !t.canIUse(xe.depthTexture)) return !1;
            switch (e) {
              case ui.Stencil:
                r = !1;
                break;
              case ui.Depth24:
              case ui.Depth32:
              case ui.Depth32Stencil8:
                i || (r = !1);
                break;
            }
            return r;
          });
        var t = n.prototype;
        function n(t) {
          var n;
          return (
            (n = e.call(this, t) || this),
            (n.name = void 0),
            (n._glTexture = void 0),
            (n._target = void 0),
            (n._formatDetail = void 0),
            (n._width = void 0),
            (n._height = void 0),
            (n._rhi = void 0),
            (n._mipmap = void 0),
            (n._mipmapCount = void 0),
            (n._wrapModeU = void 0),
            (n._wrapModeV = void 0),
            (n._filterMode = void 0),
            (n._anisoLevel = 1),
            n
          );
        }
        return (
          (t.generateMipmaps = function () {
            if (this._mipmap) {
              var e = this._rhi.gl;
              this._bind(), e.generateMipmap(this._target), this._unbind();
            }
          }),
          (t._onDestroy = function () {
            var e = this._rhi.gl;
            e.deleteTexture(this._glTexture), (this._glTexture = null), (this._formatDetail = null), (this._rhi = null);
          }),
          (t._bind = function () {
            var e = this._rhi.gl;
            e.bindTexture(this._target, this._glTexture);
          }),
          (t._unbind = function () {
            var e = this._rhi.gl;
            e.bindTexture(this._target, null);
          }),
          (t._getPixelBuffer = function (e, t, i, r, a, o) {
            var s = this._rhi.gl,
              c = this._formatDetail,
              u = c.baseFormat,
              l = c.dataType;
            n._readFrameBuffer || (n._readFrameBuffer = s.createFramebuffer()),
              s.bindFramebuffer(s.FRAMEBUFFER, n._readFrameBuffer),
              null != e
                ? s.framebufferTexture2D(
                    s.FRAMEBUFFER,
                    s.COLOR_ATTACHMENT0,
                    s.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                    this._glTexture,
                    0
                  )
                : s.framebufferTexture2D(s.FRAMEBUFFER, s.COLOR_ATTACHMENT0, s.TEXTURE_2D, this._glTexture, 0),
              s.readPixels(t, i, r, a, u, l, o),
              s.bindFramebuffer(s.FRAMEBUFFER, null);
          }),
          (t._initMipmap = function (e) {
            var t = this._rhi.gl,
              n = this._rhi.isWebGL2,
              i = this._formatDetail,
              r = i.internalFormat,
              a = i.baseFormat,
              o = i.dataType;
            if ((this._bind(), n)) t.texStorage2D(this._target, this._mipmapCount, r, this._width, this._height);
            else if ((a !== r && (r = a), e))
              for (var s = 0; s < this._mipmapCount; s++)
                for (var c = Math.max(1, this._width >> s), u = 0; u < 6; u++)
                  t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + u, s, r, c, c, 0, a, o, null);
            else
              for (var l = 0; l < this._mipmapCount; l++) {
                var d = Math.max(1, this._width >> l),
                  h = Math.max(1, this._height >> l);
                t.texImage2D(this._target, l, r, d, h, 0, a, o, null);
              }
            this._unbind();
          }),
          (t._getMaxMiplevel = function (e) {
            return Math.floor(Math.log2(e));
          }),
          (t._getMipmapCount = function () {
            return this._mipmap ? Math.floor(Math.log2(Math.max(this._width, this._height))) + 1 : 1;
          }),
          (t._setWrapMode = function (e, t) {
            var i = this._rhi.gl,
              r = this._rhi.isWebGL2;
            switch (
              (r ||
                e === hi.Clamp ||
                (n._isPowerOf2(this._width) && n._isPowerOf2(this._height)) ||
                (Se.warn(
                  "non-power-2 texture is not supported for REPEAT or MIRRORED_REPEAT in WebGL1,and has automatically downgraded to CLAMP_TO_EDGE"
                ),
                (e = hi.Clamp)),
              e)
            ) {
              case hi.Clamp:
                i.texParameteri(this._target, t, i.CLAMP_TO_EDGE);
                break;
              case hi.Repeat:
                i.texParameteri(this._target, t, i.REPEAT);
                break;
              case hi.Mirror:
                i.texParameteri(this._target, t, i.MIRRORED_REPEAT);
                break;
            }
          }),
          A(n, [
            {
              key: "width",
              get: function () {
                return this._width;
              }
            },
            {
              key: "height",
              get: function () {
                return this._height;
              }
            },
            {
              key: "wrapModeU",
              get: function () {
                return this._wrapModeU;
              },
              set: function (e) {
                if (e !== this._wrapModeU) {
                  var t = this._rhi.gl;
                  (this._wrapModeU = e), this._bind(), this._setWrapMode(e, t.TEXTURE_WRAP_S), this._unbind();
                }
              }
            },
            {
              key: "wrapModeV",
              get: function () {
                return this._wrapModeV;
              },
              set: function (e) {
                if (e !== this._wrapModeV) {
                  var t = this._rhi.gl;
                  (this._wrapModeV = e), this._bind(), this._setWrapMode(e, t.TEXTURE_WRAP_T), this._unbind();
                }
              }
            },
            {
              key: "mipmapCount",
              get: function () {
                return this._mipmapCount;
              }
            },
            {
              key: "filterMode",
              get: function () {
                return this._filterMode;
              },
              set: function (e) {
                if (e !== this._filterMode) {
                  var t = this._rhi.gl;
                  switch (((this._filterMode = e), this._bind(), e)) {
                    case li.Point:
                      t.texParameteri(this._target, t.TEXTURE_MAG_FILTER, t.NEAREST),
                        t.texParameteri(
                          this._target,
                          t.TEXTURE_MIN_FILTER,
                          this._mipmap ? t.NEAREST_MIPMAP_NEAREST : t.NEAREST
                        );
                      break;
                    case li.Bilinear:
                      t.texParameteri(this._target, t.TEXTURE_MAG_FILTER, t.LINEAR),
                        t.texParameteri(
                          this._target,
                          t.TEXTURE_MIN_FILTER,
                          this._mipmap ? t.LINEAR_MIPMAP_NEAREST : t.LINEAR
                        );
                      break;
                    case li.Trilinear:
                      t.texParameteri(this._target, t.TEXTURE_MAG_FILTER, t.LINEAR),
                        t.texParameteri(
                          this._target,
                          t.TEXTURE_MIN_FILTER,
                          this._mipmap ? t.LINEAR_MIPMAP_LINEAR : t.LINEAR
                        );
                      break;
                  }
                  this._unbind();
                }
              }
            },
            {
              key: "anisoLevel",
              get: function () {
                return this._anisoLevel;
              },
              set: function (e) {
                var t = this._rhi.capability.maxAnisoLevel;
                if (
                  (e > t &&
                    (Se.warn("anisoLevel:" + e + ", exceeds the limit and is automatically downgraded to:" + t),
                    (e = t)),
                  e < 1 &&
                    (Se.warn("anisoLevel:" + e + ", must be greater than 0, and is automatically downgraded to 1"),
                    (e = 1)),
                  e !== this._anisoLevel)
                ) {
                  var n = this._rhi.gl;
                  (this._anisoLevel = e),
                    this._bind(),
                    n.texParameterf(this._target, n.TEXTURE_MAX_ANISOTROPY_EXT, e),
                    this._unbind();
                }
              }
            }
          ]),
          n
        );
      })(fi);
      _i._readFrameBuffer = null;
      var pi = (function () {
          function e(e) {
            (this._group = void 0),
              (this._properties = Object.create(null)),
              (this._macroCollection = new Ne()),
              (this._variableMacros = Object.create(null)),
              (this._refCount = 0),
              (this._group = e);
          }
          var t = e.prototype;
          return (
            (t.getFloat = function (e) {
              return this._getData(e);
            }),
            (t.setFloat = function (e, t) {
              this._setData(e, t);
            }),
            (t.getInt = function (e) {
              return this._getData(e);
            }),
            (t.setInt = function (e, t) {
              this._setData(e, t);
            }),
            (t.getFloatArray = function (e) {
              return this._getData(e);
            }),
            (t.setFloatArray = function (e, t) {
              this._setData(e, t);
            }),
            (t.getIntArray = function (e) {
              return this._getData(e);
            }),
            (t.setIntArray = function (e, t) {
              this._setData(e, t);
            }),
            (t.getVector2 = function (e) {
              return this._getData(e);
            }),
            (t.setVector2 = function (e, t) {
              this._setData(e, t);
            }),
            (t.getVector3 = function (e) {
              return this._getData(e);
            }),
            (t.setVector3 = function (e, t) {
              this._setData(e, t);
            }),
            (t.getVector4 = function (e) {
              return this._getData(e);
            }),
            (t.setVector4 = function (e, t) {
              this._setData(e, t);
            }),
            (t.getMatrix = function (e) {
              return this._getData(e);
            }),
            (t.setMatrix = function (e, t) {
              this._setData(e, t);
            }),
            (t.getColor = function (e) {
              return this._getData(e);
            }),
            (t.setColor = function (e, t) {
              this._setData(e, t);
            }),
            (t.getTexture = function (e) {
              return this._getData(e);
            }),
            (t.setTexture = function (e, t) {
              if (this._getRefCount() > 0) {
                var n = this._getData(e);
                n && n._addRefCount(-1), t && t._addRefCount(1);
              }
              this._setData(e, t);
            }),
            (t.getTextureArray = function (e) {
              return this._getData(e);
            }),
            (t.setTextureArray = function (e, t) {
              if (this._getRefCount() > 0) {
                var n = this._getData(e);
                if (n) for (var i = 0, r = n.length; i < r; i++) n[i]._addRefCount(-1);
                if (t) for (var a = 0, o = t.length; a < o; a++) t[a]._addRefCount(1);
              }
              this._setData(e, t);
            }),
            (t.enableMacro = function (e, t) {
              void 0 === t && (t = null),
                t
                  ? this._enableVariableMacro(e, t)
                  : ("string" === typeof e && (e = Zn.getMacroByName(e)), this._macroCollection.enable(e));
            }),
            (t.disableMacro = function (e) {
              if ("string" === typeof e) {
                var t = this._variableMacros[e];
                t ? this._disableVariableMacro(e, t) : (e = Zn.getMacroByName(e));
              } else this._macroCollection.disable(e);
            }),
            (t.clone = function () {
              var t = new e(this._group);
              return this.cloneTo(t), t;
            }),
            (t.cloneTo = function (e) {
              re.deepCloneObject(this._macroCollection, e._macroCollection), M(e._variableMacros, this._variableMacros);
              for (var t = this._properties, n = e._properties, i = Object.keys(t), r = 0, a = i.length; r < a; r++) {
                var o = i[r],
                  s = t[o];
                null != s
                  ? "number" === typeof s
                    ? (n[o] = s)
                    : s instanceof _i
                    ? (n[o] = s)
                    : s instanceof Array || s instanceof Float32Array || s instanceof Int32Array
                    ? (n[o] = s.slice())
                    : (n[o] = s.clone())
                  : (n[o] = s);
              }
            }),
            (t._getData = function (e) {
              return "string" === typeof e && (e = Zn.getPropertyByName(e)), this._properties[e._uniqueId];
            }),
            (t._setData = function (e, t) {
              if (("string" === typeof e && (e = Zn.getPropertyByName(e)), e._group !== this._group)) {
                if (void 0 !== e._group) throw "This property has been used as " + jn[e._group] + " property.";
                e._group = this._group;
              }
              this._properties[e._uniqueId] = t;
            }),
            (t._getRefCount = function () {
              return this._refCount;
            }),
            (t._addRefCount = function (e) {
              this._refCount += e;
              var t = this._properties;
              for (var n in t) {
                var i = t[n];
                i && i instanceof _i && i._addRefCount(e);
              }
            }),
            (t._enableVariableMacro = function (e, t) {
              var n = this._variableMacros,
                i = n[e];
              if (i !== t) {
                i && this._disableVariableMacro(e, t);
                var r = Zn.getMacroByName(e + " " + t);
                this._macroCollection.enable(r), (n[e] = t);
              }
            }),
            (t._disableVariableMacro = function (e, t) {
              var n = Zn.getMacroByName(e + " " + t);
              this._macroCollection.disable(n), delete this._variableMacros[e];
            }),
            e
          );
        })(),
        gi = (function (e) {
          function t(n, i) {
            var r;
            (r = e.call(this, n) || this),
              (r.shaderData = new pi(jn.Scene)),
              (r.name = void 0),
              (r.clipPlanes = []),
              (r._activeCameras = []),
              (r._isActiveInEngine = !1),
              (r._destroyed = !1),
              (r._rootEntities = []),
              (r._resolution = new m()),
              (r.features = []),
              (r.name = i || "");
            var a = r.shaderData;
            return (
              t.sceneFeatureManager.addObject(z(r)),
              a._addRefCount(1),
              r._engine._hardwareRenderer.canIUse(xe.shaderTextureLod) && a.enableMacro("HAS_TEX_LOD"),
              r._engine._hardwareRenderer.canIUse(xe.standardDerivatives) && a.enableMacro("HAS_DERIVATIVES"),
              r
            );
          }
          S(t, e),
            A(t, [
              {
                key: "engine",
                get: function () {
                  return this._engine;
                }
              },
              {
                key: "rootEntitiesCount",
                get: function () {
                  return this._rootEntities.length;
                }
              },
              {
                key: "rootEntities",
                get: function () {
                  return this._rootEntities;
                }
              },
              {
                key: "destroyed",
                get: function () {
                  return this._destroyed;
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.createRootEntity = function (e) {
              var t = new ct(this._engine, e);
              return this.addRootEntity(t), t;
            }),
            (n.addRootEntity = function (e) {
              var t = e._isRoot;
              t || ((e._isRoot = !0), e._removeFromParent());
              var n = e._scene;
              n !== this
                ? (n && t && n._removeEntity(e), this._rootEntities.push(e), ct._traverseSetOwnerScene(e, this))
                : t || this._rootEntities.push(e),
                this._isActiveInEngine
                  ? !e._isActiveInHierarchy && e._isActive && e._processActive()
                  : e._isActiveInHierarchy && e._processInActive();
            }),
            (n.removeRootEntity = function (e) {
              e._isRoot &&
                e._scene == this &&
                (this._removeEntity(e),
                this._isActiveInEngine && e._processInActive(),
                ct._traverseSetOwnerScene(e, null));
            }),
            (n.getRootEntity = function (e) {
              return void 0 === e && (e = 0), this._rootEntities[e];
            }),
            (n.findEntityByName = function (e) {
              for (var t = this._rootEntities, n = t.length - 1; n >= 0; n--) {
                var i = t[n];
                if (i.name === e) return i;
              }
              for (var r = t.length - 1; r >= 0; r--) {
                var a = t[r],
                  o = a.findByName(e);
                if (o) return o;
              }
              return null;
            }),
            (n.findEntityByPath = function (e) {
              for (var t = e.split("/").filter(Boolean), n = 0, i = this.rootEntitiesCount; n < i; n++) {
                var r = this.getRootEntity(n);
                if (r.name == t[0]) {
                  for (var a = 1, o = t.length; a < o; ++a) if (((r = ct._findChildByName(r, t[a])), !r)) break;
                  return r;
                }
              }
              return null;
            }),
            (n.destroy = function () {
              if (!this._destroyed) {
                this._isActiveInEngine && (this._engine.sceneManager.activeScene = null),
                  t.sceneFeatureManager.callFeatureMethod(this, "destroy", [this]);
                for (var e = 0, n = this.rootEntitiesCount; e < n; e++) this._rootEntities[e].destroy();
                (this._rootEntities.length = 0),
                  (this._activeCameras.length = 0),
                  (t.sceneFeatureManager._objects = []),
                  this.shaderData._addRefCount(-1),
                  (this._destroyed = !0);
              }
            }),
            (n.attachRenderCamera = function (e) {
              var t = this._activeCameras.indexOf(e);
              -1 === t ? this._activeCameras.push(e) : Se.warn("Camera already attached.");
            }),
            (n.detachRenderCamera = function (e) {
              var t = this._activeCameras.indexOf(e);
              -1 !== t && this._activeCameras.splice(t, 1);
            }),
            (n._processActive = function (e) {
              this._isActiveInEngine = e;
              for (var t = this._rootEntities, n = t.length - 1; n >= 0; n--) {
                var i = t[n];
                i._isActive && (e ? i._processActive() : i._processInActive());
              }
            }),
            (n._updateShaderData = function () {
              var e = this.findFeature(oi),
                n = this.shaderData,
                i = this.engine.canvas,
                r = this._resolution;
              e._updateShaderData(n), r.setValue(i.width, i.height), n.setVector2(t._resolutionProperty, r);
            }),
            (n._removeEntity = function (e) {
              var t = this._rootEntities;
              t.splice(t.indexOf(e), 1);
            }),
            (t.registerFeature = function (e) {
              t.sceneFeatureManager.registerFeature(e);
            }),
            (n.findFeature = function (e) {
              return t.sceneFeatureManager.findFeature(this, e);
            }),
            (n.raycast = function (e, t, n) {}),
            t
          );
        })(be);
      (gi._resolutionProperty = Zn.getPropertyByName("u_resolution")), (gi.sceneFeatureManager = new ut());
      var vi = (function () {
          function e(e) {
            (this.engine = e), (this._activeScene = void 0);
          }
          A(e, [
            {
              key: "activeScene",
              get: function () {
                return this._activeScene;
              },
              set: function (e) {
                var t = this._activeScene;
                t !== e && (t && t._processActive(!1), e && e._processActive(!0), (this._activeScene = e));
              }
            }
          ]);
          var t = e.prototype;
          return (
            (t.loadScene = function (e, t) {
              var n = this;
              void 0 === t && (t = !0);
              var i = this.engine.resourceManager.load(e);
              return (
                i.then(function (e) {
                  var i = n._activeScene;
                  (n.activeScene = e), i && t && i.destroy();
                }),
                i
              );
            }),
            (t.mergeScenes = function (e, t) {
              for (var n = e.rootEntities, i = 0, r = n.length; i < r; i++) t.addRootEntity(n[i]);
            }),
            e
          );
        })(),
        mi =
          "#include <common>\n#include <common_frag>\n\n#include <uv_share>\n#include <normal_share>\n#include <worldpos_share>\n\n#include <ambient_light_frag>\n#include <direct_light_frag>\n#include <point_light_frag>\n#include <spot_light_frag>\n#include <mobile_material_frag>\n\n#include <fog_share>\n\nvoid main() {\n\n    #include <begin_mobile_frag>\n    #include <begin_normal_frag>\n    #include <begin_viewdir_frag>\n    #include <mobile_blinnphong_frag>\n\n    gl_FragColor = emission + ambient + diffuse + specular;\n\n    #include <fog_frag>\n\n}\n",
        yi =
          "#include <common>\n#include <common_vert>\n#include <uv_share>\n#include <normal_share>\n#include <worldpos_share>\n#include <shadow_share>\n#include <morph_target_vert>\n\n#include <fog_share>\n\nvoid main() {\n\n    #include <begin_position_vert>\n    #include <begin_normal_vert>\n\n    #include <morph_vert>\n    #include <skinning_vert>\n    #include <uv_vert>\n    #include <normal_vert>\n    #include <worldpos_vert>\n    #include <shadow_vert>\n    #include <position_vert>\n\n    #include <fog_vert>\n\n}\n",
        xi =
          "#include <common>\n#include <common_frag>\n#include <pbr_common_frag_define>\n#include <pbr_util_frag_define>\n\n#include <fog_share>\n\n#include <uv_share>\n#include <normal_share>\n#include <color_share>\n#include <worldpos_share>\n#include <refraction_share>\n#include <perturbation_share>\n#include <clipPlane_frag_define>\n\n// light\n#include <ambient_light_frag>\n#include <direct_light_frag>\n#include <point_light_frag>\n#include <spot_light_frag>\n#include <pbr_envmap_light_frag_define>\n\n// prop & texture\n#include <pbr_base_frag_define>\n#include <pbr_texture_frag_define>\n\n// runtime context\n#include <pbr_runtime_frag_define>\n\n// todo: generalize\n#include <pbr_normal_frag_define>\n\n\n// todo: BxDF\n#include <pbr_brdf_cook_torrance_frag_define>\n\n\n// direct + indirect\n#include <pbr_direct_irradiance_frag_define>\n#include <pbr_ibl_diffuse_frag_define>\n#include <pbr_ibl_specular_frag_define>\n\n#include <oit_frag_define>\n\n\nvoid main() {\n    #include <clipPlane_frag>\n\n    #include <pbr_begin_frag>\n    #include <pbr_direct_irradiance_frag>\n    #include <pbr_ibl_diffuse_frag>\n    #include <pbr_ibl_specular_frag>\n    // todo: generalize texture logic\n    #include <pbr_end_frag>\n    #include <gamma_frag>\n    #include <refraction_frag>\n    #include <perturbation_frag>\n    #include <fog_frag>\n\n    #include <oit_frag>\n\n    // gl_FragColor = texture2D( u_baseColorSampler, v_uv );\n}\n",
        bi =
          "#include <common>\n#include <common_vert>\n#include <uv_share>\n#include <color_share>\n#include <normal_share>\n#include <worldpos_share>\n#include <clipPlane_vert_define>\n#include <morph_target_vert>\n\n#include <fog_share>\n\nvoid main() {\n\n    #include <begin_position_vert>\n    #include <begin_normal_vert>\n\n    #include <morph_vert>\n    #include <skinning_vert>\n    #include <uv_vert>\n    #include <color_vert>\n    #include <normal_vert>\n    #include <worldpos_vert>\n    #include <clipPlane_vert>\n    #include <position_vert>\n\n    #include <fog_vert>\n}\n",
        wi =
          "/**\n * \u5206\u89e3\u4fdd\u5b58\u6df1\u5ea6\u503c\n*/\nvec4 pack (float depth) {\n\n  // \u4f7f\u7528rgba 4\u5b57\u8282\u517132\u4f4d\u6765\u5b58\u50a8z\u503c,1\u4e2a\u5b57\u8282\u7cbe\u5ea6\u4e3a1/256\n  const vec4 bitShift = vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);\n  const vec4 bitMask = vec4(1.0/256.0, 1.0/256.0, 1.0/256.0, 0.0);\n\n  vec4 rgbaDepth = fract(depth * bitShift); //\u8ba1\u7b97\u6bcf\u4e2a\u70b9\u7684z\u503c\n\n  // Cut off the value which do not fit in 8 bits\n  rgbaDepth -= rgbaDepth.gbaa * bitMask;\n\n  return rgbaDepth;\n}\n\nvoid main() {\n\n  // \u5c06z\u503c\u5206\u5f00\u5b58\u50a8\u5230rgba\u5206\u91cf\u4e2d,\u9634\u5f71\u989c\u8272\u7684\u540c\u65f6\u4e5f\u662f\u6df1\u5ea6\u503cz\n  gl_FragColor = pack(gl_FragCoord.z);\n\n}",
        Ai =
          "#include <common_vert>\n#include <normal_share>\n#include <shadow_share>\n\nvoid main() {\n\n    #include <begin_position_vert>\n    #include <begin_normal_vert>\n    #include <skinning_vert>\n    #include <shadow_vert>\n    #include <position_vert>\n\n}\n",
        Ti =
          "#ifdef O3_SHADOW_MAP_COUNT\n\nuniform float u_shadowBias[O3_SHADOW_MAP_COUNT];\nuniform float u_shadowIntensity[O3_SHADOW_MAP_COUNT];\nuniform float u_shadowRadius[O3_SHADOW_MAP_COUNT];\nuniform vec2 u_shadowMapSize[O3_SHADOW_MAP_COUNT];\nuniform sampler2D u_shadowMaps[O3_SHADOW_MAP_COUNT];\n\nvarying vec4 v_PositionFromLight[O3_SHADOW_MAP_COUNT];\n\nconst vec4 bitShift = vec4(1.0, 1.0/256.0, 1.0/(256.0*256.0), 1.0/(256.0*256.0*256.0));\n\n/**\n* \u91ca\u51fa\u6df1\u5ea6\u503c\n*/\nfloat unpack(const in vec4 rgbaDepth) {\n  return dot(rgbaDepth, bitShift);\n}\n\n/**\n* \u5224\u65ad\u662f\u5426\u9700\u8981\u663e\u793a\u9634\u5f71\n*/\nfloat getVisibility(vec4 positionFromLight, const in sampler2D shadowMap, vec2 mapSize, float intensity, float bias, float radius) {\n\n    vec3 shadowCoord = (positionFromLight.xyz/positionFromLight.w)/2.0 + 0.5;\n    float filterX = step(0.0, shadowCoord.x) * (1.0 - step(1.0, shadowCoord.x));\n    float filterY = step(0.0, shadowCoord.y) * (1.0 - step(1.0, shadowCoord.y));\n\n    shadowCoord.z -= bias;\n    vec2 texelSize = vec2( 1.0 ) / mapSize;\n\n    float visibility = 0.0;\n    for (float y = -1.0 ; y <=1.0 ; y+=1.0) {\n      for (float x = -1.0 ; x <=1.0 ; x+=1.0) {\n        vec2 uv = shadowCoord.xy + texelSize * vec2(x, y) * radius;\n        vec4 rgbaDepth = texture2D(shadowMap, uv);\n        float depth = unpack(rgbaDepth);\n        visibility += step(depth, shadowCoord.z) * intensity;\n      }\n    }\n\n    visibility *= ( 1.0 / 9.0 );\n    return visibility * filterX * filterY;\n\n}\n\n#endif\n\nvoid main() {\n\n  vec4 shadowColor = vec4(1.0, 1.0, 1.0, 1.0);\n\n#ifdef O3_SHADOW_MAP_COUNT\n\n  float visibility = 1.0;\n\n  #if (O3_SHADOW_MAP_COUNT == 1)\n    visibility -= getVisibility(v_PositionFromLight[0], u_shadowMaps[0], u_shadowMapSize[0], u_shadowIntensity[0], u_shadowBias[0], u_shadowRadius[0]);\n  #elif (O3_SHADOW_MAP_COUNT == 2)\n    visibility -= getVisibility(v_PositionFromLight[0], u_shadowMaps[0], u_shadowMapSize[0], u_shadowIntensity[0], u_shadowBias[0], u_shadowRadius[0]);\n    visibility -= getVisibility(v_PositionFromLight[1], u_shadowMaps[1], u_shadowMapSize[1], u_shadowIntensity[1], u_shadowBias[1], u_shadowRadius[1]);\n  #elif (O3_SHADOW_MAP_COUNT == 3)\n    visibility -= getVisibility(v_PositionFromLight[0], u_shadowMaps[0], u_shadowMapSize[0], u_shadowIntensity[0], u_shadowBias[0], u_shadowRadius[0]);\n    visibility -= getVisibility(v_PositionFromLight[1], u_shadowMaps[1], u_shadowMapSize[1], u_shadowIntensity[1], u_shadowBias[1], u_shadowRadius[1]);\n    visibility -= getVisibility(v_PositionFromLight[2], u_shadowMaps[2], u_shadowMapSize[2], u_shadowIntensity[2], u_shadowBias[2], u_shadowRadius[2]);\n  #endif\n\n\n  visibility = clamp(visibility, 0.0, 1.0);\n  shadowColor = vec4(visibility, visibility, visibility, 1.0);\n  \n\n#endif\n\n  gl_FragColor = shadowColor;\n\n}",
        Mi =
          "uniform samplerCube u_cube;\n\nvarying vec3 v_cubeUV;\n\nvoid main() {\n\n    gl_FragColor = textureCube( u_cube, v_cubeUV );\n\n}\n",
        Ci =
          "#include <common_vert>\n\nuniform mat4 u_mvpNoscale;\n\nvarying vec3 v_cubeUV;\n\nvoid main() {\n\n    v_cubeUV = POSITION.xyz;\n    gl_Position = u_mvpNoscale * vec4( POSITION, 1.0 );\n    gl_Position.z = gl_Position.w;\n\n}\n",
        Pi =
          "varying vec4 v_color;\nvarying float v_lifeLeft;\nvarying vec2 v_uv;\nuniform sampler2D texture;\nuniform sampler2D maskTexture;\n\nvoid main() {\n  float alphaFactor = 1.0;\n\n  #ifdef fadeIn\n    float fadeInFactor = step(0.5, v_lifeLeft);\n    alphaFactor = 2.0 * fadeInFactor * (1.0 - v_lifeLeft) + (1.0 - fadeInFactor);\n  #endif\n\n  #ifdef fadeOut\n    float fadeOutFactor = step(0.5, v_lifeLeft);\n    alphaFactor = alphaFactor * 2.0 * (1.0 - fadeOutFactor) * v_lifeLeft + alphaFactor * fadeOutFactor;\n  #endif\n\n  #ifdef texture\n    vec4 tex = texture2D(texture, v_uv);\n    #ifdef useOriginColor\n      gl_FragColor = vec4(tex.rgb, alphaFactor * tex.a * v_color.w);\n    #else\n      #ifdef maskTexture\n        vec4 maskTex = texture2D( maskTexture, v_uv);\n        gl_FragColor = vec4(v_color.xyz * tex.rgb + maskTex.a, alphaFactor * tex.a * v_color.w);\n      #else\n        gl_FragColor = vec4(v_color.xyz * tex.rgb, alphaFactor * tex.a * v_color.w);\n      #endif\n    #endif\n  #else\n    gl_FragColor = vec4( v_color.xyz, alphaFactor * v_color.w);\n  #endif\n}\n",
        Si =
          "attribute vec3 a_position;\nattribute vec3 a_velocity;\nattribute vec3 a_acceleration;\nattribute vec4 a_color;\n\nattribute vec4 a_lifeAndSize;\nattribute vec2 a_rotation;\n\nattribute vec3 a_uv;\nattribute vec2 a_normalizedUv;\n\nuniform float u_time;\nuniform int u_once;\nuniform int u_active;\nuniform mat4 u_MVPMat;\n\nvarying vec4 v_color;\nvarying float v_lifeLeft;\nvarying vec2 v_uv;\n\n#ifdef is2d\n  uniform mat4 u_viewInvMat;\n  uniform mat4 u_projMat;\n  uniform mat4 u_viewMat;\n  uniform mat4 u_modelMat;\n#endif\n\nmat2 rotation2d(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n\n  return mat2(\n    c, -s,\n    s, c\n  );\n}\n\n\nvoid main() {\n  v_color = a_color;\n  v_uv = a_uv.xy;\n  \n  // Real life time\n  float life = a_lifeAndSize.y + a_lifeAndSize.x;\n\n  // Elapsed time\n  float deltaTime = max(mod(u_time, life) - a_lifeAndSize.x, 0.0);\n\n  bool isDying = false;\n\n  if (u_once == 1 || u_active == 0) {\n    isDying = true;\n  }\n\n  if ((isDying && u_time > life)) {\n    deltaTime = life;\n  }\n\n  // Not born means death, otherwise it will be displayed if not born\n  if (deltaTime == 0.0) {\n    deltaTime = life;\n  }\n\n  v_lifeLeft = 1.0 - deltaTime / a_lifeAndSize.y;\n  float scale = a_lifeAndSize.z;\n  vec3 position = a_position + (a_velocity + a_acceleration * deltaTime * 0.5) * deltaTime;\n\n  #ifdef isScaleByLifetime\n    scale *= v_lifeLeft;\n  #else\n    scale *= pow(a_lifeAndSize.w, deltaTime);\n  #endif\n\n  #ifdef rotateToVelocity\n    vec3 v = a_velocity + a_acceleration * deltaTime;\n  #else\n    float deltaAngle = deltaTime * a_rotation.y;\n  #endif\n\n  #ifdef is2d\n    #ifdef rotateToVelocity\n      float angle = atan(v.z, v.x) * 2.0;\n    #else\n      float angle = a_rotation.x + deltaAngle;\n    #endif\n\n    vec2 rotatedPoint = rotation2d(angle) * vec2(a_normalizedUv.x, a_normalizedUv.y * a_uv.z);\n\n    vec3 basisX = u_viewInvMat[0].xyz;\n    vec3 basisZ = u_viewInvMat[1].xyz;\n\n    vec3 localPosition = vec3(basisX * rotatedPoint.x + \n                basisZ * rotatedPoint.y) * scale + position;\n\n    gl_Position = u_projMat * u_viewMat * vec4(localPosition + u_modelMat[3].xyz, 1.);\n  #else\n    #ifdef rotateToVelocity\n      float s = sin(angle);\n      float c = cos(angle);\n    #else\n      float s = sin(angle);\n      float c = cos(angle);\n    #endif\n\n    vec4 rotatedPoint = vec4((a_normalizedUv.x * c + a_normalizedUv.y * a_uv.z * s) * scale , 0., \n                              (a_normalizedUv.x * s - a_normalizedUv.y * a_uv.z * c) * scale, 1.);\n  \n    vec4 orientation = vec4(0, 0, 0, 1);\n    vec4 q2 = orientation + orientation;\n    vec4 qx = orientation.xxxw * q2.xyzx;\n    vec4 qy = orientation.xyyw * q2.xyzy;\n    vec4 qz = orientation.xxzw * q2.xxzz;\n  \n    mat4 localMatrix = mat4(\n        (1.0 - qy.y) - qz.z, \n        qx.y + qz.w, \n        qx.z - qy.w,\n        0,\n  \n        qx.y - qz.w, \n        (1.0 - qx.x) - qz.z, \n        qy.z + qx.w,\n        0,\n  \n        qx.z + qy.w, \n        qy.z - qx.w, \n        (1.0 - qx.x) - qy.y,\n        0,\n  \n        position.x, position.y, position.z, 1);\n\n    rotatedPoint = localMatrix * rotatedPoint;\n\n    gl_Position = u_MVPMat * rotatedPoint;\n  #endif\n}",
        Ri = (function () {
          function e() {}
          return (
            (e.init = function () {
              Zn.create("blinn-phong", yi, mi),
                Zn.create("pbr", bi, xi),
                Zn.create("shadow-map", Ai, wi),
                Zn.create("shadow", Ai, Ti),
                Zn.create("skybox", Ci, Mi),
                Zn.create("particle-shader", Si, Pi);
            }),
            e
          );
        })(),
        Ei = (function () {
          function e() {
            (this._cacheHierarchy = 1),
              (this._cacheMap = Object.create(null)),
              (this._lastQueryMap = void 0),
              (this._lastQueryKey = void 0);
          }
          var t = e.prototype;
          return (
            (t.get = function (e) {
              var t = this._cacheMap,
                n = e._length;
              n > this._cacheHierarchy && this._resizeCacheMapHierarchy(t, 0, n);
              for (var i = e._mask, r = e._length - 1, a = this._cacheHierarchy - 1, o = 0; o < a; o++) {
                var s = r < o ? 0 : i[o],
                  c = t[s];
                c || (t[s] = c = Object.create(null)), (t = c);
              }
              var u = r < a ? 0 : i[a],
                l = t[u];
              return l || ((this._lastQueryKey = u), (this._lastQueryMap = t)), l;
            }),
            (t.cache = function (e) {
              this._lastQueryMap[this._lastQueryKey] = e;
            }),
            (t._resizeCacheMapHierarchy = function (e, t, n) {
              var i = this._cacheHierarchy - 1;
              if (t == i) {
                for (var r in e)
                  for (var a = e[r], o = 0, s = n - i; o < s; o++)
                    o == s - 1 ? (e[0] = a) : (e = e[0 == o ? r : 0] = Object.create(null));
                this._cacheHierarchy = n;
              } else for (var c in e) this._resizeCacheMapHierarchy(e[c], ++t, n);
            }),
            e
          );
        })(),
        Oi = function () {
          (this.colorBlendOperation = ht.Add),
            (this.alphaBlendOperation = ht.Add),
            (this.sourceColorBlendFactor = dt.One),
            (this.sourceAlphaBlendFactor = dt.One),
            (this.destinationColorBlendFactor = dt.Zero),
            (this.destinationAlphaBlendFactor = dt.Zero),
            (this.colorWriteMask = ft.All),
            (this._blendEnable = !1);
        },
        Li = (function () {
          function e() {
            (this.targetBlendState = new Oi()), (this.blendColor = new b(0, 0, 0, 0)), (this.alphaToCoverage = !1);
          }
          (e._getGLBlendFactor = function (e) {
            switch (e) {
              case dt.Zero:
                return WebGLRenderingContext.ZERO;
              case dt.One:
                return WebGLRenderingContext.ONE;
              case dt.SourceColor:
                return WebGLRenderingContext.SRC_COLOR;
              case dt.OneMinusSourceColor:
                return WebGLRenderingContext.ONE_MINUS_SRC_COLOR;
              case dt.DestinationColor:
                return WebGLRenderingContext.DST_COLOR;
              case dt.OneMinusDestinationColor:
                return WebGLRenderingContext.ONE_MINUS_DST_COLOR;
              case dt.SourceAlpha:
                return WebGLRenderingContext.SRC_ALPHA;
              case dt.OneMinusSourceAlpha:
                return WebGLRenderingContext.ONE_MINUS_SRC_ALPHA;
              case dt.DestinationAlpha:
                return WebGLRenderingContext.DST_ALPHA;
              case dt.OneMinusDestinationAlpha:
                return WebGLRenderingContext.ONE_MINUS_DST_ALPHA;
              case dt.SourceAlphaSaturate:
                return WebGLRenderingContext.SRC_ALPHA_SATURATE;
              case dt.BlendColor:
                return WebGLRenderingContext.CONSTANT_COLOR;
              case dt.OneMinusBlendColor:
                return WebGLRenderingContext.ONE_MINUS_CONSTANT_COLOR;
            }
          }),
            (e._getGLBlendOperation = function (e) {
              switch (e) {
                case ht.Add:
                  return WebGLRenderingContext.FUNC_ADD;
                case ht.Subtract:
                  return WebGLRenderingContext.FUNC_SUBTRACT;
                case ht.ReverseSubtract:
                  return WebGLRenderingContext.FUNC_REVERSE_SUBTRACT;
                case ht.Min:
                  return WebGL2RenderingContext.MIN;
                case ht.Max:
                  return WebGL2RenderingContext.MAX;
              }
            });
          var t = e.prototype;
          return (
            (t._apply = function (e, t) {
              this._platformApply(e, t.blendState);
            }),
            (t._platformApply = function (t, n) {
              var i = t.gl,
                r = n.targetBlendState,
                a = this.targetBlendState,
                o = a.colorBlendOperation,
                s = a.alphaBlendOperation,
                c = a.sourceColorBlendFactor,
                u = a.destinationColorBlendFactor,
                l = a.sourceAlphaBlendFactor,
                d = a.destinationAlphaBlendFactor,
                h = a.colorWriteMask,
                f = !(
                  c === dt.One &&
                  u === dt.Zero &&
                  l === dt.One &&
                  d === dt.Zero &&
                  (o === ht.Add || o === ht.Subtract) &&
                  (s === ht.Add || s === ht.Subtract)
                );
              if ((f !== r._blendEnable && (f ? i.enable(i.BLEND) : i.disable(i.BLEND), (r._blendEnable = f)), f)) {
                (c === r.sourceColorBlendFactor &&
                  u === r.destinationColorBlendFactor &&
                  l === r.sourceAlphaBlendFactor &&
                  d === r.destinationAlphaBlendFactor) ||
                  (i.blendFuncSeparate(
                    e._getGLBlendFactor(c),
                    e._getGLBlendFactor(u),
                    e._getGLBlendFactor(l),
                    e._getGLBlendFactor(d)
                  ),
                  (r.sourceColorBlendFactor = c),
                  (r.destinationColorBlendFactor = u),
                  (r.sourceAlphaBlendFactor = l),
                  (r.destinationAlphaBlendFactor = d)),
                  (o === r.colorBlendOperation && s === r.alphaBlendOperation) ||
                    (i.blendEquationSeparate(e._getGLBlendOperation(o), e._getGLBlendOperation(s)),
                    (r.colorBlendOperation = o),
                    (r.alphaBlendOperation = s));
                var _ = this.blendColor;
                b.equals(n.blendColor, _) || (i.blendColor(_.r, _.g, _.b, _.a), _.cloneTo(n.blendColor));
              }
              h !== r.colorWriteMask &&
                (i.colorMask(0 !== (h & ft.Red), 0 !== (h & ft.Green), 0 !== (h & ft.Blue), 0 !== (h & ft.Alpha)),
                (r.colorWriteMask = h));
              var p = this.alphaToCoverage;
              p !== n.alphaToCoverage &&
                (p ? i.enable(i.SAMPLE_ALPHA_TO_COVERAGE) : i.disable(i.SAMPLE_ALPHA_TO_COVERAGE),
                (n.alphaToCoverage = p));
            }),
            e
          );
        })(),
        Fi = (function () {
          function e() {
            (this.enabled = !0), (this.writeEnabled = !0), (this.compareFunction = _t.Less);
          }
          e._getGLCompareFunction = function (e) {
            switch (e) {
              case _t.Never:
                return WebGLRenderingContext.NEVER;
              case _t.Less:
                return WebGLRenderingContext.LESS;
              case _t.Equal:
                return WebGLRenderingContext.EQUAL;
              case _t.LessEqual:
                return WebGL2RenderingContext.LEQUAL;
              case _t.Greater:
                return WebGL2RenderingContext.GREATER;
              case _t.NotEqual:
                return WebGL2RenderingContext.NOTEQUAL;
              case _t.GreaterEqual:
                return WebGL2RenderingContext.GEQUAL;
              case _t.Always:
                return WebGL2RenderingContext.ALWAYS;
            }
          };
          var t = e.prototype;
          return (
            (t._apply = function (e, t) {
              this._platformApply(e, t.depthState);
            }),
            (t._platformApply = function (t, n) {
              var i = t.gl,
                r = this.enabled,
                a = this.compareFunction,
                o = this.writeEnabled;
              r != n.enabled && (r ? i.enable(i.DEPTH_TEST) : i.disable(i.DEPTH_TEST), (n.enabled = r)),
                r &&
                  (a != n.compareFunction && (i.depthFunc(e._getGLCompareFunction(a)), (n.compareFunction = a)),
                  o != n.writeEnabled && (i.depthMask(o), (n.writeEnabled = o)));
            }),
            e
          );
        })(),
        Ii = (function () {
          function e() {
            (this.cullMode = pt.Back),
              (this.depthBias = 0),
              (this.slopeScaledDepthBias = 0),
              (this._cullFaceEnable = !0);
          }
          var t = e.prototype;
          return (
            (t._apply = function (e, t) {
              this._platformApply(e, t.rasterState);
            }),
            (t._platformApply = function (e, t) {
              var n = e.gl,
                i = this.cullMode,
                r = this.depthBias,
                a = this.slopeScaledDepthBias,
                o = i !== pt.Off;
              o !== t._cullFaceEnable && (o ? n.enable(n.CULL_FACE) : n.disable(n.CULL_FACE), (t._cullFaceEnable = o)),
                o && i !== t.cullMode && (i == pt.Back ? n.cullFace(n.BACK) : n.cullFace(n.FRONT), (t.cullMode = i)),
                (r === t.depthBias && a === t.slopeScaledDepthBias) ||
                  (0 !== r || 0 !== a
                    ? (n.enable(n.POLYGON_OFFSET_FILL), n.polygonOffset(a, r))
                    : n.disable(n.POLYGON_OFFSET_FILL),
                  (t.depthBias = r),
                  (t.slopeScaledDepthBias = a));
            }),
            e
          );
        })(),
        zi = (function () {
          function e() {
            (this.enabled = !1),
              (this.referenceValue = 0),
              (this.mask = 255),
              (this.writeMask = 255),
              (this.compareFunctionFront = _t.Always),
              (this.compareFunctionBack = _t.Always),
              (this.passOperationFront = gt.Keep),
              (this.passOperationBack = gt.Keep),
              (this.failOperationFront = gt.Keep),
              (this.failOperationBack = gt.Keep),
              (this.zFailOperationFront = gt.Keep),
              (this.zFailOperationBack = gt.Keep);
          }
          (e._getGLCompareFunction = function (e) {
            switch (e) {
              case _t.Never:
                return WebGLRenderingContext.NEVER;
              case _t.Less:
                return WebGLRenderingContext.LESS;
              case _t.Equal:
                return WebGLRenderingContext.EQUAL;
              case _t.LessEqual:
                return WebGLRenderingContext.LEQUAL;
              case _t.Greater:
                return WebGLRenderingContext.GREATER;
              case _t.NotEqual:
                return WebGLRenderingContext.NOTEQUAL;
              case _t.GreaterEqual:
                return WebGLRenderingContext.GEQUAL;
              case _t.Always:
                return WebGLRenderingContext.ALWAYS;
            }
          }),
            (e._getGLStencilOperation = function (e) {
              switch (e) {
                case gt.Keep:
                  return WebGLRenderingContext.KEEP;
                case gt.Zero:
                  return WebGLRenderingContext.ZERO;
                case gt.Replace:
                  return WebGLRenderingContext.REPLACE;
                case gt.IncrementSaturate:
                  return WebGLRenderingContext.INCR;
                case gt.DecrementSaturate:
                  return WebGLRenderingContext.DECR;
                case gt.Invert:
                  return WebGLRenderingContext.INVERT;
                case gt.IncrementWrap:
                  return WebGLRenderingContext.INCR_WRAP;
                case gt.DecrementWrap:
                  return WebGLRenderingContext.DECR_WRAP;
              }
            });
          var t = e.prototype;
          return (
            (t._apply = function (e, t) {
              this._platformApply(e, t.stencilState);
            }),
            (t._platformApply = function (t, n) {
              var i = t.gl,
                r = this.enabled,
                a = this.referenceValue,
                o = this.mask,
                s = this.compareFunctionFront,
                c = this.compareFunctionBack,
                u = this.failOperationFront,
                l = this.zFailOperationFront,
                d = this.passOperationFront,
                h = this.failOperationBack,
                f = this.zFailOperationBack,
                _ = this.passOperationBack,
                p = this.writeMask;
              if (
                (r != n.enabled &&
                  (r ? i.enable(i.STENCIL_TEST) : i.disable(WebGLRenderingContext.STENCIL_TEST), (n.enabled = r)),
                r)
              ) {
                var g = a !== n.referenceValue || o !== n.mask;
                (g || s !== n.compareFunctionFront) &&
                  (i.stencilFuncSeparate(i.FRONT, e._getGLCompareFunction(s), a, o), (n.compareFunctionFront = s)),
                  (g || c !== n.compareFunctionBack) &&
                    (i.stencilFuncSeparate(i.BACK, e._getGLCompareFunction(c), a, o),
                    (n.compareFunctionBack = this.compareFunctionBack)),
                  g && ((n.referenceValue = this.referenceValue), (n.mask = this.mask)),
                  (u === n.failOperationFront && l === n.zFailOperationFront && d === n.passOperationFront) ||
                    (i.stencilOpSeparate(
                      i.FRONT,
                      e._getGLStencilOperation(u),
                      e._getGLStencilOperation(l),
                      e._getGLStencilOperation(d)
                    ),
                    (n.failOperationFront = u),
                    (n.zFailOperationFront = l),
                    (n.passOperationFront = d)),
                  (h === n.failOperationBack && f === n.zFailOperationBack && _ === n.passOperationBack) ||
                    (i.stencilOpSeparate(
                      i.BACK,
                      e._getGLStencilOperation(h),
                      e._getGLStencilOperation(f),
                      e._getGLStencilOperation(_)
                    ),
                    (n.failOperationBack = h),
                    (n.zFailOperationBack = f),
                    (n.passOperationBack = _)),
                  p !== n.writeMask && (i.stencilMask(p), (n.writeMask = p));
              }
            }),
            e
          );
        })(),
        Bi = (function () {
          function e() {
            (this.blendState = new Li()),
              (this.depthState = new Fi()),
              (this.stencilState = new zi()),
              (this.rasterState = new Ii());
          }
          var t = e.prototype;
          return (
            (t._apply = function (e) {
              var t = e._hardwareRenderer,
                n = e._lastRenderState;
              this.blendState._apply(t, n),
                this.depthState._apply(t, n),
                this.stencilState._apply(t, n),
                this.rasterState._apply(t, n);
            }),
            e
          );
        })(),
        Di = new ut();
      Ri.init();
      var Ni,
        Gi,
        Ui,
        ki,
        Vi,
        Hi,
        Wi,
        ji,
        Xi,
        Ki,
        qi,
        Qi,
        Yi,
        Ji,
        Zi,
        $i,
        er,
        tr,
        nr,
        ir,
        rr,
        ar,
        or,
        sr,
        cr,
        ur,
        lr,
        dr,
        hr,
        fr,
        _r,
        pr,
        gr,
        vr,
        mr,
        yr,
        xr,
        br,
        wr,
        Ar,
        Tr,
        Mr,
        Cr = (function (e) {
          function t(t, n) {
            var i;
            return (
              (i = e.call(this, null) || this),
              (i._componentsManager = new Ge()),
              (i._hardwareRenderer = void 0),
              (i._lastRenderState = new Bi()),
              (i._renderCount = 0),
              (i._shaderProgramPools = []),
              (i._canvas = void 0),
              (i._resourceManager = new j(z(i))),
              (i._sceneManager = new vi(z(i))),
              (i._vSyncCount = 1),
              (i._targetFrameRate = 60),
              (i._time = new Re()),
              (i._isPaused = !0),
              (i._requestId = void 0),
              (i._timeoutId = void 0),
              (i._vSyncCounter = 1),
              (i._targetFrameInterval = 1e3 / 60),
              (i._animate = function () {
                i._vSyncCount
                  ? ((i._requestId = requestAnimationFrame(i._animate)),
                    i._vSyncCounter++ % i._vSyncCount === 0 && (i.update(), (i._vSyncCounter = 1)))
                  : ((i._timeoutId = window.setTimeout(i._animate, i._targetFrameInterval)), i.update());
              }),
              (i.features = []),
              (i._hardwareRenderer = n),
              i._hardwareRenderer.init(t),
              (i._canvas = t),
              Di.addObject(z(i)),
              (i._sceneManager.activeScene = new gi(z(i), "DefaultScene")),
              i
            );
          }
          S(t, e),
            A(t, [
              {
                key: "canvas",
                get: function () {
                  return this._canvas;
                }
              },
              {
                key: "resourceManager",
                get: function () {
                  return this._resourceManager;
                }
              },
              {
                key: "sceneManager",
                get: function () {
                  return this._sceneManager;
                }
              },
              {
                key: "time",
                get: function () {
                  return this._time;
                }
              },
              {
                key: "isPaused",
                get: function () {
                  return this._isPaused;
                }
              },
              {
                key: "vSyncCount",
                get: function () {
                  return this._vSyncCount;
                },
                set: function (e) {
                  this._vSyncCount = Math.max(0, Math.floor(e));
                }
              },
              {
                key: "targetFrameRate",
                get: function () {
                  return this._targetFrameRate;
                },
                set: function (e) {
                  (e = Math.max(1e-6, e)), (this._targetFrameRate = e), (this._targetFrameInterval = 1e3 / e);
                }
              },
              {
                key: "renderhardware",
                get: function () {
                  return this._hardwareRenderer;
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.createEntity = function (e) {
              return new ct(this, e);
            }),
            (n.pause = function () {
              (this._isPaused = !0), cancelAnimationFrame(this._requestId), clearTimeout(this._timeoutId);
            }),
            (n.resume = function () {
              this._isPaused && ((this._isPaused = !1), this.time.reset(), requestAnimationFrame(this._animate));
            }),
            (n.update = function () {
              var e = this._time,
                t = e.deltaTime;
              e.tick(), lt._restPool(), Di.callFeatureMethod(this, "preTick", [this, this._sceneManager._activeScene]);
              var n = this._sceneManager._activeScene,
                i = this._componentsManager;
              n &&
                (i.callScriptOnStart(),
                i.callScriptOnUpdate(t),
                i.callAnimationUpdate(t),
                i.callScriptOnLateUpdate(t),
                this._render(n)),
                this._componentsManager.callComponentDestory(),
                Di.callFeatureMethod(this, "postTick", [this, this._sceneManager._activeScene]);
            }),
            (n.run = function () {
              Di.callFeatureMethod(this, "preLoad", [this]), this.resume(), this.trigger(new q("run", this));
            }),
            (n.destroy = function () {
              this._sceneManager &&
                (this.trigger(new q("shutdown", this)),
                Di.callFeatureMethod(this, "shutdown", [this]),
                this.pause(),
                (this._animate = null),
                this._sceneManager._activeScene.destroy(),
                (this._sceneManager = null),
                this._resourceManager.gc(),
                (this._resourceManager = null),
                (this._canvas = null),
                (this.features = []),
                (this._time = null),
                (Di._objects = []));
            }),
            (n._getShaderProgramPool = function (e) {
              var t = e._shaderId,
                n = this._shaderProgramPools,
                i = n[t];
              if (!i) {
                var r = t + 1;
                r < n.length && (n.length = r), (n[t] = i = new Ei());
              }
              return i;
            }),
            (n._render = function (e) {
              var t = e._activeCameras,
                n = this._componentsManager,
                i = this.time.deltaTime;
              if ((n.callRendererOnUpdate(i), e._updateShaderData(), t.length > 0)) {
                t.sort(function (e, t) {
                  return e.priority - t.priority;
                });
                for (var r = 0, a = t.length; r < a; r++) {
                  var o = t[r],
                    s = o.entity;
                  o.enabled &&
                    s.isActiveInHierarchy &&
                    (n.callCameraOnBeginRender(o),
                    gi.sceneFeatureManager.callFeatureMethod(e, "preRender", [e, o]),
                    o.render(),
                    gi.sceneFeatureManager.callFeatureMethod(e, "postRender", [e, o]),
                    n.callCameraOnEndRender(o));
                }
              } else Se.debug("NO active camera.");
            }),
            (n.findFeature = function (e) {
              return Di.findFeature(this, e);
            }),
            (t.registerFeature = function (e) {
              Di.registerFeature(e);
            }),
            t
          );
        })(we),
        Pr = (function () {
          function e() {}
          return (
            A(e, null, [
              {
                key: "devicePixelRatio",
                get: function () {
                  return window.devicePixelRatio;
                }
              }
            ]),
            e
          );
        })(),
        Sr = (function () {
          function e() {}
          var t = e.prototype;
          return (
            (t.preLoad = function (e) {}),
            (t.preTick = function (e, t) {}),
            (t.postTick = function (e, t) {}),
            (t.shutdown = function (e) {}),
            e
          );
        })(),
        Rr =
          ((ji = (function (e) {
            function t() {
              for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
              return (
                (t = e.call.apply(e, [this].concat(i)) || this),
                G(t, "_started", Gi, z(t)),
                G(t, "_onStartIndex", Ui, z(t)),
                G(t, "_onUpdateIndex", ki, z(t)),
                G(t, "_onLateUpdateIndex", Vi, z(t)),
                G(t, "_onPreRenderIndex", Hi, z(t)),
                G(t, "_onPostRenderIndex", Wi, z(t)),
                t
              );
            }
            S(t, e);
            var n = t.prototype;
            return (
              (n.onAwake = function () {}),
              (n.onEnable = function () {}),
              (n.onStart = function () {}),
              (n.onUpdate = function (e) {}),
              (n.onLateUpdate = function (e) {}),
              (n.onBeginRender = function (e) {}),
              (n.onEndRender = function (e) {}),
              (n.onDisable = function () {}),
              (n.onDestroy = function () {}),
              (n._onAwake = function () {
                this.onAwake();
              }),
              (n._onEnable = function () {
                var e = this.engine._componentsManager,
                  n = t.prototype;
                this._started || e.addOnStartScript(this),
                  this.onUpdate !== n.onUpdate && e.addOnUpdateScript(this),
                  this.onLateUpdate !== n.onLateUpdate && e.addOnLateUpdateScript(this),
                  this.onEnable();
              }),
              (n._onDisable = function () {
                var e = this.engine._componentsManager;
                -1 !== this._onStartIndex && e.removeOnStartScript(this),
                  -1 !== this._onUpdateIndex && e.removeOnUpdateScript(this),
                  -1 !== this._onLateUpdateIndex && e.removeOnLateUpdateScript(this),
                  this.onDisable();
              }),
              (n._onDestroy = function () {
                this.engine._componentsManager.addDestoryComponent(this);
              }),
              t
            );
          })(at)),
          (Ni = ji),
          (Gi = U(Ni.prototype, "_started", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return !1;
            }
          })),
          (Ui = U(Ni.prototype, "_onStartIndex", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return -1;
            }
          })),
          (ki = U(Ni.prototype, "_onUpdateIndex", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return -1;
            }
          })),
          (Vi = U(Ni.prototype, "_onLateUpdateIndex", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return -1;
            }
          })),
          (Hi = U(Ni.prototype, "_onPreRenderIndex", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return -1;
            }
          })),
          (Wi = U(Ni.prototype, "_onPostRenderIndex", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return -1;
            }
          })),
          Ni),
        Er =
          ((or = ar = (function (e) {
            function t(n) {
              var i;
              (i = e.call(this, n) || this),
                G(i, "shaderData", Ki, z(i)),
                G(i, "isCulled", qi, z(i)),
                G(i, "_onUpdateIndex", Qi, z(i)),
                G(i, "_rendererIndex", Yi, z(i)),
                G(i, "_globalShaderMacro", Ji, z(i)),
                G(i, "_overrideUpdate", Zi, z(i)),
                G(i, "_transformChangeFlag", $i, z(i)),
                G(i, "_bounds", er, z(i)),
                G(i, "_mvMatrix", tr, z(i)),
                G(i, "_mvpMatrix", nr, z(i)),
                G(i, "_mvInvMatrix", ir, z(i)),
                G(i, "_normalMatrix", rr, z(i));
              var r = t.prototype;
              return (
                (i._overrideUpdate = i.update !== r.update),
                (i._transformChangeFlag = i.entity.transform.registerWorldChangeFlag()),
                i.shaderData._addRefCount(1),
                i
              );
            }
            S(t, e),
              A(t, [
                {
                  key: "bounds",
                  get: function () {
                    var e = this._transformChangeFlag;
                    return e.flag && (this._updateBounds(this._bounds), (e.flag = !1)), this._bounds;
                  }
                }
              ]);
            var n = t.prototype;
            return (
              (n._updateShaderData = function (e) {
                var n = this.shaderData,
                  i = this.entity.transform.worldMatrix,
                  r = this._mvMatrix,
                  a = this._mvpMatrix,
                  o = this._mvInvMatrix,
                  s = this._normalMatrix;
                _.multiply(e._camera.viewMatrix, i, r),
                  _.multiply(e._viewProjectMatrix, i, a),
                  _.invert(r, o),
                  _.invert(i, s),
                  s.transpose(),
                  n.setMatrix(t._localMatrixProperty, this.entity.transform.localMatrix),
                  n.setMatrix(t._worldMatrixProperty, i),
                  n.setMatrix(t._mvMatrixProperty, r),
                  n.setMatrix(t._mvpMatrixProperty, a),
                  n.setMatrix(t._mvInvMatrixProperty, o),
                  n.setMatrix(t._normalMatrixProperty, s);
              }),
              (n._onDestroy = function () {
                var e = this._transformChangeFlag;
                e && (e.destroy(), (this._transformChangeFlag = null)), this.shaderData._addRefCount(-1);
              }),
              (n.update = function (e) {}),
              (n._updateBounds = function (e) {}),
              (n._onEnable = function () {
                var e = this.engine._componentsManager;
                this._overrideUpdate && e.addOnUpdateRenderers(this), e.addRenderer(this);
              }),
              (n._onDisable = function () {
                var e = this.engine._componentsManager;
                this._overrideUpdate && e.removeOnUpdateRenderers(this), e.removeRenderer(this);
              }),
              (n._render = function (e) {
                this.render(e);
              }),
              t
            );
          })(at)),
          (ar._localMatrixProperty = Zn.getPropertyByName("u_localMat")),
          (ar._worldMatrixProperty = Zn.getPropertyByName("u_modelMat")),
          (ar._mvMatrixProperty = Zn.getPropertyByName("u_MVMat")),
          (ar._mvpMatrixProperty = Zn.getPropertyByName("u_MVPMat")),
          (ar._mvInvMatrixProperty = Zn.getPropertyByName("u_MVInvMat")),
          (ar._normalMatrixProperty = Zn.getPropertyByName("u_normalMat")),
          (Xi = or),
          (Ki = U(Xi.prototype, "shaderData", [Z], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new pi(jn.Renderer);
            }
          })),
          (qi = U(Xi.prototype, "isCulled", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return !1;
            }
          })),
          (Qi = U(Xi.prototype, "_onUpdateIndex", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return -1;
            }
          })),
          (Yi = U(Xi.prototype, "_rendererIndex", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return -1;
            }
          })),
          (Ji = U(Xi.prototype, "_globalShaderMacro", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new Ne();
            }
          })),
          (Zi = U(Xi.prototype, "_overrideUpdate", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return !1;
            }
          })),
          ($i = U(Xi.prototype, "_transformChangeFlag", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: null
          })),
          (er = U(Xi.prototype, "_bounds", [Z], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new c(new o(), new o());
            }
          })),
          (tr = U(Xi.prototype, "_mvMatrix", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new _();
            }
          })),
          (nr = U(Xi.prototype, "_mvpMatrix", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new _();
            }
          })),
          (ir = U(Xi.prototype, "_mvInvMatrix", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new _();
            }
          })),
          (rr = U(Xi.prototype, "_normalMatrix", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return new _();
            }
          })),
          Xi),
        Or = (function (e) {
          function t(t, n) {
            var i;
            return (
              (i = e.call(this, t) || this),
              (i.shader = void 0),
              (i.renderQueueType = vt.Opaque),
              (i.shaderData = new pi(jn.Material)),
              (i.renderState = new Bi()),
              (i.shader = n),
              i
            );
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.clone = function () {
              var e = new t(this._engine, this.shader);
              return this.cloneTo(e), e;
            }),
            (n.cloneTo = function (e) {
              (e.shader = this.shader),
                (e.renderQueueType = this.renderQueueType),
                this.shaderData.cloneTo(e.shaderData),
                re.deepCloneObject(this.renderState, e.renderState);
            }),
            (n._addRefCount = function (t) {
              e.prototype._addRefCount.call(this, t), this.shaderData._addRefCount(t);
            }),
            (n._preRender = function (e) {}),
            (n._onDestroy = function () {}),
            t
          );
        })(fi),
        Lr = 0,
        Fr = (function () {
          function e(e, t, n, i, r, a) {
            void 0 === e && (e = "RENDER_PASS" + Lr++),
              void 0 === t && (t = 0),
              void 0 === n && (n = null),
              void 0 === i && (i = null),
              void 0 === r && (r = null),
              void 0 === a && (a = new y(0, 0, 0, 0)),
              (this.name = void 0),
              (this.enabled = void 0),
              (this.priority = void 0),
              (this.renderTarget = void 0),
              (this.replaceMaterial = void 0),
              (this.mask = void 0),
              (this.renderOverride = void 0),
              (this.clearMode = void 0),
              (this._clearParam = void 0),
              (this.name = e),
              (this.enabled = !0),
              (this.priority = t),
              (this.renderTarget = n),
              (this.replaceMaterial = i),
              (this.mask = r || Ee.Everything),
              (this.renderOverride = !1),
              (this.clearMode = ue.SOLID_COLOR),
              (this._clearParam = a);
          }
          var t = e.prototype;
          return (
            (t.render = function (e, t) {}),
            (t.preRender = function (e, t) {}),
            (t.postRender = function (e, t) {}),
            A(e, [
              {
                key: "clearParam",
                get: function () {
                  return this._clearParam;
                },
                set: function (e) {
                  this._clearParam = e;
                }
              }
            ]),
            e
          );
        })(),
        Ir = (function (e) {
          function t(t, n) {
            var i;
            return (
              void 0 === t && (t = "SeparateSprite"),
              void 0 === n && (n = 10),
              (i = e.call(this, t, n) || this),
              (i._spriteItems = void 0),
              (i.clearMode = ue.DONT_CLEAR),
              (i.renderOverride = !0),
              (i._spriteItems = []),
              i
            );
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.preRender = function () {
              this.enabled = this.isUsed;
            }),
            (n.render = function (e) {
              var t = e.renderHardware;
              this._sortByDistance(e.eyePos);
              for (var n = this._spriteItems, i = e._renderPipeline._defaultSpriteMaterial, r = 0; r < n.length; r++) {
                var a = n[r];
                t.drawSprite(i, a.positionQuad, a.uvRect, a.tintColor, a.texture, a.renderMode, a.camera);
              }
              n.length = 0;
            }),
            (n.postRender = function (e) {
              this.enabled && e.renderHardware.flushSprite(e.engine, e._hardwareRenderer._defaultSpriteMaterial);
            }),
            (n._sortByDistance = function (e) {
              this._spriteItems.length > 1 &&
                (this._spriteItems = this._spriteItems.sort(function (t, n) {
                  if (t.component.renderPriority === n.component.renderPriority) {
                    var i = t.component.node.worldPosition,
                      r = n.component.node.worldPosition,
                      a = o.distanceSquared(r, e) - o.distanceSquared(i, e);
                    return a;
                  }
                  return t.component.renderPriority - n.component.renderPriority;
                }));
            }),
            (n.pushSprite = function (e, t, n, i, r, a, o) {
              this._spriteItems.push({
                component: e,
                positionQuad: t,
                uvRect: n,
                tintColor: i,
                texture: r,
                renderMode: a,
                camera: o
              });
            }),
            A(t, [
              {
                key: "isUsed",
                get: function () {
                  return this._spriteItems.length > 0;
                }
              }
            ]),
            t
          );
        })(Fr),
        zr = (function () {
          function e(e) {
            (this._defaultSpriteMaterial = void 0),
              (this._camera = void 0),
              (this._queue = void 0),
              (this._defaultPass = void 0),
              (this._renderPassArray = void 0),
              (this._canvasDepthPass = void 0),
              (this._separateSpritePass = void 0),
              (this._camera = e),
              (this._queue = new yt()),
              (this._renderPassArray = []),
              (this._defaultPass = new Fr("default", 0, null, null, 0)),
              this.addRenderPass(this._defaultPass),
              (this._defaultSpriteMaterial = new Or(e.engine, Zn.find("Sprite")));
          }
          var t = e.prototype;
          return (
            (t.addRenderPass = function (e, t, n, i, r, a) {
              if (
                (void 0 === t && (t = null),
                void 0 === n && (n = null),
                void 0 === i && (i = null),
                void 0 === r && (r = null),
                void 0 === a && (a = new y(0, 0, 0, 0)),
                "string" === typeof e)
              ) {
                var o = new Fr(e, t, n, i, r, a);
                this._renderPassArray.push(o);
              } else e instanceof Fr && this._renderPassArray.push(e);
              this._renderPassArray.sort(function (e, t) {
                return e.priority - t.priority;
              });
            }),
            (t.removeRenderPass = function (e) {
              var t;
              if (("string" === typeof e ? (t = this.getRenderPass(e)) : e instanceof Fr && (t = e), t)) {
                var n = this._renderPassArray.indexOf(t);
                this._renderPassArray.splice(n, 1);
              }
            }),
            (t.getRenderPass = function (e) {
              for (var t = 0, n = this._renderPassArray.length; t < n; t++) {
                var i = this._renderPassArray[t];
                if (i.name === e) return i;
              }
              return null;
            }),
            (t.destroy = function () {}),
            (t.render = function (e, t) {
              var n = this._camera,
                i = this._queue;
              i.clear(),
                n.engine._componentsManager.callRender(e),
                i.sort(n.entity.transform.worldPosition),
                this._canvasDepthPass && (this._canvasDepthPass.enabled = !1),
                this._separateSpritePass &&
                  this._separateSpritePass.isUsed &&
                  this._defaultPass.renderTarget &&
                  (this._canvasDepthPass ||
                    ((this._canvasDepthPass = new Fr("CanvasDepthRenderPass", 0, null, null, 0)),
                    (this._canvasDepthPass.clearMode = ue.DONT_CLEAR),
                    this.addRenderPass(this._canvasDepthPass)),
                  (this._canvasDepthPass.enabled = !0));
              for (var r = 0, a = this._renderPassArray.length; r < a; r++)
                this._drawRenderPass(this._renderPassArray[r], n, t);
            }),
            (t._drawRenderPass = function (e, t, n) {
              if ((e.preRender(t, this.queue), e.enabled)) {
                var i = t.scene.engine._hardwareRenderer,
                  r = t.renderTarget || e.renderTarget;
                i.activeRenderTarget(r, t),
                  i.setRenderTargetFace(r, n),
                  i.clearRenderTarget(e.clearMode, e.clearParam),
                  e.renderOverride ? e.render(t, this.queue) : this.queue.render(t, e.replaceMaterial, e.mask),
                  i.blitRenderTarget(r);
              }
              e.postRender(t, this.queue);
            }),
            (t.pushPrimitive = function (e) {
              this._queue.pushPrimitive(e);
            }),
            (t.pushSprite = function (e, t, n, i, r, a, o) {
              if (e.separateDraw)
                return (
                  this._separateSpritePass ||
                    ((this._separateSpritePass = new Ir()), this.addRenderPass(this._separateSpritePass)),
                  void this._separateSpritePass.pushSprite(e, t, n, i, r, a, o)
                );
              this.queue.pushSprite(e, t, n, i, r, a, o);
            }),
            A(e, [
              {
                key: "defaultRenderPass",
                get: function () {
                  return this._defaultPass;
                }
              },
              {
                key: "queue",
                get: function () {
                  return this._queue;
                }
              }
            ]),
            e
          );
        })(),
        Br = (function () {
          function e() {
            (this._camera = void 0), (this._viewProjectMatrix = new _());
          }
          return (
            (e._getRenderContext = function (t) {
              var n = e._renderContext;
              return (n._camera = t), _.multiply(t.projectionMatrix, t.viewMatrix, n._viewProjectMatrix), n;
            }),
            e
          );
        })();
      Br._renderContext = new Br();
      var Dr,
        Nr = function () {};
      (Nr.tempMat4 = new _()),
        (Nr.tempVec4 = new y()),
        (Nr.tempVec3 = new o()),
        (function (e) {
          (e[(e["DepthSky"] = 0)] = "DepthSky"),
            (e[(e["DepthColor"] = 1)] = "DepthColor"),
            (e[(e["Depth"] = 2)] = "Depth"),
            (e[(e["None"] = 3)] = "None");
        })(Dr || (Dr = {}));
      var Gr =
          ((sr = Ve(st)),
          sr(
            ((Mr = Tr = (function (e) {
              function t(t) {
                var n;
                (n = e.call(this, t) || this),
                  (n.priority = 0),
                  (n.enableFrustumCulling = !0),
                  (n.cullingMask = Ee.Everything),
                  (n.shaderData = new pi(jn.Camera)),
                  (n._globalShaderMacro = new Ne()),
                  G(n, "_frustum", lr, z(n)),
                  G(n, "_renderPipeline", dr, z(n)),
                  (n._isOrthographic = !1),
                  (n._isProjMatSetting = !1),
                  (n._clearMode = ue.SOLID_COLOR),
                  (n._nearClipPlane = 0.1),
                  (n._farClipPlane = 100),
                  (n._fieldOfView = 45),
                  (n._orthographicSize = 10),
                  (n._isProjectionDirty = !0),
                  (n._isInvProjMatDirty = !0),
                  (n._isFrustumProjectDirty = !0),
                  (n._customAspectRatio = void 0),
                  (n._renderTarget = null),
                  G(n, "_frustumViewChangeFlag", hr, z(n)),
                  G(n, "_transform", fr, z(n)),
                  G(n, "_isViewMatrixDirty", _r, z(n)),
                  G(n, "_isInvViewProjDirty", pr, z(n)),
                  G(n, "_projectionMatrix", gr, z(n)),
                  G(n, "_viewMatrix", vr, z(n)),
                  G(n, "_backgroundColor", mr, z(n)),
                  G(n, "_viewport", yr, z(n)),
                  G(n, "_inverseProjectionMatrix", xr, z(n)),
                  G(n, "_inverseViewMatrix", br, z(n)),
                  G(n, "_lastAspectSize", wr, z(n)),
                  G(n, "_invViewProjMat", Ar, z(n));
                var i = n.entity.transform;
                return (
                  (n._transform = i),
                  (n._isViewMatrixDirty = i.registerWorldChangeFlag()),
                  (n._isInvViewProjDirty = i.registerWorldChangeFlag()),
                  (n._frustumViewChangeFlag = i.registerWorldChangeFlag()),
                  (n._renderPipeline = new zr(z(n))),
                  n.shaderData._addRefCount(1),
                  n.setClearMode(),
                  n
                );
              }
              S(t, e),
                A(t, [
                  {
                    key: "nearClipPlane",
                    get: function () {
                      return this._nearClipPlane;
                    },
                    set: function (e) {
                      (this._nearClipPlane = e), this._projMatChange();
                    }
                  },
                  {
                    key: "farClipPlane",
                    get: function () {
                      return this._farClipPlane;
                    },
                    set: function (e) {
                      (this._farClipPlane = e), this._projMatChange();
                    }
                  },
                  {
                    key: "fieldOfView",
                    get: function () {
                      return this._fieldOfView;
                    },
                    set: function (e) {
                      (this._fieldOfView = e), this._projMatChange();
                    }
                  },
                  {
                    key: "aspectRatio",
                    get: function () {
                      var e,
                        t = this._entity.engine.canvas;
                      return null != (e = this._customAspectRatio)
                        ? e
                        : (t.width * this._viewport.z) / (t.height * this._viewport.w);
                    },
                    set: function (e) {
                      (this._customAspectRatio = e), this._projMatChange();
                    }
                  },
                  {
                    key: "viewport",
                    get: function () {
                      return this._viewport;
                    },
                    set: function (e) {
                      e !== this._viewport && e.cloneTo(this._viewport), this._projMatChange();
                    }
                  },
                  {
                    key: "isOrthographic",
                    get: function () {
                      return this._isOrthographic;
                    },
                    set: function (e) {
                      (this._isOrthographic = e), this._projMatChange();
                    }
                  },
                  {
                    key: "orthographicSize",
                    get: function () {
                      return this._orthographicSize;
                    },
                    set: function (e) {
                      (this._orthographicSize = e), this._projMatChange();
                    }
                  },
                  {
                    key: "clearFlags",
                    get: function () {
                      throw "not implemented";
                    },
                    set: function (e) {
                      throw "not implemented";
                    }
                  },
                  {
                    key: "backgroundColor",
                    get: function () {
                      return this._backgroundColor;
                    },
                    set: function (e) {
                      this.setClearMode(this._clearMode, e);
                    }
                  },
                  {
                    key: "backgroundSky",
                    get: function () {
                      throw new Error("\u63a5\u53e3\u672a\u5b9e\u73b0");
                    }
                  },
                  {
                    key: "viewMatrix",
                    get: function () {
                      return (
                        this._isViewMatrixDirty.flag &&
                          ((this._isViewMatrixDirty.flag = !1),
                          _.invert(this._transform.worldMatrix, this._viewMatrix)),
                        this._viewMatrix
                      );
                    }
                  },
                  {
                    key: "projectionMatrix",
                    set: function (e) {
                      (this._projectionMatrix = e), (this._isProjMatSetting = !0), this._projMatChange();
                    },
                    get: function () {
                      var e = this._entity.engine.canvas;
                      if (
                        (!this._isProjectionDirty || this._isProjMatSetting) &&
                        this._lastAspectSize.x === e.width &&
                        this._lastAspectSize.y === e.height
                      )
                        return this._projectionMatrix;
                      (this._isProjectionDirty = !1),
                        (this._lastAspectSize.x = e.width),
                        (this._lastAspectSize.y = e.height);
                      var t = this.aspectRatio;
                      if (this._isOrthographic) {
                        var n = this._orthographicSize * t,
                          i = this._orthographicSize;
                        _.ortho(-n, n, -i, i, this._nearClipPlane, this._farClipPlane, this._projectionMatrix);
                      } else
                        _.perspective(
                          a.degreeToRadian(this._fieldOfView),
                          t,
                          this._nearClipPlane,
                          this._farClipPlane,
                          this._projectionMatrix
                        );
                      return this._projectionMatrix;
                    }
                  },
                  {
                    key: "enableHDR",
                    get: function () {
                      return console.log("not implemention"), !1;
                    },
                    set: function (e) {
                      console.log("not implemention");
                    }
                  },
                  {
                    key: "renderTarget",
                    get: function () {
                      return this._renderTarget;
                    },
                    set: function (e) {
                      this._renderTarget = e;
                    }
                  }
                ]);
              var n = t.prototype;
              return (
                (n.resetProjectionMatrix = function () {
                  (this._isProjMatSetting = !1), this._projMatChange();
                }),
                (n.resetAspectRatio = function () {
                  (this._customAspectRatio = void 0), this._projMatChange();
                }),
                (n.worldToViewportPoint = function (e, t) {
                  _.multiply(this.projectionMatrix, this.viewMatrix, Nr.tempMat4),
                    Nr.tempVec4.setValue(e.x, e.y, e.z, 1),
                    y.transform(Nr.tempVec4, Nr.tempMat4, Nr.tempVec4);
                  var n = Nr.tempVec4.w,
                    i = Nr.tempVec4.x / n,
                    r = Nr.tempVec4.y / n,
                    a = Nr.tempVec4.z / n;
                  return (t.x = 0.5 * (i + 1)), (t.y = 0.5 * (1 - r)), (t.z = a), (t.w = n), t;
                }),
                (n.viewportToWorldPoint = function (e, t) {
                  var n = this.invViewProjMat;
                  return this._innerViewportToWorldPoint(e, n, t);
                }),
                (n.viewportPointToRay = function (e, t) {
                  var n = Nr.tempVec3;
                  n.setValue(e.x, e.y, 0);
                  var i = this.viewportToWorldPoint(n, t.origin);
                  n.z = 1;
                  var r = this._innerViewportToWorldPoint(n, this._invViewProjMat, n);
                  return o.subtract(r, i, t.direction), t.direction.normalize(), t;
                }),
                (n.screenToViewportPoint = function (e, t) {
                  var n = this.engine.canvas,
                    i = this.viewport;
                  return (t.x = (e.x / n.width - i.x) / i.z), (t.y = (e.y / n.height - i.y) / i.w), t;
                }),
                (n.viewportToScreenPoint = function (e, t) {
                  var n = this.engine.canvas,
                    i = this.viewport;
                  return (t.x = (i.x + e.x * i.z) * n.width), (t.y = (i.y + e.y * i.w) * n.height), t;
                }),
                (n.worldToScreenPoint = function (e, t) {
                  return this.worldToViewportPoint(e, t), this.viewportToScreenPoint(t, t);
                }),
                (n.screenToWorldPoint = function (e, t) {
                  return this.screenToViewportPoint(e, t), this.viewportToWorldPoint(t, t);
                }),
                (n.render = function (e) {
                  var t = Br._getRenderContext(this);
                  this.enableFrustumCulling &&
                    (this._frustumViewChangeFlag.flag || this._isFrustumProjectDirty) &&
                    (this._frustum.calculateFromMatrix(t._viewProjectMatrix),
                    (this._frustumViewChangeFlag.flag = !1),
                    (this._isFrustumProjectDirty = !1)),
                    this._updateShaderData(t),
                    Ne.unionCollection(
                      this.scene.shaderData._macroCollection,
                      this.shaderData._macroCollection,
                      this._globalShaderMacro
                    ),
                    this._renderPipeline.render(t, e),
                    this._engine._renderCount++;
                }),
                (n._onActive = function () {
                  this.entity.scene.attachRenderCamera(this);
                }),
                (n._onInActive = function () {
                  this.entity.scene.detachRenderCamera(this);
                }),
                (n._onDestroy = function () {
                  var e;
                  null === (e = this._renderPipeline) || void 0 === e || e.destroy(),
                    this._isInvViewProjDirty.destroy(),
                    this._isViewMatrixDirty.destroy(),
                    this.shaderData._addRefCount(-1);
                }),
                (n._projMatChange = function () {
                  (this._isFrustumProjectDirty = !0),
                    (this._isProjectionDirty = !0),
                    (this._isInvProjMatDirty = !0),
                    (this._isInvViewProjDirty.flag = !0);
                }),
                (n._innerViewportToWorldPoint = function (e, t, n) {
                  var i = 2 * e.z - 1,
                    r = Nr.tempVec4;
                  r.setValue(2 * e.x - 1, 1 - 2 * e.y, i, 1), y.transform(r, t, r);
                  var a = 1 / r.w;
                  return (n.x = r.x * a), (n.y = r.y * a), (n.z = r.z * a), n;
                }),
                (n._updateShaderData = function (e) {
                  var n = this.shaderData;
                  n.setMatrix(t._viewMatrixProperty, this.viewMatrix),
                    n.setMatrix(t._projectionMatrixProperty, this.projectionMatrix),
                    n.setMatrix(t._vpMatrixProperty, e._viewProjectMatrix),
                    n.setMatrix(t._inverseViewMatrixProperty, this.inverseViewMatrix),
                    n.setMatrix(t._inverseProjectionMatrixProperty, this.inverseProjectionMatrix),
                    n.setVector3(t._cameraPositionProperty, this._transform.worldPosition);
                }),
                (n.setClearMode = function (e, t) {
                  void 0 === e && (e = ue.SOLID_COLOR),
                    void 0 === t && (t = new y(0.25, 0.25, 0.25, 1)),
                    (this._clearMode = e),
                    (this._backgroundColor = t),
                    (this._renderPipeline.defaultRenderPass.clearParam = t),
                    (this._renderPipeline.defaultRenderPass.clearMode = e);
                }),
                A(t, [
                  {
                    key: "invViewProjMat",
                    get: function () {
                      return (
                        this._isInvViewProjDirty.flag &&
                          ((this._isInvViewProjDirty.flag = !1),
                          _.multiply(this.inverseViewMatrix, this.inverseProjectionMatrix, this._invViewProjMat)),
                        this._invViewProjMat
                      );
                    }
                  },
                  {
                    key: "inverseProjectionMatrix",
                    get: function () {
                      return (
                        this._isInvProjMatDirty &&
                          ((this._isInvProjMatDirty = !1),
                          _.invert(this.projectionMatrix, this._inverseProjectionMatrix)),
                        this._inverseProjectionMatrix
                      );
                    }
                  },
                  {
                    key: "inverseViewMatrix",
                    get: function () {
                      return this._transform.worldMatrix.cloneTo(this._inverseViewMatrix), this._inverseViewMatrix;
                    }
                  }
                ]),
                t
              );
            })(at)),
            (Tr._viewMatrixProperty = Zn.getPropertyByName("u_viewMat")),
            (Tr._projectionMatrixProperty = Zn.getPropertyByName("u_projMat")),
            (Tr._vpMatrixProperty = Zn.getPropertyByName("u_VPMat")),
            (Tr._inverseViewMatrixProperty = Zn.getPropertyByName("u_viewInvMat")),
            (Tr._inverseProjectionMatrixProperty = Zn.getPropertyByName("u_projInvMat")),
            (Tr._cameraPositionProperty = Zn.getPropertyByName("u_cameraPos")),
            (ur = Mr),
            (lr = U(ur.prototype, "_frustum", [Z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new d();
              }
            })),
            (dr = U(ur.prototype, "_renderPipeline", [Q], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null
            })),
            (hr = U(ur.prototype, "_frustumViewChangeFlag", [Q], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null
            })),
            (fr = U(ur.prototype, "_transform", [Q], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null
            })),
            (_r = U(ur.prototype, "_isViewMatrixDirty", [Q], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null
            })),
            (pr = U(ur.prototype, "_isInvViewProjDirty", [Q], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: null
            })),
            (gr = U(ur.prototype, "_projectionMatrix", [Z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new _();
              }
            })),
            (vr = U(ur.prototype, "_viewMatrix", [Z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new _();
              }
            })),
            (mr = U(ur.prototype, "_backgroundColor", [Z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new y();
              }
            })),
            (yr = U(ur.prototype, "_viewport", [Z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new y(0, 0, 1, 1);
              }
            })),
            (xr = U(ur.prototype, "_inverseProjectionMatrix", [Z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new _();
              }
            })),
            (br = U(ur.prototype, "_inverseViewMatrix", [Z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new _();
              }
            })),
            (wr = U(ur.prototype, "_lastAspectSize", [Z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new m(0, 0);
              }
            })),
            (Ar = U(ur.prototype, "_invViewProjMat", [Z], {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              initializer: function () {
                return new _();
              }
            })),
            (cr = ur))
          ) || cr),
        Ur = {
          json: "json",
          gltf: "json",
          mtl: "json",
          prefab: "json",
          txt: "text",
          bin: "arraybuffer",
          png: "image",
          webp: "image",
          jpg: "image"
        },
        kr = 4,
        Vr = 15e3,
        Hr = 500;
      function Wr(e, t) {
        return (
          void 0 === t && (t = {}),
          new k(function (n, i, r) {
            var a,
              o,
              s,
              c,
              u = null != (a = t.retryCount) ? a : kr,
              l = null != (o = t.retryInterval) ? o : Hr;
            (t.timeout = null != (s = t.timeout) ? s : Vr), (t.type = null != (c = t.type) ? c : Kr(e));
            var d,
              h = "image" === t.type ? jr : Xr,
              f = new Qr(
                function () {
                  return h(e, t)
                    .onProgress(r)
                    .then(function (e) {
                      n(e), f.stop();
                    })
                    ["catch"](function (e) {
                      return (d = e);
                    });
                },
                u,
                l
              );
            f.start(function () {
              i(d);
            });
          })
        );
      }
      function jr(e, t) {
        return new k(function (n, i) {
          var r = t.timeout,
            a = new Image(),
            o = function () {
              i(new Error("request " + e + " fail"));
            };
          (a.onerror = o), (a.onabort = o);
          var s = setTimeout(function () {
            i(new Error("request " + e + " timeout"));
          }, r);
          (a.onload = (function (e) {
            return function () {
              n(a), clearTimeout(e);
            };
          })(s)),
            (a.crossOrigin = "anonymous"),
            (a.src = e);
        });
      }
      function Xr(e, t) {
        return new k(function (n, i, r) {
          var a,
            o = new XMLHttpRequest();
          (o.timeout = t.timeout),
            (t.method = null != (a = t.method) ? a : "get"),
            (o.onload = function () {
              var t;
              if (o.status < 200 || o.status >= 300) i(new Error("request failed from: " + e));
              else {
                var r = null != (t = o.response) ? t : o.responseText;
                n(r);
              }
            }),
            (o.onerror = function () {
              i(new Error("request failed from: " + e));
            }),
            (o.ontimeout = function () {
              i(new Error("request timeout from: " + e));
            }),
            (o.onprogress = function (e) {
              r(e.loaded / e.total);
            }),
            o.open(t.method, e, !0),
            (o.withCredentials = "include" === t.credentials),
            (o.responseType = t.type);
          var s = t.headers;
          s &&
            Object.keys(s).forEach(function (e) {
              o.setRequestHeader(e, s[e]);
            }),
            o.send(t.body);
        });
      }
      function Kr(e) {
        var t = e.substring(e.lastIndexOf(".") + 1);
        return Ur[t];
      }
      var qr,
        Qr = (function () {
          function e(e, t, n) {
            (this.execFunc = e),
              (this.totalCount = t),
              (this.interval = n),
              (this._timeoutId = -100),
              (this._currentCount = 0),
              (this.done = void 0),
              (this.exec = this.exec.bind(this));
          }
          var t = e.prototype;
          return (
            (t.start = function (e) {
              (this.done = e), this.exec();
            }),
            (t.stop = function () {
              clearTimeout(this._timeoutId);
            }),
            (t.exec = function () {
              var e = this;
              this._currentCount >= this.totalCount
                ? this.done && this.done()
                : (this._currentCount++,
                  this.execFunc(this._currentCount).then(function () {
                    e._timeoutId = setTimeout(e.exec, e.interval);
                  }));
            }),
            e
          );
        })(),
        Yr = function (e) {
          (this.useCache = e), (this.request = Wr);
        };
      (function (e) {
        (e[(e["Text"] = 0)] = "Text"),
          (e[(e["JSON"] = 1)] = "JSON"),
          (e[(e["Buffer"] = 2)] = "Buffer"),
          (e[(e["Texture2D"] = 3)] = "Texture2D"),
          (e[(e["TextureCube"] = 4)] = "TextureCube"),
          (e[(e["Material"] = 5)] = "Material"),
          (e[(e["Mesh"] = 6)] = "Mesh"),
          (e[(e["AnimationClip"] = 7)] = "AnimationClip"),
          (e[(e["Perfab"] = 8)] = "Perfab"),
          (e[(e["KTX"] = 9)] = "KTX"),
          (e[(e["KTXCube"] = 10)] = "KTXCube");
      })(qr || (qr = {}));
      var Jr = (function (e) {
          function t() {
            var t;
            return (t = e.call(this) || this), (t.colliders = void 0), (t.colliders = []), t;
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.attachCollider = function (e) {
              this.colliders.push(e);
            }),
            (n.detachCollider = function (e) {
              var t = this.colliders.indexOf(e);
              -1 != t && this.colliders.splice(t, 1);
            }),
            t
          );
        })(mt),
        Zr = (function (e) {
          function t(t) {
            return e.call(this, t) || this;
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n._onEnable = function () {
              this.scene.findFeature(Jr).attachCollider(this);
            }),
            (n._onDisable = function () {
              this.scene.findFeature(Jr).detachCollider(this);
            }),
            t
          );
        })(at),
        $r = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, t) || this),
              (n.boxMin = void 0),
              (n.boxMax = void 0),
              (n._corners = []),
              (n._cornerFlag = !1),
              (n.boxMin = new o(-0.5, -0.5, -0.5)),
              (n.boxMax = new o(0.5, 0.5, 0.5)),
              n
            );
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.setBoxMinMax = function (e, t) {
              (this.boxMin = e), (this.boxMax = t), (this._cornerFlag = !0);
            }),
            (n.setBoxCenterSize = function (e, n) {
              var i = t._tempVec3;
              o.scale(n, 0.5, i), o.add(e, i, this.boxMax), o.subtract(e, i, this.boxMin), (this._cornerFlag = !0);
            }),
            (n.getCorners = function () {
              if (this._cornerFlag) {
                var e = this.boxMin.x,
                  t = this.boxMin.y,
                  n = this.boxMin.z,
                  i = this.boxMax.x - e,
                  r = this.boxMax.y - t,
                  a = this.boxMax.z - n;
                if (0 === this._corners.length) for (var s = 0; s < 8; ++s) this._corners.push(new o());
                this._corners[0].setValue(e + i, t + r, n + a),
                  this._corners[1].setValue(e, t + r, n + a),
                  this._corners[2].setValue(e, t, n + a),
                  this._corners[3].setValue(e + i, t, n + a),
                  this._corners[4].setValue(e + i, t + r, n),
                  this._corners[5].setValue(e, t + r, n),
                  this._corners[6].setValue(e, t, n),
                  this._corners[7].setValue(e + i, t, n),
                  (this._cornerFlag = !1);
              }
              return this._corners;
            }),
            t
          );
        })(Zr);
      $r._tempVec3 = new o();
      var ea = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, t) || this),
              (n.center = void 0),
              (n.radius = void 0),
              (n.center = new o()),
              (n.radius = 1),
              n
            );
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.setSphere = function (e, t) {
              (this.center = e), (this.radius = t);
            }),
            t
          );
        })(Zr),
        ta = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, t) || this),
              (n.planePoint = void 0),
              (n.normal = void 0),
              (n.planePoint = new o()),
              (n.normal = new o(0, 1, 0)),
              n
            );
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.setPlane = function (e, t) {
              (this.planePoint = e), (this.normal = t);
            }),
            t
          );
        })(Zr),
        na = function () {
          (this.distance = void 0),
            (this.collider = void 0),
            (this.point = void 0),
            (this.distance = Number.MAX_SAFE_INTEGER),
            (this.collider = null),
            (this.point = null);
        },
        ia = new o(),
        ra = new l(),
        aa = new c(),
        oa = new s();
      function sa(e, t, n, i, r) {
        var a = ia;
        t.getPoint(n, a),
          o.transformCoordinate(a, e.entity.transform.worldMatrix, a),
          (i.distance = o.distance(r, a)),
          (i.collider = e),
          (i.point = a);
      }
      function ca(e, t) {
        var n = e.entity.getInvModelMatrix(),
          i = new o();
        o.transformCoordinate(t.origin, n, i);
        var r = new o();
        return ua(r, t.direction, n), new p(i, r);
      }
      function ua(e, t, n) {
        var i = t.x,
          r = t.y,
          a = t.z,
          o = n.elements;
        return (
          (e.x = i * o[0] + r * o[4] + a * o[8]),
          (e.y = i * o[1] + r * o[5] + a * o[9]),
          (e.z = i * o[2] + r * o[6] + a * o[10]),
          e
        );
      }
      (gi.prototype.raycast = function (e, t, n) {
        void 0 === n && (n = Ee.Everything);
        for (
          var i = new p(e.origin, e.direction),
            r = this.findFeature(Jr),
            a = r.colliders,
            o = new na(),
            s = 0,
            c = a.length;
          s < c;
          s++
        ) {
          var u = a[s];
          if (u.entity.isActiveInHierarchy && u.entity.tag & n) {
            var l = new na();
            u.raycast(i, l) && l.distance < o.distance && (o = l);
          }
        }
        return t && o.collider && o.point.cloneTo(t), o.collider;
      }),
        ($r.prototype.raycast = function (e, t) {
          var n = ca(this, e);
          this.boxMin.cloneTo(aa.min), this.boxMax.cloneTo(aa.max);
          var i = n.intersectBox(aa);
          return -1 !== i && (sa(this, n, i, t, e.origin), !0);
        }),
        (ea.prototype.raycast = function (e, t) {
          var n = ca(this, e);
          this.center.cloneTo(oa.center), (oa.radius = this.radio);
          var i = n.intersectSphere(oa);
          return -1 !== i && (sa(this, n, i, t, e.origin), !0);
        }),
        (ta.prototype.raycast = function (e, t) {
          var n = ca(this, e);
          this.normal.cloneTo(ra.normal), (ra.distance = -o.dot(this.planePoint, ra.normal));
          var i = n.intersectPlane(ra);
          return -1 !== i && (sa(this, n, i, t, e.origin), !0);
        });
      var la,
        da,
        ha,
        fa,
        _a = (function (e) {
          function t(t, n) {
            var i;
            return (
              (i = e.call(this, t) || this),
              (i.name = void 0),
              (i.primitives = []),
              (i.groups = []),
              (i.weights = void 0),
              (i.bounds = new c(new o(), new o())),
              (i.name = n),
              i
            );
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.updatePrimitiveWeightsIndices = function (e) {}),
            (n.destroy = function () {
              this.primitives = null;
            }),
            t
          );
        })(be),
        pa = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, null) || this),
              (n.inverseBindMatrices = void 0),
              (n.joints = void 0),
              (n.skeleton = void 0),
              (n.inverseBindMatrices = []),
              (n.joints = []),
              (n.skeleton = "none"),
              n
            );
          }
          return S(t, e), t;
        })(be);
      function ga(e, t) {
        for (var n = e.primitives, i = 0, r = n.length; i < r; i++) n[i]._addRefCount(t);
      }
      var va,
        ma,
        ya,
        xa,
        ba,
        wa,
        Aa,
        Ta,
        Ma,
        Ca,
        Pa,
        Sa,
        Ra =
          ((fa = (function (e) {
            function t(t) {
              var n;
              return (
                (n = e.call(this, t) || this),
                (n._mesh = void 0),
                G(n, "_instanceMaterials", da, z(n)),
                G(n, "_sharedMaterials", ha, z(n)),
                (n._mesh = null),
                n
              );
            }
            S(t, e);
            var n = t.prototype;
            return (
              (n.setSharedMaterial = function (e, t) {
                this._sharedMaterials[e] && this._sharedMaterials[e]._addRefCount(-1),
                  t._addRefCount(1),
                  (this._sharedMaterials[e] = t);
              }),
              (n.setMaterial = function (e, t) {
                this._instanceMaterials[e] && this._instanceMaterials[e]._addRefCount(-1),
                  t._addRefCount(1),
                  (this._instanceMaterials[e] = t);
              }),
              (n.getInstanceMaterial = function (e) {
                return this._instanceMaterials[e];
              }),
              (n.getSharedMaterial = function (e) {
                return this._sharedMaterials[e];
              }),
              (n.render = function (e) {
                var t = this._mesh;
                if (t)
                  for (var n = e._renderPipeline, i = t.primitives, r = t.groups, a = 0, o = i.length; a < o; a++) {
                    var s = i[a],
                      c = this._instanceMaterials[a] || this._sharedMaterials[a];
                    if (c) {
                      var u = lt.getFromPool();
                      u.setValue(this, s, r[a], c), n.pushPrimitive(u);
                    } else Se.error("Primitive has no material: " + s.name);
                  }
              }),
              (n.destroy = function () {
                e.prototype.destroy.call(this),
                  (this._mesh = null),
                  (this._instanceMaterials = []),
                  (this._sharedMaterials = []);
                for (var t = 0; t < this._instanceMaterials.length; t++) this._instanceMaterials[t]._addRefCount(-1);
                for (var n = 0; n < this._sharedMaterials.length; n++) this._sharedMaterials[n]._addRefCount(-1);
                this._mesh && ga(this._mesh, -1);
              }),
              (n._updateBounds = function (e) {
                var t = this.mesh.bounds,
                  n = this._entity.transform.worldMatrix;
                c.transform(t, n, e);
              }),
              A(t, [
                {
                  key: "mesh",
                  get: function () {
                    return this._mesh;
                  },
                  set: function (e) {
                    this._mesh && ga(this._mesh, -1),
                      ga(e, 1),
                      (this._mesh = e),
                      (this._sharedMaterials = []),
                      (this._instanceMaterials = []);
                  }
                }
              ]),
              t
            );
          })(Er)),
          (la = fa),
          (da = U(la.prototype, "_instanceMaterials", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return [];
            }
          })),
          (ha = U(la.prototype, "_sharedMaterials", [J], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return [];
            }
          })),
          la),
        Ea = (function (e) {
          function t(t, n, i, r, a) {
            var o;
            void 0 === r && (r = di.R8G8B8A8),
              void 0 === a && (a = !0),
              (o = e.call(this, t) || this),
              (o._format = void 0),
              (o._compressedMipFilled = 0);
            var s = t._hardwareRenderer,
              c = s.gl,
              u = s.isWebGL2;
            if (!_i._supportTextureFormat(r, s)) throw new Error("Texture format is not supported:" + di[r]);
            !a ||
              u ||
              (_i._isPowerOf2(n) && _i._isPowerOf2(i)) ||
              (Se.warn(
                "non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap"
              ),
              (a = !1));
            var l = _i._getFormatDetail(r, c, u);
            return (
              (o._glTexture = c.createTexture()),
              (o._formatDetail = l),
              (o._rhi = s),
              (o._target = c.TEXTURE_2D),
              (o._mipmap = a),
              (o._width = n),
              (o._height = i),
              (o._format = r),
              (o._mipmapCount = o._getMipmapCount()),
              (l.isCompressed && !u) || o._initMipmap(!1),
              (o.filterMode = li.Bilinear),
              (o.wrapModeU = o.wrapModeV = hi.Repeat),
              o
            );
          }
          S(t, e),
            A(t, [
              {
                key: "format",
                get: function () {
                  return this._format;
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.setPixelBuffer = function (e, t, n, i, r, a) {
              void 0 === t && (t = 0);
              var o = this._rhi.gl,
                s = this._rhi.isWebGL2,
                c = this._formatDetail,
                u = c.internalFormat,
                l = c.baseFormat,
                d = c.dataType,
                h = c.isCompressed,
                f = Math.max(1, this._width >> t),
                _ = Math.max(1, this._height >> t);
              if (
                ((n = n || 0),
                (i = i || 0),
                (r = r || f - n),
                (a = a || _ - i),
                this._bind(),
                o.pixelStorei(o.UNPACK_FLIP_Y_WEBGL, 0),
                o.pixelStorei(o.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0),
                h)
              ) {
                var p = 1 << t;
                s || this._compressedMipFilled & p
                  ? o.compressedTexSubImage2D(this._target, t, n, i, r, a, u, e)
                  : (o.compressedTexImage2D(this._target, t, u, r, a, 0, e), (this._compressedMipFilled |= p));
              } else o.texSubImage2D(this._target, t, n, i, r, a, l, d, e);
              this._unbind();
            }),
            (n.setImageSource = function (e, t, n, i, r, a) {
              void 0 === t && (t = 0), void 0 === n && (n = !1), void 0 === i && (i = !1);
              var o = this._rhi.gl,
                s = this._formatDetail,
                c = s.baseFormat,
                u = s.dataType;
              this._bind(),
                o.pixelStorei(o.UNPACK_FLIP_Y_WEBGL, +n),
                o.pixelStorei(o.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +i),
                o.texSubImage2D(this._target, t, r || 0, a || 0, c, u, e),
                this._unbind();
            }),
            (n.getPixelBuffer = function (t, n, i, r, a) {
              if (this._formatDetail.isCompressed) throw new Error("Unable to read compressed texture");
              e.prototype._getPixelBuffer.call(this, null, t, n, i, r, a);
            }),
            t
          );
        })(_i),
        Oa =
          ((Pa = Ca = (function (e) {
            function t(t) {
              var n;
              return (
                (n = e.call(this, t) || this),
                G(n, "matrixPalette", ma, z(n)),
                G(n, "jointNodes", ya, z(n)),
                G(n, "jointTexture", xa, z(n)),
                G(n, "_hasInitJoints", ba, z(n)),
                G(n, "_mat", wa, z(n)),
                G(n, "_weights", Aa, z(n)),
                G(n, "weightsIndices", Ta, z(n)),
                G(n, "_useJointTexture", Ma, z(n)),
                (n._skin = void 0),
                (n._mat = new _()),
                (n._weights = null),
                (n._skin = null),
                n
              );
            }
            S(t, e);
            var n = t.prototype;
            return (
              (n._updateShaderData = function (n) {
                e.prototype._updateShaderData.call(this, n),
                  !this._useJointTexture &&
                    this.matrixPalette &&
                    this.shaderData.setFloatArray(t._jointMatrixProperty, this.matrixPalette);
              }),
              (n.setWeights = function (e) {
                if (((this._weights = e), e)) {
                  for (var t = e.length, n = 0; n < t; n++) this.weightsIndices[n] = n;
                  for (var i = this.weightsIndices, r = 0; r < t - 1; r++)
                    for (var a = r + 1; a < t; a++)
                      if (e[a] > e[r]) {
                        var o = e[r];
                        (e[r] = e[a]), (e[a] = o), (o = i[r]), (i[r] = i[a]), (i[a] = o);
                      }
                  this.mesh.updatePrimitiveWeightsIndices(i);
                }
              }),
              (n._initJoints = function () {
                var e;
                if (this._skin) {
                  for (var n = this._skin, i = n.joints, r = [], a = i.length - 1; a >= 0; a--)
                    r[a] = this.findByNodeName(this.entity, i[a]);
                  (this.matrixPalette = new Float32Array(16 * r.length)), (this.jointNodes = r);
                  var o = this.entity.engine._hardwareRenderer;
                  if (o) {
                    var s = o.renderStates.getParameter(o.gl.MAX_VERTEX_UNIFORM_VECTORS),
                      c = Math.floor((s - 20) / 4),
                      u = this.shaderData,
                      l = null === (e = this.jointNodes) || void 0 === e ? void 0 : e.length;
                    if (l)
                      if ((u.enableMacro("O3_HAS_SKIN"), u.setInt(t._jointCountProperty, l), i.length > c))
                        o.canIUseMoreJoints
                          ? ((this._useJointTexture = !0),
                            u.enableMacro("O3_USE_JOINT_TEXTURE"),
                            u.setTexture(t._jointSamplerProperty, this.jointTexture))
                          : Se.error(
                              "component's joints count(" +
                                i +
                                ") greater than device's MAX_VERTEX_UNIFORM_VECTORS number " +
                                s +
                                ", and don't support jointTexture in this device. suggest joint count less than " +
                                c +
                                ".",
                              this
                            );
                      else {
                        var d = Math.max(t._maxJoints, i.length);
                        (t._maxJoints = d),
                          u.disableMacro("O3_USE_JOINT_TEXTURE"),
                          u.enableMacro("O3_JOINTS_NUM", d.toString());
                      }
                    else u.disableMacro("O3_HAS_SKIN");
                  }
                }
              }),
              (n.findByNodeName = function (e, t) {
                if (!e) return null;
                var n = e.findByName(t);
                return n || this.findByNodeName(e.parent, t);
              }),
              (n._findParent = function (e, t) {
                if (e) {
                  var n = e.parent;
                  if (!n) return null;
                  if (n.name === t) return n;
                  var i = n.findByName(t);
                  return i || this._findParent(n, t);
                }
                return null;
              }),
              (n.update = function () {
                if ((this._hasInitJoints || (this._initJoints(), (this._hasInitJoints = !0)), this._skin)) {
                  for (
                    var e = this.jointNodes,
                      t = this._skin.inverseBindMatrices,
                      n = this.matrixPalette,
                      i = this.entity.getInvModelMatrix(),
                      r = this._mat,
                      a = e.length - 1;
                    a >= 0;
                    a--
                  )
                    r.identity(),
                      e[a] ? _.multiply(e[a].transform.worldMatrix, t[a], r) : t[a].cloneTo(r),
                      _.multiply(i, r, r),
                      n.set(r.elements, 16 * a);
                  this._useJointTexture && this.createJointTexture();
                }
              }),
              (n.createJointTexture = function () {
                if (!this.jointTexture) {
                  var e = this.engine,
                    t = e._hardwareRenderer;
                  if (!t) return;
                  (this.jointTexture = new Ea(e, 4, this.jointNodes.length, di.R32G32B32A32, !1)),
                    (this.jointTexture.filterMode = li.Point);
                }
                this.jointTexture.setPixelBuffer(this.matrixPalette);
              }),
              A(t, [
                {
                  key: "skin",
                  get: function () {
                    return this._skin;
                  },
                  set: function (e) {
                    this._skin = e;
                  }
                },
                {
                  key: "weights",
                  get: function () {
                    return this._weights;
                  }
                }
              ]),
              t
            );
          })(Ra)),
          (Ca._jointCountProperty = Zn.getPropertyByName("u_jointCount")),
          (Ca._jointSamplerProperty = Zn.getPropertyByName("u_jointSampler")),
          (Ca._jointMatrixProperty = Zn.getPropertyByName("u_jointMatrix")),
          (Ca._maxJoints = 0),
          (va = Pa),
          (ma = U(va.prototype, "matrixPalette", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: null
          })),
          (ya = U(va.prototype, "jointNodes", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: null
          })),
          (xa = U(va.prototype, "jointTexture", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: null
          })),
          (ba = U(va.prototype, "_hasInitJoints", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return !1;
            }
          })),
          (wa = U(va.prototype, "_mat", [Q], { configurable: !0, enumerable: !0, writable: !0, initializer: null })),
          (Aa = U(va.prototype, "_weights", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: null
          })),
          (Ta = U(va.prototype, "weightsIndices", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return [];
            }
          })),
          (Ma = U(va.prototype, "_useJointTexture", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return !1;
            }
          })),
          va),
        La = (function (e) {
          function t() {
            for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
            return (t = e.call.apply(e, [this].concat(i)) || this), (t._lods = []), t;
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.addLod = function (e, t) {
              (t.enabled = !1),
                this._lods.push({ distance: e, rendererAbility: t }),
                this._lods.sort(function (e, t) {
                  return t.distance - e.distance;
                });
            }),
            (n.render = function (e) {
              if (!(this._lods.length <= 0)) {
                for (
                  var t = o.distance(e.eyePos, this.entity.worldPosition), n = this._lods, i = 0, r = n.length - 1;
                  r >= 0;
                  r--
                ) {
                  var a = n[r];
                  if (t < a.distance) {
                    i = r;
                    break;
                  }
                }
                var s = n[i];
                s.rendererAbility.render(e);
              }
            }),
            t
          );
        })(Er);
      (function (e) {
        (e[(e["Opaque"] = 0)] = "Opaque"), (e[(e["Blend"] = 1)] = "Blend"), (e[(e["CutOff"] = 2)] = "CutOff");
      })(Sa || (Sa = {}));
      var Fa,
        Ia = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, t, Zn.find("blinn-phong")) || this),
              (n._ambientColor = new b(0, 0, 0, 1)),
              (n._emissiveColor = new b(0, 0, 0, 1)),
              (n._diffuseColor = new b(1, 1, 1, 1)),
              (n._specularColor = new b(1, 1, 1, 1)),
              (n._ambientTexture = void 0),
              (n._emissiveTexture = void 0),
              (n._diffuseTexture = void 0),
              (n._specularTexture = void 0),
              (n._shininess = 16),
              (n._alphaMode = Sa.Opaque),
              n.shaderData.enableMacro("O3_NEED_WORLDPOS"),
              (n.ambientColor = n._ambientColor),
              (n.emissiveColor = n._emissiveColor),
              (n.diffuseColor = n._diffuseColor),
              (n.specularColor = n._specularColor),
              (n.shininess = n._shininess),
              n
            );
          }
          S(t, e),
            A(t, [
              {
                key: "ambientColor",
                get: function () {
                  return this._ambientColor;
                },
                set: function (e) {
                  (this._ambientColor = e), this.shaderData.setColor("u_ambientColor", e);
                }
              },
              {
                key: "ambientTexture",
                get: function () {
                  return this._ambientTexture;
                },
                set: function (e) {
                  (this._ambientTexture = e),
                    e
                      ? (this.shaderData.enableMacro("O3_AMBIENT_TEXTURE"),
                        this.shaderData.setTexture("u_ambientTexture", e))
                      : this.shaderData.disableMacro("O3_AMBIENT_TEXTURE");
                }
              },
              {
                key: "emissiveColor",
                get: function () {
                  return this._emissiveColor;
                },
                set: function (e) {
                  (this._emissiveColor = e), this.shaderData.setColor("u_emissiveColor", e);
                }
              },
              {
                key: "emissiveTexture",
                get: function () {
                  return this._emissiveTexture;
                },
                set: function (e) {
                  (this._emissiveTexture = e),
                    e
                      ? (this.shaderData.enableMacro("O3_EMISSIVE_TEXTURE"),
                        this.shaderData.setTexture("u_emissiveTexture", e))
                      : this.shaderData.disableMacro("O3_EMISSIVE_TEXTURE");
                }
              },
              {
                key: "diffuseColor",
                get: function () {
                  return this._diffuseColor;
                },
                set: function (e) {
                  (this._diffuseColor = e), this.shaderData.setColor("u_diffuseColor", e);
                }
              },
              {
                key: "diffuseTexture",
                get: function () {
                  return this._diffuseTexture;
                },
                set: function (e) {
                  (this._diffuseTexture = e),
                    e
                      ? (this.shaderData.enableMacro("O3_DIFFUSE_TEXTURE"),
                        this.shaderData.setTexture("u_diffuseTexture", e))
                      : this.shaderData.disableMacro("O3_DIFFUSE_TEXTURE");
                }
              },
              {
                key: "specularColor",
                get: function () {
                  return this._specularColor;
                },
                set: function (e) {
                  (this._specularColor = e), this.shaderData.setColor("u_specularColor", e);
                }
              },
              {
                key: "specularTexture",
                get: function () {
                  return this._specularTexture;
                },
                set: function (e) {
                  (this._specularTexture = e),
                    e
                      ? (this.shaderData.enableMacro("O3_SPECULAR_TEXTURE"),
                        this.shaderData.setTexture("u_specularTexture", e))
                      : this.shaderData.disableMacro("O3_SPECULAR_TEXTURE");
                }
              },
              {
                key: "shininess",
                get: function () {
                  return this._shininess;
                },
                set: function (e) {
                  (this._shininess = e), this.shaderData.setFloat("u_shininess", e);
                }
              },
              {
                key: "alphaMode",
                get: function () {
                  return this._alphaMode;
                },
                set: function (e) {
                  var t = this.renderState.blendState.targetBlendState,
                    n = this.renderState.depthState;
                  switch (e) {
                    case Sa.Opaque:
                      (t.sourceColorBlendFactor = t.sourceAlphaBlendFactor = dt.One),
                        (t.destinationColorBlendFactor = t.destinationAlphaBlendFactor = dt.Zero),
                        (t.colorBlendOperation = t.alphaBlendOperation = ht.Add),
                        (n.writeEnabled = !0),
                        (this.renderQueueType = vt.Opaque);
                      break;
                    case Sa.Blend:
                      (t.sourceColorBlendFactor = t.sourceAlphaBlendFactor = dt.SourceAlpha),
                        (t.destinationColorBlendFactor = t.destinationAlphaBlendFactor = dt.OneMinusSourceAlpha),
                        (t.colorBlendOperation = t.alphaBlendOperation = ht.Add),
                        (n.writeEnabled = !1),
                        (this.renderQueueType = vt.Transparent);
                      break;
                    case Sa.CutOff:
                      (t.sourceColorBlendFactor = t.sourceAlphaBlendFactor = dt.One),
                        (t.destinationColorBlendFactor = t.destinationAlphaBlendFactor = dt.Zero),
                        (t.colorBlendOperation = t.alphaBlendOperation = ht.Add),
                        (n.writeEnabled = !0),
                        (this.renderQueueType = vt.AlphaTest);
                      break;
                  }
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.clone = function () {
              var e = new t(this._engine);
              return this.cloneTo(e), e;
            }),
            t
          );
        })(Or),
        za = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, t, Zn.find("pbr")) || this),
              (n._baseColor = new b(1, 1, 1, 1)),
              (n._metallicFactor = 1),
              (n._roughnessFactor = 1),
              (n._normalScale = 1),
              (n._emissiveColor = new b(0, 0, 0, 1)),
              (n._occlusionStrength = 1),
              (n._alphaCutoff = 0.5),
              (n._specularColor = new b(1, 1, 1, 1)),
              (n._glossinessFactor = 0),
              (n._envMapIntensity = 1),
              (n._refractionRatio = 1 / 1.33),
              (n._refractionDepth = 1),
              (n._perturbationUOffset = 0),
              (n._perturbationVOffset = 0),
              (n._PTMMatrix = new _(0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0.5, 0.5, 0.5, 1)),
              (n._baseColorTexture = void 0),
              (n._opacityTexture = void 0),
              (n._metallicTexture = void 0),
              (n._roughnessTexture = void 0),
              (n._metallicRoughnessTexture = void 0),
              (n._normalTexture = void 0),
              (n._emissiveTexture = void 0),
              (n._occlusionTexture = void 0),
              (n._specularGlossinessTexture = void 0),
              (n._reflectionTexture = void 0),
              (n._refractionTexture = void 0),
              (n._perturbationTexture = void 0),
              (n._unLight = !1),
              (n._srgb = !1),
              (n._srgbFast = !1),
              (n._gamma = !1),
              (n._getOpacityFromRGB = !1),
              (n._isMetallicWorkflow = !0),
              (n._envMapModeRefract = !1),
              (n._alphaMode = Sa.Opaque),
              n.shaderData.enableMacro("O3_NEED_WORLDPOS"),
              (n.baseColor = n._baseColor),
              (n.metallicFactor = n._metallicFactor),
              (n.roughnessFactor = n._roughnessFactor),
              (n.normalScale = n._normalScale),
              (n.emissiveColor = n._emissiveColor),
              (n.occlusionStrength = n._occlusionStrength),
              (n.alphaCutoff = n._alphaCutoff),
              (n.specularColor = n._specularColor),
              (n.glossinessFactor = n._glossinessFactor),
              (n.envMapIntensity = n._envMapIntensity),
              (n.refractionRatio = n._refractionRatio),
              (n.refractionDepth = n._refractionDepth),
              (n.perturbationUOffset = n._perturbationUOffset),
              (n.perturbationVOffset = n._perturbationVOffset),
              (n.unLight = n._unLight),
              (n.srgb = n._srgb),
              (n.srgbFast = n._srgbFast),
              (n.gamma = n._gamma),
              (n.getOpacityFromRGB = n._getOpacityFromRGB),
              (n.isMetallicWorkflow = n._isMetallicWorkflow),
              (n.envMapModeRefract = n._envMapModeRefract),
              (n.alphaMode = n._alphaMode),
              n
            );
          }
          S(t, e),
            A(t, [
              {
                key: "baseColor",
                get: function () {
                  return this._baseColor;
                },
                set: function (e) {
                  (this._baseColor = e), this.shaderData.setColor("u_baseColorFactor", e);
                }
              },
              {
                key: "baseColorTexture",
                get: function () {
                  return this._baseColorTexture;
                },
                set: function (e) {
                  (this._baseColorTexture = e),
                    e
                      ? (this.shaderData.enableMacro("HAS_BASECOLORMAP"),
                        this.shaderData.setTexture("u_baseColorSampler", e))
                      : this.shaderData.disableMacro("HAS_BASECOLORMAP");
                }
              },
              {
                key: "opacity",
                get: function () {
                  return this.baseColor.a;
                },
                set: function (e) {
                  this.baseColor.a = e;
                }
              },
              {
                key: "opacityTexture",
                get: function () {
                  return this._opacityTexture;
                },
                set: function (e) {
                  (this._opacityTexture = e),
                    e
                      ? (this.shaderData.enableMacro("HAS_OPACITYMAP"),
                        this.shaderData.setTexture("u_opacitySampler", e))
                      : this.shaderData.disableMacro("HAS_OPACITYMAP");
                }
              },
              {
                key: "metallicFactor",
                get: function () {
                  return this._metallicFactor;
                },
                set: function (e) {
                  (this._metallicFactor = e), this.shaderData.setFloat("u_metal", e);
                }
              },
              {
                key: "roughnessFactor",
                get: function () {
                  return this._roughnessFactor;
                },
                set: function (e) {
                  (this._roughnessFactor = e), this.shaderData.setFloat("u_roughness", e);
                }
              },
              {
                key: "metallicTexture",
                get: function () {
                  return this._metallicTexture;
                },
                set: function (e) {
                  (this._metallicTexture = e),
                    e
                      ? (this.shaderData.enableMacro("HAS_METALMAP"),
                        this.shaderData.setTexture("u_metallicSampler", e))
                      : this.shaderData.disableMacro("HAS_METALMAP");
                }
              },
              {
                key: "roughnessTexture",
                get: function () {
                  return this._roughnessTexture;
                },
                set: function (e) {
                  (this._roughnessTexture = e),
                    e
                      ? (this.shaderData.enableMacro("HAS_ROUGHNESSMAP"),
                        this.shaderData.setTexture("u_roughnessSampler", e))
                      : this.shaderData.disableMacro("HAS_ROUGHNESSMAP");
                }
              },
              {
                key: "metallicRoughnessTexture",
                get: function () {
                  return this._metallicRoughnessTexture;
                },
                set: function (e) {
                  (this._metallicRoughnessTexture = e),
                    e
                      ? (this.shaderData.enableMacro("HAS_METALROUGHNESSMAP"),
                        this.shaderData.setTexture("u_metallicRoughnessSampler", e))
                      : this.shaderData.disableMacro("HAS_METALROUGHNESSMAP");
                }
              },
              {
                key: "normalTexture",
                get: function () {
                  return this._normalTexture;
                },
                set: function (e) {
                  (this._normalTexture = e),
                    e
                      ? (this.shaderData.enableMacro("O3_HAS_NORMALMAP"),
                        this.shaderData.setTexture("u_normalSampler", e))
                      : this.shaderData.disableMacro("O3_HAS_NORMALMAP");
                }
              },
              {
                key: "normalScale",
                get: function () {
                  return this._normalScale;
                },
                set: function (e) {
                  (this._normalScale = e), this.shaderData.setFloat("u_normalScale", e);
                }
              },
              {
                key: "emissiveTexture",
                get: function () {
                  return this._emissiveTexture;
                },
                set: function (e) {
                  (this._emissiveTexture = e),
                    e
                      ? (this.shaderData.enableMacro("HAS_EMISSIVEMAP"),
                        this.shaderData.setTexture("u_emissiveSampler", e))
                      : this.shaderData.disableMacro("HAS_EMISSIVEMAP");
                }
              },
              {
                key: "emissiveColor",
                get: function () {
                  return this._emissiveColor;
                },
                set: function (e) {
                  (this._emissiveColor = e), this.shaderData.setColor("u_emissiveFactor", e);
                }
              },
              {
                key: "occlusionTexture",
                get: function () {
                  return this._occlusionTexture;
                },
                set: function (e) {
                  (this._occlusionTexture = e),
                    e
                      ? (this.shaderData.enableMacro("HAS_OCCLUSIONMAP"),
                        this.shaderData.setTexture("u_occlusionSampler", e))
                      : this.shaderData.disableMacro("HAS_OCCLUSIONMAP");
                }
              },
              {
                key: "occlusionStrength",
                get: function () {
                  return this._occlusionStrength;
                },
                set: function (e) {
                  (this._occlusionStrength = e), this.shaderData.setFloat("u_occlusionStrength", e);
                }
              },
              {
                key: "alphaCutoff",
                get: function () {
                  return this._alphaCutoff;
                },
                set: function (e) {
                  (this._alphaCutoff = e), this.shaderData.setFloat("u_alphaCutoff", e);
                }
              },
              {
                key: "specularColor",
                get: function () {
                  return this._specularColor;
                },
                set: function (e) {
                  (this._specularColor = e), this.shaderData.setColor("u_specularFactor", e);
                }
              },
              {
                key: "glossinessFactor",
                get: function () {
                  return this._glossinessFactor;
                },
                set: function (e) {
                  (this._glossinessFactor = e), this.shaderData.setFloat("u_glossinessFactor", e);
                }
              },
              {
                key: "specularGlossinessTexture",
                get: function () {
                  return this._specularGlossinessTexture;
                },
                set: function (e) {
                  (this._specularGlossinessTexture = e),
                    e
                      ? (this.shaderData.enableMacro("HAS_SPECULARGLOSSINESSMAP"),
                        this.shaderData.setTexture("u_specularGlossinessSampler", e))
                      : this.shaderData.disableMacro("HAS_SPECULARGLOSSINESSMAP");
                }
              },
              {
                key: "reflectionTexture",
                get: function () {
                  return this._reflectionTexture;
                },
                set: function (e) {
                  (this._reflectionTexture = e),
                    e
                      ? (this.shaderData.enableMacro("HAS_REFLECTIONMAP"),
                        this.shaderData.setTexture("u_reflectionSampler", e))
                      : this.shaderData.disableMacro("HAS_REFLECTIONMAP");
                }
              },
              {
                key: "envMapIntensity",
                get: function () {
                  return this._envMapIntensity;
                },
                set: function (e) {
                  (this._envMapIntensity = e), this.shaderData.setFloat("u_envMapIntensity", e);
                }
              },
              {
                key: "refractionRatio",
                get: function () {
                  return this._refractionRatio;
                },
                set: function (e) {
                  (this._refractionRatio = e), this.shaderData.setFloat("u_refractionRatio", e);
                }
              },
              {
                key: "refractionDepth",
                get: function () {
                  return this._refractionDepth;
                },
                set: function (e) {
                  (this._refractionDepth = e), this.shaderData.setFloat("u_refractionDepth", e);
                }
              },
              {
                key: "refractionTexture",
                get: function () {
                  return this._refractionTexture;
                },
                set: function (e) {
                  (this._refractionTexture = e),
                    e
                      ? (this.shaderData.enableMacro("HAS_REFRACTIONMAP"),
                        this.shaderData.setTexture("u_refractionSampler", e),
                        this.shaderData.setMatrix("u_PTMMatrix", this._PTMMatrix))
                      : this.shaderData.disableMacro("HAS_REFRACTIONMAP");
                }
              },
              {
                key: "perturbationTexture",
                get: function () {
                  return this._perturbationTexture;
                },
                set: function (e) {
                  (this._perturbationTexture = e),
                    e
                      ? (this.shaderData.enableMacro("HAS_PERTURBATIONMAP"),
                        this.shaderData.setTexture("u_perturbationSampler", e))
                      : this.shaderData.disableMacro("HAS_PERTURBATIONMAP");
                }
              },
              {
                key: "perturbationUOffset",
                get: function () {
                  return this._perturbationUOffset;
                },
                set: function (e) {
                  (this._perturbationUOffset = e), this.shaderData.setFloat("u_perturbationUOffset", e);
                }
              },
              {
                key: "perturbationVOffset",
                get: function () {
                  return this._perturbationVOffset;
                },
                set: function (e) {
                  (this._perturbationVOffset = e), this.shaderData.setFloat("u_perturbationVOffset", e);
                }
              },
              {
                key: "unLight",
                get: function () {
                  return this._unLight;
                },
                set: function (e) {
                  (this._unLight = e), e ? this.shaderData.enableMacro("UNLIT") : this.shaderData.disableMacro("UNLIT");
                }
              },
              {
                key: "srgb",
                get: function () {
                  return this._srgb;
                },
                set: function (e) {
                  (this._srgb = e),
                    e ? this.shaderData.enableMacro("MANUAL_SRGB") : this.shaderData.disableMacro("MANUAL_SRGB");
                }
              },
              {
                key: "srgbFast",
                get: function () {
                  return this._srgbFast;
                },
                set: function (e) {
                  (this._srgbFast = e),
                    e
                      ? this.shaderData.enableMacro("SRGB_FAST_APPROXIMATION")
                      : this.shaderData.disableMacro("SRGB_FAST_APPROXIMATION");
                }
              },
              {
                key: "gamma",
                get: function () {
                  return this._gamma;
                },
                set: function (e) {
                  (this._gamma = e), e ? this.shaderData.enableMacro("GAMMA") : this.shaderData.disableMacro("GAMMA");
                }
              },
              {
                key: "getOpacityFromRGB",
                get: function () {
                  return this._getOpacityFromRGB;
                },
                set: function (e) {
                  (this._getOpacityFromRGB = e),
                    e
                      ? this.shaderData.enableMacro("GETOPACITYFROMRGB")
                      : this.shaderData.disableMacro("GETOPACITYFROMRGB");
                }
              },
              {
                key: "isMetallicWorkflow",
                get: function () {
                  return this._isMetallicWorkflow;
                },
                set: function (e) {
                  (this._isMetallicWorkflow = e),
                    e
                      ? this.shaderData.enableMacro("IS_METALLIC_WORKFLOW")
                      : this.shaderData.disableMacro("IS_METALLIC_WORKFLOW");
                }
              },
              {
                key: "envMapModeRefract",
                get: function () {
                  return this._envMapModeRefract;
                },
                set: function (e) {
                  (this._envMapModeRefract = e),
                    e
                      ? this.shaderData.enableMacro("ENVMAPMODE_REFRACT")
                      : this.shaderData.disableMacro("ENVMAPMODE_REFRACT");
                }
              },
              {
                key: "alphaMode",
                get: function () {
                  return this._alphaMode;
                },
                set: function (e) {
                  var t = this.renderState.blendState.targetBlendState,
                    n = this.renderState.depthState;
                  switch (
                    (this.shaderData.disableMacro("ALPHA_CUTOFF"), this.shaderData.disableMacro("ALPHA_BLEND"), e)
                  ) {
                    case Sa.Opaque:
                      (t.sourceColorBlendFactor = t.sourceAlphaBlendFactor = dt.One),
                        (t.destinationColorBlendFactor = t.destinationAlphaBlendFactor = dt.Zero),
                        (t.colorBlendOperation = t.alphaBlendOperation = ht.Add),
                        (n.writeEnabled = !0),
                        (this.renderQueueType = vt.Opaque);
                      break;
                    case Sa.Blend:
                      this.shaderData.enableMacro("ALPHA_BLEND"),
                        (t.sourceColorBlendFactor = t.sourceAlphaBlendFactor = dt.SourceAlpha),
                        (t.destinationColorBlendFactor = t.destinationAlphaBlendFactor = dt.OneMinusSourceAlpha),
                        (t.colorBlendOperation = t.alphaBlendOperation = ht.Add),
                        (n.writeEnabled = !1),
                        (this.renderQueueType = vt.Transparent);
                      break;
                    case Sa.CutOff:
                      this.shaderData.enableMacro("ALPHA_CUTOFF"),
                        (t.sourceColorBlendFactor = t.sourceAlphaBlendFactor = dt.One),
                        (t.destinationColorBlendFactor = t.destinationAlphaBlendFactor = dt.Zero),
                        (t.colorBlendOperation = t.alphaBlendOperation = ht.Add),
                        (n.writeEnabled = !0),
                        (this.renderQueueType = vt.AlphaTest);
                      break;
                  }
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.clone = function () {
              var e = new t(this._engine);
              return this.cloneTo(e), e;
            }),
            t
          );
        })(Or);
      (function (e) {
        (e[(e["PositiveX"] = 0)] = "PositiveX"),
          (e[(e["NegativeX"] = 1)] = "NegativeX"),
          (e[(e["PositiveY"] = 2)] = "PositiveY"),
          (e[(e["NegativeY"] = 3)] = "NegativeY"),
          (e[(e["PositiveZ"] = 4)] = "PositiveZ"),
          (e[(e["NegativeZ"] = 5)] = "NegativeZ");
      })(Fa || (Fa = {}));
      var Ba,
        Da,
        Na,
        Ga = (function (e) {
          function t(t, n, i, r) {
            var a;
            void 0 === i && (i = di.R8G8B8A8),
              void 0 === r && (r = !0),
              (a = e.call(this, t) || this),
              (a._format = void 0),
              (a._compressedFaceFilled = [0, 0, 0, 0, 0, 0]);
            var o = t._hardwareRenderer,
              s = o.gl,
              c = o.isWebGL2;
            if (!_i._supportTextureFormat(i, o)) throw new Error("Texture format is not supported:" + di[i]);
            !r ||
              c ||
              _i._isPowerOf2(n) ||
              (Se.warn(
                "non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap"
              ),
              (r = !1));
            var u = _i._getFormatDetail(i, s, c);
            return (
              (a._glTexture = s.createTexture()),
              (a._formatDetail = u),
              (a._rhi = o),
              (a._target = s.TEXTURE_CUBE_MAP),
              (a._mipmap = r),
              (a._width = n),
              (a._height = n),
              (a._format = i),
              (a._mipmapCount = a._getMipmapCount()),
              (u.isCompressed && !c) || a._initMipmap(!0),
              (a.filterMode = li.Bilinear),
              (a.wrapModeU = a.wrapModeV = hi.Clamp),
              a
            );
          }
          S(t, e),
            A(t, [
              {
                key: "format",
                get: function () {
                  return this._format;
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.setPixelBuffer = function (e, t, n, i, r, a, o) {
              void 0 === n && (n = 0);
              var s = this._rhi.gl,
                c = this._rhi.isWebGL2,
                u = this._formatDetail,
                l = u.internalFormat,
                d = u.baseFormat,
                h = u.dataType,
                f = u.isCompressed,
                _ = Math.max(1, this._width >> n);
              if (
                ((i = i || 0),
                (r = r || 0),
                (a = a || _ - i),
                (o = o || _ - r),
                this._bind(),
                s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL, 0),
                s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0),
                f)
              ) {
                var p = 1 << n;
                c || this._compressedFaceFilled[e] & p
                  ? s.compressedTexSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + e, n, i, r, a, o, l, t)
                  : (s.compressedTexImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + e, n, l, a, o, 0, t),
                    (this._compressedFaceFilled[e] |= p));
              } else s.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + e, n, i, r, a, o, d, h, t);
              this._unbind();
            }),
            (n.setImageSource = function (e, t, n, i, r, a, o) {
              void 0 === n && (n = 0), void 0 === i && (i = !1), void 0 === r && (r = !1);
              var s = this._rhi.gl,
                c = this._formatDetail,
                u = c.baseFormat,
                l = c.dataType;
              this._bind(),
                s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL, +i),
                s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +r),
                s.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + e, n, a || 0, o || 0, u, l, t),
                this._unbind();
            }),
            (n.getPixelBuffer = function (t, n, i, r, a, o) {
              if (this._formatDetail.isCompressed) throw new Error("Unable to read compressed texture");
              e.prototype._getPixelBuffer.call(this, t, n, i, r, a, o);
            }),
            t
          );
        })(_i),
        Ua = (function (e) {
          function t(t, n, i, r, a, o) {
            var s;
            void 0 === r && (r = ui.Depth),
              void 0 === a && (a = !1),
              void 0 === o && (o = !1),
              (s = e.call(this, t) || this),
              (s._isCube = !1),
              (s._format = void 0),
              (s._autoMipmap = !1);
            var c = t._hardwareRenderer,
              u = c.gl,
              l = c.isWebGL2;
            if (!_i._supportRenderBufferDepthFormat(r, c, !0))
              throw new Error("RenderBufferDepthFormat is not supported:" + ui[r]);
            if (o && n !== i) throw new Error("The cube texture must have the same width and height");
            return (
              !a ||
                l ||
                (_i._isPowerOf2(n) && _i._isPowerOf2(i)) ||
                (Se.warn(
                  "non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap"
                ),
                (a = !1)),
              (s._glTexture = u.createTexture()),
              (s._formatDetail = _i._getRenderBufferDepthFormatDetail(r, u, l)),
              (s._isCube = o),
              (s._rhi = c),
              (s._target = o ? u.TEXTURE_CUBE_MAP : u.TEXTURE_2D),
              (s._mipmap = a),
              (s._width = n),
              (s._height = i),
              (s._format = r),
              (s._mipmapCount = s._getMipmapCount()),
              s._initMipmap(o),
              (s.filterMode = li.Bilinear),
              (s.wrapModeU = s.wrapModeV = hi.Clamp),
              s
            );
          }
          return (
            S(t, e),
            A(t, [
              {
                key: "format",
                get: function () {
                  return this._format;
                }
              },
              {
                key: "autoGenerateMipmaps",
                get: function () {
                  return this._autoMipmap;
                },
                set: function (e) {
                  this._autoMipmap = e;
                }
              }
            ]),
            t
          );
        })(_i),
        ka = (function (e) {
          function t(t, n, i, r, a, o) {
            var s;
            void 0 === a && (a = ui.Depth),
              void 0 === o && (o = 1),
              (s = e.call(this, t) || this),
              (s._frameBuffer = void 0),
              (s._MSAAFrameBuffer = void 0),
              (s._rhi = void 0),
              (s._width = void 0),
              (s._height = void 0),
              (s._antiAliasing = void 0),
              (s._colorTextures = void 0),
              (s._depthTexture = void 0),
              (s._depthRenderBuffer = void 0),
              (s._MSAAColorRenderBuffers = []),
              (s._MSAADepthRenderBuffer = void 0),
              (s._oriDrawBuffers = void 0),
              (s._blitDrawBuffers = void 0);
            var c = t._hardwareRenderer,
              u = c.gl;
            if (!(a instanceof Ua) && !_i._supportRenderBufferDepthFormat(a, c, !1))
              throw new Error("RenderBufferDepthFormat is not supported:" + ui[a]);
            if ((null === r || void 0 === r ? void 0 : r.length) > 1 && !c.canIUse(xe.drawBuffers))
              throw new Error("MRT is not supported");
            if (
              ((s._colorTextures = r ? (r instanceof Array ? r.slice() : [r]) : []),
              s._colorTextures.some(function (e) {
                return e.width !== n || e.height !== i;
              }))
            )
              throw new Error("RenderColorTexture's size must as same as RenderTarget");
            if (a instanceof Ua && (a.width !== n || a.height !== i))
              throw new Error("RenderDepthTexture's size must as same as RenderTarget");
            if (
              s._colorTextures.length > 1 &&
              s._colorTextures.some(function (e) {
                return e._isCube;
              })
            )
              throw new Error("MRT+Cube+[,MSAA] is not supported");
            var l = c.capability.maxAntiAliasing;
            return (
              o > l &&
                (Se.warn("MSAA antiAliasing exceeds the limit and is automatically downgraded to:" + l), (o = l)),
              (s._rhi = c),
              (s._width = n),
              (s._height = i),
              (s._frameBuffer = u.createFramebuffer()),
              (s._antiAliasing = o),
              a instanceof Ua && (s._depthTexture = a),
              s._bindMainFBO(a),
              o > 1 && ((s._MSAAFrameBuffer = u.createFramebuffer()), s._bindMSAAFBO(a)),
              s
            );
          }
          S(t, e),
            A(t, [
              {
                key: "width",
                get: function () {
                  return this._width;
                }
              },
              {
                key: "height",
                get: function () {
                  return this._height;
                }
              },
              {
                key: "colorTextureCount",
                get: function () {
                  return this._colorTextures.length;
                }
              },
              {
                key: "depthTexture",
                get: function () {
                  return this._depthTexture;
                }
              },
              {
                key: "antiAliasing",
                get: function () {
                  return this._antiAliasing;
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.getColorTexture = function (e) {
              return void 0 === e && (e = 0), this._colorTextures[e];
            }),
            (n.destroy = function () {
              var e = this._rhi.gl;
              e.deleteFramebuffer(this._frameBuffer),
                this._depthRenderBuffer && e.deleteRenderbuffer(this._depthRenderBuffer),
                this._MSAAFrameBuffer && e.deleteFramebuffer(this._MSAAFrameBuffer),
                this._MSAADepthRenderBuffer && e.deleteRenderbuffer(this._MSAADepthRenderBuffer);
              for (var t = 0; t < this._colorTextures.length; t++) this._colorTextures[t].destroy();
              for (var n = 0; n < this._MSAAColorRenderBuffers.length; n++)
                e.deleteRenderbuffer(this._MSAAColorRenderBuffers[n]);
              this._depthTexture && this._depthTexture.destroy(),
                (this._frameBuffer = null),
                (this._colorTextures.length = 0),
                (this._depthTexture = null),
                (this._depthRenderBuffer = null),
                (this._MSAAFrameBuffer = null),
                (this._MSAAColorRenderBuffers.length = 0),
                (this._MSAADepthRenderBuffer = null);
            }),
            (n._activeRenderTarget = function () {
              var e = this._rhi.gl;
              this._MSAAFrameBuffer
                ? e.bindFramebuffer(e.FRAMEBUFFER, this._MSAAFrameBuffer)
                : e.bindFramebuffer(e.FRAMEBUFFER, this._frameBuffer);
            }),
            (n._setRenderTargetFace = function (e) {
              void 0 === e && (e = Fa.PositiveX);
              var t = this._rhi.gl,
                n = this._colorTextures[0],
                i = this._depthTexture;
              t.bindFramebuffer(t.FRAMEBUFFER, this._frameBuffer),
                null !== n &&
                  void 0 !== n &&
                  n._isCube &&
                  t.framebufferTexture2D(
                    t.FRAMEBUFFER,
                    t.COLOR_ATTACHMENT0,
                    t.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                    n._glTexture,
                    0
                  ),
                null !== i &&
                  void 0 !== i &&
                  i._isCube &&
                  t.framebufferTexture2D(
                    t.FRAMEBUFFER,
                    i._formatDetail.attachment,
                    t.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                    i._glTexture,
                    0
                  ),
                this._activeRenderTarget();
            }),
            (n._blitRenderTarget = function () {
              var e = this._rhi.gl,
                t = e.COLOR_BUFFER_BIT | (this._depthTexture ? e.DEPTH_BUFFER_BIT : 0),
                n = this._colorTextures.length;
              e.bindFramebuffer(e.READ_FRAMEBUFFER, this._MSAAFrameBuffer),
                e.bindFramebuffer(e.DRAW_FRAMEBUFFER, this._frameBuffer);
              for (var i = 0; i < n; i++) {
                var r = e.COLOR_ATTACHMENT0 + i;
                (this._blitDrawBuffers[i] = r),
                  e.readBuffer(r),
                  e.drawBuffers(this._blitDrawBuffers),
                  e.blitFramebuffer(0, 0, this._width, this._height, 0, 0, this._width, this._height, t, e.NEAREST),
                  (this._blitDrawBuffers[i] = e.NONE);
              }
              e.bindFramebuffer(e.FRAMEBUFFER, null);
            }),
            (n._bindMainFBO = function (e) {
              var t = this._rhi.gl,
                n = this._rhi.isWebGL2,
                i = this._colorTextures.length,
                r = new Array(i);
              t.bindFramebuffer(t.FRAMEBUFFER, this._frameBuffer);
              for (var a = 0; a < i; a++) {
                var o = this._colorTextures[a],
                  s = t.COLOR_ATTACHMENT0 + a;
                (r[a] = s), o._isCube || t.framebufferTexture2D(t.FRAMEBUFFER, s, t.TEXTURE_2D, o._glTexture, 0);
              }
              if ((i > 1 && t.drawBuffers(r), (this._oriDrawBuffers = r), null !== e))
                if (e instanceof Ua)
                  e._isCube ||
                    t.framebufferTexture2D(t.FRAMEBUFFER, e._formatDetail.attachment, t.TEXTURE_2D, e._glTexture, 0);
                else if (this._antiAliasing <= 1) {
                  var c = _i._getRenderBufferDepthFormatDetail(e, t, n),
                    u = c.internalFormat,
                    l = c.attachment,
                    d = t.createRenderbuffer();
                  (this._depthRenderBuffer = d),
                    t.bindRenderbuffer(t.RENDERBUFFER, d),
                    t.renderbufferStorage(t.RENDERBUFFER, u, this._width, this._height),
                    t.framebufferRenderbuffer(t.FRAMEBUFFER, l, t.RENDERBUFFER, d);
                }
              t.bindFramebuffer(t.FRAMEBUFFER, null), t.bindRenderbuffer(t.RENDERBUFFER, null);
            }),
            (n._bindMSAAFBO = function (e) {
              var t = this._rhi.gl,
                n = this._rhi.isWebGL2,
                i = t.createRenderbuffer(),
                r = this._colorTextures.length;
              (this._blitDrawBuffers = new Array(r)),
                (this._MSAADepthRenderBuffer = i),
                t.bindFramebuffer(t.FRAMEBUFFER, this._MSAAFrameBuffer);
              for (var a = 0; a < r; a++) {
                var o = t.createRenderbuffer();
                (this._MSAAColorRenderBuffers[a] = o),
                  (this._blitDrawBuffers[a] = t.NONE),
                  t.bindRenderbuffer(t.RENDERBUFFER, o),
                  t.renderbufferStorageMultisample(
                    t.RENDERBUFFER,
                    this._antiAliasing,
                    this._colorTextures[a]._formatDetail.internalFormat,
                    this._width,
                    this._height
                  ),
                  t.framebufferRenderbuffer(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0 + a, t.RENDERBUFFER, o);
              }
              if ((t.drawBuffers(this._oriDrawBuffers), null !== e)) {
                var s = e instanceof Ua ? e._formatDetail : _i._getRenderBufferDepthFormatDetail(e, t, n),
                  c = s.internalFormat,
                  u = s.attachment;
                t.bindRenderbuffer(t.RENDERBUFFER, i),
                  t.renderbufferStorageMultisample(t.RENDERBUFFER, this._antiAliasing, c, this._width, this._height),
                  t.framebufferRenderbuffer(t.FRAMEBUFFER, u, t.RENDERBUFFER, i);
              }
              this._checkFrameBuffer(),
                t.bindFramebuffer(t.FRAMEBUFFER, null),
                t.bindRenderbuffer(t.RENDERBUFFER, null);
            }),
            (n._checkFrameBuffer = function () {
              var e = this._rhi.gl,
                t = this._rhi.isWebGL2,
                n = e.checkFramebufferStatus(e.FRAMEBUFFER);
              switch (n) {
                case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                  throw new Error(
                    "The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete"
                  );
                case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                  throw new Error("There is no attachment");
                case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                  throw new Error(" Height and width of the attachment are not the same.");
                case e.FRAMEBUFFER_UNSUPPORTED:
                  throw new Error(
                    "The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer"
                  );
              }
              if (t && n === e.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE)
                throw new Error(
                  "The values of gl.RENDERBUFFER_SAMPLES are different among attached renderbuffers, or are non-zero if the attached images are a mix of renderbuffers and textures."
                );
            }),
            t
          );
        })(be),
        Va = (function (e) {
          function t(t, n, i, r, a, o) {
            var s;
            void 0 === r && (r = ci.R8G8B8A8),
              void 0 === a && (a = !1),
              void 0 === o && (o = !1),
              (s = e.call(this, t) || this),
              (s._isCube = !1),
              (s._format = void 0),
              (s._autoMipmap = !1);
            var c = t._hardwareRenderer,
              u = c.gl,
              l = c.isWebGL2;
            if (!_i._supportRenderBufferColorFormat(r, c))
              throw new Error("RenderBufferColorFormat is not supported:" + ci[r]);
            if (o && n !== i) throw new Error("The cube texture must have the same width and height");
            return (
              !a ||
                l ||
                (_i._isPowerOf2(n) && _i._isPowerOf2(i)) ||
                (Se.warn(
                  "non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap"
                ),
                (a = !1)),
              (s._glTexture = u.createTexture()),
              (s._formatDetail = _i._getRenderBufferColorFormatDetail(r, u, l)),
              (s._isCube = o),
              (s._rhi = c),
              (s._target = o ? u.TEXTURE_CUBE_MAP : u.TEXTURE_2D),
              (s._mipmap = a),
              (s._width = n),
              (s._height = i),
              (s._format = r),
              (s._mipmapCount = s._getMipmapCount()),
              s._initMipmap(o),
              (s.filterMode = li.Bilinear),
              (s.wrapModeU = s.wrapModeV = hi.Clamp),
              s
            );
          }
          S(t, e),
            A(t, [
              {
                key: "format",
                get: function () {
                  return this._format;
                }
              },
              {
                key: "autoGenerateMipmaps",
                get: function () {
                  return this._autoMipmap;
                },
                set: function (e) {
                  this._autoMipmap = e;
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.getPixelBuffer = function (t, n, i, r, a, o) {
              e.prototype._getPixelBuffer.call(this, t, n, i, r, a, o);
            }),
            t
          );
        })(_i);
      (function (e) {
        (e[(e["Static"] = 0)] = "Static"), (e[(e["Dynamic"] = 1)] = "Dynamic"), (e[(e["Stream"] = 2)] = "Stream");
      })(Ba || (Ba = {})),
        (function (e) {
          (e[(e["Float"] = 0)] = "Float"),
            (e[(e["Vector2"] = 1)] = "Vector2"),
            (e[(e["Vector3"] = 2)] = "Vector3"),
            (e[(e["Vector4"] = 3)] = "Vector4"),
            (e[(e["Byte4"] = 4)] = "Byte4"),
            (e[(e["UByte4"] = 5)] = "UByte4"),
            (e[(e["NormalizedByte4"] = 6)] = "NormalizedByte4"),
            (e[(e["NormalizedUByte4"] = 7)] = "NormalizedUByte4"),
            (e[(e["Short2"] = 8)] = "Short2"),
            (e[(e["UShort2"] = 9)] = "UShort2"),
            (e[(e["NormalizedShort2"] = 10)] = "NormalizedShort2"),
            (e[(e["NormalizedUShort2"] = 11)] = "NormalizedUShort2"),
            (e[(e["Short4"] = 12)] = "Short4"),
            (e[(e["UShort4"] = 13)] = "UShort4"),
            (e[(e["NormalizedShort4"] = 14)] = "NormalizedShort4"),
            (e[(e["NormalizedUShort4"] = 15)] = "NormalizedUShort4");
        })(Da || (Da = {})),
        (function (e) {
          (e[(e["UInt8"] = 0)] = "UInt8"), (e[(e["UInt16"] = 1)] = "UInt16"), (e[(e["UInt32"] = 2)] = "UInt32");
        })(Na || (Na = {}));
      var Ha,
        Wa,
        ja = (function () {
          function e() {}
          return (
            (e._getGLBufferUsage = function (e, t) {
              switch (t) {
                case Ba.Static:
                  return e.STATIC_DRAW;
                case Ba.Dynamic:
                  return e.DYNAMIC_DRAW;
                case Ba.Stream:
                  return e.STREAM_DRAW;
              }
            }),
            (e._getGLIndexType = function (e) {
              switch (e) {
                case Na.UInt8:
                  return ge.UNSIGNED_BYTE;
                case Na.UInt16:
                  return ge.UNSIGNED_SHORT;
                case Na.UInt32:
                  return ge.UNSIGNED_INT;
              }
            }),
            (e._getElementInfo = function (e) {
              var t, n;
              switch (e) {
                case Da.Float:
                  (t = 1), (n = ge.FLOAT);
                  break;
                case Da.Vector2:
                  (t = 2), (n = ge.FLOAT);
                  break;
                case Da.Vector3:
                  (t = 3), (n = ge.FLOAT);
                  break;
                case Da.Vector4:
                  (t = 4), (n = ge.FLOAT);
                  break;
                case Da.Byte4:
                  (t = 4), (n = ge.UNSIGNED_BYTE);
                  break;
                case Da.Short2:
                  (t = 2), (n = ge.SHORT);
                  break;
                case Da.Short4:
                  (t = 4), (n = ge.SHORT);
                  break;
                case Da.UShort2:
                  (t = 2), (n = ge.UNSIGNED_SHORT);
                  break;
                case Da.UShort4:
                  (t = 4), (n = ge.UNSIGNED_SHORT);
                  break;
              }
              return { size: t, type: n };
            }),
            e
          );
        })();
      (function (e) {
        (e[(e["VertexBuffer"] = 0)] = "VertexBuffer"), (e[(e["IndexBuffer"] = 1)] = "IndexBuffer");
      })(Ha || (Ha = {})),
        (function (e) {
          (e[(e["None"] = 0)] = "None"), (e[(e["Discard"] = 1)] = "Discard");
        })(Wa || (Wa = {}));
      var Xa,
        Ka = (function (e) {
          function t(t, n, i, r) {
            var a;
            void 0 === r && (r = Ba.Static),
              (a = e.call(this, t) || this),
              (a._glBindTarget = void 0),
              (a._glBufferUsage = void 0),
              (a._nativeBuffer = void 0),
              (a._hardwareRenderer = void 0),
              (a._type = void 0),
              (a._byteLength = void 0),
              (a._bufferUsage = void 0),
              (a._engine = t),
              (a._type = n),
              (a._bufferUsage = r);
            var o = t._hardwareRenderer,
              s = o.gl,
              c = ja._getGLBufferUsage(s, r),
              u = n === Ha.VertexBuffer ? s.ARRAY_BUFFER : s.ELEMENT_ARRAY_BUFFER;
            return (
              (a._nativeBuffer = s.createBuffer()),
              (a._hardwareRenderer = o),
              (a._glBufferUsage = c),
              (a._glBindTarget = u),
              a.bind(),
              "number" === typeof i
                ? ((a._byteLength = i), s.bufferData(u, i, c))
                : ((a._byteLength = i.byteLength), s.bufferData(u, i, c)),
              s.bindBuffer(u, null),
              a
            );
          }
          S(t, e),
            A(t, [
              {
                key: "engine",
                get: function () {
                  return this._engine;
                }
              },
              {
                key: "type",
                get: function () {
                  return this._type;
                }
              },
              {
                key: "byteLength",
                get: function () {
                  return this._byteLength;
                }
              },
              {
                key: "bufferUsage",
                get: function () {
                  return this._bufferUsage;
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.bind = function () {
              var e = this._hardwareRenderer.gl;
              e.bindBuffer(this._glBindTarget, this._nativeBuffer);
            }),
            (n.setData = function (e, t, n, i, r) {
              void 0 === t && (t = 0), void 0 === n && (n = 0), void 0 === r && (r = Wa.None);
              var a = this._hardwareRenderer.gl,
                o = this._hardwareRenderer.isWebGL2,
                s = this._glBindTarget;
              this.bind(), r === Wa.Discard && a.bufferData(s, this._byteLength, this._glBufferUsage);
              var c = e.BYTES_PER_ELEMENT || 1,
                u = i ? c * i : e.byteLength;
              if (0 !== n || u < e.byteLength) {
                var l = void 0 !== e.byteOffset;
                if (o && l) a.bufferSubData(s, t, e, n, u / c);
                else {
                  var d = new Uint8Array(l ? e.buffer : e, n * c, u);
                  a.bufferSubData(s, t, d);
                }
              } else a.bufferSubData(s, t, e);
              a.bindBuffer(s, null);
            }),
            (n.getData = function (e, t, n, i) {
              void 0 === t && (t = 0), void 0 === n && (n = 0);
              var r = this._hardwareRenderer.isWebGL2;
              if (!r) throw "Buffer is write-only on WebGL1.0 platforms.";
              var a = this._hardwareRenderer.gl;
              this.bind(), a.getBufferSubData(this._glBindTarget, t, e, n, i);
            }),
            (n._onDestroy = function () {
              var e = this._hardwareRenderer.gl;
              e.deleteBuffer(this._nativeBuffer), (this._nativeBuffer = null), (this._hardwareRenderer = null);
            }),
            (n.resize = function (e) {
              this.bind();
              var t = this._hardwareRenderer.gl;
              t.bufferData(this._glBindTarget, e, this._glBufferUsage), (this._byteLength = e);
            }),
            t
          );
        })(fi);
      (function (e) {
        (e[(e["Points"] = 0)] = "Points"),
          (e[(e["Lines"] = 1)] = "Lines"),
          (e[(e["LineLoop"] = 2)] = "LineLoop"),
          (e[(e["LineStrip"] = 3)] = "LineStrip"),
          (e[(e["Triangles"] = 4)] = "Triangles"),
          (e[(e["TriangleStrip"] = 5)] = "TriangleStrip"),
          (e[(e["TriangleFan"] = 6)] = "TriangleFan");
      })(Xa || (Xa = {}));
      var qa = (function () {
          function e(e, t) {
            (this._buffer = void 0), (this._format = void 0), (this._buffer = e), (this._format = t);
          }
          return (
            A(e, [
              {
                key: "buffer",
                get: function () {
                  return this._buffer;
                }
              },
              {
                key: "format",
                get: function () {
                  return this._format;
                }
              }
            ]),
            e
          );
        })(),
        Qa = (function () {
          function e(e, t) {
            (this._buffer = void 0), (this._stride = void 0), (this._buffer = e), (this._stride = t);
          }
          return (
            A(e, [
              {
                key: "buffer",
                get: function () {
                  return this._buffer;
                }
              },
              {
                key: "stride",
                get: function () {
                  return this._stride;
                }
              }
            ]),
            e
          );
        })(),
        Ya = (function (e) {
          function t(t, n) {
            var i;
            return (
              (i = e.call(this, t) || this),
              (i.name = void 0),
              (i.instanceCount = 0),
              (i._macroCollection = new Ne()),
              (i._vertexElementMap = {}),
              (i._glIndexType = void 0),
              (i._platformPrimitive = void 0),
              (i._vertexBufferBindings = []),
              (i._indexBufferBinding = null),
              (i._vertexElements = []),
              (i.targets = []),
              (i.name = n),
              (i._platformPrimitive = i._engine._hardwareRenderer.createPlatformPrimitive(z(i))),
              i
            );
          }
          S(t, e),
            A(t, [
              {
                key: "vertexBufferBindings",
                get: function () {
                  return this._vertexBufferBindings;
                }
              },
              {
                key: "vertexElements",
                get: function () {
                  return this._vertexElements;
                }
              },
              {
                key: "indexBufferBinding",
                get: function () {
                  return this._indexBufferBinding;
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.setVertexBufferBinding = function (e, t, n) {
              void 0 === t && (t = 0), void 0 === n && (n = 0);
              var i = e,
                r = void 0 !== i.buffer;
              r || (i = new Qa(e, t));
              var a = this._vertexBufferBindings;
              a.length <= n && (a.length = n + 1), this._setVertexBufferBinding(r ? t : n, i);
            }),
            (n.setVertexBufferBindings = function (e, t) {
              void 0 === t && (t = 0);
              var n = this._vertexBufferBindings,
                i = e.length,
                r = t + i;
              n.length < r && (n.length = r);
              for (var a = 0; a < i; a++) this._setVertexBufferBinding(t + a, e[a]);
            }),
            (n.setIndexBufferBinding = function (e, t) {
              var n = e,
                i = void 0 !== n.buffer;
              i || (n = new qa(e, t)),
                (this._indexBufferBinding = n),
                (this._glIndexType = ja._getGLIndexType(n.format));
            }),
            (n.setVertexElements = function (e) {
              this._clearVertexElements();
              for (var t = 0, n = e.length; t < n; t++) this._addVertexElement(e[t]);
            }),
            (n._draw = function (e, t) {
              this._platformPrimitive.draw(e, t);
            }),
            (n._addRefCount = function (t) {
              e.prototype._addRefCount.call(this, t);
              for (var n = this._vertexBufferBindings, i = 0, r = n.length; i < r; i++) n[i]._buffer._addRefCount(t);
            }),
            (n._onDestroy = function () {
              (this._vertexBufferBindings = null),
                (this._indexBufferBinding = null),
                (this._vertexElements = null),
                (this._vertexElementMap = null),
                this._platformPrimitive.destroy();
            }),
            (n._clearVertexElements = function () {
              this._vertexElements.length = 0;
              var e = this._vertexElementMap;
              for (var n in e) delete e[n];
              this._macroCollection.disable(t._uvMacro),
                this._macroCollection.disable(t._normalMacro),
                this._macroCollection.disable(t._tangentMacro),
                this._macroCollection.disable(t._vertexColorMacro),
                this._macroCollection.disable(t._vetexAlphaMacro);
            }),
            (n._addVertexElement = function (e) {
              var n = e.semantic,
                i = e.format;
              switch (((this._vertexElementMap[n] = e), this._vertexElements.push(e), n)) {
                case "TEXCOORD_0":
                  this._macroCollection.enable(t._uvMacro);
                  break;
                case "NORMAL":
                  this._macroCollection.enable(t._normalMacro);
                  break;
                case "TANGENT":
                  this._macroCollection.enable(t._tangentMacro);
                  break;
                case "COLOR_0":
                  this._macroCollection.enable(t._vertexColorMacro),
                    i === Da.Vector4 && this._macroCollection.enable(t._vetexAlphaMacro);
                  break;
              }
            }),
            (n._setVertexBufferBinding = function (e, t) {
              if (this._getRefCount() > 0) {
                var n = this._vertexBufferBindings[e];
                n && n._buffer._addRefCount(-1), t._buffer._addRefCount(1);
              }
              this._vertexBufferBindings[e] = t;
            }),
            t
          );
        })(fi);
      (Ya._uvMacro = Zn.getMacroByName("O3_HAS_UV")),
        (Ya._normalMacro = Zn.getMacroByName("O3_HAS_NORMAL")),
        (Ya._tangentMacro = Zn.getMacroByName("O3_HAS_TANGENT")),
        (Ya._vertexColorMacro = Zn.getMacroByName("O3_HAS_VERTEXCOLOR")),
        (Ya._vetexAlphaMacro = Zn.getMacroByName("O3_HAS_VERTEXALPHA"));
      var Ja,
        Za,
        $a,
        eo,
        to = (function () {
          function e(e, t, n, i, r) {
            void 0 === r && (r = 0),
              (this.normalized = !1),
              (this._glElementInfo = void 0),
              (this._semantic = void 0),
              (this._offset = void 0),
              (this._format = void 0),
              (this._bindingIndex = void 0),
              (this._instanceStepRate = void 0),
              (this._semantic = e),
              (this._offset = t),
              (this._format = n),
              (this._bindingIndex = i),
              (this._glElementInfo = ja._getElementInfo(this.format)),
              (this._instanceStepRate = Math.floor(r));
          }
          return (
            A(e, [
              {
                key: "semantic",
                get: function () {
                  return this._semantic;
                }
              },
              {
                key: "offset",
                get: function () {
                  return this._offset;
                }
              },
              {
                key: "format",
                get: function () {
                  return this._format;
                }
              },
              {
                key: "bindingIndex",
                get: function () {
                  return this._bindingIndex;
                }
              },
              {
                key: "instanceStepRate",
                get: function () {
                  return this._instanceStepRate;
                }
              }
            ]),
            A(e, [
              {
                key: "elementInfo",
                get: function () {
                  return this._glElementInfo;
                }
              }
            ]),
            e
          );
        })(),
        no = function (e, t, n) {
          void 0 === e && (e = 0),
            void 0 === t && (t = 0),
            void 0 === n && (n = Xa.Triangles),
            (this.start = void 0),
            (this.count = void 0),
            (this.topology = void 0),
            (this.start = e),
            (this.count = t),
            (this.topology = n);
        },
        io = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, t) || this),
              (n._uvRect = void 0),
              (n._worldSize = []),
              (n._positionQuad = void 0),
              (n._rotationAngle = 0),
              (n._anchor = void 0),
              (n._texture = void 0),
              (n._rect = void 0),
              (n._worldSizeFactor = void 0),
              (n.renderMode = "2D"),
              (n.tintColor = new y(1, 1, 1, 1)),
              (n.transformMatrix = void 0),
              (n._worldSizeFactor = 100),
              n.setTexture(void 0),
              n.setRect(void 0),
              n.setAnchor(void 0),
              n.setUvRect(),
              n.setWorldSize(),
              (n._positionQuad = { leftTop: new o(), leftBottom: new o(), rightTop: new o(), rightBottom: new o() }),
              n
            );
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.setTexture = function (e) {
              e && e.asset && (e = e.asset), (this._texture = e);
            }),
            (n.setRect = function (e) {
              var t, n, i, r;
              try {
                e && JSON.parse(e);
              } catch (e) {
                Se.warn("Rect is not valid JSON format");
              }
              this._rect = e || {
                x: 0,
                y: 0,
                width: null != (t = null === (n = this._texture) || void 0 === n ? void 0 : n.width) ? t : 0,
                height: null != (i = null === (r = this._texture) || void 0 === r ? void 0 : r.height) ? i : 0
              };
            }),
            (n.setAnchor = function (e) {
              this._anchor = e || [0.5, 0.5];
            }),
            (n.setWorldSize = function () {
              var e = this._worldSizeFactor;
              this._worldSize = [this._rect.width / e, this._rect.height / e];
            }),
            (n.setUvRect = function () {
              var e, t;
              this._texture
                ? ((e = this._texture.width), (t = this._texture.height))
                : ((e = this._rect.width), (t = this._rect.height)),
                (this._uvRect = {
                  u: this._rect.x / e,
                  v: this._rect.y / t,
                  width: this._rect.width / e,
                  height: this._rect.height / t
                });
            }),
            (n.render = function (e) {
              this._updatePositionQuad(e),
                this._transformByMatrix(),
                e._renderPipeline.pushSprite(
                  this,
                  this._positionQuad,
                  this._uvRect,
                  this.tintColor,
                  this.texture,
                  this.renderMode,
                  e
                );
            }),
            (n._transformByMatrix = function () {
              if (this.transformMatrix) {
                var e = this.transformMatrix,
                  n = this._positionQuad.leftTop,
                  i = t._tempVec40;
                i.setValue(n.x, n.y, n.z, 1), (n = this._positionQuad.leftBottom);
                var r = t._tempVec41;
                r.setValue(n.x, n.y, n.z, 1), (n = this._positionQuad.rightTop);
                var a = t._tempVec42;
                a.setValue(n.x, n.y, n.z, 1), (n = this._positionQuad.rightBottom);
                var o = t._tempVec43;
                o.setValue(n.x, n.y, n.z, 1),
                  y.transform(i, e, i),
                  y.transform(r, e, r),
                  y.transform(a, e, a),
                  y.transform(o, e, o),
                  this._positionQuad.leftTop.setValue(i.x, i.y, i.z),
                  this._positionQuad.leftBottom.setValue(r.x, r.y, r.z),
                  this._positionQuad.rightTop.setValue(a.x, a.y, a.z),
                  this._positionQuad.rightBottom.setValue(o.x, o.y, o.z);
              }
            }),
            (n._updatePositionQuad = function (e) {
              if ("2D" === this.renderMode) {
                var t = e.viewMatrix.elements,
                  n = new o(t[0], t[4], t[8]),
                  i = new o(t[1], t[5], t[9]),
                  r = this.entity.worldPosition.clone(),
                  a = this._worldSize,
                  s = this.entity.scale;
                if ((n.scale(a[0] * s.x), i.scale(a[1] * s.y), 0 !== this._rotationAngle)) {
                  var c = new o(t[2], t[6], t[10]),
                    u = new f();
                  f.rotationAxisAngle(c, this._rotationAngle, u),
                    o.transformByQuat(n, u, n),
                    o.transformByQuat(i, u, i);
                }
                var l = new o(),
                  d = new o();
                o.scale(n, 2 * (this.anchor[0] - 0.5), l),
                  o.scale(i, 2 * (this.anchor[1] - 0.5), d),
                  r.subtract(l).add(d);
                var h = this._positionQuad.leftTop;
                o.subtract(r, n, h), h.add(i);
                var _ = this._positionQuad.leftBottom;
                o.subtract(r, n, _), _.subtract(i);
                var p = this._positionQuad.rightBottom;
                o.add(r, n, p), p.subtract(i);
                var g = this._positionQuad.rightTop;
                o.add(r, n, g), g.add(i);
              }
            }),
            A(t, [
              {
                key: "texture",
                set: function (e) {
                  this.setTexture(e), this.setRect(), this.setUvRect(), this.setWorldSize();
                },
                get: function () {
                  return this._texture;
                }
              },
              {
                key: "anchor",
                set: function (e) {
                  this._anchor = e || [0.5, 0.5];
                },
                get: function () {
                  return this._anchor;
                }
              },
              {
                key: "rect",
                set: function (e) {
                  this.setRect(e), this.setUvRect(), this.setWorldSize();
                },
                get: function () {
                  return this._rect;
                }
              },
              {
                key: "rotationAngle",
                get: function () {
                  return this._rotationAngle;
                },
                set: function (e) {
                  this._rotationAngle = e;
                }
              }
            ]),
            t
          );
        })(Er);
      (io._tempVec40 = new y()),
        (io._tempVec41 = new y()),
        (io._tempVec42 = new y()),
        (io._tempVec43 = new y()),
        (function (e) {
          (e[(e["ONCE"] = 0)] = "ONCE"), (e[(e["LOOP"] = 1)] = "LOOP");
        })(Ja || (Ja = {})),
        (function (e) {
          (e[(e["FINISHED"] = 0)] = "FINISHED"),
            (e[(e["LOOP_END"] = 1)] = "LOOP_END"),
            (e[(e["FRAME_EVENT"] = 2)] = "FRAME_EVENT");
        })(Za || (Za = {})),
        (function (e) {
          (e[(e["LINEAR"] = 0)] = "LINEAR"), (e[(e["CUBICSPLINE"] = 1)] = "CUBICSPLINE"), (e[(e["STEP"] = 2)] = "STEP");
        })($a || ($a = {})),
        (function (e) {
          (e[(e["position"] = 0)] = "position"),
            (e[(e["rotation"] = 1)] = "rotation"),
            (e[(e["scale"] = 2)] = "scale"),
            (e[(e["other"] = 3)] = "other");
        })(eo || (eo = {}));
      var ro = (function (e) {
        function t(t) {
          var n;
          return (
            (n = e.call(this, null) || this),
            (n.name = t),
            (n.duration = void 0),
            (n.durationIndex = void 0),
            (n.samplers = void 0),
            (n.channels = void 0),
            (n.samplers = []),
            (n.channels = []),
            n
          );
        }
        S(t, e);
        var n = t.prototype;
        return (
          (n.addSampler = function (e, t, n, i) {
            void 0 === i && (i = $a.LINEAR), i === $a.CUBICSPLINE && (n <= 4 ? (i = $a.LINEAR) : (n /= 3));
            var r = { input: e, output: t, outputSize: n, interpolation: i };
            this.samplers.push(r);
          }),
          (n.addChannel = function (e, n, i) {
            var r = this.samplers[e],
              a = t._tagetTypeMap[i],
              o = { sampler: r, target: { id: n, path: i, pathType: null != a ? a : eo.other } };
            this.channels.push(o);
          }),
          (n.getChannelCount = function () {
            return this.channels.length;
          }),
          (n.getChannelObject = function (e) {
            return this.channels[e];
          }),
          (n.getFrameCount = function (e) {
            var t = this.channels[e].sampler;
            return t.input.length;
          }),
          (n.getFrameTime = function (e, t) {
            var n = this.channels[e].sampler;
            return n.input[t];
          }),
          (n.getChannelTimeLength = function (e) {
            var t = this.channels[e].sampler,
              n = t.input.length;
            return t.input[n - 1];
          }),
          (n.createChannelValue = function (e) {
            var t = this.channels[e].sampler;
            return new Float32Array(t.outputSize);
          }),
          (n.evaluate = function (e, t, n, i, r) {
            var a = this.channels[t],
              o = a.sampler.output,
              s = a.sampler.outputSize;
            switch (a.sampler.interpolation) {
              case $a.CUBICSPLINE:
                this.evaluateCubicSpline(e, o, s, n, i, r);
                break;
              case $a.LINEAR:
                this.evaluateLinear(e, o, s, n, i, r);
                break;
            }
            return e;
          }),
          (n.evaluateCubicSpline = function (e, t, n, i, r, a) {
            for (
              var o = a * a, s = a * o, c = 2 * s - 3 * o + 1, u = -2 * s + 3 * o, l = s - 2 * o + a, d = s - o, h = n;
              h >= 0;
              h--
            ) {
              var f = t[i * n * 3 + h],
                _ = t[i * n * 3 + n + h],
                p = t[i * n * 3 + 2 * n + h],
                g = t[r * n * 3 + n + h];
              e[h] = _ * c + g * u + f * l + p * d;
            }
          }),
          (n.evaluateLinear = function (e, t, n, i, r, a) {
            switch (n) {
              case 1:
                e[0] = t[i] * (1 - a) + t[r] * a;
                break;
              case 4:
                this._quaSlerp(e, t, i * n, t, r * n, a);
                break;
              default:
                for (var o = n; o >= 0; o--) e[o] = t[i * n + o] * (1 - a) + t[r * n + o] * a;
                break;
            }
          }),
          (n._quaSlerp = function (e, t, n, i, r, a) {
            var o,
              s,
              c,
              u,
              l,
              d = t[0 + n],
              h = t[1 + n],
              f = t[2 + n],
              _ = t[3 + n],
              p = i[0 + r],
              g = i[1 + r],
              v = i[2 + r],
              m = i[3 + r];
            return (
              (s = d * p + h * g + f * v + _ * m),
              s < 0 && ((s = -s), (p = -p), (g = -g), (v = -v), (m = -m)),
              1 - s > 1e-6
                ? ((o = Math.acos(s)), (c = Math.sin(o)), (u = Math.sin((1 - a) * o) / c), (l = Math.sin(a * o) / c))
                : ((u = 1 - a), (l = a)),
              (e[0] = u * d + l * p),
              (e[1] = u * h + l * g),
              (e[2] = u * f + l * v),
              (e[3] = u * _ + l * m),
              e
            );
          }),
          t
        );
      })(be);
      ro._tagetTypeMap = { position: eo.position, rotation: eo.rotation, scale: eo.scale };
      var ao,
        oo,
        so,
        co,
        uo,
        lo,
        ho,
        fo,
        _o = (function (e) {
          function t() {
            var t;
            return (
              (t = e.call(this, null) || this),
              (t.layerWeight = void 0),
              (t.mixTagetLayer = void 0),
              (t.isFading = void 0),
              (t.fadeDeltaTime = void 0),
              (t.crossFadeDuration = void 0),
              (t.fadeDuration = void 0),
              (t.crossFadeDeltaTime = void 0),
              (t.isMixLayer = void 0),
              (t.hasMixLayer = void 0),
              (t.mixEntity = void 0),
              (t._activedEvents = void 0),
              (t._animClip = void 0),
              (t._isPlaying = void 0),
              (t._wrapMode = void 0),
              (t._channelStates = void 0),
              (t._animClipLength = void 0),
              (t._frameEvents = void 0),
              (t.layerWeight = 1),
              (t._activedEvents = []),
              t
            );
          }
          S(t, e),
            A(t, [
              {
                key: "isPlaying",
                get: function () {
                  return this._animClip && this._isPlaying;
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.canMix = function (e, t) {
              if (!this._animClip || !this._isPlaying || this.isMixLayer || this.isFading) return !1;
              if (this._animClip.getChannelCount() !== e.getChannelCount()) return !1;
              for (var n = this._animClip.getChannelCount(), i = n - 1; i >= 0; i--) {
                var r = this._animClip.getChannelObject(i),
                  a = this._findChannelTarget(t, r.target),
                  o = e.getChannelObject(i),
                  s = this._findChannelTarget(t, o.target);
                if (a !== s) return !1;
              }
              return !0;
            }),
            (n.mix = function (e, t, n, i, r) {
              if (
                (void 0 === r && (r = {}),
                (this._isPlaying = t.isPlaying),
                (this._animClip = e),
                (this._wrapMode = "undefined" !== typeof r.wrapMode ? r.wrapMode : t._wrapMode),
                this._addEvents(r),
                (this._channelStates = []),
                (this._animClipLength = 0),
                this._isPlaying)
              ) {
                for (var a = t._channelStates, o = this._animClip.getChannelCount(), s = o - 1; s >= 0; s--) {
                  var c = this._animClip.getChannelObject(s),
                    u = this._findChannelTarget(i, c.target);
                  (this._channelStates[s] = {
                    frameTime: 0,
                    currentFrame: 0,
                    currentValue: this._animClip.createChannelValue(s),
                    mixWeight: u ? 1 : 0
                  }),
                    (a[s].mixWeight = void 0 === a[s].mixWeight ? 1 : a[s].mixWeight),
                    1 === a[s].mixWeight && (a[s].mixWeight = u ? 0 : 1);
                  var l = this._animClip.getChannelTimeLength(s);
                  this._animClipLength = this._animClipLength > l ? this._animClipLength : l;
                }
                return !0;
              }
              return !1;
            }),
            (n.removeMixWeight = function () {
              for (var e = this._channelStates.length, t = e - 1; t >= 0; t--)
                1 === this._channelStates[t].mixWeight && (this.mixTagetLayer._channelStates[t].mixWeight = 1);
            }),
            (n.play = function (e, t, n) {
              if (
                (void 0 === n && (n = { wrapMode: Ja.LOOP }),
                (this._isPlaying = !!e),
                (this._animClip = e),
                (this._wrapMode = "undefined" !== typeof n.wrapMode ? n.wrapMode : Ja.LOOP),
                this._addEvents(n),
                (this._channelStates = []),
                (this._animClipLength = 0),
                this._isPlaying)
              ) {
                for (var i = this._animClip.getChannelCount(), r = [], a = i - 1; a >= 0; a--) {
                  var o = this._animClip.getChannelObject(a),
                    s = this._findChannelTarget(t, o.target);
                  s || Se.warn("Can not find channel target:" + o.target.id),
                    (this._channelStates[a] = {
                      frameTime: 0,
                      currentFrame: 0,
                      currentValue: this._animClip.createChannelValue(a)
                    }),
                    (r[a] = {
                      targetObject: s,
                      path: o.target.path,
                      pathType: o.target.pathType,
                      outputSize: o.sampler.outputSize
                    });
                  var c = this._animClip.getChannelTimeLength(a);
                  this._animClipLength = this._animClipLength > c ? this._animClipLength : c;
                }
                return r;
              }
              return !1;
            }),
            (n.stop = function (e) {
              this._animClip && this._isPlaying && (e ? (this._isPlaying = !1) : (this._wrapMode = Ja.ONCE));
            }),
            (n.updateState = function (e) {
              if (this._animClip && this._isPlaying) {
                this.isFading
                  ? ((this.fadeDeltaTime += e),
                    (this.layerWeight = 1 - this.fadeDeltaTime / this.fadeDuration),
                    this.layerWeight <= 0 && (this._isPlaying = !1))
                  : this.crossFadeDuration &&
                    ((this.crossFadeDeltaTime += e),
                    (this.layerWeight = this.crossFadeDeltaTime / this.crossFadeDuration),
                    this.layerWeight >= 1 && ((this.layerWeight = 1), delete this.crossFadeDuration)),
                  (e /= 1e3),
                  this._activeEvents(e);
                for (var t = this._animClip.getChannelCount(), n = 0, i = t - 1; i >= 0; i--)
                  this._updateChannelState(e, i) && n++;
                0 === n && ((this._isPlaying = !1), this.isMixLayer && this.removeMixWeight());
              }
            }),
            (n.getChannelLayerWeight = function (e) {
              if ((this.hasMixLayer || this.isMixLayer) && e < this._channelStates.length) {
                var t = this._channelStates[e].mixWeight,
                  n = this.isMixLayer ? this.mixTagetLayer.layerWeight : this.layerWeight;
                return t * n;
              }
              return this.layerWeight;
            }),
            (n.getChannelValue = function (e) {
              return this._channelStates[e].currentValue;
            }),
            (n.triggerEvents = function () {
              var e = this;
              this._activedEvents &&
                this._activedEvents.forEach(function (t) {
                  e.trigger(t);
                }),
                (this._activedEvents.length = 0);
            }),
            (n.jumpToFrame = function (e) {
              for (var t = this._animClip.getChannelCount(), n = t - 1; n >= 0; n--) {
                var i = this._channelStates[n];
                (i.frameTime = 0), this._updateChannelState(e, n);
              }
            }),
            (n._updateChannelState = function (e, t) {
              var n = this._animClip,
                i = this._channelStates[t],
                r = n.getChannelTimeLength(t);
              if (((i.frameTime += e), i.frameTime > r))
                switch (this._wrapMode) {
                  case Ja.ONCE:
                    i.frameTime = r;
                    break;
                  case Ja.LOOP:
                    i.frameTime = i.frameTime % this._animClipLength;
                    break;
                  default:
                    Se.error("Unknown Anim wrap Mode: " + this._wrapMode);
                }
              if (i.mixWeight && 0 === i.mixWeight) return !0;
              var a = Math.min(i.frameTime, r),
                o = this._getKeyAndAlpha(n.getChannelObject(t), a);
              return (
                (i.currentValue = n.evaluate(i.currentValue, t, o.currentKey, o.nextKey, o.alpha)),
                !(this._wrapMode === Ja.ONCE && i.frameTime >= r)
              );
            }),
            (n._addEvents = function (e) {
              var t = this;
              if ((this.removeAllEventListeners(), (this._frameEvents = []), e.events))
                for (
                  var n = 0,
                    i = function (i) {
                      var r = e.events[i],
                        a = r.type;
                      r.type === Za.FRAME_EVENT &&
                        ((a = "frameEvent" + n),
                        n++,
                        t._frameEvents.push({ eventType: a, triggerTime: r.triggerTime, triggered: !1 })),
                        t.addEventListener(a, function (e) {
                          r.callback();
                        });
                    },
                    r = e.events.length - 1;
                  r >= 0;
                  r--
                )
                  i(r);
            }),
            (n._activeEvents = function (e) {
              var t = this._animClip.durationIndex;
              if (this._frameEvents.length > 0 && this._channelStates.length > 0)
                for (var n = this._channelStates[t].frameTime + e, i = this._frameEvents.length - 1; i >= 0; i--) {
                  var r = this._frameEvents[i];
                  !r.triggered &&
                    n > r.triggerTime &&
                    (this._activedEvents.push(new q(r.eventType, this)), (r.triggered = !0));
                }
              if (this._channelStates.length > 0 && this._channelStates[t].frameTime + e >= this._animClip.duration)
                if (this._wrapMode === Ja.LOOP) {
                  if (this._frameEvents.length > 0)
                    for (var a = this._frameEvents.length - 1; a >= 0; a--) this._frameEvents[a].triggered = !1;
                  this.hasEvent(Za.LOOP_END) && this._activedEvents.push(new q(Za.LOOP_END, this));
                } else this.hasEvent(Za.FINISHED) && this._activedEvents.push(new q(Za.FINISHED, this));
            }),
            (n._findChannelTarget = function (e, t) {
              var n = t.id,
                i = null;
              return (i = e.name === n ? e : e.findByName(n)), "weights" === t.path ? i.getComponent(Oa) : i;
            }),
            (n._getKeyAndAlpha = function (e, t) {
              for (var n = 0, i = 0, r = 0, a = e.sampler.input, o = a.length, s = o - 1; s >= 0; s--)
                if (t > a[s]) {
                  (n = t - a[s]), (i = s);
                  break;
                }
              if (((r = i + 1), r >= o))
                switch (this._wrapMode) {
                  case Ja.ONCE:
                    r = o - 1;
                    break;
                  case Ja.LOOP:
                    r = 0;
                    break;
                }
              var c = a[r] - a[i],
                u = r === i || c < 1e-5 ? 1 : n / c;
              return { currentKey: i, nextKey: r, alpha: u };
            }),
            t
          );
        })(we),
        po =
          ((ho = (function (e) {
            function t(t) {
              var n;
              return (
                (n = e.call(this, t) || this),
                G(n, "_onUpdateIndex", oo, z(n)),
                G(n, "_animSet", so, z(n)),
                G(n, "_animLayers", co, z(n)),
                G(n, "_timeScale", uo, z(n)),
                G(n, "_channelTargets", lo, z(n)),
                n
              );
            }
            S(t, e),
              (t.lerp = function (e, t, n, i, r) {
                switch (r) {
                  case 1:
                    e = t * (1 - i) + n * i;
                    break;
                  case 4:
                    var a = L(f, t),
                      o = L(f, n),
                      s = new f();
                    f.slerp(a, o, i, s), (e[0] = s.x), (e[1] = s.y), (e[2] = s.z), (e[3] = s.w);
                    break;
                  default:
                    for (var c = r; c >= 0; c--) e[c] = t[c] * (1 - i) + n[c] * i;
                    break;
                }
                return e;
              }),
              A(t, [
                {
                  key: "timeScale",
                  get: function () {
                    return this._timeScale;
                  },
                  set: function (e) {
                    e > 0 && (this._timeScale = e);
                  }
                }
              ]);
            var n = t.prototype;
            return (
              (n.update = function (e) {
                if (this.isPlaying()) {
                  e *= this._timeScale;
                  for (var t = this._animLayers.length - 1; t >= 0; t--) {
                    var n = this._animLayers[t];
                    n.updateState(e);
                  }
                  this._updateValues();
                  for (var i = this._animLayers.length - 1; i >= 0; i--) {
                    var r = this._animLayers[i];
                    r.triggerEvents(),
                      r.isPlaying ||
                        (!r.isFading && !r.isMixLayer) ||
                        (this._animLayers.splice(i, 1), this._removeRefMixLayers(r));
                  }
                }
              }),
              (n.addAnimationClip = function (e, t) {
                this._animSet[t] = e;
              }),
              (n.removeAnimationClip = function (e) {
                var t = this._animSet[e];
                t && delete this._animSet[e];
              }),
              (n.getAnimationClipLength = function (e) {
                var t = this._animSet[e];
                return t ? t.getChannelTimeLength(0) : 0;
              }),
              (n.getAnimationClip = function (e) {
                return this._animSet[e] || null;
              }),
              (n.isPlaying = function () {
                for (var e = this._animLayers.length - 1; e >= 0; e--) if (this._animLayers[e].isPlaying) return !0;
                return !1;
              }),
              (n.playAnimationClip = function (e, t) {
                var n = this._animSet[e];
                if (n) {
                  for (var i = null, r = this._animLayers.length - 1; r >= 0; r--)
                    if (!this._animLayers[r].isFading && !this._animLayers[r].isMixLayer) {
                      i = this._animLayers[r];
                      break;
                    }
                  i || ((i = new _o()), this._animLayers.push(i)),
                    this._removeRefMixLayers(i),
                    (this._channelTargets = i.play(n, this.entity, t));
                } else Se.error("can not find anim clip: " + e);
              }),
              (n.crossFade = function (e, t, n) {
                var i = this._animSet[e];
                if (i)
                  if (!t || t < 0) Se.error("crossFadeDuration can not less than 0!");
                  else {
                    for (var r = null, a = this._animLayers.length - 1; a >= 0; a--)
                      if (this._animLayers[a].canMix(i, this.entity)) {
                        r = this._animLayers[a];
                        break;
                      }
                    if (r) {
                      for (var o = this._animLayers.length - 1; o >= 0; o--)
                        this._animLayers[o].isFading && this._animLayers.splice(o, 1);
                      (r.isFading = !0), (r.fadeDuration = t), (r.fadeDeltaTime = 0);
                      var s = new _o();
                      (s.crossFadeDuration = t),
                        (s.crossFadeDeltaTime = 0),
                        s.play(i, this.entity, n),
                        this._animLayers.push(s);
                    } else this.playAnimationClip(e, n);
                  }
                else Se.error("can not find anim clip: " + e);
              }),
              (n.mix = function (e, t, n) {
                var i = this._animSet[e];
                if (i) {
                  var r = this.entity.findByName(t);
                  if (r) {
                    for (var a = null, o = this._animLayers.length - 1; o >= 0; o--)
                      if (this._animLayers[o].canMix(i, this.entity)) {
                        a = this._animLayers[o];
                        break;
                      }
                    if (a) {
                      this._removeRefMixLayers(null, r), (a.hasMixLayer = !0);
                      var s = new _o();
                      (s.isMixLayer = !0),
                        (s.mixTagetLayer = a),
                        (s.mixEntity = r),
                        s.mix(i, a, this.entity, r, n),
                        this._animLayers.push(s);
                    }
                  } else Se.error("can not find mix bone!");
                } else Se.error("can not find anim clip: " + e);
              }),
              (n.stop = function (e) {
                for (var t = this._animLayers.length - 1; t >= 0; t--)
                  this._animLayers[t].isFading ? this._animLayers.splice(t, 1) : this._animLayers[t].stop(e);
              }),
              (n.jumpToFrame = function (e) {
                e /= 1e3;
                for (var t = this._animLayers.length - 1; t >= 0; t--) this._animLayers[t].jumpToFrame(e);
                this._updateValues();
              }),
              (n._removeRefMixLayers = function (e, t) {
                if (e && e.hasMixLayer)
                  for (var n = this._animLayers.length - 1; n >= 0; n--) {
                    var i = this._animLayers[n];
                    i.isMixLayer && i.mixTagetLayer === e && (i.removeMixWeight(), this._animLayers.splice(n, 1));
                  }
                if (t)
                  for (var r = this._animLayers.length - 1; r >= 0; r--) {
                    var a = this._animLayers[r];
                    a.isMixLayer &&
                      (a.mixEntity === t || a.mixEntity.findByName(t) || t.findByName(a.mixEntity)) &&
                      (a.removeMixWeight(), this._animLayers.splice(r, 1));
                  }
              }),
              (n._updateValues = function () {
                if (0 !== this._animLayers.length && this._channelTargets)
                  for (var e = this._channelTargets.length - 1; e >= 0; e--) {
                    var t = this._channelTargets[e],
                      n = this._getChannelValue(e, t.outputSize),
                      i = t.targetObject,
                      r = t.path;
                    if ("weights" === r) i.setWeights(n);
                    else {
                      var a = n,
                        o = i.transform;
                      switch (t.pathType) {
                        case eo.position:
                          var s = o.position;
                          s.setValue(a[0], a[1], a[2]), (o.position = s);
                          break;
                        case eo.rotation:
                          var c = o.rotationQuaternion;
                          c.setValue(a[0], a[1], a[2], a[3]), (o.rotationQuaternion = c);
                          break;
                        case eo.scale:
                          var u = o.scale;
                          u.setValue(a[0], a[1], a[2]), (o.scale = u);
                          break;
                        default:
                          i[r] = n;
                      }
                    }
                  }
              }),
              (n._getChannelValue = function (e, n) {
                for (var i = [], r = [], a = this._animLayers.length - 1; a >= 0; a--) {
                  var o = this._animLayers[a].getChannelLayerWeight(e);
                  o > 0 && (i.push(o), r.push(this._animLayers[a].getChannelValue(e)));
                }
                return 1 === r.length
                  ? r[0]
                  : 2 === r.length
                  ? t.lerp(r[0], r[0], r[1], i[1], n)
                  : (Se.error("Can not get channel value!"), !1);
              }),
              (n._onEnable = function () {
                this.engine._componentsManager.addOnUpdateAnimations(this);
              }),
              (n._onDisable = function () {
                this.engine._componentsManager.removeOnUpdateAnimations(this);
              }),
              t
            );
          })(at)),
          (ao = ho),
          (oo = U(ao.prototype, "_onUpdateIndex", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return -1;
            }
          })),
          (so = U(ao.prototype, "_animSet", [J], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return {};
            }
          })),
          (co = U(ao.prototype, "_animLayers", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return [new _o()];
            }
          })),
          (uo = U(ao.prototype, "_timeScale", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function () {
              return 1;
            }
          })),
          (lo = U(ao.prototype, "_channelTargets", [Q], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: null
          })),
          ao),
        go = (function (e) {
          function t(t, n) {
            var i;
            return (
              (i = e.call(this, t) || this),
              (i.name = void 0),
              (i._primitive = void 0),
              (i.bounds = new c()),
              (i._subGeometries = []),
              (i._primitive = new Ya(t)),
              (i.name = n),
              i
            );
          }
          S(t, e),
            A(t, [
              {
                key: "vertexBufferBindings",
                get: function () {
                  return this._primitive.vertexBufferBindings;
                }
              },
              {
                key: "indexBufferBinding",
                get: function () {
                  return this._primitive.indexBufferBinding;
                }
              },
              {
                key: "vertexElements",
                get: function () {
                  return this._primitive.vertexElements;
                }
              },
              {
                key: "subGeometry",
                get: function () {
                  return this._subGeometries[0] || null;
                }
              },
              {
                key: "subGeometries",
                get: function () {
                  return this._subGeometries;
                }
              },
              {
                key: "instanceCount",
                get: function () {
                  return this._primitive.instanceCount;
                },
                set: function (e) {
                  this._primitive.instanceCount = e;
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.setVertexBufferBinding = function (e, t, n) {
              void 0 === t && (t = 0), void 0 === n && (n = 0), this._primitive.setVertexBufferBinding(e, t, n);
            }),
            (n.setVertexBufferBindings = function (e, t) {
              void 0 === t && (t = 0), this._primitive.setVertexBufferBindings(e, t);
            }),
            (n.setIndexBufferBinding = function (e, t) {
              this._primitive.setIndexBufferBinding(e, t);
            }),
            (n.setVertexElements = function (e) {
              this._primitive.setVertexElements(e);
            }),
            (n.addSubGeometry = function (e, t, n) {
              void 0 === n && (n = Xa.Triangles);
              var i = new no(e, t, n);
              return this._subGeometries.push(i), i;
            }),
            (n.removeSubGeometry = function (e) {
              var t = this._subGeometries,
                n = t.indexOf(e);
              -1 !== n && t.splice(n, 1);
            }),
            (n.clearSubGeometry = function () {
              this._subGeometries.length = 0;
            }),
            (n.destroy = function () {
              this._primitive && (this._primitive.destroy(), (this._primitive = null));
            }),
            t
          );
        })(be),
        vo = (function (e) {
          function t() {
            for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
            return (t = e.call.apply(e, [this].concat(i)) || this), (t._material = void 0), (t._geometry = void 0), t;
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.render = function (e) {
              var t = this.geometry;
              if (t) {
                for (
                  var n = t.subGeometries, i = e._renderPipeline, r = this._material, a = 0, o = n.length;
                  a < o;
                  a++
                )
                  if (r) {
                    var s = lt.getFromPool();
                    s.setValue(this, t._primitive, n[a], r), i.pushPrimitive(s);
                  }
              } else Se.error("geometry is null.");
            }),
            (n._updateBounds = function (e) {
              var t = this._geometry.bounds,
                n = this._entity.transform.worldMatrix;
              c.transform(t, n, e);
            }),
            A(t, [
              {
                key: "geometry",
                set: function (e) {
                  this._geometry && this._geometry._primitive._addRefCount(-1),
                    e._primitive._addRefCount(1),
                    (this._geometry = e);
                },
                get: function () {
                  return this._geometry;
                }
              },
              {
                key: "material",
                set: function (e) {
                  this._material && this._material._addRefCount(-1), e._addRefCount(1), (this._material = e);
                },
                get: function () {
                  return this._material;
                }
              }
            ]),
            t
          );
        })(Er),
        mo = (function (e) {
          function t() {
            return e.apply(this, arguments) || this;
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n._initialize = function (e, t, n) {
              var i = 32,
                r = [
                  new to("POSITION", 0, Da.Vector3, 0),
                  new to("NORMAL", 12, Da.Vector3, 0),
                  new to("TEXCOORD_0", 24, Da.Vector2, 0)
                ];
              this._initBuffer(e, t, n, i, r);
            }),
            (n._initBuffer = function (e, t, n, i, r) {
              var a = r[0],
                o = new Ka(e, Ha.VertexBuffer, t, Ba.Static),
                s = new Ka(e, Ha.IndexBuffer, n, Ba.Static);
              this.setVertexBufferBinding(o, i),
                this.setIndexBufferBinding(s, Na.UInt16),
                this.setVertexElements(r),
                this.addSubGeometry(0, n.length),
                this._computeBounds(a, t);
            }),
            (n._computeBounds = function (e, t) {
              var n = e,
                i = n.bindingIndex,
                r = this._primitive.vertexBufferBindings[i],
                a = r.stride,
                s = n.offset,
                c = r.buffer.byteLength / a,
                u = t;
              u instanceof ArrayBuffer || (u = u.buffer);
              for (
                var l = new DataView(u, s), d = new o(1 / 0, 1 / 0, 1 / 0), h = new o(-1 / 0, -1 / 0, -1 / 0), f = 0;
                f < c;
                f++
              ) {
                var _ = s + a * f,
                  p = new o(l.getFloat32(_, !0), l.getFloat32(_ + 4, !0), l.getFloat32(_ + 8, !0));
                o.min(d, p, d), o.max(h, p, h);
              }
              var g = this.bounds;
              d.cloneTo(g.min), h.cloneTo(g.max);
            }),
            t
          );
        })(go),
        yo = (function (e) {
          function t(t, n, i, r) {
            var a;
            void 0 === n && (n = 1), void 0 === i && (i = 1), void 0 === r && (r = 1), (a = e.call(this, t) || this);
            var o = n / 2,
              s = i / 2,
              c = r / 2,
              u = new Float32Array([
                -o,
                s,
                -c,
                0,
                1,
                0,
                0,
                0,
                o,
                s,
                -c,
                0,
                1,
                0,
                1,
                0,
                o,
                s,
                c,
                0,
                1,
                0,
                1,
                1,
                -o,
                s,
                c,
                0,
                1,
                0,
                0,
                1,
                -o,
                -s,
                -c,
                0,
                -1,
                0,
                0,
                1,
                o,
                -s,
                -c,
                0,
                -1,
                0,
                1,
                1,
                o,
                -s,
                c,
                0,
                -1,
                0,
                1,
                0,
                -o,
                -s,
                c,
                0,
                -1,
                0,
                0,
                0,
                -o,
                s,
                -c,
                -1,
                0,
                0,
                0,
                0,
                -o,
                s,
                c,
                -1,
                0,
                0,
                1,
                0,
                -o,
                -s,
                c,
                -1,
                0,
                0,
                1,
                1,
                -o,
                -s,
                -c,
                -1,
                0,
                0,
                0,
                1,
                o,
                s,
                -c,
                1,
                0,
                0,
                1,
                0,
                o,
                s,
                c,
                1,
                0,
                0,
                0,
                0,
                o,
                -s,
                c,
                1,
                0,
                0,
                0,
                1,
                o,
                -s,
                -c,
                1,
                0,
                0,
                1,
                1,
                -o,
                s,
                c,
                0,
                0,
                1,
                0,
                0,
                o,
                s,
                c,
                0,
                0,
                1,
                1,
                0,
                o,
                -s,
                c,
                0,
                0,
                1,
                1,
                1,
                -o,
                -s,
                c,
                0,
                0,
                1,
                0,
                1,
                -o,
                s,
                -c,
                0,
                0,
                -1,
                1,
                0,
                o,
                s,
                -c,
                0,
                0,
                -1,
                0,
                0,
                o,
                -s,
                -c,
                0,
                0,
                -1,
                0,
                1,
                -o,
                -s,
                -c,
                0,
                0,
                -1,
                1,
                1
              ]),
              l = new Uint16Array([
                0,
                2,
                1,
                2,
                0,
                3,
                4,
                6,
                7,
                6,
                4,
                5,
                8,
                10,
                9,
                10,
                8,
                11,
                12,
                14,
                15,
                14,
                12,
                13,
                16,
                18,
                17,
                18,
                16,
                19,
                20,
                22,
                23,
                22,
                20,
                21
              ]);
            return a._initialize(t, u, l), a;
          }
          return S(t, e), t;
        })(mo),
        xo = (function (e) {
          function t(t, n, i, r, a, o, s, c) {
            var u;
            return (
              void 0 === n && (n = 1),
              void 0 === i && (i = 8),
              void 0 === r && (r = 6),
              void 0 === a && (a = 0),
              void 0 === o && (o = 2 * Math.PI),
              void 0 === s && (s = 0),
              void 0 === c && (c = Math.PI),
              (u = e.call(this, t) || this),
              (u._parameters = void 0),
              (u._thetaEnd = void 0),
              (u._parameters = {
                radius: n || 1,
                horizontalSegments: Math.max(3, Math.floor(i)),
                verticalSegments: Math.max(2, Math.floor(r)),
                alphaStart: a,
                alphaRange: o,
                thetaStart: s,
                thetaRange: c
              }),
              (u._thetaEnd = u._parameters.thetaStart + u._parameters.thetaRange),
              u.initialize(t),
              u
            );
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.initialize = function (e) {
              for (
                var t = this._parameters,
                  n = t.verticalSegments,
                  i = t.horizontalSegments,
                  r = 0,
                  a = [],
                  o = new Float32Array((n + 1) * (i + 1) * 8),
                  s = [],
                  c = 0;
                c <= n;
                c++
              ) {
                for (var u = [], l = c / n, d = 0; d <= i; d++) {
                  var h = d / i,
                    f =
                      -this._parameters.radius *
                      Math.cos(this._parameters.alphaStart + h * this._parameters.alphaRange) *
                      Math.sin(this._parameters.thetaStart + l * this._parameters.thetaRange),
                    _ =
                      this._parameters.radius * Math.cos(this._parameters.thetaStart + l * this._parameters.thetaRange),
                    p =
                      this._parameters.radius *
                      Math.sin(this._parameters.alphaStart + h * this._parameters.alphaRange) *
                      Math.sin(this._parameters.thetaStart + l * this._parameters.thetaRange);
                  (f = Math.abs(f) < 1e-6 ? 0 : f), (_ = Math.abs(_) < 1e-6 ? 0 : _), (p = Math.abs(p) < 1e-6 ? 0 : p);
                  var g = 8 * r;
                  (o[g] = f),
                    (o[g + 1] = _),
                    (o[g + 2] = p),
                    (o[g + 3] = f),
                    (o[g + 4] = _),
                    (o[g + 5] = p),
                    (o[g + 6] = h),
                    (o[g + 7] = 1 - l),
                    u.push(r++);
                }
                a.push(u);
              }
              for (var v = 0; v < n; v++)
                for (var m = 0; m < i; m++) {
                  var y = a[v][m + 1],
                    x = a[v][m],
                    b = a[v + 1][m],
                    w = a[v + 1][m + 1];
                  (0 !== v || this._parameters.thetaStart > 0) && s.push(y, x, w),
                    (v !== n - 1 || this._thetaEnd < Math.PI) && s.push(x, b, w);
                }
              this._initialize(e, o, Uint16Array.from(s));
            }),
            t
          );
        })(mo),
        bo = (function (e) {
          function t(t, n, i, r, a) {
            var o;
            return (
              void 0 === n && (n = 1),
              void 0 === i && (i = 1),
              void 0 === r && (r = 1),
              void 0 === a && (a = 1),
              (o = e.call(this, t) || this),
              (o._parameters = void 0),
              (o.halfWidth = void 0),
              (o.halfHeight = void 0),
              (o._parameters = {
                width: n,
                height: i,
                horizontalSegments: Math.floor(r),
                verticalSegments: Math.floor(a)
              }),
              (o.halfWidth = o._parameters.width / 2),
              (o.halfHeight = o._parameters.height / 2),
              o.initialize(t),
              o
            );
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.initialize = function (e) {
              for (
                var t = this._parameters,
                  n = t.verticalSegments,
                  i = t.horizontalSegments,
                  r = 0,
                  a = 0,
                  o = [],
                  s = new Float32Array((n + 1) * (i + 1) * 8),
                  c = new Uint16Array(n * i * 6),
                  u = 0;
                u <= n;
                u++
              ) {
                for (var l = [], d = u / n, h = 0; h <= i; h++) {
                  var f = h / i,
                    _ = f * this._parameters.width - this.halfWidth,
                    p = d * this._parameters.height - this.halfHeight;
                  (s[a++] = _),
                    (s[a++] = p),
                    (s[a++] = 0),
                    (s[a++] = 0),
                    (s[a++] = 0),
                    (s[a++] = 1),
                    (s[a++] = f),
                    (s[a++] = 1 - d),
                    l.push(r++);
                }
                o.push(l);
              }
              r = 0;
              for (var g = 0; g < n; g++)
                for (var v = 0; v < i; v++) {
                  var m = o[g][v + 1],
                    y = o[g][v],
                    x = o[g + 1][v],
                    b = o[g + 1][v + 1];
                  (c[r++] = m), (c[r++] = x), (c[r++] = y), (c[r++] = m), (c[r++] = b), (c[r++] = x);
                }
              this._initialize(e, s, c);
            }),
            t
          );
        })(mo),
        wo = (function (e) {
          function t(t, n, i, r, a, o, s, c, u, l) {
            var d;
            return (
              void 0 === n && (n = 1),
              void 0 === i && (i = 1),
              void 0 === r && (r = 1),
              void 0 === a && (a = 8),
              void 0 === o && (o = 1),
              void 0 === s && (s = !1),
              void 0 === c && (c = 0),
              void 0 === u && (u = 2 * Math.PI),
              void 0 === l && (l = he.CCW),
              (d = e.call(this, t) || this),
              (d.FrontFace = void 0),
              (d.index = void 0),
              (d.indexArray = void 0),
              (d.halfHeight = void 0),
              (d._parameters = void 0),
              (d._vertices = void 0),
              (d._indices = void 0),
              (d.FrontFace = l),
              (d._parameters = {
                radiusTop: n,
                radiusBottom: i,
                height: r,
                radialSegments: a,
                heightSegments: o,
                openEnded: s,
                thetaStart: c,
                thetaLength: u
              }),
              (d._vertices = []),
              (d._indices = []),
              (d.index = 0),
              (d.indexArray = []),
              (d.halfHeight = d._parameters.height / 2),
              d.generateTorso(),
              !1 === d._parameters.openEnded &&
                (d._parameters.radiusTop > 0 && d.generateCap(!0), d._parameters.radiusBottom > 0 && d.generateCap(!1)),
              d._initialize(t, Float32Array.from(d._vertices), Uint16Array.from(d._indices)),
              d
            );
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.generateTorso = function () {
              var e,
                t,
                n = this._parameters,
                i = n.radialSegments,
                r = n.heightSegments,
                a = n.radiusBottom,
                s = n.radiusTop,
                c = n.height,
                u = new o(),
                l = (a - s) / c;
              for (t = 0; t <= r; t++) {
                var d = [],
                  h = t / r,
                  f = h * (a - s) + s;
                for (e = 0; e <= i; e++) {
                  var _ = e / i,
                    p = _ * this._parameters.thetaLength + this._parameters.thetaStart,
                    g = Math.sin(p),
                    v = Math.cos(p),
                    m = f * g,
                    y = -h * c + this.halfHeight,
                    x = f * v;
                  this._vertices.push(m, y, x),
                    u.setValue(g, l, v),
                    u.normalize(),
                    this._vertices.push(u.x, u.y, u.z),
                    this.FrontFace === he.CCW ? this._vertices.push(_, h) : this._vertices.push(1 - _, h),
                    d.push(this.index++);
                }
                this.indexArray.push(d);
              }
              for (e = 0; e < i; e++)
                for (t = 0; t < r; t++) {
                  var b = this.indexArray[t][e],
                    w = this.indexArray[t + 1][e],
                    A = this.indexArray[t + 1][e + 1],
                    T = this.indexArray[t][e + 1];
                  this._indices.push(b, w, T), this._indices.push(w, A, T);
                }
            }),
            (n.generateCap = function (e) {
              var t,
                n = this._parameters.radialSegments,
                i = !0 === e ? this._parameters.radiusTop : this._parameters.radiusBottom,
                r = !0 === e ? 1 : -1,
                a = this.index;
              for (t = 1; t <= n; t++)
                this._vertices.push(0, this.halfHeight * r, 0),
                  this._vertices.push(0, r, 0),
                  this._vertices.push(0.5, 0.5),
                  this.index++;
              var o = this.index;
              for (t = 0; t <= n; t++) {
                var s = t / n,
                  c = s * this._parameters.thetaLength + this._parameters.thetaStart,
                  u = Math.cos(c),
                  l = Math.sin(c),
                  d = i * l,
                  h = this.halfHeight * r,
                  f = i * u;
                this._vertices.push(d, h, f), this._vertices.push(0, r, 0);
                var _ = 0.5 * u + 0.5,
                  p = 0.5 * l * r + 0.5;
                this._vertices.push(_, p), this.index++;
              }
              for (t = 0; t < n; t++) {
                var g = a + t,
                  v = o + t;
                !0 === e ? this._indices.push(v, v + 1, g) : this._indices.push(v + 1, v, g);
              }
            }),
            t
          );
        })(mo),
        Ao = (function (e) {
          function t(t, n) {
            var i;
            void 0 === n && (n = {}),
              (i = e.call(this, t) || this),
              (i.radius = 1),
              (i.segments = 16),
              (i.thetaStart = 0),
              (i.thetaLength = 2 * Math.PI),
              (i.radius = n.radius || i.radius),
              (i.segments = n.segments || i.segments),
              (i.thetaStart = n.thetaStart || i.thetaStart),
              (i.thetaLength = n.thetaLength || i.thetaLength);
            var r = z(i),
              a = r.segments,
              o = r.radius,
              s = new Float32Array(8 * (a + 2));
            s.set([0, 0, 0, 0, 0, 1, 0.5, 0.5]);
            for (var c = 8, u = 0; u <= a; u++) {
              var l = i.thetaStart + (u / a) * i.thetaLength,
                d = o * Math.cos(l),
                h = o * Math.sin(l);
              (s[c++] = d),
                (s[c++] = h),
                (s[c++] = 0),
                (s[c++] = 0),
                (s[c++] = 0),
                (s[c++] = 1),
                (s[c++] = 0.5 * (d / o + 1)),
                (s[c++] = 0.5 * (h / o + 1));
            }
            var f = new Uint16Array(3 * a);
            c = 0;
            for (var _ = 1; _ <= a; _++) (f[c++] = _), (f[c++] = _ + 1), (f[c++] = 0);
            return i._initialize(t, s, f), i;
          }
          return S(t, e), t;
        })(mo),
        To = (function (e) {
          function t(t) {
            var n;
            n = e.call(this, t) || this;
            var i = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]),
              r = new Uint16Array([0, 1, 2, 3]);
            return n._initialize(t, i, r), (n.subGeometry.topology = Xa.TriangleFan), n;
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n._initialize = function (e, t, n) {
              var i = 20,
                r = [new to("POSITION", 0, Da.Vector3, 0), new to("TEXCOORD_0", 12, Da.Vector2, 0)];
              this._initBuffer(e, t, n, i, r);
            }),
            t
          );
        })(mo),
        Mo = (function (e) {
          function t(t, n) {
            var i;
            void 0 === t && (t = {}), (i = e.call(this, n) || this), (i.parameters = t);
            for (
              var r = i.parameters.radius || 1,
                a = i.parameters.tube || 0.4,
                o = Math.floor(i.parameters.radialSegments) || 8,
                s = Math.floor(i.parameters.tubularSegments) || 6,
                c = i.parameters.arc || 2 * Math.PI,
                u = new Float32Array((o + 1) * (s + 1) * 3),
                l = new Uint16Array(o * s * 6),
                d = 0,
                h = 0;
              h <= o;
              h++
            )
              for (var f = 0; f <= s; f++) {
                var _ = (f / s) * c,
                  p = (h / o) * Math.PI * 2;
                (u[d++] = (r + a * Math.cos(p)) * Math.cos(_)),
                  (u[d++] = (r + a * Math.cos(p)) * Math.sin(_)),
                  (u[d++] = a * Math.sin(p));
              }
            d = 0;
            for (var g = 1; g <= o; g++)
              for (var v = 1; v <= s; v++) {
                var m = (s + 1) * g + v - 1,
                  y = (s + 1) * (g - 1) + v - 1,
                  x = (s + 1) * (g - 1) + v,
                  b = (s + 1) * g + v;
                (l[d++] = m), (l[d++] = y), (l[d++] = b), (l[d++] = y), (l[d++] = x), (l[d++] = b);
              }
            return i._initialize(n, u, l), i;
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n._initialize = function (e, t, n) {
              var i = 12,
                r = [new to("POSITION", 0, Da.Vector3, 0)];
              this._initBuffer(e, t, n, i, r);
            }),
            t
          );
        })(mo),
        Co = (function (e) {
          function t(t) {
            var n;
            return (n = e.call(this, t) || this), (n._props = void 0), (n._geometryType = void 0), n;
          }
          S(t, e),
            A(t, [
              {
                key: "geometryType",
                set: function (e) {
                  switch (e) {
                    case "Sphere":
                      var t = this._props,
                        n = t.sphereRadius,
                        i = t.sphereHorizontalSegments,
                        r = t.sphereVerticalSegments,
                        a = t.sphereAlphaStart,
                        o = t.sphereAlphaRange,
                        s = t.sphereThetaStart,
                        c = t.sphereThetaRange;
                      this.geometry = new xo(this.engine, n, i, r, a, o, s, c);
                      break;
                    case "Cylinder":
                      var u = this._props,
                        l = u.cylinderRadiusTop,
                        d = u.cylinderRadiusBottom,
                        h = u.cylinderHeight,
                        f = u.cylinderRadialSegments,
                        _ = u.cylinderHeightSegments,
                        p = u.cylinderOpenEnded;
                      this.geometry = new wo(this.engine, l, d, h, f, _, p, void 0, void 0, void 0);
                      break;
                    case "Plane":
                      var g = this._props,
                        v = g.planeWidth,
                        m = g.planeHeight,
                        y = g.planeHorizontalSegments,
                        x = g.planeVerticalSegments;
                      this.geometry = new bo(this.engine, v, m, y, x);
                      break;
                    case "Box":
                      var b = this._props,
                        w = b.boxWidth,
                        A = b.boxHeight,
                        T = b.boxDepth;
                      this.geometry = new yo(this.engine, w, A, T);
                      break;
                  }
                  this._geometryType = e;
                },
                get: function () {
                  return this._geometryType;
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.init = function (e) {
              this._props = e;
              var t = e.geometryType,
                n = void 0 === t ? fo.Box : t;
              (this.material = e.material), (this.geometryType = n);
            }),
            (n.setProp = function (e, t) {
              (this._props[e] = t),
                "material" === e ? (this.material = t) : (this.geometryType = this._props.geometryType);
            }),
            A(t, [
              {
                key: "material",
                get: function () {
                  return this._material;
                },
                set: function (e) {
                  this._material = e || new Ia(this.engine);
                }
              }
            ]),
            t
          );
        })(vo);
      (function (e) {
        (e["Box"] = "Box"), (e["Cylinder"] = "Cylinder"), (e["Plane"] = "Plane"), (e["Sphere"] = "Sphere");
      })(fo || (fo = {}));
      var Po,
        So = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, t, Zn.find("skybox")) || this),
              (n.renderState.rasterState.cullMode = pt.Off),
              (n.renderState.depthState.compareFunction = _t.LessEqual),
              n
            );
          }
          return S(t, e), t;
        })(Or),
        Ro = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, t) || this),
              (n._skyBoxMap = void 0),
              (n._matrix = new _()),
              (n._initBounds = !1),
              (n.geometry = new yo(n.engine, 2, 2, 2)),
              (n.material = new So(n.engine)),
              n
            );
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.render = function (t) {
              if (this._skyBoxMap) {
                var n = this.entity.transform.worldMatrix,
                  i = t.viewMatrix,
                  r = t.projectionMatrix,
                  a = this._matrix;
                _.multiply(i, n, a);
                var o = a.elements;
                (o[12] = o[13] = o[14] = 0),
                  _.multiply(r, a, a),
                  this.shaderData.setMatrix("u_mvpNoscale", a),
                  e.prototype.render.call(this, t);
              }
            }),
            (n._updateBounds = function (e) {
              this._initBounds ||
                (e.min.setValue(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY),
                e.max.setValue(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY),
                (this._initBounds = !0));
            }),
            A(t, [
              {
                key: "skyBoxMap",
                get: function () {
                  return this._skyBoxMap;
                },
                set: function (e) {
                  (this._skyBoxMap = e), e && this.material.shaderData.setTexture("u_cube", e);
                }
              }
            ]),
            t
          );
        })(vo);
      (function (e) {
        (e[(e["Position"] = 1)] = "Position"),
          (e[(e["Velocity"] = 2)] = "Velocity"),
          (e[(e["Acceleration"] = 4)] = "Acceleration"),
          (e[(e["Color"] = 8)] = "Color"),
          (e[(e["Apha"] = 16)] = "Apha"),
          (e[(e["Size"] = 32)] = "Size"),
          (e[(e["StartAngle"] = 64)] = "StartAngle"),
          (e[(e["StartTime"] = 128)] = "StartTime"),
          (e[(e["LifeTime"] = 256)] = "LifeTime"),
          (e[(e["RotateVelocity"] = 512)] = "RotateVelocity"),
          (e[(e["ScaleFactor"] = 1024)] = "ScaleFactor"),
          (e[(e["Everything"] = 4294967295)] = "Everything");
      })(Po || (Po = {}));
      var Eo = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, t) || this),
              (n._vertexStride = void 0),
              (n._vertices = void 0),
              (n._vertexBuffer = void 0),
              (n._maxCount = 1e3),
              (n._position = new o()),
              (n._positionRandomness = new o()),
              (n._positionArray = void 0),
              (n._velocity = new o()),
              (n._velocityRandomness = new o()),
              (n._acceleration = new o()),
              (n._accelerationRandomness = new o()),
              (n._color = new o(1, 1, 1)),
              (n._colorRandomness = 0),
              (n._size = 1),
              (n._sizeRandomness = 0),
              (n._alpha = 1),
              (n._alphaRandomness = 0),
              (n._startAngle = 0),
              (n._startAngleRandomness = 0),
              (n._rotateVelocity = 0),
              (n._rotateVelocityRandomness = 0),
              (n._lifetime = 5),
              (n._startTimeRandomness = 0),
              (n._scaleFactor = 1),
              (n._isOnce = !1),
              (n._time = 0),
              (n._isInit = !1),
              (n._isStart = !1),
              (n._updateDirtyFlag = Po.Everything),
              (n._isRotateToVelocity = void 0),
              (n._isUseOriginColor = void 0),
              (n._isScaleByLifetime = void 0),
              (n._is2d = void 0),
              (n._isFadeIn = void 0),
              (n._isFadeOut = void 0),
              (n.spriteSheet = void 0),
              (n._material = n._createMaterial()),
              n
            );
          }
          S(t, e),
            (t._getRandom = function () {
              return Math.random() - 0.5;
            }),
            A(t, [
              {
                key: "position",
                get: function () {
                  return this._position;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.Position), (this._position = e);
                }
              },
              {
                key: "positionRandomness",
                get: function () {
                  return this._positionRandomness;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.Position), (this._positionRandomness = e);
                }
              },
              {
                key: "positionArray",
                get: function () {
                  return this._positionArray;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.Position), (this._positionArray = e);
                }
              },
              {
                key: "velocity",
                get: function () {
                  return this._velocity;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.Velocity), (this._velocity = e);
                }
              },
              {
                key: "velocityRandomness",
                get: function () {
                  return this._velocityRandomness;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.Velocity), (this._velocityRandomness = e);
                }
              },
              {
                key: "acceleration",
                get: function () {
                  return this._acceleration;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.Acceleration), (this._acceleration = e);
                }
              },
              {
                key: "accelerationRandomness",
                get: function () {
                  return this._accelerationRandomness;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.Acceleration), (this._accelerationRandomness = e);
                }
              },
              {
                key: "color",
                get: function () {
                  return this._color;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.Color), (this._color = e);
                }
              },
              {
                key: "colorRandomness",
                get: function () {
                  return this._colorRandomness;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.Color), (this._colorRandomness = e);
                }
              },
              {
                key: "size",
                get: function () {
                  return this._size;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.Size), (this._size = e);
                }
              },
              {
                key: "sizeRandomness",
                get: function () {
                  return this._sizeRandomness;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.Size), (this._sizeRandomness = e);
                }
              },
              {
                key: "alpha",
                get: function () {
                  return this._alpha;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.Apha), (this._alpha = e);
                }
              },
              {
                key: "alphaRandomness",
                get: function () {
                  return this._alphaRandomness;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.Apha), (this._alphaRandomness = e);
                }
              },
              {
                key: "angle",
                get: function () {
                  return this._startAngle;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.StartAngle), (this._startAngle = e);
                }
              },
              {
                key: "angleRandomness",
                get: function () {
                  return this._startAngleRandomness;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.StartAngle), (this._startAngleRandomness = e);
                }
              },
              {
                key: "rotateVelocity",
                get: function () {
                  return this._rotateVelocity;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.RotateVelocity), (this._rotateVelocity = e);
                }
              },
              {
                key: "rotateVelocityRandomness",
                get: function () {
                  return this._rotateVelocityRandomness;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.RotateVelocity), (this._rotateVelocityRandomness = e);
                }
              },
              {
                key: "lifetime",
                get: function () {
                  return this._lifetime;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.LifeTime), (this._lifetime = e);
                }
              },
              {
                key: "startTimeRandomness",
                get: function () {
                  return this._startTimeRandomness;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.StartTime), (this._startTimeRandomness = e);
                }
              },
              {
                key: "scaleFactor",
                get: function () {
                  return this._scaleFactor;
                },
                set: function (e) {
                  (this._updateDirtyFlag |= Po.ScaleFactor), (this._scaleFactor = e);
                }
              },
              {
                key: "maxCount",
                get: function () {
                  return this._maxCount;
                },
                set: function (e) {
                  (this._isStart = !1),
                    (this._isInit = !1),
                    (this._maxCount = e),
                    (this.geometry = this._createGeometry()),
                    this._updateBuffer(),
                    (this._isInit = !0);
                }
              },
              {
                key: "isOnce",
                get: function () {
                  return this._isOnce;
                },
                set: function (e) {
                  this.shaderData.setInt("u_once", e ? 1 : 0), (this._isOnce = e);
                }
              },
              {
                key: "isRotateToVelocity",
                get: function () {
                  return this._isRotateToVelocity;
                },
                set: function (e) {
                  e
                    ? this.shaderData.enableMacro("rotateToVelocity")
                    : this.shaderData.disableMacro("rotateToVelocity"),
                    (this._isRotateToVelocity = e);
                }
              },
              {
                key: "isUseOriginColor",
                get: function () {
                  return this._isUseOriginColor;
                },
                set: function (e) {
                  e ? this.shaderData.enableMacro("useOriginColor") : this.shaderData.disableMacro("useOriginColor"),
                    (this._isUseOriginColor = e);
                }
              },
              {
                key: "isScaleByLifetime",
                get: function () {
                  return this._isScaleByLifetime;
                },
                set: function (e) {
                  e
                    ? this.shaderData.enableMacro("isScaleByLifetime")
                    : this.shaderData.disableMacro("isScaleByLifetime"),
                    (this._isScaleByLifetime = e);
                }
              },
              {
                key: "is2d",
                get: function () {
                  return this._is2d;
                },
                set: function (e) {
                  e ? this.shaderData.enableMacro("is2d") : this.shaderData.disableMacro("is2d"), (this._is2d = e);
                }
              },
              {
                key: "isFadeIn",
                get: function () {
                  return this._isFadeIn;
                },
                set: function (e) {
                  e ? this.shaderData.enableMacro("fadeIn") : this.shaderData.disableMacro("fadeIn"),
                    (this._isFadeIn = e);
                }
              },
              {
                key: "isFadeOut",
                get: function () {
                  return this._isFadeOut;
                },
                set: function (e) {
                  e ? this.shaderData.enableMacro("fadeOut") : this.shaderData.disableMacro("fadeOut"),
                    (this._isFadeOut = e);
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.update = function (e) {
              this._isInit &&
                this._isStart &&
                (this._updateDirtyFlag && (this._updateBuffer(), (this._updateDirtyFlag = 0)),
                (this._time += e / 1e3),
                this.shaderData.setFloat("u_time", this._time));
            }),
            (n.start = function () {
              (this._isStart = !0), (this._time = 0), this.shaderData.setInt("u_active", 1);
            }),
            (n.stop = function () {
              this.shaderData.setInt("u_active", 0);
            }),
            (n._createMaterial = function () {
              var e = new Or(this.engine, Zn.find("particle-shader")),
                t = e.renderState,
                n = t.blendState.targetBlendState;
              return (
                (n.sourceColorBlendFactor = n.sourceAlphaBlendFactor = dt.SourceAlpha),
                (n.destinationColorBlendFactor = n.destinationAlphaBlendFactor = dt.OneMinusSourceAlpha),
                (t.depthState.writeEnabled = !1),
                this.is2d || (t.rasterState.cullMode = pt.Off),
                (e.renderQueueType = vt.Transparent),
                (this.isUseOriginColor = !0),
                (this.is2d = !0),
                (this.isFadeOut = !0),
                e
              );
            }),
            (n._createGeometry = function () {
              for (
                var e = new go(this._entity.engine, "particleGeometry"),
                  t = 96,
                  n = 4 * this._maxCount * t,
                  i = new Float32Array(n),
                  r = new Uint16Array(6 * this._maxCount),
                  a = 0,
                  o = 0;
                a < this._maxCount;
                ++a
              ) {
                var s = 4 * a;
                (r[o++] = s + 0),
                  (r[o++] = s + 1),
                  (r[o++] = s + 2),
                  (r[o++] = s + 0),
                  (r[o++] = s + 2),
                  (r[o++] = s + 3);
              }
              var c = [
                  new to("a_position", 0, Da.Vector3, 0),
                  new to("a_velocity", 12, Da.Vector3, 0),
                  new to("a_acceleration", 24, Da.Vector3, 0),
                  new to("a_color", 36, Da.Vector4, 0),
                  new to("a_lifeAndSize", 52, Da.Vector4, 0),
                  new to("a_rotation", 68, Da.Vector2, 0),
                  new to("a_uv", 76, Da.Vector3, 0),
                  new to("a_normalizedUv", 88, Da.Vector2, 0)
                ],
                u = new Ka(this.engine, Ha.VertexBuffer, 4 * n, Ba.Dynamic),
                l = new Ka(this.engine, Ha.IndexBuffer, r, Ba.Dynamic);
              return (
                e.setVertexBufferBinding(u, t),
                e.setIndexBufferBinding(l, Na.UInt16),
                e.setVertexElements(c),
                e.addSubGeometry(0, r.length),
                (this._vertexBuffer = u),
                (this._vertexStride = t / 4),
                (this._vertices = i),
                e
              );
            }),
            (n._updateBuffer = function () {
              for (var e = 0; e < this._maxCount; e++) this._updateSingleBuffer(e);
              this._vertexBuffer.setData(this._vertices);
            }),
            (n._updateSingleBuffer = function (e) {
              var n = this._updateDirtyFlag,
                i = this._vertices,
                r = this._vertexStride,
                o = t._getRandom,
                s = 4 * e,
                c = s * r,
                u = (s + 1) * r,
                l = (s + 2) * r,
                d = (s + 3) * r;
              if (n & Po.Position) {
                var h = this._position,
                  f = h.x,
                  _ = h.y,
                  p = h.z,
                  g = this._positionArray,
                  v = this._positionRandomness;
                if (g) {
                  if (g.length !== this._maxCount)
                    throw Error("The length of positionArray must be equal to maxCount.");
                  var m = g[e];
                  (f += m.x), (_ += m.y), (p += m.z);
                } else (f += o() * v.x), (_ += o() * v.y), (p += o() * v.z);
                (i[c] = i[u] = i[l] = i[d] = f),
                  (i[c + 1] = i[u + 1] = i[l + 1] = i[d + 1] = _),
                  (i[c + 2] = i[u + 2] = i[l + 2] = i[d + 2] = p);
              }
              if (n & Po.Velocity) {
                var y = this._velocity,
                  x = this._velocityRandomness;
                (i[c + 3] = i[u + 3] = i[l + 3] = i[d + 3] = y.x + o() * x.x),
                  (i[c + 4] = i[u + 4] = i[l + 4] = i[d + 4] = y.y + o() * x.y),
                  (i[c + 5] = i[u + 5] = i[l + 5] = i[d + 5] = y.z + o() * x.z);
              }
              if (n & Po.Acceleration) {
                var b = this._acceleration,
                  w = this._accelerationRandomness;
                (i[c + 6] = i[u + 6] = i[l + 6] = i[d + 6] = b.x + o() * w.x),
                  (i[c + 7] = i[u + 7] = i[l + 7] = i[d + 7] = b.y + o() * w.y),
                  (i[c + 8] = i[u + 8] = i[l + 8] = i[d + 8] = b.z + o() * w.z);
              }
              if (n & Po.Color) {
                var A = this._color,
                  T = this._colorRandomness;
                (i[c + 9] = i[u + 9] = i[l + 9] = i[d + 9] = a.clamp(A.x + o() * T, 0, 1)),
                  (i[c + 10] = i[u + 10] = i[l + 10] = i[d + 10] = a.clamp(A.y + o() * T, 0, 1)),
                  (i[c + 11] = i[u + 11] = i[l + 11] = i[d + 11] = a.clamp(A.z + o() * T, 0, 1));
              }
              if (
                (n & Po.Apha &&
                  (i[c + 12] = i[u + 12] = i[l + 12] = i[d + 12] = a.clamp(
                    this._alpha + o() * this._alphaRandomness,
                    0,
                    1
                  )),
                n & Po.StartTime &&
                  (i[c + 13] = i[u + 13] = i[l + 13] = i[d + 13] = Math.random() * this._startTimeRandomness),
                n & Po.LifeTime)
              ) {
                var M = this._lifetime;
                i[c + 14] = i[u + 14] = i[l + 14] = i[d + 14] = M + o() * M;
              }
              if (n & Po.Size) {
                var C = this._size;
                i[c + 15] = i[u + 15] = i[l + 15] = i[d + 15] = Math.max(C + o() * this._sizeRandomness * C * 2, 0);
              }
              n & Po.ScaleFactor && (i[c + 16] = i[u + 16] = i[l + 16] = i[d + 16] = this._scaleFactor),
                n & Po.StartAngle &&
                  (i[c + 17] = i[u + 17] = i[l + 17] = i[d + 17] =
                    this._startAngle + o() * Math.PI * this._startAngleRandomness * 2),
                n & Po.RotateVelocity &&
                  (i[c + 18] = i[u + 18] = i[l + 18] = i[d + 18] =
                    this._rotateVelocity + o() * this._rotateVelocityRandomness),
                this._updateSingleUv(e, c, u, l, d);
            }),
            (n._updateSingleUv = function (e, t, n, i, r) {
              var a = this.spriteSheet,
                o = this._material.shaderData.getTexture("texture"),
                s = this._vertices;
              if (o) {
                var c = o.width,
                  u = o.height;
                if (a) {
                  var l = a[e % a.length],
                    d = l.x,
                    h = l.y,
                    f = l.w,
                    _ = l.h,
                    p = d / c,
                    g = h / u,
                    v = p + f / c,
                    m = g + _ / u,
                    y = _ / f;
                  (s[t + 19] = p),
                    (s[t + 20] = m),
                    (s[t + 21] = y),
                    (s[n + 19] = v),
                    (s[n + 20] = m),
                    (s[n + 21] = y),
                    (s[i + 19] = v),
                    (s[i + 20] = g),
                    (s[i + 21] = y),
                    (s[r + 19] = p),
                    (s[r + 20] = g),
                    (s[r + 21] = y);
                } else {
                  var x = u / c;
                  (s[t + 19] = 0),
                    (s[t + 20] = 0),
                    (s[t + 21] = x),
                    (s[n + 19] = 1),
                    (s[n + 20] = 0),
                    (s[n + 21] = x),
                    (s[i + 19] = 1),
                    (s[i + 20] = 1),
                    (s[i + 21] = x),
                    (s[r + 19] = 0),
                    (s[r + 20] = 1),
                    (s[r + 21] = x);
                }
              } else
                (s[t + 19] = 0),
                  (s[t + 20] = 0),
                  (s[t + 21] = 1),
                  (s[n + 19] = 1),
                  (s[n + 20] = 0),
                  (s[n + 21] = 1),
                  (s[i + 19] = 1),
                  (s[i + 20] = 1),
                  (s[i + 21] = 1),
                  (s[r + 19] = 0),
                  (s[r + 20] = 1),
                  (s[r + 21] = 1);
              (s[t + 22] = -0.5),
                (s[t + 23] = -0.5),
                (s[n + 22] = 0.5),
                (s[n + 23] = -0.5),
                (s[i + 22] = 0.5),
                (s[i + 23] = 0.5),
                (s[r + 22] = -0.5),
                (s[r + 23] = 0.5);
            }),
            t
          );
        })(vo),
        Oo =
          "varying vec2 v_uv;\n\nuniform sampler2D u_texture;\n\nvoid main(void) {\n\n  gl_FragColor = texture2D(u_texture, v_uv);\n\n}\n",
        Lo =
          "attribute vec3 POSITION;\nattribute vec2 TEXCOORD_0;\n\nvarying vec2 v_uv;\n\nuniform mat4 u_projMat;\nuniform mat4 u_viewMat;\n\nvoid main() {\n\n  gl_Position = u_projMat * u_viewMat * vec4( POSITION, 1.0 );\n  v_uv = TEXCOORD_0;\n\n}\n";
      Zn.create("trail", Lo, Oo);
      var Fo = (function (e) {
          function t(t) {
            var n;
            n = e.call(this, t, Zn.find("trail")) || this;
            var i = n.renderState.blendState.targetBlendState;
            return (
              (i.sourceColorBlendFactor = i.sourceAlphaBlendFactor = dt.SourceAlpha),
              (i.destinationColorBlendFactor = i.destinationAlphaBlendFactor = dt.One),
              (n.renderState.depthState.writeEnabled = !1),
              n
            );
          }
          return S(t, e), t;
        })(Or),
        Io = new o(),
        zo = (function (e) {
          function t(t, n) {
            var i;
            (i = e.call(this, t) || this),
              (i._vertexStride = void 0),
              (i._vertices = void 0),
              (i._vertexBuffer = void 0),
              (i._stroke = void 0),
              (i._minSeg = void 0),
              (i._lifetime = void 0),
              (i._maxPointNum = void 0),
              (i._points = void 0),
              (i._pointStates = void 0),
              (i._strapPoints = void 0),
              (i._curPointNum = void 0),
              (i._prePointsNum = void 0),
              (i._stroke = n.stroke || 0.2),
              (i._minSeg = n.minSeg || 0.02),
              (i._lifetime = n.lifetime || 1e3),
              (i._maxPointNum = (i._lifetime / 1e3) * t.engine.targetFrameRate),
              (i._points = []),
              (i._pointStates = []),
              (i._strapPoints = []);
            for (var r = 0; r < i._maxPointNum; r++)
              i._points.push(new o()),
                i._pointStates.push(i._lifetime),
                i._strapPoints.push(new o()),
                i._strapPoints.push(new o());
            i._curPointNum = 0;
            var a = n.material || new Fo(i.engine);
            return (i.material = a), i.setTexture(n.texture), i._initGeometry(), i;
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.update = function (e) {
              for (var t = 0, n = 0, i = 0; i < this._curPointNum; i++)
                (this._pointStates[i] -= e),
                  this._pointStates[i] < 0
                    ? t++
                    : t > 0 &&
                      ((n = i - t),
                      (this._pointStates[n] = this._pointStates[i]),
                      this._points[i].cloneTo(this._points[n]));
              this._curPointNum -= t;
              var r = !0;
              if (this._curPointNum === this._maxPointNum) r = !1;
              else if (this._curPointNum > 0) {
                var a = this._points[this._points.length - 1];
                o.distance(this.entity.worldPosition, a) < this._minSeg && (r = !1);
              }
              r &&
                ((this._pointStates[this._curPointNum] = this._lifetime),
                this.entity.worldPosition.cloneTo(this._points[this._curPointNum]),
                this._curPointNum++);
            }),
            (n.render = function (t) {
              this._updateStrapVertices(t, this._points),
                this._updateStrapCoords(),
                this._vertexBuffer.setData(this._vertices),
                e.prototype.render.call(this, t);
            }),
            (n.setTexture = function (e) {
              e && this.material.shaderData.setTexture("u_texture", e);
            }),
            (n._initGeometry = function () {
              var e = new go(this._entity.engine),
                t = 20,
                n = 2 * this._maxPointNum,
                i = n * t,
                r = new Float32Array(i),
                a = [new to("POSITION", 0, Da.Vector3, 0), new to("TEXCOORD_0", 12, Da.Vector2, 0)],
                o = new Ka(this.engine, 4 * i, Ba.Dynamic);
              e.setVertexBufferBinding(o, t),
                e.setVertexElements(a),
                e.addSubGeometry(0, n, Xa.TriangleStrip),
                (this._vertexBuffer = o),
                (this._vertexStride = t),
                (this._vertices = r),
                (this.geometry = e);
            }),
            (n._updateStrapVertices = function (e, t) {
              var n = e.viewMatrix,
                i = n.elements,
                r = new o(i[0], i[4], i[8]),
                a = new o(i[1], i[5], i[9]),
                s = new o(i[2], i[6], i[10]),
                c = this._stroke;
              a.scale(c);
              var u = new o(),
                l = new o(),
                d = new f();
              o.transformByQuat(r, d, r), o.transformByQuat(a, d, a);
              var h = new o(),
                _ = new o(),
                p = new o();
              r.normalize();
              for (var g = this._vertices, v = 0; v < this._maxPointNum; v++) {
                if (v < this._curPointNum) {
                  var m = t[v];
                  v === this._curPointNum - 1 && 0 !== v ? o.subtract(m, t[v - 1], p) : o.subtract(t[v + 1], m, p),
                    this._projectOnPlane(p, s, p),
                    p.normalize();
                  var y = Math.acos(o.dot(r, p));
                  o.cross(r, p, _),
                    o.dot(_, s) <= 0 && (y = 2 * Math.PI - y),
                    f.rotationAxisAngle(s, y, d),
                    o.transformByQuat(a, d, h),
                    o.add(m, h, u),
                    o.subtract(m, h, l);
                }
                var x = (2 * v * this._vertexStride) / 4,
                  b = ((2 * v + 1) * this._vertexStride) / 4;
                (g[x] = u.x), (g[x + 1] = u.y), (g[x + 2] = u.z), (g[b] = l.x), (g[b + 1] = l.y), (g[b + 2] = l.z);
              }
            }),
            (n._updateStrapCoords = function () {
              if (this._prePointsNum !== this._curPointNum) {
                this._prePointsNum = this._curPointNum;
                for (var e = this._curPointNum, t = 1 / e, n = this._vertices, i = 0; i < e; i++) {
                  var r = 1 - i * t,
                    a = (2 * i * this._vertexStride) / 4,
                    o = ((2 * i + 1) * this._vertexStride) / 4;
                  (n[a] = 0), (n[a + 1] = r), (n[o] = 1), (n[o + 1] = r);
                }
              }
            }),
            (n._projectOnVector = function (e, t, n) {
              var i = t.clone();
              o.normalize(i, i);
              var r = o.dot(e, i);
              (n.x = i.x * r), (n.y = i.y * r), (n.z = i.z * r);
            }),
            (n._projectOnPlane = function (e, t, n) {
              this._projectOnVector(e, t, Io), o.subtract(e, Io, n);
            }),
            t
          );
        })(vo),
        Bo = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, t) || this),
              (n._center = new o()),
              (n._size = new o()),
              (n.isShowCollider = !0),
              (n.center = n.center),
              (n.size = n.size),
              (n.isShowCollider = n.isShowCollider),
              n
            );
          }
          return (
            S(t, e),
            A(t, [
              {
                key: "center",
                get: function () {
                  return this._center;
                },
                set: function (e) {
                  (this._center = e), this.setBoxCenterSize(this._center, this._size);
                }
              },
              {
                key: "size",
                get: function () {
                  return this._size;
                },
                set: function (e) {
                  (this._size = e), this.setBoxCenterSize(this._center, this._size);
                }
              }
            ]),
            t
          );
        })($r),
        Do = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, t) || this),
              (n.__center = new o()),
              (n.__radius = 1),
              (n.isShowCollider = !0),
              (n._center = n._center),
              (n._radius = n._radius),
              (n.isShowCollider = n.isShowCollider),
              n
            );
          }
          return (
            S(t, e),
            A(t, [
              {
                key: "_center",
                get: function () {
                  return this.__center;
                },
                set: function (e) {
                  (this.__center = e), this.setSphere(this.__center, this.__radius);
                }
              },
              {
                key: "_radius",
                get: function () {
                  return this.__radius;
                },
                set: function (e) {
                  (this.__radius = e), this.setSphere(this.__center, this.__radius);
                }
              }
            ]),
            t
          );
        })(ea);
      function No(e, t) {
        return (
          e.min.x <= t.max.x &&
          e.max.x >= t.min.x &&
          e.min.y <= t.max.y &&
          e.max.y >= t.min.y &&
          e.min.z <= t.max.z &&
          e.max.z >= t.min.z
        );
      }
      function Go(e, t) {
        var n = o.distance(e.center, t.center);
        return n < e.radius + e.radius;
      }
      function Uo(e, t) {
        var n = e.center,
          i = new o(
            Math.max(t.min.x, Math.min(n.x, t.max.x)),
            Math.max(t.min.y, Math.min(n.y, t.max.y)),
            Math.max(t.min.z, Math.min(n.z, t.max.z))
          ),
          r = o.distance(n, i);
        return r < e.radius;
      }
      gi.registerFeature(Jr);
      var ko = (function (e) {
        function t(t) {
          var n;
          return (
            (n = e.call(this, t) || this),
            (n._colliderManager = void 0),
            (n._myCollider = void 0),
            (n._overlopCollider = void 0),
            (n._sphere = void 0),
            (n._box = new c()),
            (n.hasEvent = void 0),
            (n.eventNames = void 0),
            (n.listenerCount = void 0),
            (n.dispatch = void 0),
            (n.on = void 0),
            (n.once = void 0),
            (n.addEventListener = void 0),
            (n.off = void 0),
            (n.removeEventListener = void 0),
            (n.removeAllEventListeners = void 0),
            (n.trigger = void 0),
            (n._clearEvent = void 0),
            n
          );
        }
        S(t, e);
        var n = t.prototype;
        return (
          (n.onUpdate = function (t) {
            e.prototype.onUpdate.call(this, t);
            var n = null;
            if (this._colliderManager && this._myCollider) {
              var i = this._colliderManager.colliders;
              if (this._myCollider instanceof $r) {
                this._updateWorldBox(this._myCollider, this._box);
                for (var r = 0, a = i.length; r < a; r++) {
                  var o = i[r];
                  o != this._myCollider &&
                    this._boxCollision(o) &&
                    ((n = o), this.dispatch("collision", { collider: o }));
                }
              } else if (this._myCollider instanceof ea) {
                this._sphere = this._getWorldSphere(this._myCollider);
                for (var s = 0, c = i.length; s < c; s++) {
                  var u = i[s];
                  u != this._myCollider &&
                    this._sphereCollision(u) &&
                    ((n = u), this.dispatch("collision", { collider: u }));
                }
              }
            }
            if (
              (null != n && this._overlopCollider != n && this.dispatch("begin_overlop", { collider: n }),
              null != this._overlopCollider && this._overlopCollider != n)
            ) {
              var l = this._overlopCollider;
              this.dispatch("end_overlop", { collider: l });
            }
            this._overlopCollider = n;
          }),
          (n._updateWorldBox = function (e, n) {
            var i = e.entity.transform.worldMatrix,
              r = t._tempBox1;
            e.boxMax.cloneTo(r.max), e.boxMin.cloneTo(r.min), c.transform(r, i, n);
          }),
          (n._getWorldSphere = function (e) {
            var t = new o();
            return o.transformCoordinate(e.center, e.entity.transform.worldMatrix, t), { radius: e.radius, center: t };
          }),
          (n._boxCollision = function (e) {
            if (e instanceof $r) {
              var n = t._tempBox2;
              return this._updateWorldBox(e, n), No(n, this._box);
            }
            if (e instanceof ea) {
              var i = this._getWorldSphere(e);
              return Uo(i, this._box);
            }
            return !1;
          }),
          (n._sphereCollision = function (e) {
            if (e instanceof $r) {
              var n = t._tempBox2;
              return this._updateWorldBox(e, n), Uo(this._sphere, n);
            }
            if (e instanceof ea) {
              var i = this._getWorldSphere(e);
              return Go(i, this._sphere);
            }
            return !1;
          }),
          (n.onAwake = function () {
            (this._colliderManager = this.scene.findFeature(Jr)), (this._myCollider = this.entity.getComponent(Zr));
          }),
          A(t, [
            {
              key: "overlopCollider",
              get: function () {
                return this._overlopCollider;
              }
            }
          ]),
          t
        );
      })(Rr);
      function Vo(e, t) {
        t.forEach(function (t) {
          Object.getOwnPropertyNames(t.prototype).forEach(function (n) {
            e.prototype[n] = t.prototype[n];
          });
        });
      }
      (ko._tempVec3 = new o()), (ko._tempBox1 = new c()), (ko._tempBox2 = new c()), Vo(ko, [we]);
      var Ho = (function (e) {
        function t(t) {
          var n;
          return (n = e.call(this, t) || this), (n._color = new b(1, 0, 0, 1)), (n.color = n._color), n;
        }
        S(t, e),
          A(t, [
            {
              key: "color",
              get: function () {
                return this._color;
              },
              set: function (e) {
                (this._color = e), this.scene.shaderData.setColor(t._colorProperty, e);
              }
            }
          ]);
        var n = t.prototype;
        return (
          (n._onEnable = function () {
            this.scene.shaderData.enableMacro("O3_HAS_FOG");
          }),
          (n._onDisable = function () {
            this.scene.shaderData.disableMacro("O3_HAS_FOG");
          }),
          t
        );
      })(at);
      Ho._colorProperty = Zn.getPropertyByName("u_fogColor");
      var Wo = (function (e) {
        function t(t) {
          var n;
          return (n = e.call(this, t) || this), (n._density = 0.0025), (n.density = n._density), n;
        }
        S(t, e),
          A(t, [
            {
              key: "density",
              get: function () {
                return this._density;
              },
              set: function (e) {
                (this._density = e), this.scene.shaderData.setFloat(t._densityProperty, e);
              }
            }
          ]);
        var n = t.prototype;
        return (
          (n._onEnable = function () {
            this.scene.shaderData.enableMacro("O3_FOG_EXP2");
          }),
          (n._onDisable = function () {
            this.scene.shaderData.disableMacro("O3_FOG_EXP2");
          }),
          t
        );
      })(Ho);
      Wo._densityProperty = Zn.getPropertyByName("u_fogDensity");
      var jo = (function (e) {
        function t(t) {
          var n;
          return (n = e.call(this, t) || this), (n._near = 1), (n._far = 1e3), (n.near = n._near), (n.far = n._far), n;
        }
        return (
          S(t, e),
          A(t, [
            {
              key: "near",
              get: function () {
                return this._near;
              },
              set: function (e) {
                (this._near = e), this.scene.shaderData.setFloat(t._nearProperty, e);
              }
            },
            {
              key: "far",
              get: function () {
                return this._far;
              },
              set: function (e) {
                (this._far = e), this.scene.shaderData.setFloat(t._farProperty, e);
              }
            }
          ]),
          t
        );
      })(Ho);
      (jo._nearProperty = Zn.getPropertyByName("u_fogNear")), (jo._farProperty = Zn.getPropertyByName("u_fogFar"));
      var Xo = (function (e) {
          function t() {
            for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
            return (
              (t = e.call.apply(e, [this].concat(i)) || this),
              (t.probeLayer = Ee.Everything),
              (t.width = 1024),
              (t.height = 1024),
              (t.antiAliasing = 1),
              (t._isCube = !1),
              (t._oriCameraRenderTarget = void 0),
              (t._renderTarget = void 0),
              (t._renderTargetSwap = void 0),
              (t._activeRenderTarget = void 0),
              (t._camera = void 0),
              (t._oriCameraCullingMask = void 0),
              t
            );
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.onTextureChange = function (e) {}),
            (n.onBeginRender = function (e) {
              this.enabled &&
                ((this._camera = e),
                (this._oriCameraCullingMask = e.cullingMask),
                (e.cullingMask = this.probeLayer),
                (this._activeRenderTarget &&
                  this._activeRenderTarget.width === this.width &&
                  this._activeRenderTarget.height === this.height &&
                  this._activeRenderTarget.antiAliasing === this.antiAliasing) ||
                  ((this._renderTarget = new ka(
                    this.engine,
                    this.width,
                    this.height,
                    new Va(this.engine, this.width, this.height, void 0, void 0, this._isCube),
                    ui.Depth,
                    this.antiAliasing
                  )),
                  (this._renderTargetSwap = new ka(
                    this.engine,
                    this.width,
                    this.height,
                    new Va(this.engine, this.width, this.height, void 0, void 0, this._isCube),
                    ui.Depth,
                    this.antiAliasing
                  )),
                  (this._activeRenderTarget = this._renderTarget)),
                (this._oriCameraRenderTarget = e.renderTarget),
                (e.renderTarget = this._activeRenderTarget));
            }),
            (n.onEndRender = function (e) {
              this.enabled &&
                (this.onTextureChange && this.onTextureChange(this._texture),
                (this._activeRenderTarget =
                  this._activeRenderTarget === this._renderTarget ? this._renderTargetSwap : this._renderTarget));
            }),
            (n._reset = function () {
              this.enabled &&
                ((this._camera.renderTarget = this._oriCameraRenderTarget),
                (this._camera.cullingMask = this._oriCameraCullingMask));
            }),
            A(t, [
              {
                key: "_texture",
                get: function () {
                  var e;
                  return null === (e = this._activeRenderTarget) || void 0 === e ? void 0 : e.getColorTexture();
                }
              }
            ]),
            t
          );
        })(Rr),
        Ko = new o(),
        qo = new o(),
        Qo = new o(),
        Yo = (function (e) {
          function t() {
            for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
            return (
              (t = e.call.apply(e, [this].concat(i)) || this),
              (t.position = new o(0, 0, 0)),
              (t._isCube = !0),
              (t.oriViewMatrix = new _()),
              (t._oriFieldOfView = void 0),
              t
            );
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.onBeginRender = function (t) {
              if (this.enabled) {
                e.prototype.onBeginRender.call(this, t), this._storeCamera(t);
                for (var n = 0; n < 6; n++) this._setCamera(n, t), t.render(Fa.PositiveX + n);
                this._restoreCamera(t), e.prototype._reset.call(this);
              }
            }),
            (n._storeCamera = function (e) {
              e.viewMatrix.cloneTo(this.oriViewMatrix), (this._oriFieldOfView = e.fieldOfView);
            }),
            (n._restoreCamera = function (e) {
              this.oriViewMatrix.cloneTo(e.viewMatrix), (e.fieldOfView = this._oriFieldOfView);
            }),
            (n._setCamera = function (e, t) {
              switch (e) {
                case 0:
                  qo.setValue(0, -1, 0), Qo.setValue(1, 0, 0);
                  break;
                case 1:
                  qo.setValue(0, -1, 0), Qo.setValue(-1, 0, 0);
                  break;
                case 2:
                  qo.setValue(0, 0, 1), Qo.setValue(0, 1, 0);
                  break;
                case 3:
                  qo.setValue(0, 0, -1), Qo.setValue(0, -1, 0);
                  break;
                case 4:
                  qo.setValue(0, -1, 0), Qo.setValue(0, 0, 1);
                  break;
                case 5:
                  qo.setValue(0, -1, 0), Qo.setValue(0, 0, -1);
                  break;
              }
              o.add(this.position, Qo, Ko), _.lookAt(this.position, Ko, qo, t.viewMatrix), (t.fieldOfView = 90);
            }),
            t
          );
        })(Xo),
        Jo = (function () {
          function e(e, t) {
            void 0 === t && (t = { engine: null, width: 512, height: 512 }),
              (this._mapSize = void 0),
              (this._renderTarget = void 0),
              (this.light = void 0),
              (this.bias = 0.005),
              (this.intensity = 0.2),
              (this.radius = 1),
              (this.projectionMatrix = new _()),
              (this.light = e);
            var n = t,
              i = n.engine,
              r = n.width,
              a = n.height;
            (this._mapSize = new m(r, a)), (this._renderTarget = new ka(i, r, a, new Va(i, r, a)));
          }
          (e._updateShaderData = function (t) {
            var n = e._combinedData;
            t.setFloatArray(e._viewMatFromLightProperty, n.viewMatrix),
              t.setFloatArray(e._projMatFromLightProperty, n.projectionMatrix),
              t.setFloatArray(e._shadowBiasProperty, n.bias),
              t.setFloatArray(e._shadowIntensityProperty, n.intensity),
              t.setFloatArray(e._shadowRadiusProperty, n.radius),
              t.setFloatArray(e._shadowMapSizeProperty, n.mapSize),
              t.setTextureArray(e._shadowMapsProperty, n.map);
          }),
            (e.clearMap = function () {
              e._combinedData.map.length = 0;
            });
          var t = e.prototype;
          return (
            (t.initShadowProjectionMatrix = function (e) {
              if (
                (e instanceof ti && _.ortho(-5, 5, -5, 5, 0.1, 50, this.projectionMatrix),
                e instanceof ii && _.perspective(a.degreeToRadian(50), 1, 0.5, 50, this.projectionMatrix),
                e instanceof ri)
              ) {
                var t = Math.min(Math.PI / 2, 2 * e.angle * Math.sqrt(2));
                _.perspective(t, 1, 0.1, e.distance + 5, this.projectionMatrix);
              }
            }),
            (t.appendData = function (t) {
              var n = 16 * t,
                i = 16 * t,
                r = t,
                a = t,
                o = t,
                s = 2 * t,
                c = t,
                u = e._combinedData;
              u.viewMatrix.set(this.light.viewMatrix.elements, n),
                u.projectionMatrix.set(this.projectionMatrix.elements, i),
                (u.bias[r] = this.bias),
                (u.intensity[a] = this.intensity),
                (u.radius[o] = this.radius),
                (u.mapSize[s] = this.mapSize.x),
                (u.mapSize[s + 1] = this.mapSize.y),
                (u.map[c] = this.map);
            }),
            A(e, [
              {
                key: "renderTarget",
                get: function () {
                  return this._renderTarget;
                }
              },
              {
                key: "map",
                get: function () {
                  return this._renderTarget.getColorTexture();
                }
              },
              {
                key: "mapSize",
                get: function () {
                  return this._mapSize;
                }
              }
            ]),
            e
          );
        })();
      (Jo._viewMatFromLightProperty = Zn.getPropertyByName("u_viewMatFromLight")),
        (Jo._projMatFromLightProperty = Zn.getPropertyByName("u_projMatFromLight")),
        (Jo._shadowBiasProperty = Zn.getPropertyByName("u_shadowBias")),
        (Jo._shadowIntensityProperty = Zn.getPropertyByName("u_shadowIntensity")),
        (Jo._shadowRadiusProperty = Zn.getPropertyByName("u_shadowRadius")),
        (Jo._shadowMapSizeProperty = Zn.getPropertyByName("u_shadowMapSize")),
        (Jo._shadowMapsProperty = Zn.getPropertyByName("u_shadowMaps")),
        (Jo._maxLight = 3),
        (Jo._combinedData = {
          viewMatrix: new Float32Array(16 * Jo._maxLight),
          projectionMatrix: new Float32Array(16 * Jo._maxLight),
          bias: new Float32Array(Jo._maxLight),
          intensity: new Float32Array(Jo._maxLight),
          radius: new Float32Array(Jo._maxLight),
          mapSize: new Float32Array(2 * Jo._maxLight),
          map: []
        }),
        Object.defineProperty($n.prototype, "enableShadow", {
          get: function () {
            return this._enableShadow;
          },
          set: function (e) {
            if (((this._enableShadow = e), this._enableShadow)) {
              if (this instanceof ei) return (this._enableShadow = !1), void Se.warn("Has no shadow!");
              (this.shadow = this.shadow || new Jo(this, { engine: this.engine, width: 512, height: 512 })),
                this.shadow.initShadowProjectionMatrix(this);
            }
          }
        }),
        Object.defineProperty(at.prototype, "recieveShadow", {
          get: function () {
            return this._recieveShadow;
          },
          set: function (e) {
            this._recieveShadow = e;
          }
        }),
        Object.defineProperty(at.prototype, "castShadow", {
          get: function () {
            return this._castShadow;
          },
          set: function (e) {
            this._castShadow = e;
          }
        });
      var Zo = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, t, Zn.find("shadow-map")) || this),
              n.shaderData.enableMacro("O3_GENERATE_SHADOW_MAP"),
              n
            );
          }
          return S(t, e), t;
        })(Or),
        $o = (function (e) {
          function t(t, n, i, r, a, o) {
            var s;
            return (s = e.call(this, t, n, i, r, a, new y(1, 1, 1, 1)) || this), (s.light = void 0), (s.light = o), s;
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.preRender = function (e, n) {
              var i = this.replaceMaterial.shaderData;
              i.setMatrix(t._viewMatFromLightProperty, this.light.viewMatrix),
                i.setMatrix(t._projMatFromLightProperty, this.light.shadow.projectionMatrix);
            }),
            t
          );
        })(Fr);
      ($o._viewMatFromLightProperty = Zn.getPropertyByName("u_viewMatFromLight")),
        ($o._projMatFromLightProperty = Zn.getPropertyByName("u_projMatFromLight"));
      var es = (function (e) {
          function t(t) {
            var n;
            n = e.call(this, t, Zn.find("shadow")) || this;
            var i = n.renderState.blendState.targetBlendState;
            return (
              (i.sourceColorBlendFactor = i.sourceAlphaBlendFactor = dt.DestinationColor),
              (i.destinationColorBlendFactor = i.destinationAlphaBlendFactor = dt.Zero),
              (n.renderState.depthState.compareFunction = _t.LessEqual),
              n
            );
          }
          return S(t, e), t;
        })(Or),
        ts = (function (e) {
          function t() {
            for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
            return (t = e.call.apply(e, [this].concat(i)) || this), (t.clearMode = ue.DONT_CLEAR), t;
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.preRender = function (e, t) {
              this.enabled = !1;
              var n = e.scene.findFeature(oi),
                i = n.visibleLights,
                r = this.replaceMaterial.shaderData,
                a = e._renderPipeline.defaultRenderPass;
              this.renderTarget = a.renderTarget;
              var o = 0;
              Jo.clearMap();
              for (var s = 0, c = i.length; s < c; s++) {
                var u = i[s];
                u.enableShadow && u.shadow.appendData(o++);
              }
              o
                ? ((this.enabled = !0), Jo._updateShaderData(r), r.enableMacro("O3_SHADOW_MAP_COUNT", o.toString()))
                : r.disableMacro("O3_SHADOW_MAP_COUNT");
            }),
            t
          );
        })(Fr),
        ns = (function (e) {
          function t() {
            for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
            return (
              (t = e.call.apply(e, [this].concat(i)) || this),
              (t._shadowPass = void 0),
              (t._shadowMapMaterial = void 0),
              t
            );
          }
          S(t, e);
          var n = t.prototype;
          return (
            (n.preRender = function (e, t) {
              var n = e.findFeature(oi).visibleLights;
              if (n.length > 0) {
                this._shadowPass || this.addShadowPass(t);
                for (var i = t._renderPipeline, r = 0, a = n.length; r < a; r++) {
                  var o = n[r];
                  o.enableShadow && !o.shadowMapPass
                    ? (o.shadowMapPass = this.addShadowMapPass(t, o))
                    : !o.enableShadow &&
                      o.shadowMapPass &&
                      (i.removeRenderPass(o.shadowMapPass), (o.shadowMapPass = null));
                }
                this.updatePassRenderFlag(i.queue);
              }
            }),
            (n.addShadowPass = function (e) {
              var t = new es(e.engine);
              this._shadowPass = new ts("ShadowPass", 1, null, t, Ee.Layer30);
              var n = e._renderPipeline;
              n.addRenderPass(this._shadowPass);
            }),
            (n.addShadowMapPass = function (e, t) {
              this._shadowMapMaterial = this._shadowMapMaterial || new Zo(e.engine);
              var n = new $o("ShadowMapPass", -1, t.shadow.renderTarget, this._shadowMapMaterial, Ee.Layer31, t),
                i = e._renderPipeline;
              return i.addRenderPass(n), n;
            }),
            (n.updatePassRenderFlag = function (e) {
              for (var t = e.items, n = 0, i = t.length; n < i; n++) {
                var r = t[n],
                  a = r.component,
                  o = a.recieveShadow,
                  s = a.castShadow;
                !0 === o ? (a.entity.layer |= Ee.Layer30) : !1 === o && (a.entity.layer &= ~Ee.Layer30),
                  !0 === s ? (a.entity.layer |= Ee.Layer31) : !1 === s && (a.entity.layer &= ~Ee.Layer31);
              }
            }),
            t
          );
        })(mt);
      function is(e, t) {
        for (var n = 0; n < t.length; n++) {
          var i = t[n];
          (i.enumerable = i.enumerable || !1),
            (i.configurable = !0),
            "value" in i && (i.writable = !0),
            Object.defineProperty(e, i.key, i);
        }
      }
      function rs(e, t, n) {
        return t && is(e.prototype, t), n && is(e, n), e;
      }
      gi.registerFeature(ns), gi.registerFeature(oi), (gi.prototype.hasLight = ai);
      var as,
        os,
        ss = (function () {
          function e(e, t) {
            var n = this;
            (this._worker = void 0),
              (this._costs = {}),
              (this._currentLoad = 0),
              (this._callbacks = {}),
              (this._worker = new Worker(e)),
              (this._worker.onmessage = function (e) {
                var t = e.data;
                switch (t.type) {
                  case "decode":
                    n._callbacks[t.id].resolve(t.geometry);
                    break;
                  case "error":
                    n._callbacks[t.id].reject(t);
                    break;
                  default:
                    Se.error('DRACOWorker: Unexpected message, "' + t.type + '"');
                }
              }),
              t
                ? this._worker.postMessage({ type: "init", decoderConfig: { wasmBinary: t } })
                : this._worker.postMessage({ type: "init", decoderConfig: {} });
          }
          rs(e, [
            {
              key: "currentLoad",
              get: function () {
                return this._currentLoad;
              }
            }
          ]);
          var t = e.prototype;
          return (
            (t.setCosts = function (e, t) {
              this._costs[e] = t;
            }),
            (t.addCurrentLoad = function (e) {
              this._currentLoad += e;
            }),
            (t.setCallback = function (e, t, n) {
              this._callbacks[e] = { resolve: t, reject: n };
            }),
            (t.decode = function (e, t, n) {
              this._worker.postMessage({ type: "decode", id: e, taskConfig: t, buffer: n }, [n]);
            }),
            (t.releaseTask = function (e) {
              (this._currentLoad -= this._costs[e]), delete this._callbacks[e], delete this._costs[e];
            }),
            e
          );
        })(),
        cs =
          'let decoderPending;\nlet decoderConfig;\n\nonmessage = function(e) {\n  const message = e.data;\n\n  switch (message.type) {\n    case "init":\n      decoderConfig = message.decoderConfig;\n      decoderPending = new Promise(function(resolve /*, reject*/) {\n        decoderConfig.onModuleLoaded = function(draco) {\n          // Module is Promise-like. Wrap before resolving to avoid loop.\n          resolve({ draco: draco });\n        };\n        DracoDecoderModule(decoderConfig);\n      });\n      break;\n\n    case "decode":\n      const buffer = message.buffer;\n      const taskConfig = message.taskConfig;\n      decoderPending.then(module => {\n        const draco = module.draco;\n        const decoder = new draco.Decoder();\n        const decoderBuffer = new draco.DecoderBuffer();\n        decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n        try {\n          const geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n          const buffers = geometry.attributes.map(attr => attr.array.buffer);\n          if (geometry.index) buffers.push(geometry.index.array.buffer);\n          self.postMessage({ type: "decode", id: message.id, geometry }, buffers);\n        } catch (error) {\n          console.error(error);\n          self.postMessage({ type: "error", id: message.id, error: error.message });\n        } finally {\n          draco.destroy(decoderBuffer);\n          draco.destroy(decoder);\n        }\n      });\n      break;\n  }\n};\n\nfunction decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n  const attributeIDs = taskConfig.attributeIDs;\n  const attributeTypes = taskConfig.attributeTypes;\n\n  let dracoGeometry;\n  let decodingStatus;\n\n  const geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n  if (geometryType === draco.TRIANGULAR_MESH) {\n    dracoGeometry = new draco.Mesh();\n    decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n  } else {\n    throw new Error("DRACODecoder worker: Unexpected geometry type.");\n  }\n\n  if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n    throw new Error("DRACODecoder worker: Decoding failed: " + decodingStatus.error_msg());\n  }\n\n  const geometry = { index: null, attributes: [] };\n\n  // Gather all vertex attributes.\n  for (let attributeName in attributeIDs) {\n    const attributeType = self[attributeTypes[attributeName]];\n\n    let attribute;\n    let attributeID;\n\n    // A Draco file may be created with default vertex attributes, whose attribute IDs\n    // are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n    // a Draco file may contain a custom set of attributes, identified by known unique\n    // IDs. glTF files always do the latter, and `.drc` files typically do the former.\n    if (taskConfig.useUniqueIDs) {\n      attributeID = attributeIDs[attributeName];\n      attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n    } else {\n      attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n      if (attributeID === -1) continue;\n      attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n    }\n    geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n  }\n  // Add index.\n  if (geometryType === draco.TRIANGULAR_MESH) {\n    // Generate mesh faces.\n    const numFaces = dracoGeometry.num_faces();\n    const numIndices = numFaces * 3;\n    let dataSize;\n    let ptr;\n    let index;\n    const indexType = self[taskConfig.indexType];\n\n    switch (indexType) {\n      case Uint16Array:\n        dataSize = numIndices * 2;\n        ptr = draco._malloc(dataSize);\n        decoder.GetTrianglesUInt16Array(dracoGeometry, dataSize, ptr);\n        index = new Uint16Array(draco.HEAPU16.buffer, ptr, numIndices).slice();\n        draco._free(ptr);\n        break;\n      case Uint32Array:\n        dataSize = numIndices * 4;\n        ptr = draco._malloc(dataSize);\n        decoder.GetTrianglesUInt32Array(dracoGeometry, dataSize, ptr);\n        index = new Uint32Array(draco.HEAPU32.buffer, ptr, numIndices).slice();\n        draco._free(ptr);\n      default:\n        throw new Error("DRACODecoder: Unexpected index type.");\n    }\n    geometry.index = { array: index, itemSize: 1 };\n  }\n  draco.destroy(dracoGeometry);\n  return geometry;\n}\n\nfunction decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n  const numComponents = attribute.num_components();\n  const numPoints = dracoGeometry.num_points();\n  const numValues = numPoints * numComponents;\n  let ptr;\n  let array;\n  let dataSize;\n  switch (attributeType) {\n    case Float32Array:\n      dataSize = numValues * 4;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_FLOAT32, dataSize, ptr);\n      array = new Float32Array(draco.HEAPF32.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Int8Array:\n      ptr = draco._malloc(numValues);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_INT8, numValues, ptr);\n      array = new Int8Array(draco.HEAP8.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Int16Array:\n      dataSize = numValues * 2;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_INT16, dataSize, ptr);\n      array = new Int16Array(draco.HEAP16.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Int32Array:\n      dataSize = numValues * 4;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_INT32, dataSize, ptr);\n      array = new Int32Array(draco.HEAP32.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Uint8Array:\n      ptr = draco._malloc(numValues);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_UINT8, numValues, ptr);\n      array = new Uint8Array(draco.HEAPU8.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Uint16Array:\n      dataSize = numValues * 2;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_UINT16, dataSize, ptr);\n      array = new Uint16Array(draco.HEAPU16.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Uint32Array:\n      dataSize = numValues * 4;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_UINT32, dataSize, ptr);\n      array = new Uint32Array(draco.HEAPU32.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    default:\n      throw new Error("DRACODecoder: Unexpected attribute type.");\n  }\n\n  return {\n    name: attributeName,\n    array: array,\n    itemSize: numComponents\n  };\n}\n',
        us = "https://gw.alipayobjects.com/os/lib/alipay/draco-javascript/1.3.6/lib/",
        ls = "draco_decoder_gltf.js",
        ds = "draco_decoder_gltf.r3bin",
        hs = "draco_wasm_wrapper_gltf.js",
        fs = (function () {
          function e(e) {
            var t;
            (void 0 === e && (e = { type: "wasm", workerLimit: 4 }),
            (this.pool = []),
            (this.workerLimit = Math.min(navigator.hardwareConcurrency || 4, 4)),
            (this.useJS = void 0),
            (this.currentTaskId = 1),
            (this.taskCache = new WeakMap()),
            (this.loadLibPromise = void 0),
            e.workerLimit > this.workerLimit)
              ? Se.warn("DRACOWorkerPool: Can not initialize worker pool with limit:" + e.workerLimit)
              : (this.workerLimit = null != (t = e.workerLimit) ? t : 4);
            (this.useJS = "object" !== typeof WebAssembly || "js" === e.type),
              (this.loadLibPromise = this.preloadLib());
          }
          var t = e.prototype;
          return (
            (t.preloadLib = function () {
              var e = this;
              return this.loadLibPromise
                ? this.loadLibPromise
                : new Promise(function (t, n) {
                    e.useJS
                      ? Wr("" + us + ls, { type: "text" })
                          .then(function (e) {
                            var n = [e, cs].join("\n"),
                              i = URL.createObjectURL(new Blob([n]));
                            t({ workerSourceURL: i, decoderWASMBinary: null });
                          })
                          ["catch"](function (e) {
                            n(e);
                          })
                      : Promise.all([Wr("" + us + hs, { type: "text" }), Wr("" + us + ds, { type: "arraybuffer" })])
                          .then(function (e) {
                            var n = e[0],
                              i = e[1],
                              r = [n, cs].join("\n"),
                              a = URL.createObjectURL(new Blob([r]));
                            t({ workerSourceURL: a, decoderWASMBinary: i });
                          })
                          ["catch"](function (e) {
                            n(e);
                          });
                  });
            }),
            (t.getWorker = function () {
              var e = this;
              return this.preloadLib().then(function (t) {
                if (e.pool.length < e.workerLimit) {
                  var n = new ss(t.workerSourceURL, t.decoderWASMBinary);
                  e.pool.push(n);
                } else
                  e.pool.sort(function (e, t) {
                    return e.currentLoad > t.currentLoad ? -1 : 1;
                  });
                return e.pool[e.pool.length - 1];
              });
            }),
            (t.decode = function (e, t) {
              var n = this,
                i = JSON.stringify(t);
              if (this.taskCache.has(e)) {
                var r = this.taskCache.get(e);
                if (r.key === i) return r.promise;
                if (0 === e.byteLength)
                  throw new Error(
                    "DRACODecoder: Unable to re-decode a buffer with different settings. Buffer has already been transferred."
                  );
              }
              var a,
                o = this.currentTaskId++,
                s = e.byteLength,
                c = new Promise(function (i, r) {
                  n.getWorker()
                    .then(function (n) {
                      (a = n), n.setCosts(o, s), n.addCurrentLoad(s), n.setCallback(o, i, r), n.decode(o, t, e);
                    })
                    ["catch"](function (e) {
                      r(e);
                    });
                });
              return (
                c["finally"](function () {
                  a && o && a.releaseTask(o);
                }),
                this.taskCache.set(e, { key: i, promise: c }),
                c
              );
            }),
            e
          );
        })();
      function _s(e, t) {
        for (var n = 0; n < t.length; n++) {
          var i = t[n];
          (i.enumerable = i.enumerable || !1),
            (i.configurable = !0),
            "value" in i && (i.writable = !0),
            Object.defineProperty(e, i.key, i);
        }
      }
      function ps(e, t, n) {
        return t && _s(e.prototype, t), n && _s(e, n), e;
      }
      function gs(e, t, n) {
        return (
          t in e
            ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 })
            : (e[t] = n),
          e
        );
      }
      function vs() {
        return (
          (vs =
            Object.assign ||
            function (e) {
              for (var t = 1; t < arguments.length; t++) {
                var n = arguments[t];
                for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && (e[i] = n[i]);
              }
              return e;
            }),
          vs.apply(this, arguments)
        );
      }
      function ms(e, t) {
        var n = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(e);
          t &&
            (i = i.filter(function (t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function ys(e) {
        for (var t = 1; t < arguments.length; t++) {
          var n = null != arguments[t] ? arguments[t] : {};
          t % 2
            ? ms(Object(n), !0).forEach(function (t) {
                gs(e, t, n[t]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n))
            : ms(Object(n)).forEach(function (t) {
                Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
              });
        }
        return e;
      }
      function xs(e, t) {
        (e.prototype = Object.create(t.prototype)), (e.prototype.constructor = e), (e.__proto__ = t);
      }
      function bs(e, t) {
        return (
          (bs =
            Object.setPrototypeOf ||
            function (e, t) {
              return (e.__proto__ = t), e;
            }),
          bs(e, t)
        );
      }
      function ws() {
        if ("undefined" === typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ("function" === typeof Proxy) return !0;
        try {
          return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
        } catch (e) {
          return !1;
        }
      }
      function As(e, t, n) {
        return (
          (As = ws()
            ? Reflect.construct
            : function (e, t, n) {
                var i = [null];
                i.push.apply(i, t);
                var r = Function.bind.apply(e, i),
                  a = new r();
                return n && bs(a, n.prototype), a;
              }),
          As.apply(null, arguments)
        );
      }
      function Ts(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
      }
      function Ms(e, t) {
        if (e) {
          if ("string" === typeof e) return Cs(e, t);
          var n = Object.prototype.toString.call(e).slice(8, -1);
          return (
            "Object" === n && e.constructor && (n = e.constructor.name),
            "Map" === n || "Set" === n
              ? Array.from(e)
              : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
              ? Cs(e, t)
              : void 0
          );
        }
      }
      function Cs(e, t) {
        (null == t || t > e.length) && (t = e.length);
        for (var n = 0, i = new Array(t); n < t; n++) i[n] = e[n];
        return i;
      }
      function Ps(e, t) {
        var n;
        if ("undefined" === typeof Symbol || null == e[Symbol.iterator]) {
          if (Array.isArray(e) || (n = Ms(e)) || (t && e && "number" === typeof e.length)) {
            n && (e = n);
            var i = 0;
            return function () {
              return i >= e.length ? { done: !0 } : { done: !1, value: e[i++] };
            };
          }
          throw new TypeError(
            "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
          );
        }
        return (n = e[Symbol.iterator]()), n.next.bind(n);
      }
      function Ss(e, t, n, i, r) {
        var a = {};
        return (
          Object.keys(i).forEach(function (e) {
            a[e] = i[e];
          }),
          (a.enumerable = !!a.enumerable),
          (a.configurable = !!a.configurable),
          ("value" in a || a.initializer) && (a.writable = !0),
          (a = n
            .slice()
            .reverse()
            .reduce(function (n, i) {
              return i(e, t, n) || n;
            }, a)),
          r &&
            void 0 !== a.initializer &&
            ((a.value = a.initializer ? a.initializer.call(r) : void 0), (a.initializer = void 0)),
          void 0 === a.initializer && (Object.defineProperty(e, t, a), (a = null)),
          a
        );
      }
      function Rs(e) {
        return /^data:(.+?);base64,/.test(e);
      }
      (as = X(qr.Buffer, ["bin", "r3bin"], !1)),
        as(
          (os = (function (e) {
            function t() {
              return e.apply(this, arguments) || this;
            }
            xs(t, e);
            var n = t.prototype;
            return (
              (n.load = function (e) {
                var t = e.url;
                return Rs(t)
                  ? new k(function (e) {
                      var n = t.slice(13 + RegExp.$1.length),
                        i = Uint8Array.from(atob(n), function (e) {
                          return e.charCodeAt(0);
                        });
                      e(i.buffer);
                    })
                  : this.request(t, ys(ys({}, e), {}, { type: "arraybuffer" }));
              }),
              t
            );
          })(Yr))
        );
      var Es,
        Os = {
          5120: Int8Array,
          5121: Uint8Array,
          5122: Int16Array,
          5123: Uint16Array,
          5125: Uint32Array,
          5126: Float32Array
        };
      function Ls(e) {
        if ("undefined" !== typeof TextDecoder) return new TextDecoder().decode(e);
        for (var t = "", n = 0, i = e.length; n < i; n++) t += String.fromCharCode(e[n]);
        return decodeURIComponent(encodeURIComponent(t));
      }
      function Fs(e) {
        var t = { SCALAR: 1, VEC2: 2, VEC3: 3, VEC4: 4, MAT2: 4, MAT3: 9, MAT4: 16 };
        return t[e];
      }
      function Is(e) {
        return Os[e];
      }
      function zs(e, t, n) {
        var i,
          r,
          a = e.bufferViews[t.bufferView],
          o = n[a.buffer],
          s = t.hasOwnProperty("byteOffset") ? t.byteOffset : 0,
          c = a.hasOwnProperty("byteOffset") ? a.byteOffset : 0,
          u = s + c,
          l = Fs(t.type),
          d = l * t.count,
          h = null != (i = a.byteStride) ? i : 0,
          f = Is(t.componentType);
        if (h) {
          r = new Uint8Array(d * f.BYTES_PER_ELEMENT);
          for (
            var _ = new Uint8Array(o, c, a.byteLength), p = 0, g = l * f.BYTES_PER_ELEMENT, v = 0;
            v < t.count;
            v++
          ) {
            p = v * h + s;
            for (var m = 0; m < g; m++) r[v * g + m] = _[p + m];
          }
        } else (r = new Uint8Array(o, u, d * f.BYTES_PER_ELEMENT)), (r = new Uint8Array(r));
        return new f(r.buffer);
      }
      function Bs(e, t) {
        var n = t[e.buffer],
          i = e.byteOffset || 0;
        return n.slice(i, i + e.byteLength);
      }
      function Ds(e) {
        var t = Fs(e.type),
          n = Is(e.componentType);
        return t * n.BYTES_PER_ELEMENT;
      }
      function Ns(e, t, n, i) {
        var r = Fs(n.type);
        return new to(t, 0, Us(n.componentType, r), i);
      }
      function Gs(e) {
        switch (e) {
          case ge.UNSIGNED_BYTE:
            return Na.UInt8;
          case ge.UNSIGNED_SHORT:
            return Na.UInt16;
          case ge.UNSIGNED_INT:
            return Na.UInt32;
        }
      }
      function Us(e, t) {
        if (e == ge.FLOAT)
          switch (t) {
            case 1:
              return Da.Float;
            case 2:
              return Da.Vector2;
            case 3:
              return Da.Vector3;
            case 4:
              return Da.Vector4;
          }
        if (e == ge.UNSIGNED_SHORT)
          switch (t) {
            case 2:
              return Da.UShort2;
            case 4:
              return Da.UShort4;
          }
      }
      function ks(e, t) {
        return new Promise(function (n, i) {
          var r = new window.Blob([e], { type: t }),
            a = new Image();
          (a.src = URL.createObjectURL(r)),
            (a.crossOrigin = "anonymous"),
            (a.onerror = function () {
              i(new Error("Failed to load image buffer"));
            }),
            (a.onload = function () {
              n(a);
            });
        });
      }
      function Vs(e) {
        return /^(?:http|blob|data:|\/)/.test(e);
      }
      function Hs(e, t) {
        return Vs(t) ? t : e.substring(0, e.lastIndexOf("/") + 1) + t;
      }
      var Ws = {
          init: function () {
            Es || (Es = new fs());
          },
          parse: function (e, t, n, i) {
            var r = n.bufferViews,
              a = n.accessors,
              o = e.bufferView,
              s = e.attributes,
              c = {},
              u = {};
            for (var l in s) c[l] = s[l];
            for (var d in t.attributes)
              if (void 0 !== s[d]) {
                var h = a[t.attributes[d]];
                u[d] = Is(h.componentType).name;
              }
            var f = a[t.indices],
              _ = Is(f.componentType).name,
              p = { attributeIDs: c, attributeTypes: u, useUniqueIDs: !0, indexType: _ },
              g = Bs(r[o], i);
            return Es.decode(g, p).then(function (e) {
              return e;
            });
          }
        },
        js = { translation: "position", rotation: "rotation", scale: "scale", weights: "weights" },
        Xs = 0,
        Ks = {},
        qs = {},
        Qs = (function () {
          return function (e) {
            var t = new Ia(e);
            return (t.emissiveColor = new b(0.749, 0.749, 0.749, 1)), t;
          };
        })(),
        Ys = {
          PBRMaterial: "PBRMaterial",
          KHR_lights: "KHR_lights",
          KHR_materials_unlit: "KHR_materials_unlit",
          KHR_materials_pbrSpecularGlossiness: "KHR_materials_pbrSpecularGlossiness",
          KHR_techniques_webgl: "KHR_techniques_webgl",
          KHR_draco_mesh_compression: "KHR_draco_mesh_compression"
        },
        Js = null,
        Zs = {
          KHR_lights: Js,
          KHR_materials_unlit: za,
          KHR_materials_pbrSpecularGlossiness: za,
          KHR_techniques_webgl: Or,
          KHR_draco_mesh_compression: Ws
        };
      function $s(e) {
        Object.keys(e).forEach(function (t) {
          if (void 0 === Ks[t])
            switch (((Ks[t] = e[t]), t)) {
              case Ys.PBRMaterial:
                Zs.KHR_materials_unlit = za;
                break;
              case Ys.KHR_lights:
                (Js = e[t]), (Zs.KHR_lights = Js);
                break;
              default:
                Or.isPrototypeOf(e[t]) && e[t].TECH_NAME && (qs[e[t].TECH_NAME] = e[t]);
                break;
            }
        });
      }
      var ec,
        tc,
        nc,
        ic = (function (e) {
          function t() {
            for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
            return (
              (t = e.call.apply(e, [this].concat(i)) || this),
              (t.defaultSceneRoot = void 0),
              (t.defaultScene = void 0),
              (t.scenes = void 0),
              (t.textures = void 0),
              (t.animations = void 0),
              (t.materials = void 0),
              (t.meshes = void 0),
              (t.skins = void 0),
              (t.cameras = void 0),
              (t.meta = void 0),
              t
            );
          }
          return xs(t, e), t;
        })(be);
      function rc(e, t) {
        var n = { engine: t, gltf: e.gltf, buffers: e.buffers, asset: new ic(t) };
        return (
          (n.asset.textures = e.textures),
          (n.asset.meta = e.gltf),
          n.gltf.asset &&
            n.gltf.asset.version &&
            ((n.gltf.version = Number(n.gltf.asset.version)),
            (n.gltf.isGltf2 = n.gltf.version >= 2 && n.gltf.version <= 3)),
          ac(n),
          oc(n, "materials", sc)
            .then(function () {
              return oc(n, "meshes", lc);
            })
            .then(function () {
              return oc(n, "nodes", hc);
            })
            .then(function () {
              return oc(n, "scenes", fc);
            })
            .then(function () {
              return oc(n, "skins", cc);
            })
            .then(function () {
              return oc(n, "animations", dc);
            })
            .then(function () {
              return pc(n);
            })
        );
      }
      function ac(e) {
        var t = e.gltf,
          n = e.asset,
          i = t.extensions,
          r = t.extensionsUsed,
          a = t.extensionsRequired;
        if (r) {
          Se.info("extensionsUsed: ", r);
          for (var o = 0; o < r.length; o++)
            Object.keys(Zs).indexOf(r[o]) > -1
              ? Zs[r[o]] || Se.warn("extension " + r[o] + " is used, you can add this extension into gltf")
              : Se.warn("extensionsUsed has unsupported extension " + r[o]);
        }
        if (a) {
          Se.info("extensionsRequired: " + a);
          for (var s = 0; s < a.length; s++)
            (Object.keys(Zs).indexOf(a[s]) < 0 || !Zs[a[s]]) &&
              Se.error("model has not supported required extension " + a[s]),
              a[s] === Ys.KHR_draco_mesh_compression && Zs.KHR_draco_mesh_compression.init();
        }
        i && Js && i.KHR_lights && (n.lights = Js.parseLights(i.KHR_lights.lights));
      }
      function oc(e, t, n) {
        var i = e.gltf,
          r = e.asset;
        if ((r[t] || (r[t] = []), i.hasOwnProperty(t))) {
          var a = i[t] || [];
          Se.debug(t + ":", a);
          for (var o = [], s = a.length - 1; s >= 0; s--) o.push(n(a[s], e));
          return Promise.all(o).then(function (e) {
            for (var n = 0; n < e.length; n++) r[t].push(e[n]);
          });
        }
        return Promise.resolve();
      }
      function sc(e, t) {
        var n = t.gltf,
          i = (t.asset, new za(t.engine));
        if (n.isGltf2 && "undefined" === typeof e.technique) {
          var r = e.pbrMetallicRoughness,
            a = e.normalTexture,
            o = e.emissiveTexture,
            s = e.emissiveFactor,
            c = e.occlusionTexture,
            u = e.alphaMode,
            l = e.alphaCutoff,
            d = e.doubleSided,
            h = e.extensions;
          if (r) {
            var f = r.baseColorFactor,
              _ = r.baseColorTexture,
              p = r.metallicFactor,
              g = r.roughnessFactor,
              v = r.metallicRoughnessTexture;
            _ && (i.baseColorTexture = _c("textures", _.index || 0, t, !1)),
              f && (i.baseColor = As(b, f)),
              (i.metallicFactor = void 0 !== p ? p : 1),
              (i.roughnessFactor = void 0 !== g ? g : 1),
              v && (i.metallicRoughnessTexture = _c("textures", v.index || 0, t, !1));
          }
          if (a) {
            var m = a.index,
              y = (a.texCoord, a.scale);
            (i.normalTexture = _c("textures", m || 0, t, !1)), void 0 !== typeof y && (i.normalScale = y);
          }
          switch (
            (o && (i.emissiveTexture = _c("textures", o.index || 0, t, !1)),
            s && (i.emissiveColor = As(b, s)),
            c &&
              ((i.occlusionTexture = _c("textures", c.index || 0, t, !1)),
              void 0 !== c.strength && (i.occlusionStrength = c.strength)),
            (i.renderState.rasterState.cullMode = d ? pt.Off : pt.Back),
            u)
          ) {
            case "OPAQUE":
              i.alphaMode = Sa.Opaque;
              break;
            case "BLEND":
              i.alphaMode = Sa.Blend;
              break;
            case "MASK":
              (i.alphaMode = Sa.CutOff), (i.alphaCutoff = void 0 === l ? 0.5 : l);
              break;
          }
          if (h && (h.KHR_materials_unlit && (i.unLight = !0), h.KHR_materials_pbrSpecularGlossiness)) {
            var x = h.KHR_materials_pbrSpecularGlossiness,
              w = x.diffuseFactor,
              A = x.diffuseTexture,
              T = x.specularFactor,
              M = x.glossinessFactor,
              C = x.specularGlossinessTexture;
            (i.isMetallicWorkflow = !1),
              w && (i.baseColor = As(b, w)),
              A && (i.baseColorTexture = _c("textures", A.index || 0, t, !1)),
              T && (i.specularColor = As(b, T)),
              void 0 !== M && (i.glossinessFactor = M),
              C && (i.specularGlossinessTexture = _c("textures", C.index || 0, t, !1));
          }
        } else {
          var P = e.technique;
          if ((Se.warn("Deprecated: Please use a model that meets the glTF 2.0 specification"), "Texture" === P)) {
            i.unLight = !0;
            var S = e.values._MainTex[0];
            i.baseColorTexture = _c("textures", S || 0, t, !1);
          }
        }
        return Promise.resolve(i);
      }
      function cc(e, t) {
        for (
          var n = t.gltf,
            i = t.buffers,
            r = e.joints.length,
            a = new pa(e.name),
            o = n.accessors[e.inverseBindMatrices],
            s = zs(n, o, i),
            c = 16,
            u = 0;
          u < r;
          u++
        ) {
          var l = c * u,
            d = l + c;
          a.inverseBindMatrices[u] = As(_, s.subarray(l, d));
        }
        for (var h = 0; h < r; h++) {
          var f = _c("nodes", e.joints[h], t);
          a.joints[h] = f.name;
        }
        var p = _c("nodes", null == e.skeleton ? e.joints[0] : e.skeleton, t);
        return (a.skeleton = p.name), Promise.resolve(a);
      }
      function uc(e, t, n, i, r, a, s, c) {
        var u = 0,
          l = [];
        for (var d in i.attributes) {
          var h = i.attributes[d],
            f = r.accessors[h],
            _ = Ds(f),
            p = Ns(r, d, f, u);
          l.push(p);
          var g = a(d),
            v = new Ka(c, Ha.VertexBuffer, g.byteLength, Ba.Static);
          if ((v.setData(g), t.setVertexBufferBinding(v, _, u++), "POSITION" == p.semantic))
            for (var m = new o(), y = g.length / 3, x = e.bounds, b = x.min, w = x.max, A = 0; A < y; A++) {
              var T = 3 * A;
              m.setValue(g[T], g[T + 1], g[T + 2]), o.min(b, m, b), o.max(w, m, w);
            }
        }
        t.setVertexElements(l);
        var M = r.accessors[i.indices],
          C = s(),
          P = M.count,
          S = Gs(M.componentType),
          R = S == Na.UInt32 ? 4 : S == Na.UInt16 ? 2 : 1,
          E = new Ka(c, Ha.IndexBuffer, P * R, Ba.Static);
        return E.setData(C), t.setIndexBufferBinding(new qa(E, S)), (n.start = 0), (n.count = P), Promise.resolve(t);
      }
      function lc(e, t) {
        for (
          var n = t.gltf,
            i = t.buffers,
            r = t.engine,
            a = new _a(e.name),
            o = [],
            s = [],
            c = function (c) {
              o.push(
                new Promise(function (o, u) {
                  var l,
                    d = e.primitives[c],
                    h = new Ya(r, d.name || e.name || c),
                    f = new no();
                  if (
                    (s.push(f),
                    (f.topology = null == d.mode ? Xa.Triangles : d.mode),
                    d.hasOwnProperty("targets") &&
                      ((h.targets = []), (a.weights = e.weights || new Array(d.targets.length).fill(0))),
                    d.extensions && d.extensions[Ys.KHR_draco_mesh_compression])
                  ) {
                    var _ = Zs.KHR_draco_mesh_compression,
                      p = d.extensions[Ys.KHR_draco_mesh_compression];
                    l = _.parse(p, d, n, i).then(function (e) {
                      return uc(
                        a,
                        h,
                        f,
                        d,
                        n,
                        function (t) {
                          for (var n = 0; n < e.attributes.length; n++)
                            if (e.attributes[n].name === t) return e.attributes[n].array;
                          return null;
                        },
                        function () {
                          return e.index.array;
                        },
                        t.engine
                      );
                    });
                  } else
                    l = uc(
                      a,
                      h,
                      f,
                      d,
                      n,
                      function (e) {
                        var t = d.attributes[e],
                          r = n.accessors[t];
                        return zs(n, r, i);
                      },
                      function () {
                        var e = n.accessors[d.indices];
                        return zs(n, e, i);
                      },
                      t.engine
                    );
                  l.then(function (e) {
                    o(e);
                  })["catch"](function (e) {
                    u(e);
                  });
                })
              );
            },
            u = 0;
          u < e.primitives.length;
          u++
        )
          c(u);
        return Promise.all(o).then(function (e) {
          for (var t = 0; t < e.length; t++) a.primitives.push(e[t]), a.groups.push(s[t]);
          return a;
        });
      }
      function dc(e, t) {
        for (
          var n = t.gltf,
            i = t.buffers,
            r = e.samplers || [],
            a = e.channels || [],
            o = n.animations.indexOf(e),
            s = new ro(e.name || "Animation" + o),
            c = -1,
            u = -1,
            l = 0;
          l < r.length;
          l++
        ) {
          var d = r[l],
            h = n.accessors[d.input],
            f = n.accessors[d.output],
            _ = zs(n, h, i),
            p = zs(n, f, i),
            g = Fs(f.type);
          g * _.length !== p.length && (g = p.length / _.length);
          var v = $a.LINEAR;
          switch (d.interpolation) {
            case "CUBICSPLINE":
              v = $a.CUBICSPLINE;
              break;
            case "STEP":
              v = $a.STEP;
              break;
          }
          var m = _[_.length - 1];
          m > c && ((c = m), (u = l)), s.addSampler(_, p, g, v);
        }
        (s.durationIndex = u), (s.duration = c);
        for (var y = 0; y < a.length; y++) {
          var x = a[y],
            b = x.target,
            w = x.sampler,
            A = _c("nodes", b.node, t),
            T = js[b.path];
          s.addChannel(w, A.name, T);
        }
        return Promise.resolve(s);
      }
      function hc(e, t) {
        var n = new ct(t.engine, e.name || "GLTF_NODE_" + Xs++);
        if (e.hasOwnProperty("matrix")) {
          var i = e.matrix,
            r = new _();
          r.setValueByArray(i);
          var a = new o(),
            s = new o(1, 1, 1),
            c = new f();
          r.decompose(a, c, s),
            (n.transform.position = a),
            (n.transform.rotationQuaternion = c),
            (n.transform.scale = s);
        } else
          for (var u in js)
            if (e.hasOwnProperty(u)) {
              var l = js[u];
              if ("weights" === l) n[l] = e[u];
              else {
                var d = e[u],
                  h = d.length,
                  p = n[l];
                2 === h
                  ? p.setValue(d[0], d[1])
                  : 3 === h
                  ? p.setValue(d[0], d[1], d[2])
                  : 4 === h && p.setValue(d[0], d[1], d[2], d[3]),
                  (n[l] = p);
              }
            }
        if (void 0 !== e.camera) {
          var g = t.gltf.cameras[e.camera],
            v = n.addComponent(Gr);
          if ("orthographic" === g.type) {
            v.isOrthographic = !0;
            var m = g.orthographic,
              y = m.ymag,
              x = m.xmag,
              b = m.zfar,
              w = m.znear;
            void 0 !== w && (v.nearClipPlane = w),
              void 0 !== b && (v.farClipPlane = b),
              y && x && (v.orthographicSize = Math.max(y, x) / 2),
              void 0 !== y && x && (v.orthographicSize = x / 2),
              void 0 !== x && y && (v.orthographicSize = y / 2);
          } else {
            var A = g.perspective,
              T = A.aspectRatio,
              M = A.yfov,
              C = A.zfar,
              P = A.znear;
            void 0 !== T && (v.aspectRatio = T),
              void 0 !== M && (v.fieldOfView = M),
              void 0 !== C && (v.farClipPlane = C),
              void 0 !== P && (v.nearClipPlane = P);
          }
        }
        if (e.extensions && Js && e.extensions.KHR_lights) {
          var S = e.extensions.KHR_lights.light;
          if (void 0 !== S) {
            var R = _c("lights", S, t);
            if (R) {
              var E = n.addComponent(R.ability);
              vs(E, R.props);
            }
          }
        }
        return Promise.resolve(n);
      }
      function fc(e, t) {
        for (var n = [], i = 0; i < e.nodes.length; i++) {
          var r = _c("nodes", e.nodes[i], t);
          n.push(r);
        }
        if (e.extensions && Js && e.extensions.KHR_lights) {
          var a = e.extensions.KHR_lights.light;
          if (void 0 !== a) {
            var o = _c("lights", a, t);
            o && n[0].addComponent(o.ability, o.props);
          }
        }
        return Promise.resolve({ nodes: n });
      }
      function _c(e, t, n, i) {
        void 0 === i && (i = !0);
        var r = n.asset,
          a = i ? r[e].length - t - 1 : t;
        return r[e][a];
      }
      function pc(e) {
        var t,
          n = e.asset,
          i = e.gltf,
          r = i.nodes || [],
          a = i.meshes;
        n.defaultScene = _c("scenes", null != (t = i.scene) ? t : 0, e);
        for (var o = r.length - 1; o >= 0; o--) {
          var s = r[o],
            c = _c("nodes", o, e);
          if (s.hasOwnProperty("children"))
            for (var u = s.children || [], l = u.length - 1; l >= 0; l--) {
              var d = _c("nodes", u[l], e);
              c.addChild(d);
            }
          if (s.hasOwnProperty("mesh")) {
            var h = s.mesh;
            c.meshIndex = h;
            var f = a[h].primitives,
              _ = _c("meshes", h, e),
              p = void 0;
            if (s.hasOwnProperty("skin") || _.hasOwnProperty("weights")) {
              var g = _c("skins", s.skin, e),
                v = _.weights,
                m = c.addComponent(Oa);
              (m.mesh = _), (m.skin = g), m.setWeights(v), (p = m);
            } else (p = c.addComponent(Ra)), (p.mesh = _);
            for (var y = 0, x = f.length; y < x; y++) {
              var b = f[y].material;
              _.primitives[y].materialIndex = b;
              var w = void 0 !== b ? _c("materials", b, e) : Qs(c.engine);
              p.setSharedMaterial(y, w);
            }
          }
        }
        var A = n.defaultScene.nodes;
        if (1 === A.length) n.defaultSceneRoot = A[0];
        else {
          for (var T = new ct(e.engine), M = 0; M < A.length; M++) T.addChild(A[M]);
          n.defaultSceneRoot = T;
        }
        var C = n.defaultSceneRoot.addComponent(po),
          P = n.animations;
        return (
          P &&
            P.forEach(function (e) {
              C.addAnimationClip(e, e.name);
            }),
          e.asset
        );
      }
      function gc(e) {
        var t = 4,
          n = 1179937895,
          i = 12,
          r = { JSON: 1313821514, BIN: 5130562 },
          a = new DataView(e),
          o = { magic: a.getUint32(0, !0), version: a.getUint32(t, !0), length: a.getUint32(2 * t, !0) };
        if (o.magic !== n)
          return console.error("Invalid glb magic number. Expected 0x46546C67, found 0x" + o.magic.toString(16)), null;
        var s = a.getUint32(i, !0),
          c = a.getUint32(i + t, !0);
        if (c !== r.JSON)
          return console.error("Invalid glb chunk type. Expected 0x004E4942, found 0x" + c.toString(16)), null;
        var u = new Uint8Array(e, i + 2 * t, s),
          l = JSON.parse(Ls(u)),
          d = [],
          h = i + 2 * t + s;
        while (h < o.length) {
          if (((s = a.getUint32(h, !0)), (c = a.getUint32(h + t, !0)), c !== r.BIN))
            return console.error("Invalid glb chunk type. Expected 0x004E4942, found 0x" + c.toString(16)), null;
          var f = h + 2 * t,
            _ = e.slice(f, f + s);
          d.push(_), (h += s + 2 * t);
        }
        return { gltf: l, buffers: d };
      }
      (ec = X(qr.Perfab, ["gltf", "glb"])),
        ec(
          ((nc = (function (e) {
            function t() {
              for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
              return (
                (t = e.call.apply(e, [this].concat(i)) || this),
                (t.baseUrl = void 0),
                (t.requestGLTF = function (e, n) {
                  return t.request(e.url, ys(ys({}, e), {}, { type: "json" })).then(function (i) {
                    return t._loadGLTFResources(e, i, n);
                  });
                }),
                (t.requestGLB = function (e, n) {
                  return t
                    .request(e.url, ys(ys({}, e), {}, { type: "arraybuffer" }))
                    .then(gc)
                    .then(function (t) {
                      return ys(ys({}, t), {}, { baseUrl: e.url, resourceManager: n });
                    })
                    .then(t._loadImages);
                }),
                (t._loadImages = function (e) {
                  var t = e.gltf,
                    n = e.buffers,
                    i = e.baseUrl,
                    r = e.resourceManager;
                  return t.images
                    ? Promise.all(
                        t.images.map(function (e) {
                          var a = e.uri,
                            o = e.bufferView,
                            s = e.mimeType;
                          if (a) return r.load({ url: Hs(i, a), type: qr.Texture2D });
                          var c = t.bufferViews[o],
                            u = Bs(c, n);
                          return ks(u, s).then(function (e) {
                            var t = new Ea(r.engine, e.width, e.height);
                            return t.setImageSource(e), t.generateMipmaps(), t;
                          });
                        })
                      ).then(function (e) {
                        return { gltf: t, buffers: n, textures: e };
                      })
                    : Promise.resolve({ gltf: t, buffers: n });
                }),
                t
              );
            }
            xs(t, e);
            var n = t.prototype;
            return (
              (n.load = function (e, t) {
                var n = this;
                return new k(function (i, r) {
                  var a = n.isGLB(e.url) ? n.requestGLB : n.requestGLTF;
                  a(e, t)
                    .then(function (e) {
                      rc(e, t.engine).then(function (e) {
                        i(e);
                      });
                    })
                    ["catch"](function (t) {
                      console.error(t), r("Error loading glTF JSON from " + e.url);
                    });
                });
              }),
              (n.isGLB = function (e) {
                return "glb" === e.substring(e.lastIndexOf(".") + 1);
              }),
              (n._loadGLTFResources = function (e, t, n) {
                return this._loadBuffers(e.url, t, n).then(this._loadImages);
              }),
              (n._loadBuffers = function (e, t, n) {
                return t.buffers
                  ? Promise.all(
                      t.buffers.map(function (t) {
                        return t instanceof ArrayBuffer
                          ? Promise.resolve(t)
                          : n.load({ url: Hs(e, t.uri), type: qr.Buffer });
                      })
                    ).then(function (i) {
                      return { buffers: i, gltf: t, baseUrl: e, resourceManager: n };
                    })
                  : Promise.resolve({ baseUrl: e, gltf: t, resourceManager: n });
              }),
              t
            );
          })(Yr)),
          (tc = nc))
        ),
        (vc = X(qr.JSON, ["json"], !1)),
        vc(
          (mc = (function (e) {
            function t() {
              return e.apply(this, arguments) || this;
            }
            xs(t, e);
            var n = t.prototype;
            return (
              (n.load = function (e) {
                return this.request(e.url, ys(ys({}, e), {}, { type: "json" }));
              }),
              t
            );
          })(Yr))
        );
      var vc,
        mc,
        yc = 64,
        xc = 0;
      function bc(e, t) {
        for (
          var n = [],
            i = yc + e.bytesOfKeyValueData,
            r = e.pixelWidth,
            a = e.pixelHeight,
            o = t ? e.numberOfMipmapLevels : 1,
            s = 0;
          s < o;
          s++
        ) {
          var c = new Int32Array(e.buffer, i, 1)[0];
          i += 4;
          for (var u = 0; u < e.numberOfFaces; u++) {
            var l = new Uint8Array(e.buffer, i, c);
            n.push({ data: l, width: r, height: a }), (i += c), (i += 3 - ((c + 3) % 4));
          }
          (r = Math.max(1, 0.5 * r)), (a = Math.max(1, 0.5 * a));
        }
        return n;
      }
      function wc(e) {
        if (e.byteLength >= 12) {
          var t = new Uint8Array(e, 0, 12);
          if (
            171 === t[0] &&
            75 === t[1] &&
            84 === t[2] &&
            88 === t[3] &&
            32 === t[4] &&
            49 === t[5] &&
            49 === t[6] &&
            187 === t[7] &&
            13 === t[8] &&
            10 === t[9] &&
            26 === t[10] &&
            10 === t[11]
          )
            return !0;
        }
        return !1;
      }
      function Ac(e) {
        switch (e) {
          case si.RGB_S3TC_DXT1_EXT:
            return di.DXT1;
          case si.RGBA_S3TC_DXT5_EXT:
            return di.DXT5;
          case si.RGB_ETC1_WEBGL:
            return di.ETC1_RGB;
          case si.RGB8_ETC2:
            return di.ETC2_RGB;
          case si.RGB8_PUNCHTHROUGH_ALPHA1_ETC2:
            return di.ETC2_RGBA5;
          case si.RGBA8_ETC2_EAC:
            return di.ETC2_RGBA8;
          case si.RGB_PVRTC_2BPPV1_IMG:
            return di.PVRTC_RGB2;
          case si.RGBA_PVRTC_2BPPV1_IMG:
            return di.PVRTC_RGBA2;
          case si.RGB_PVRTC_4BPPV1_IMG:
            return di.PVRTC_RGB4;
          case si.RGBA_PVRTC_4BPPV1_IMG:
            return di.PVRTC_RGBA4;
          case si.RGBA_ASTC_4X4_KHR:
            return di.ASTC_4x4;
          case si.RGBA_ASTC_5X5_KHR:
            return di.ASTC_5x5;
          case si.RGBA_ASTC_6X6_KHR:
            return di.ASTC_6x6;
          case si.RGBA_ASTC_8X8_KHR:
            return di.ASTC_8x8;
          case si.RGBA_ASTC_10X10_KHR:
            return di.ASTC_10x10;
          case si.RGBA_ASTC_12X12_KHR:
            return di.ASTC_12x12;
          default:
            var t = si[e];
            throw new Error("this format is not supported in Oasis Engine: " + t);
        }
      }
      var Tc,
        Mc,
        Cc = {
          parse: function (e, t, n, i) {
            if ((void 0 === i && (i = !1), !wc(e)))
              throw new Error("khronosTextureContainerParser: invalid KTX file, texture missing KTX identifier");
            var r = Uint32Array.BYTES_PER_ELEMENT,
              a = new DataView(e, 12, 13 * r),
              o = a.getUint32(0, !0),
              s = 67305985 === o,
              c = {
                buffer: e,
                glType: a.getUint32(1 * r, s),
                glTypeSize: a.getUint32(2 * r, s),
                glFormat: a.getUint32(3 * r, s),
                glInternalFormat: a.getUint32(4 * r, s),
                glBaseInternalFormat: a.getUint32(5 * r, s),
                pixelWidth: a.getUint32(6 * r, s),
                pixelHeight: a.getUint32(7 * r, s),
                pixelDepth: a.getUint32(8 * r, s),
                numberOfArrayElements: a.getUint32(9 * r, s),
                numberOfFaces: a.getUint32(10 * r, s),
                numberOfMipmapLevels: a.getUint32(11 * r, s),
                bytesOfKeyValueData: a.getUint32(12 * r, s),
                loadType: xc
              };
            if (0 !== c.glType) throw new Error("only compressed formats currently supported");
            if (
              ((c.numberOfMipmapLevels = Math.max(1, c.numberOfMipmapLevels)),
              0 === c.pixelHeight || 0 !== c.pixelDepth)
            )
              throw new Error("only 2D textures currently supported");
            if (0 !== c.numberOfArrayElements) throw new Error("texture arrays not currently supported");
            if (c.numberOfFaces !== t)
              throw new Error("number of faces expected" + t + ", but found " + c.numberOfFaces);
            return n && (c.mipmaps = bc(c, !0)), i && (c.engineFormat = Ac(c.glInternalFormat)), c;
          }
        };
      function Pc(e) {
        var t = Cc.parse(e, 1, !0, !0);
        return {
          mipmaps: t.mipmaps,
          engineFormat: t.engineFormat,
          internalFormat: t.glInternalFormat,
          width: t.pixelWidth,
          height: t.pixelHeight
        };
      }
      function Sc(e) {
        for (var t, n, i, r, a = [], o = 0; o < e.length; o++) {
          var s = Cc.parse(e[o], 1, !0, !0);
          a.push(s.mipmaps),
            0 === o && ((i = s.pixelWidth), (r = s.pixelHeight), (t = s.glInternalFormat), (n = s.engineFormat));
        }
        return { mipmapsFaces: a, engineFormat: n, internalFormat: t, width: i, height: r };
      }
      (Tc = X(qr.KTXCube, [])),
        Tc(
          (Mc = (function (e) {
            function t() {
              return e.apply(this, arguments) || this;
            }
            xs(t, e);
            var n = t.prototype;
            return (
              (n.load = function (e, t) {
                var n = this;
                return new k(function (i, r) {
                  Promise.all(
                    e.urls.map(function (t) {
                      return n.request(t, ys(ys({}, e), {}, { type: "arraybuffer" }));
                    })
                  )
                    .then(function (e) {
                      for (
                        var n = Sc(e),
                          r = n.width,
                          a = n.mipmapsFaces,
                          o = n.engineFormat,
                          s = a[0].length > 1,
                          c = new Ga(t.engine, r, o, s),
                          u = 0;
                        u < 6;
                        u++
                      )
                        for (var l = a[u].length, d = 0; d < l; d++) {
                          var h = a[u][d],
                            f = h.data,
                            _ = h.width,
                            p = h.height;
                          c.setPixelBuffer(Fa.PositiveX + u, f, d, 0, 0, _, p);
                        }
                      i(c);
                    })
                    ["catch"](function (e) {
                      r(e);
                    });
                });
              }),
              t
            );
          })(Yr))
        ),
        (Rc = X(qr.KTX, ["ktx"])),
        Rc(
          (Ec = (function (e) {
            function t() {
              return e.apply(this, arguments) || this;
            }
            xs(t, e);
            var n = t.prototype;
            return (
              (n.load = function (e, t) {
                var n = this;
                return new k(function (i, r) {
                  n.request(e.url, ys(ys({}, e), {}, { type: "arraybuffer" }))
                    .then(function (e) {
                      for (
                        var n = Pc(e),
                          r = n.width,
                          a = n.height,
                          o = n.mipmaps,
                          s = n.engineFormat,
                          c = o.length > 1,
                          u = new Ea(t.engine, r, a, s, c),
                          l = 0;
                        l < o.length;
                        l++
                      ) {
                        var d = o[l],
                          h = d.width,
                          f = d.height,
                          _ = d.data;
                        u.setPixelBuffer(_, l, 0, 0, h, f);
                      }
                      i(u);
                    })
                    ["catch"](function (e) {
                      r(e);
                    });
                });
              }),
              t
            );
          })(Yr))
        ),
        (Oc = X(qr.Texture2D, ["png", "jpg", "webp", "jpeg"])),
        Oc(
          (Lc = (function (e) {
            function t() {
              return e.apply(this, arguments) || this;
            }
            xs(t, e);
            var n = t.prototype;
            return (
              (n.load = function (e, t) {
                var n = this;
                return new k(function (i, r) {
                  n.request(e.url, ys(ys({}, e), {}, { type: "image" }))
                    .then(function (n) {
                      var r = new Ea(t.engine, n.width, n.height);
                      if (r._glTexture) {
                        if ((r.setImageSource(n), r.generateMipmaps(), 0 !== e.url.indexOf("data:"))) {
                          var a = e.url.split("/");
                          r.name = a[a.length - 1];
                        }
                        i(r);
                      }
                    })
                    ["catch"](function (e) {
                      r(e);
                    });
                });
              }),
              t
            );
          })(Yr))
        ),
        (Fc = X(qr.TextureCube, [""])),
        Fc(
          (Ic = (function (e) {
            function t() {
              return e.apply(this, arguments) || this;
            }
            xs(t, e);
            var n = t.prototype;
            return (
              (n.load = function (e, t) {
                var n = this;
                return new k(function (i, r) {
                  Promise.all(
                    e.urls.map(function (t) {
                      return n.request(t, ys(ys({}, e), {}, { type: "image" }));
                    })
                  )
                    .then(function (e) {
                      var n = e[0],
                        r = n.width,
                        a = n.height;
                      if (r === a) {
                        var o = new Ga(t.engine, r);
                        if (o._glTexture) {
                          for (var s = 0; s < 6; s++) o.setImageSource(Fa.PositiveX + s, e[s], 0);
                          o.generateMipmaps(), i(o);
                        }
                      } else console.error("The cube texture must have the same width and height");
                    })
                    ["catch"](function (e) {
                      r(e);
                    });
                });
              }),
              t
            );
          })(Yr))
        );
      var Rc,
        Ec,
        Oc,
        Lc,
        Fc,
        Ic,
        zc = (function (e) {
          function t(t) {
            var n;
            return (
              (n = e.call(this, t) || this),
              (n._animator = void 0),
              (n.animationsNames = void 0),
              (n._asset = void 0),
              (n.GLTFNode = void 0),
              (n._loop = void 0),
              (n._autoPlay = void 0),
              (n._hasBuiltNode = !1),
              n
            );
          }
          xs(t, e),
            ps(t, [
              {
                key: "asset",
                get: function () {
                  return this._asset;
                },
                set: function (e) {
                  (e && e.defaultSceneRoot === this.GLTFNode) ||
                    (this._hasBuiltNode ||
                      (this.GLTFNode.clearChildren(),
                      null !== e &&
                        (this.GLTFNode && this.GLTFNode.destroy(),
                        (this.GLTFNode = e.defaultSceneRoot.clone()),
                        (this._animator = this.GLTFNode.getComponent(po)),
                        this.entity.addChild(this.GLTFNode))),
                    (this._asset = e));
                }
              },
              {
                key: "animator",
                get: function () {
                  return this._animator;
                }
              },
              {
                key: "autoPlay",
                get: function () {
                  return this._autoPlay;
                },
                set: function (e) {
                  this._animator &&
                    (e ? this._animator.playAnimationClip(e, { wrapMode: this._loop }) : this._animator.stop(!1)),
                    (this._autoPlay = e);
                }
              },
              {
                key: "loop",
                get: function () {
                  return this._loop;
                },
                set: function (e) {
                  this._animator && this.autoPlay && this._animator.playAnimationClip(this._autoPlay, { wrapMode: e }),
                    (this._loop = e);
                }
              }
            ]);
          var n = t.prototype;
          return (
            (n.init = function (e) {
              var t = e.asset,
                n = void 0 === t ? null : t,
                i = e.autoPlay,
                r = e.loop,
                a = e.isClone;
              if (a) {
                var o = e.gltfRootName;
                o && (this.GLTFNode = this.entity.findByName(o));
              }
              if (this.GLTFNode) this._hasBuiltNode = !0;
              else {
                var s = "GLTF-" + Date.now();
                (e.gltfRootName = s), (this.GLTFNode = this.entity.createChild(s)), (this._hasBuiltNode = !1);
              }
              (this.asset = n), (this.loop = r), (this.autoPlay = i);
            }),
            (n._onEnable = function () {
              this.GLTFNode.isActive = !0;
            }),
            (n._onDisable = function () {
              this.GLTFNode.isActive = !1;
            }),
            t
          );
        })(at),
        Bc = (function () {
          function e() {
            (this.registeredPlugins = new Set()), (this.plugins = []);
          }
          var t = e.prototype;
          return (
            (t.register = function (e) {
              this.registeredPlugins.add(e);
            }),
            (t.boot = function (e) {
              for (var t, n = Ps(this.registeredPlugins.values()); !(t = n()).done; ) {
                var i = t.value;
                "function" === typeof i && (i = i(e)), this.plugins.push(i);
              }
            }),
            (t.reset = function () {
              this.registeredPlugins.clear(), (this.plugins = []);
            }),
            (t.nodeAdded = function (e) {
              this.delegateMethod("nodeAdded", e);
            }),
            (t.delegateMethod = function (e) {
              for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)
                n[i - 1] = arguments[i];
              this.plugins.forEach(function (t) {
                return t[e] && t[e].apply(t, n);
              });
            }),
            e
          );
        })();
      function Dc(e) {
        return function (t, n, i) {
          var r = i.value;
          i.value = function () {
            for (var t, n = this, i = arguments.length, a = new Array(i), o = 0; o < i; o++) a[o] = arguments[o];
            return (
              e.before && (t = this.oasis.pluginManager).delegateMethod.apply(t, [e.before].concat(a)),
              Promise.resolve(r.apply(this, arguments)).then(function (t) {
                return e.after && n.oasis.pluginManager.delegateMethod(e.after, t), t;
              })
            );
          };
        };
      }
      function Nc(e, t, n) {
        if (t !== n && null !== n && void 0 !== n) {
          var i = [e[n], e[t]];
          (e[t] = i[0]), (e[n] = i[1]);
        }
      }
      function Gc(e) {
        return e && "asset" === e.type;
      }
      function Uc(e) {
        for (
          var t = [],
            n = Object.getPrototypeOf(e),
            i = Object.getOwnPropertyDescriptors(n),
            r = 0,
            a = Object.entries(i);
          r < a.length;
          r++
        ) {
          var o = a[r],
            s = o[0],
            c = o[1];
          "function" === typeof c.get && t.push(s);
        }
        return t;
      }
      var kc = (function () {
          var e = t.prototype;
          function t(e, t) {
            (this.resourceManager = e),
              (this._resource = t),
              (this._meta = {}),
              (this._attachedResources = []),
              this.setMeta();
          }
          return (
            (e.setMeta = function () {}),
            ps(t, [
              {
                key: "resource",
                get: function () {
                  return this._resource;
                }
              },
              {
                key: "meta",
                get: function () {
                  return this._meta;
                }
              },
              {
                key: "attachedResources",
                get: function () {
                  return this._attachedResources;
                }
              }
            ]),
            (e.loadWithAttachedResources = function (e, t, n) {
              var i = this;
              return new Promise(function (r, a) {
                i.load(e, t, n)
                  .then(function () {
                    r({ resources: [i], structure: { index: 0, props: {} } });
                  })
                  ["catch"](function (e) {
                    a(e);
                  });
              });
            }),
            (e.getProps = function () {
              return {};
            }),
            (e.bind = function () {}),
            (e.attach = function () {}),
            (e.update = function (e, t) {
              if (Gc(t)) {
                var n = this.resourceManager.get(t.id);
                n
                  ? (this._resource[e] = n.resource)
                  : Se.warn("SchemaResource: " + this.meta.name + " can't find asset, which id is: " + t.id);
              } else this._resource[e] = t;
            }),
            (e.updateMeta = function (e, t) {
              this._meta[e] = t;
            }),
            (e.onDestroy = function () {}),
            t
          );
        })(),
        Vc = (function (e) {
          function t() {
            return e.apply(this, arguments) || this;
          }
          xs(t, e);
          var n = t.prototype;
          return (
            (n.load = function (e, t, n) {
              var i = this;
              return new Promise(function (r, a) {
                var o,
                  s,
                  c,
                  u,
                  l = qr.Texture2D;
                if (
                  i.resourceManager.useCompressedTexture &&
                  null !== t &&
                  void 0 !== t &&
                  null !== (o = t.props) &&
                  void 0 !== o &&
                  null !== (s = o.compression) &&
                  void 0 !== s &&
                  s.compressions.length
                )
                  for (
                    var d = n.engine._hardwareRenderer, h = t.props.compression.compressions, f = 0;
                    f < h.length;
                    f++
                  ) {
                    var _ = h[f];
                    if ("ktx" === _.container && d.canIUse(xe[_.type])) {
                      (u = _.url), (l = qr.KTX);
                      break;
                    }
                  }
                (u = null != (c = u) ? c : t.url),
                  e
                    .load({ url: u, type: l })
                    .then(function (e) {
                      (i._resource = e), r(i);
                    })
                    ["catch"](function (e) {
                      a(e);
                    });
              });
            }),
            (n.setMeta = function () {
              this.resource &&
                ((this._meta.name = this.resource.name),
                this.resource.image && (this._meta.url = this.resource.image.src));
            }),
            t
          );
        })(kc),
        Hc = (function (e) {
          function t() {
            for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
            return (t = e.call.apply(e, [this].concat(i)) || this), (t.configProps = void 0), t;
          }
          xs(t, e);
          var n = t.prototype;
          return (
            (n.load = function (e, t) {
              var n = this;
              return new Promise(function (i) {
                var r = new za(e.engine);
                for (var a in ((n.configProps = t.props), n.configProps))
                  Gc(n.configProps[a]) || (r[a] = n.configProps[a]);
                (n._resource = r), n.setMeta(), i(n);
              });
            }),
            (n.loadWithAttachedResources = function (e, t) {
              var n = this;
              return new Promise(function (i, r) {
                var a;
                t.resource instanceof za
                  ? (a = new Promise(function (e) {
                      (n._resource = t.resource), n.setMeta(), e(n);
                    }))
                  : t.props
                  ? (a = n.load(e, t))
                  : r("Load PBRMaterial Error"),
                  a &&
                    a.then(function () {
                      var e = { resources: [n], structure: { index: 0, props: {} } },
                        t = n._resource;
                      Uc(n._resource).forEach(function (i) {
                        if (t[i] instanceof _i) {
                          var r = new Vc(n.resourceManager, t[i]);
                          n.attachedResources.push(r),
                            e.resources.push(r),
                            (e.structure.props[i] = { index: e.resources.length - 1 });
                        }
                      }),
                        i(e);
                    });
              });
            }),
            (n.setMeta = function () {
              this.resource && (this.meta.name = this.resource.name);
            }),
            (n.getProps = function () {
              var e = this,
                t = {},
                n = Uc(this.resource);
              return (
                n.forEach(function (n) {
                  return (t[n] = e.resource[n]);
                }),
                t
              );
            }),
            (n.bind = function () {
              var e = this,
                t = this._resource;
              Object.keys(this.configProps).forEach(function (n) {
                var i = e.configProps[n];
                if (Gc(i)) {
                  var r = e.resourceManager.get(i.id);
                  r && r instanceof Vc
                    ? ((t[n] = r.resource), e._attachedResources.push(r))
                    : ((t[n] = null),
                      Se.warn(
                        "PBRMaterialResource: " + e.meta.name + " can't find asset \"" + n + '", which id is: ' + i.id
                      ));
                } else {
                  if ("side" === n) return;
                  t[n] = i;
                }
              });
            }),
            t
          );
        })(kc),
        Wc = (function (e) {
          function t() {
            return e.apply(this, arguments) || this;
          }
          xs(t, e);
          var n = t.prototype;
          return (
            (n.load = function (e, t, n) {
              var i,
                r = this;
              return (
                null !== (i = t.props) && void 0 !== i && i.compression && Ws.init(),
                e.load({ url: t.url, type: qr.Perfab }).then(function (e) {
                  var n = e;
                  t.props && (n.newMaterial = t.props.newMaterial), (r._resource = n);
                })
              );
            }),
            (n.loadWithAttachedResources = function (e, t, n) {
              var i = this;
              return new Promise(function (r) {
                i.load(e, t, n).then(function () {
                  for (
                    var t = i.resource,
                      n = t.materials,
                      a = [],
                      o = { resources: [i], structure: { index: 0, props: { newMaterial: [] } } },
                      s = 0;
                    s < n.length;
                    s++
                  ) {
                    var c = n[s],
                      u = new Hc(i.resourceManager);
                    i._attachedResources.push(u),
                      a.push(u.loadWithAttachedResources(e, { type: "PBRMaterial", name: c.name, resource: c }));
                  }
                  Promise.all(a).then(function (e) {
                    var t = o.structure.props.newMaterial;
                    e.forEach(function (e) {
                      var n = e.structure,
                        i = e.resources[n.index];
                      for (var r in (o.resources.push(i), (n.index = o.resources.length - 1), n.props))
                        if (n.props.hasOwnProperty(r)) {
                          var a = n.props[r],
                            s = e.resources[a.index];
                          o.resources.push(s), (a.index = o.resources.length - 1);
                        }
                      t.push(n);
                    }),
                      r(o);
                  });
                });
              });
            }),
            (n.setMeta = function (e) {
              e && (this.meta.name = e.name);
            }),
            (n.bind = function () {
              var e = this._resource;
              this.bindMaterials(e.newMaterial);
            }),
            (n.update = function (e, t) {
              "newMaterial" === e ? this.bindMaterials(t) : (this._resource[e] = t);
            }),
            (n.bindMaterials = function (e) {
              if (e && e.length) {
                for (var t = this._resource, n = t.meshes, i = 0; i < e.length; i++) {
                  var r = this.resourceManager.get(e[i].id);
                  r
                    ? (this._attachedResources.push(r), (t.materials[i] = r.resource))
                    : Se.warn(
                        "GLTFResource: " + this.meta.name + ' can\'t find asset "material", which id is: ' + e[i].id
                      );
                }
                for (var a = 0; a < n.length; a++) {
                  var o = this.getNodeByMeshIndex(t.nodes, n.length - 1 - a);
                  if (o)
                    for (var s = 0; s < n[a].primitives.length; s++) {
                      var c = n[a].primitives[s],
                        u = o.getComponent(Ra),
                        l = t.materials[t.materials.length - 1 - c.materialIndex];
                      u && l && l instanceof Or && u.setSharedMaterial(s, l);
                    }
                }
              }
            }),
            (n.getNodeByMeshIndex = function (e, t) {
              for (var n = 0; n <= e.length; n++) {
                var i = e[n];
                if (i.meshIndex === t) return i;
              }
              return null;
            }),
            t
          );
        })(kc),
        jc = {};
      function Xc(e) {
        return function (t) {
          jc[e] = t;
        };
      }
      var Kc,
        qc,
        Qc,
        Yc,
        Jc,
        Zc,
        $c,
        eu,
        tu,
        nu,
        iu,
        ru,
        au,
        ou,
        su = (function (e) {
          function t() {
            for (var t, n = arguments.length, i = new Array(n), r = 0; r < n; r++) i[r] = arguments[r];
            return (t = e.call.apply(e, [this].concat(i)) || this), (t.isInit = !1), t;
          }
          xs(t, e);
          var n = t.prototype;
          return (
            (n.initScriptContext = function () {
              this.isInit ||
                ((this.isInit = !0),
                (window.__o3_script_context__ = {
                  o3: Eu._components["o3"],
                  script: function (e) {
                    return function (t) {
                      jc[e] = t;
                    };
                  }
                }));
            }),
            (n.load = function (e, t, n) {
              var i = this;
              return (
                this.initScriptContext(),
                new Promise(function (e) {
                  var r = t,
                    a = r.props.scripts;
                  if (i.resourceManager.isLocal) {
                    for (var o = 0; o < a.length; o++) {
                      var s,
                        c = a[o].name;
                      jc[c] = null === (s = n.options) || void 0 === s ? void 0 : s.scripts[c];
                    }
                    e(i);
                  } else {
                    var u = document.createElement("script");
                    (u.crossOrigin = "anonymous"),
                      i.setMeta(t),
                      (u.onload = function () {
                        for (var t = window.o3Scripts, n = 0; n < a.length; n++) {
                          var r = a[n].name;
                          (i._resource = t && t[r]), (jc[r] = i._resource);
                        }
                        e(i);
                      }),
                      (u.src = t.url),
                      document.body.appendChild(u);
                  }
                })
              );
            }),
            (n.setMeta = function (e) {
              e && ((this._meta.name = e.name), (this._meta.url = e.url), (this._meta.source = e.source));
            }),
            t
          );
        })(kc),
        cu = (function (e) {
          function t() {
            return e.apply(this, arguments) || this;
          }
          xs(t, e);
          var n = t.prototype;
          return (
            (n.load = function (e, t) {
              var n = this;
              return new Promise(function (i) {
                var r = new Ia(e.engine);
                for (var a in t.props) r[a] = t.props[a];
                (n._resource = r), n.setMeta(), i(n);
              });
            }),
            (n.setMeta = function () {
              this.resource && (this.meta.name = this.resource.name);
            }),
            t
          );
        })(kc),
        uu = { px: 0, nx: 1, py: 2, ny: 3, pz: 4, nz: 5 },
        lu = (function (e) {
          function t() {
            return e.apply(this, arguments) || this;
          }
          xs(t, e);
          var n = t.prototype;
          return (
            (n.load = function (e, t, n) {
              var i = this;
              return new Promise(function (r, a) {
                var o,
                  s,
                  c = [],
                  u = qr.TextureCube;
                if (
                  i.resourceManager.useCompressedTexture &&
                  null !== t &&
                  void 0 !== t &&
                  null !== (o = t.props) &&
                  void 0 !== o &&
                  null !== (s = o.compression) &&
                  void 0 !== s &&
                  s.compressions.length
                )
                  for (
                    var l = n.engine._hardwareRenderer, d = t.props.compression.compressions, h = 0;
                    h < d.length;
                    h++
                  ) {
                    var f = d[h];
                    if ("ktx" === f.container && l.canIUse(xe[f.type])) {
                      for (var _ in f.files)
                        if (f.files.hasOwnProperty(_)) {
                          var p = f.files[_];
                          c[uu[_]] = p.url;
                        }
                      console.warn(f.type), (u = qr.KTXCube);
                      break;
                    }
                  }
                if (u === qr.TextureCube)
                  for (var g in t.props.images)
                    if (t.props.images.hasOwnProperty(g)) {
                      var v = t.props.images[g];
                      c[uu[g]] = v.url;
                    }
                e.load({ urls: c, type: u })
                  .then(function (e) {
                    (i._resource = e), r(i);
                  })
                  ["catch"](function (e) {
                    a(e);
                  });
              });
            }),
            (n.setMeta = function () {
              this.resource && (this.meta.name = this.resource.name);
            }),
            t
          );
        })(kc),
        du = (function (e) {
          function t() {
            return e.apply(this, arguments) || this;
          }
          xs(t, e);
          var n = t.prototype;
          return (
            (n.load = function (e, t) {
              var n = this;
              return new Promise(function (e) {
                (n._resource = t), n.setMetaData("name", n.resource.name), n.setMetaData("url", n.resource.url), e(n);
              });
            }),
            (n.setMetaData = function (e, t) {
              this._meta[e] = t;
            }),
            t
          );
        })(kc),
        hu =
          ((Kc = Dc({ after: "abilityAdded", before: "beforeAbilityAdded" })),
          (qc = Dc({ before: "beforeAbilityUpdated", after: "abilityUpdated" })),
          (Qc = Dc({ after: "abilityDeleted", before: "beforeAbilityDeleted" })),
          (Jc = (function () {
            function e(e) {
              (this.oasis = e), (this.abilityMap = {});
            }
            var t = e.prototype;
            return (
              (t.add = function (e) {
                var t = e.type,
                  n = e.node,
                  i = e.props,
                  r = e.id,
                  a = e.index,
                  o = this.oasis.nodeManager.get(n),
                  s = this.getCompConstructor(t);
                if (s) {
                  var c = this.mixPropsToExplicitProps(i),
                    u = o.addComponent(s),
                    l = c.enabled;
                  if ((void 0 !== l && (u.enabled = l), "Model" === t || "GLTFModel" === t || "ParticleRenderer" === t))
                    u.init(c);
                  else for (var d in c) null !== c[d] && (u[d] = c[d]);
                  var h = o._components,
                    f = h.length - 1;
                  return Nc(h, f, a), (u.id = r), (this.abilityMap[r] = u), u;
                }
                Se.error(t + " abiltiy is not defined");
              }),
              (t.update = function (e, t, n) {
                return (
                  "Model" === this.get(e).constructor.name
                    ? n && this.checkIsAsset(n)
                      ? this.get(e).setProp(t, this.oasis.resourceManager.get(n.id).resource)
                      : this.get(e).setProp(t, n)
                    : n && this.checkIsAsset(n)
                    ? (this.get(e)[t] = this.oasis.resourceManager.get(n.id).resource)
                    : (this.get(e)[t] = n),
                  { id: e, key: t, value: n }
                );
              }),
              (t.get = function (e) {
                return this.abilityMap[e];
              }),
              (t["delete"] = function (e) {
                var t = this.abilityMap[e];
                return t.destroy(), delete this.abilityMap[e], e;
              }),
              (t.getCompConstructor = function (e) {
                var t = e.split(".");
                if ("script" === t[0]) return jc[t[1]];
                var n = Eu._components["o3"][e];
                if (!n) throw new Error(e + " is not defined");
                return n;
              }),
              (t.mixPropsToExplicitProps = function (e) {
                var t = ys({}, e);
                for (var n in e) {
                  var i = e[n];
                  if (i && this.checkIsAsset(i)) {
                    var r = this.oasis.resourceManager.get(i.id);
                    r
                      ? (t[n] = r.resource)
                      : ((t[n] = null), Se.warn("AbilityManager: can't get asset \"" + n + '", which id is ' + i.id));
                  }
                }
                return t;
              }),
              (t.checkIsAsset = function (e) {
                return "asset" === e.type;
              }),
              e
            );
          })()),
          (Yc = Jc),
          Ss(Yc.prototype, "add", [Kc], Object.getOwnPropertyDescriptor(Yc.prototype, "add"), Yc.prototype),
          Ss(Yc.prototype, "update", [qc], Object.getOwnPropertyDescriptor(Yc.prototype, "update"), Yc.prototype),
          Ss(Yc.prototype, "delete", [Qc], Object.getOwnPropertyDescriptor(Yc.prototype, "delete"), Yc.prototype),
          Yc),
        fu =
          ((Zc = Dc({ after: "nodeAdded" })),
          ($c = Dc({ before: "beforeNodeUpdated", after: "nodeUpdated" })),
          (eu = Dc({ before: "beforeNodeDeleted" })),
          (nu = (function () {
            function e(e) {
              (this.oasis = e),
                (this.nodeMap = {}),
                (this.root = void 0),
                (this.root = new ct(this.oasis.engine, "root"));
            }
            var t = e.prototype;
            return (
              (t.addRootEntity = function () {
                this.oasis.engine.sceneManager.activeScene.addRootEntity(this.root);
              }),
              (t.add = function (e) {
                return this.create(e), this.append(e.id, e.parent, e.index), this.get(e.id);
              }),
              (t.update = function (e, t, n) {
                return (this.get(e)[t] = n), { id: e, key: t, value: n };
              }),
              (t.get = function (e) {
                return this.nodeMap[e];
              }),
              (t.reset = function () {
                this.nodeMap = {};
              }),
              (t["delete"] = function (e) {
                this.nodeMap[e].destroy(), delete this.nodeMap[e];
              }),
              (t.create = function (e) {
                var t = e.isActive,
                  n = e.position,
                  i = e.rotation,
                  r = e.scale,
                  a = e.id,
                  s = e.name,
                  c = new ct(this.oasis.engine, s);
                return (
                  (c.isActive = t),
                  (c.transform.position = new o(n[0], n[1], n[2])),
                  (c.transform.rotation = new o(i[0], i[1], i[2])),
                  (c.transform.scale = new o(r[0], r[1], r[2])),
                  (c.id = a),
                  (this.nodeMap[a] = c),
                  c
                );
              }),
              (t.append = function (e, t, n) {
                var i = this.nodeMap[e],
                  r = this.nodeMap[t] || this.root;
                r.addChild(i);
                var a = r._children,
                  o = a.length - 1;
                Nc(a, o, n);
              }),
              e
            );
          })()),
          (tu = nu),
          Ss(tu.prototype, "add", [Zc], Object.getOwnPropertyDescriptor(tu.prototype, "add"), tu.prototype),
          Ss(tu.prototype, "update", [$c], Object.getOwnPropertyDescriptor(tu.prototype, "update"), tu.prototype),
          Ss(tu.prototype, "delete", [eu], Object.getOwnPropertyDescriptor(tu.prototype, "delete"), tu.prototype),
          tu),
        _u = {
          script: su,
          gltf: Wc,
          texture: Vc,
          cubeTexture: lu,
          PBRMaterial: Hc,
          PBRSpecularMaterial: Hc,
          unlitMaterial: Hc,
          BlinnPhongMaterial: cu,
          base: du
        },
        pu = new Map();
      for (var gu in _u)
        if (_u.hasOwnProperty(gu)) {
          var vu = _u[gu];
          vu === Hc ? pu.set(vu, "PBRMaterial") : pu.set(vu, gu);
        }
      var mu = {
        createResource: function (e, t) {
          return new _u[t](e);
        }
      };
      function yu(e, t) {
        _u.hasOwnProperty(e) || ((_u[e] = t), pu.set(t, e));
      }
      var xu,
        bu,
        wu,
        Au =
          ((iu = Dc({ before: "beforeResourceRemove" })),
          (ru = Dc({ after: "resourceUpdated", before: "beforeResourceUpdate" })),
          (ou = (function () {
            function e(e) {
              (this.oasis = e),
                (this.resourceMap = {}),
                (this.resourceIdMap = new WeakMap()),
                (this.maxId = 0),
                (this.engineResourceManager = void 0),
                (this.engineResourceManager = this.oasis.engine.resourceManager);
            }
            var t = e.prototype;
            return (
              (t.load = function (e) {
                var t = this,
                  n = mu.createResource(this, e.type),
                  i = n.load(this.oasis.engine.resourceManager, e, this.oasis);
                return (
                  (this.maxId = Math.max(+e.id, this.maxId)),
                  i.then(function () {
                    (t.resourceMap[e.id] = n), t.resourceIdMap.set(n, e.id);
                  }),
                  i
                );
              }),
              (t.add = function (e) {
                var t = this,
                  n = mu.createResource(this, e.type);
                return new Promise(function (i) {
                  n.loadWithAttachedResources(t.oasis.engine.resourceManager, e, t.oasis).then(function (e) {
                    i(t.getAddResourceResult(e.resources, e.structure));
                  });
                });
              }),
              (t.remove = function (e) {
                var t = this;
                return new Promise(function (n) {
                  var i = t.resourceMap[e],
                    r = [e],
                    a = !1;
                  if ((delete t.resourceMap[e], i))
                    for (var o = i.attachedResources, s = 0; s < o.length; s++) {
                      var c = o[s],
                        u = t.resourceIdMap.get(c);
                      u &&
                        ((a = !0),
                        t.remove(u).then(function (e) {
                          r.push.apply(r, e), n(r);
                        }));
                    }
                  a || n(r);
                });
              }),
              (t.update = function (e, t, n) {
                var i = this.get(e);
                return i && i.update(t, n), { resource: i, id: e, key: t, value: n };
              }),
              (t.updateMeta = function (e, t, n) {
                var i = this.get(e);
                i && i.updateMeta(t, n);
              }),
              (t.get = function (e) {
                return this.resourceMap[e];
              }),
              (t.getAll = function () {
                return W(this.resourceMap);
              }),
              (t.getAddResourceResult = function (e, t) {
                var n = this,
                  i = {},
                  r = e[t.index],
                  a = "" + ++this.maxId;
                for (var o in ((this.resourceMap[a] = r),
                this.resourceIdMap.set(r, a),
                (i.id = this.maxId),
                (i.type = pu.get(r.constructor)),
                (i.meta = r.meta),
                (i.props = {}),
                t.props))
                  if (t.props.hasOwnProperty(o)) {
                    var s = t.props[o];
                    s &&
                      (Array.isArray(s)
                        ? (i.props[o] = s.map(function (t) {
                            return n.getAddResourceResult(e, t);
                          }))
                        : (i.props[o] = this.getAddResourceResult(e, s)));
                  }
                return i;
              }),
              ps(e, [
                {
                  key: "isLocal",
                  get: function () {
                    return this.oasis.options.local;
                  }
                },
                {
                  key: "useCompressedTexture",
                  get: function () {
                    var e;
                    return null == (e = this.oasis.options.useCompressedTexture) || e;
                  }
                }
              ]),
              e
            );
          })()),
          (au = ou),
          Ss(au.prototype, "remove", [iu], Object.getOwnPropertyDescriptor(au.prototype, "remove"), au.prototype),
          Ss(au.prototype, "update", [ru], Object.getOwnPropertyDescriptor(au.prototype, "update"), au.prototype),
          au),
        Tu =
          ((xu = Dc({ after: "schemaParsed" })),
          (wu = (function (e) {
            function t(t, n) {
              var i, r;
              return (
                (r = e.call(this, t.engine) || this),
                (r._options = t),
                (r.pluginManager = n),
                (r.engine = null),
                (r.nodeManager = void 0),
                (r.abilityManager = void 0),
                (r.resourceManager = void 0),
                (r._canvas = void 0),
                (r.schema = void 0),
                (r.timeout = void 0),
                (r.oasis = Ts(r)),
                (r.engine = t.engine),
                (r.schema = t.config),
                (r.timeout = t.timeout),
                (t.scripts = null != (i = t.scripts) ? i : {}),
                (r.nodeManager = new fu(Ts(r))),
                (r.abilityManager = new hu(Ts(r))),
                (r.nodeManager.add = r.nodeManager.add.bind(r.nodeManager)),
                (r.abilityManager.add = r.abilityManager.add.bind(r.abilityManager)),
                (r.resourceManager = new Au(Ts(r))),
                t.fps && ((r.engine.targetFrameRate = t.fps), (r.engine.vSyncCount = 0)),
                r
              );
            }
            xs(t, e);
            var n = t.prototype;
            return (
              (n.updateConfig = function (e) {
                (this.schema = e), this.init();
              }),
              (n.init = function () {
                var e = this;
                return this.loadResources().then(function () {
                  e.bindResources(),
                    e.parseEntities(),
                    e.parseNodeAbilities(),
                    e.attach(),
                    e.nodeManager.addRootEntity(),
                    e.pluginManager.boot(e);
                });
              }),
              (n.loadResources = function () {
                var e = this,
                  t = this.schema.assets,
                  n = void 0 === t ? {} : t,
                  i = W(n)
                    .filter(function (e) {
                      return (
                        !!_u[e.type] ||
                        (console.warn(e.type + " loader is not defined. the " + e.type + " type will be ignored."), !1)
                      );
                    })
                    .map(function (t) {
                      return e.resourceManager.load(t);
                    });
                return Promise.all(i);
              }),
              (n.bindResources = function () {
                this.resourceManager.getAll().forEach(function (e) {
                  e.bind();
                });
              }),
              (n.parseEntities = function () {
                var e = this.schema.nodes,
                  t = this.bfsNodes();
                t.map(function (t) {
                  return e[t];
                }).forEach(this.nodeManager.add);
              }),
              (n.parseNodeAbilities = function () {
                var e = this.schema.abilities;
                Object.keys(e)
                  .map(function (t) {
                    return ys({ id: t }, e[t]);
                  })
                  .forEach(this.abilityManager.add);
              }),
              (n.bfsNodes = function () {
                var e = this.schema.nodes,
                  t = W(e)
                    .filter(function (t) {
                      return !e[t.parent];
                    })
                    .map(function (e) {
                      return e.id;
                    }),
                  n = [],
                  i = function t(i) {
                    (n = n.concat(i)),
                      i.forEach(function (n) {
                        var i = e[n].children;
                        i && t(i);
                      });
                  };
                return i(t), n;
              }),
              (n.attach = function () {
                this.resourceManager.getAll().forEach(function (e) {
                  e.attach();
                });
              }),
              (t.create = function (e, n) {
                var i = new t(e, n);
                return i.init().then(function () {
                  return e.autoPlay && i.engine.run(), i;
                });
              }),
              ps(t, [
                {
                  key: "canvas",
                  get: function () {
                    return this._options.canvas;
                  }
                },
                {
                  key: "options",
                  get: function () {
                    return this._options;
                  }
                }
              ]),
              t
            );
          })(we)),
          (bu = wu),
          Ss(bu.prototype, "init", [xu], Object.getOwnPropertyDescriptor(bu.prototype, "init"), bu.prototype),
          bu),
        Mu = [
          "color",
          "center",
          "size",
          "__position",
          "__positionRandomness",
          "__color",
          "__velocity",
          "__velocityRandomness",
          "__acceleration",
          "__accelerationRandomness",
          "_center"
        ];
      function Cu(e) {
        for (
          var t = e.abilities,
            n = void 0 === t ? {} : t,
            i = e.assets,
            r = void 0 === i ? {} : i,
            a = Object.keys(n),
            o = Object.keys(r),
            s = 0,
            c = a.length;
          s < c;
          ++s
        )
          Pu(n[a[s]].props);
        for (var u = 0, l = o.length; u < l; ++u) Su(r[o[u]].props);
        return e;
      }
      function Pu(e) {
        for (var t = Object.keys(e), n = 0, i = t.length; n < i; ++n) {
          var r = t[n],
            a = e[r];
          null !== a &&
            "object" === typeof a &&
            a.length > 1 &&
            ("backgroundColor" === r || "tintColor" === r
              ? (e[r] = new y(a[0], a[1], a[2], a[3]))
              : -1 !== Mu.indexOf(r) && (e[r] = new o(a[0], a[1], a[2])));
        }
      }
      function Su(e) {
        if ((void 0 === e && (e = {}), e))
          for (var t = Object.keys(e), n = 0, i = t.length; n < i; n++) {
            var r = t[n],
              a = e[r];
            if ("newMaterial" !== r && "blendFuncSeparate" !== r && "scripts" !== r)
              switch (null === a || void 0 === a ? void 0 : a.length) {
                case 2:
                  e[r] = new m(a[0], a[1]);
                  break;
                case 3:
                  e[r] = new o(a[0], a[1], a[2]);
                  break;
                case 4:
                  e[r] = new y(a[0], a[1], a[2], a[3]);
                  break;
              }
          }
      }
      var Ru = 3,
        Eu = (function () {
          var e = t.prototype;
          function t() {
            this.pluginManager = new Bc();
          }
          return (
            (e.parse = function (e) {
              var t, n;
              (null === e || void 0 === e ? void 0 : null === (t = e.config) || void 0 === t ? void 0 : t.version) !==
                Ru &&
                console.warn(
                  'schema-parser: schema version "' +
                    (null === e || void 0 === e
                      ? void 0
                      : null === (n = e.config) || void 0 === n
                      ? void 0
                      : n.version) +
                    '" is out of date, please re-pull the latest version (version ' +
                    Ru +
                    ") of the schema"
                );
              return Cu(e.config), Tu.create(e, this.pluginManager);
            }),
            (e.register = function (e) {
              this.pluginManager.register(e);
            }),
            (e.resetPlugins = function () {
              this.pluginManager.reset();
            }),
            (t.create = function () {
              var e = new t();
              return e;
            }),
            (t.registerComponents = function (e, t) {
              this._components[e] || (this._components[e] = {}), vs(this._components[e], t);
            }),
            t
          );
        })();
      Eu._components = {};
      var Ou = Eu.create();
      function Lu(e, t) {
        for (var n = 0; n < t.length; n++) {
          var i = t[n];
          (i.enumerable = i.enumerable || !1),
            (i.configurable = !0),
            "value" in i && (i.writable = !0),
            Object.defineProperty(e, i.key, i);
        }
      }
      function Fu(e, t, n) {
        return t && Lu(e.prototype, t), n && Lu(e, n), e;
      }
      function Iu(e, t, n) {
        return (
          t in e
            ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 })
            : (e[t] = n),
          e
        );
      }
      function zu(e, t) {
        var n = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(e);
          t &&
            (i = i.filter(function (t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            })),
            n.push.apply(n, i);
        }
        return n;
      }
      function Bu(e) {
        for (var t = 1; t < arguments.length; t++) {
          var n = null != arguments[t] ? arguments[t] : {};
          t % 2
            ? zu(Object(n), !0).forEach(function (t) {
                Iu(e, t, n[t]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n))
            : zu(Object(n)).forEach(function (t) {
                Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
              });
        }
        return e;
      }
      function Du(e, t) {
        (e.prototype = Object.create(t.prototype)), (e.prototype.constructor = e), (e.__proto__ = t);
      }
      var Nu = (function () {
          function e(e, t, n) {
            (this._gl = void 0),
              (this._glTexture = void 0),
              (this._config = void 0),
              (this._type = void 0),
              (this._gl = e.gl),
              (this._glTexture = t._glTexture),
              (this._config = t),
              (this._type = n);
          }
          var t = e.prototype;
          return (
            (t.activeBinding = function (e) {
              var t = this._gl;
              t.activeTexture(t.TEXTURE0 + e), t.bindTexture(this._type, this._glTexture);
            }),
            (t.finalize = function () {}),
            Fu(e, [
              {
                key: "glTexture",
                get: function () {
                  return this._glTexture;
                }
              }
            ]),
            e
          );
        })(),
        Gu = (function () {
          var e = t.prototype;
          function t(e) {
            (this._webCanvas = void 0), (this._width = void 0), (this._height = void 0), (this._scale = new m());
            var t = e.width,
              n = e.height;
            (this._webCanvas = e), (this._width = t), (this._height = n);
          }
          return (
            (e.resizeByClientSize = function (e) {
              void 0 === e && (e = window.devicePixelRatio);
              var t = this._webCanvas;
              if (t instanceof HTMLCanvasElement) {
                var n = t.clientWidth,
                  i = t.clientHeight;
                (this.width = n * e), (this.height = i * e);
              }
            }),
            Fu(t, [
              {
                key: "width",
                get: function () {
                  return this._width;
                },
                set: function (e) {
                  this._width !== e && ((this._webCanvas.width = e), (this._width = e));
                }
              },
              {
                key: "height",
                get: function () {
                  return this._height;
                },
                set: function (e) {
                  this._height !== e && ((this._webCanvas.height = e), (this._height = e));
                }
              },
              {
                key: "scale",
                get: function () {
                  var e = this._webCanvas;
                  return (
                    e instanceof HTMLCanvasElement &&
                      this._scale.setValue(
                        (e.clientWidth * devicePixelRatio) / e.width,
                        (e.clientHeight * devicePixelRatio) / e.height
                      ),
                    this._scale
                  );
                },
                set: function (e) {
                  var t = this._webCanvas;
                  t instanceof HTMLCanvasElement &&
                    ((t.style.transformOrigin = "left top"), (t.style.transform = "scale(" + e.x + ", " + e.y + ")"));
                }
              }
            ]),
            (e.setScale = function (e, t) {
              this._scale.setValue(e, t), (this.scale = this._scale);
            }),
            t
          );
        })(),
        Uu = (function () {
          function e(e) {
            (this._maxDrawBuffers = void 0),
              (this._maxAnisoLevel = void 0),
              (this._maxAntiAliasing = void 0),
              (this._rhi = void 0),
              (this.capabilityList = void 0),
              (this._rhi = e),
              (this.capabilityList = new Map()),
              this.init(),
              this.compatibleAllInterface();
          }
          Fu(e, [
            {
              key: "maxDrawBuffers",
              get: function () {
                return (
                  this._maxDrawBuffers ||
                    (this.canIUse(xe.drawBuffers)
                      ? (this._maxDrawBuffers = this._rhi.gl.getParameter(this._rhi.gl.MAX_DRAW_BUFFERS))
                      : (this._maxDrawBuffers = 1)),
                  this._maxDrawBuffers
                );
              }
            },
            {
              key: "maxAnisoLevel",
              get: function () {
                if (!this._maxAnisoLevel) {
                  var e = this._rhi.requireExtension(xe.textureFilterAnisotropic);
                  this._maxAnisoLevel = e ? this._rhi.gl.getParameter(e.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1;
                }
                return this._maxAnisoLevel;
              }
            },
            {
              key: "maxAntiAliasing",
              get: function () {
                if (!this._maxAntiAliasing) {
                  var e = this._rhi.gl,
                    t = this.canIUse(xe.multipleSample);
                  this._maxAntiAliasing = t ? e.getParameter(e.MAX_SAMPLES) : 1;
                }
                return this._maxAntiAliasing;
              }
            },
            {
              key: "rhi",
              get: function () {
                return this._rhi;
              }
            }
          ]);
          var t = e.prototype;
          return (
            (t.canIUse = function (e) {
              return this.capabilityList.get(e);
            }),
            (t.canIUseCompressedTextureInternalFormat = function (e) {
              var t = si.RGBA_ASTC_4X4_KHR,
                n = si.RGBA_ASTC_12X12_KHR,
                i = si.SRGB8_ALPHA8_ASTC_4X4_KHR,
                r = si.SRGB8_ALPHA8_ASTC_12X12_KHR,
                a = si.RGB_ETC1_WEBGL,
                o = si.R11_EAC,
                s = si.SRGB8_ALPHA8_ETC2_EAC,
                c = si.RGB_PVRTC_4BPPV1_IMG,
                u = si.RGBA_PVRTC_2BPPV1_IMG,
                l = si.RGB_S3TC_DXT1_EXT,
                d = si.RGBA_S3TC_DXT5_EXT;
              return (e >= t && n <= n) || (e >= i && e <= r)
                ? this.canIUse(xe.astc)
                : e === a
                ? this.canIUse(xe.etc1)
                : e >= o && e <= s
                ? this.canIUse(xe.etc)
                : e >= c && e <= u
                ? this.canIUse(xe.pvrtc)
                : e >= l && e <= d && this.canIUse(xe.s3tc);
            }),
            (t.init = function () {
              var e = this.capabilityList,
                t = this.rhi.isWebGL2,
                n = this.rhi.requireExtension.bind(this.rhi),
                i = xe.standardDerivatives,
                r = xe.shaderTextureLod,
                a = xe.elementIndexUint,
                o = xe.depthTexture,
                s = xe.vertexArrayObject,
                c = xe.instancedArrays,
                u = xe.multipleSample,
                l = xe.drawBuffers,
                d = xe.astc,
                h = xe.astc_webkit,
                f = xe.etc,
                _ = xe.etc_webkit,
                p = xe.etc1,
                g = xe.etc1_webkit,
                v = xe.pvrtc,
                m = xe.pvrtc_webkit,
                y = xe.s3tc,
                x = xe.s3tc_webkit,
                b = xe.textureFloat,
                w = xe.textureHalfFloat,
                A = xe.textureFloatLinear,
                T = xe.textureHalfFloatLinear,
                M = xe.WEBGL_colorBufferFloat,
                C = xe.colorBufferFloat,
                P = xe.colorBufferHalfFloat,
                S = xe.textureFilterAnisotropic;
              e.set(i, t || !!n(i)),
                e.set(r, t || !!n(r)),
                e.set(a, t || !!n(a)),
                e.set(o, t || !!n(o)),
                e.set(s, t || !!n(s)),
                e.set(c, t || !!n(c)),
                e.set(u, t),
                e.set(l, t || !!n(l)),
                e.set(b, t || !!n(b)),
                e.set(w, t || !!n(w)),
                e.set(A, !!n(A)),
                e.set(T, t || !!n(T)),
                e.set(C, (t && !!n(C)) || !!n(M)),
                e.set(P, (t && !!n(C)) || !!n(P)),
                e.set(S, !!n(S)),
                e.set(d, !(!n(d) && !n(h))),
                e.set(f, !(!n(f) && !n(_))),
                e.set(p, !(!n(p) && !n(g))),
                e.set(v, !(!n(v) && !n(m))),
                e.set(y, !(!n(y) && !n(x)));
            }),
            (t.compatibleInterface = function (e, t) {
              var n = this.rhi,
                i = n.gl,
                r = null;
              if ((r = n.requireExtension(e)))
                for (var a in t) {
                  var o = t[a],
                    s = r[o];
                  null !== s && void 0 !== s && s.bind ? (i[a] = s.bind(r)) : (i[a] = s);
                }
            }),
            (t.compatibleAllInterface = function () {
              var e = xe.depthTexture,
                t = xe.vertexArrayObject,
                n = xe.instancedArrays,
                i = xe.drawBuffers,
                r = xe.textureFilterAnisotropic,
                a = xe.textureHalfFloat,
                o = xe.colorBufferHalfFloat,
                s = xe.WEBGL_colorBufferFloat,
                c = this.rhi.isWebGL2;
              if (!c) {
                this.compatibleInterface(e, { UNSIGNED_INT_24_8: "UNSIGNED_INT_24_8_WEBGL" }),
                  this.compatibleInterface(t, {
                    createVertexArray: "createVertexArrayOES",
                    deleteVertexArray: "deleteVertexArrayOES",
                    isVertexArray: "isVertexArrayOES",
                    bindVertexArray: "bindVertexArrayOES"
                  }),
                  this.compatibleInterface(n, {
                    drawArraysInstanced: "drawArraysInstancedANGLE",
                    drawElementsInstanced: "drawElementsInstancedANGLE",
                    vertexAttribDivisor: "vertexAttribDivisorANGLE"
                  }),
                  this.compatibleInterface(i, { MAX_DRAW_BUFFERS: "MAX_DRAW_BUFFERS_WEBGL" });
                var u = {};
                if (this.canIUse(xe.drawBuffers)) {
                  for (var l = this.maxDrawBuffers, d = 0; d < l; d++)
                    0 != d && (u["COLOR_ATTACHMENT" + d] = "COLOR_ATTACHMENT" + d + "_WEBGL"),
                      (u["DRAW_BUFFER" + d] = "DRAW_BUFFER" + d + "_WEBGL");
                  this.compatibleInterface(i, Bu({ drawBuffers: "drawBuffersWEBGL" }, u));
                }
                this.compatibleInterface(a, { HAFL_FLOAT: "HALF_FLOAT_OES" }),
                  this.compatibleInterface(o, { RGBA16F: "RBGA16F_EXT" }),
                  this.compatibleInterface(s, { RGBA32F: "RBGA32F_EXT" });
              }
              this.compatibleInterface(r, { TEXTURE_MAX_ANISOTROPY_EXT: "TEXTURE_MAX_ANISOTROPY_EXT" });
            }),
            Fu(e, [
              {
                key: "canIUseMoreJoints",
                get: function () {
                  return (
                    this.canIUse(xe.textureFloat) &&
                    this.rhi.renderStates.getParameter(this.rhi.gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0
                  );
                }
              }
            ]),
            e
          );
        })(),
        ku = (function () {
          function e(e) {
            (this.rhi = void 0), (this._requireResult = void 0), (this.rhi = e), (this._requireResult = {});
          }
          var t = e.prototype;
          return (
            (t.requireExtension = function (e) {
              return void 0 !== this._requireResult[e]
                ? this._requireResult[e]
                : ((this._requireResult[e] = this.rhi.gl.getExtension(e)), this._requireResult[e]);
            }),
            e
          );
        })(),
        Vu = (function () {
          function e(e, t) {
            (this._primitive = void 0),
              (this.attribLocArray = void 0),
              (this.canUseInstancedArrays = void 0),
              (this.gl = void 0),
              (this.vao = new Map()),
              (this._useVao = void 0),
              (this._primitive = t),
              (this.canUseInstancedArrays = e.canIUse(xe.instancedArrays)),
              (this._useVao = e.canIUse(xe.vertexArrayObject)),
              (this.gl = e.gl);
          }
          var t = e.prototype;
          return (
            (t.draw = function (e, t) {
              var n = this.gl,
                i = this._primitive;
              if (this._useVao) {
                this.vao.has(e.id) || this.registerVAO(e);
                var r = this.vao.get(e.id);
                n.bindVertexArray(r);
              } else this.bindBufferAndAttrib(e);
              var a = i.indexBufferBinding,
                o = i.instanceCount,
                s = i._glIndexType,
                c = t.topology,
                u = t.start,
                l = t.count;
              if (o)
                if (this.canUseInstancedArrays)
                  if (a)
                    if (this._useVao) n.drawElementsInstanced(c, l, s, u, o);
                    else {
                      var d = a.buffer._nativeBuffer;
                      n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, d),
                        n.drawElementsInstanced(c, l, s, u, o),
                        n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, null);
                    }
                  else n.drawArraysInstanced(c, u, l, o);
                else Se.error("ANGLE_instanced_arrays extension is not supported");
              else if (a)
                if (this._useVao) n.drawElements(c, l, s, u);
                else {
                  var h = a.buffer._nativeBuffer;
                  n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, h),
                    n.drawElements(c, l, s, u),
                    n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, null);
                }
              else n.drawArrays(c, u, l);
              this._useVao ? n.bindVertexArray(null) : this.disableAttrib();
            }),
            (t.destroy = function () {
              if (this._useVao) {
                var e = this.gl;
                this.vao.forEach(function (t) {
                  e.deleteVertexArray(t);
                });
              }
            }),
            (t.bindBufferAndAttrib = function (e) {
              var t = this.gl,
                n = this._primitive,
                i = n.vertexBufferBindings;
              this.attribLocArray = [];
              var r,
                a,
                o = e.attributeLocation,
                s = n._vertexElementMap;
              for (var c in o) {
                var u = o[c];
                if (-1 !== u) {
                  var l = s[c];
                  if (l) {
                    var d = i[l.bindingIndex],
                      h = d.buffer,
                      f = d.stride;
                    (r = h._nativeBuffer),
                      a !== r && ((a = r), t.bindBuffer(t.ARRAY_BUFFER, r)),
                      t.enableVertexAttribArray(u);
                    var _ = l._glElementInfo,
                      p = _.size,
                      g = _.type;
                    t.vertexAttribPointer(u, p, g, l.normalized, f, l.offset),
                      this.canUseInstancedArrays && t.vertexAttribDivisor(u, l.instanceDivisor),
                      this.attribLocArray.push(u);
                  } else Se.warn("vertex attribute not found: " + c);
                }
              }
              t.bindBuffer(t.ARRAY_BUFFER, null);
            }),
            (t.disableAttrib = function () {
              for (var e = this.gl, t = 0, n = this.attribLocArray.length; t < n; t++)
                e.disableVertexAttribArray(this.attribLocArray[t]);
            }),
            (t.registerVAO = function (e) {
              var t = this.gl,
                n = t.createVertexArray();
              t.bindVertexArray(n);
              var i = this._primitive.indexBufferBinding;
              i && t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, i.buffer._nativeBuffer),
                this.bindBufferAndAttrib(e),
                t.bindVertexArray(null),
                t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, null),
                this.disableAttrib(),
                this.vao.set(e.id, n);
            }),
            e
          );
        })(),
        Hu = (function () {
          function e(e) {
            (this._gl = void 0),
              (this._parameters = {}),
              (this._gl = e),
              (this._parameters = {}),
              (this._parameters[e.MAX_COMBINED_TEXTURE_IMAGE_UNITS] = e.getParameter(
                e.MAX_COMBINED_TEXTURE_IMAGE_UNITS
              )),
              (this._parameters[e.MAX_VERTEX_UNIFORM_VECTORS] = e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS)),
              (this._parameters[e.MAX_VERTEX_ATTRIBS] = e.getParameter(e.MAX_VERTEX_ATTRIBS)),
              (this._parameters[e.MAX_VERTEX_TEXTURE_IMAGE_UNITS] = e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS)),
              e.blendFuncSeparate(e.ONE, e.ZERO, e.ONE, e.ZERO),
              e.blendEquationSeparate(e.FUNC_ADD, e.FUNC_ADD),
              e.colorMask(!0, !0, !0, !0),
              e.blendColor(0, 0, 0, 0),
              e.disable(e.SAMPLE_ALPHA_TO_COVERAGE),
              e.enable(e.DEPTH_TEST),
              e.depthFunc(e.LESS),
              e.depthMask(!0),
              e.disable(e.STENCIL_TEST),
              e.stencilFuncSeparate(e.FRONT, e.ALWAYS, 0, 255),
              e.stencilFuncSeparate(e.BACK, e.ALWAYS, 0, 255),
              e.stencilOpSeparate(e.FRONT, e.KEEP, e.KEEP, e.KEEP),
              e.stencilOpSeparate(e.BACK, e.KEEP, e.KEEP, e.KEEP),
              e.stencilMask(255),
              e.enable(e.CULL_FACE),
              e.cullFace(e.BACK),
              e.disable(e.POLYGON_OFFSET_FILL),
              e.polygonOffset(0, 0);
          }
          var t = e.prototype;
          return (
            (t.getParameter = function (e) {
              return this._parameters[e];
            }),
            e
          );
        })(),
        Wu = (function () {
          function e(e) {
            (this.gl = void 0),
              (this._vbo = void 0),
              (this._maxBatchCount = void 0),
              (this._vertBuffer = void 0),
              (this._vertCursor = void 0),
              (this._drawSpriteCount = void 0),
              (this._vertAttributes = void 0),
              (this.gl = e),
              this._initVertexAttributes(e),
              (this._vbo = e.createBuffer()),
              (this._maxBatchCount = 0),
              (this._vertBuffer = null),
              (this._vertCursor = 0),
              (this._drawSpriteCount = 0);
          }
          var t = e.prototype;
          return (
            (t.setMaxBatchCount = function (e) {
              var t = 6 * e * 9;
              (this._vertBuffer && this._vertBuffer.length >= t) ||
                ((this._maxBatchCount = e), (this._vertBuffer = new Float32Array(t)));
            }),
            (t.beginDraw = function (e) {
              (this._vertCursor = 0), (this._drawSpriteCount = 0), e > this._maxBatchCount && this.setMaxBatchCount(e);
            }),
            (t.drawSprite = function (e, t, n) {
              if ((this._drawSpriteCount++, this._drawSpriteCount > this._maxBatchCount))
                Se.warn("Sprite: sprite count overflow");
              else {
                var i = n,
                  r = t.u,
                  a = t.v,
                  o = t.u + t.width,
                  s = t.v + t.height;
                this._pushVertex(e.leftTop, new m(r, a), i),
                  this._pushVertex(e.leftBottom, new m(r, s), i),
                  this._pushVertex(e.rightBottom, new m(o, s), i),
                  this._pushVertex(e.rightBottom, new m(o, s), i),
                  this._pushVertex(e.rightTop, new m(o, a), i),
                  this._pushVertex(e.leftTop, new m(r, a), i);
              }
            }),
            (t.endDraw = function (e) {
              var t = this._vertCursor / 9;
              if (!(t <= 0)) {
                var n = this.gl;
                n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, null),
                  n.bindBuffer(n.ARRAY_BUFFER, this._vbo),
                  n.bufferData(n.ARRAY_BUFFER, this._vertBuffer, n.DYNAMIC_DRAW);
                var i = e.attributeLocation;
                for (var r in i) {
                  var a = i[r],
                    o = this._vertAttributes[r];
                  n.vertexAttribPointer(a, o.size, o.type, o.normalized, o.stride, o.offset),
                    n.enableVertexAttribArray(a);
                }
                for (var s in (n.drawArrays(n.TRIANGLES, 0, t),
                n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, null),
                n.bindBuffer(n.ARRAY_BUFFER, null),
                i))
                  n.disableVertexAttribArray(i[s]);
              }
            }),
            (t._initVertexAttributes = function (e) {
              var t = 36,
                n = { name: "a_pos", size: 3, offset: 0 },
                i = { name: "a_uv", size: 2, offset: 12 },
                r = { name: "a_color", size: 4, offset: 20 };
              for (var a in ((this._vertAttributes = { a_pos: n, a_uv: i, a_color: r }), this._vertAttributes)) {
                var o = this._vertAttributes[a];
                (o.type = e.FLOAT), (o.normalized = !1), (o.stride = t);
              }
            }),
            (t._pushVertex = function (e, t, n) {
              var i = this._vertBuffer,
                r = this._vertCursor;
              (i[r] = e.x),
                (i[r + 1] = e.y),
                (i[r + 2] = e.z),
                (i[r + 3] = t.x),
                (i[r + 4] = t.y),
                (i[r + 5] = n.x),
                (i[r + 6] = n.y),
                (i[r + 7] = n.z),
                (i[r + 8] = n.w),
                (this._vertCursor += 9);
            }),
            (t.finalize = function () {
              this._vbo && (this.gl.deleteBuffer(this._vbo), (this._vbo = null));
            }),
            e
          );
        })(),
        ju =
          "\nprecision highp float;\n\nuniform mat4 matProjection;\nuniform mat4 matView;\n\nattribute vec3 a_pos;\nattribute vec2 a_uv;\nattribute vec4 a_color;\n\nvarying vec2 v_uv;\nvarying vec4 v_color;\n\nvoid main()\n{\n  gl_Position = matProjection * matView * vec4(a_pos,1.0);\n  v_uv = a_uv;\n  v_color = a_color;\n}\n",
        Xu =
          "\nprecision mediump float;\nprecision mediump int;\n\nuniform sampler2D s_diffuse;\nvarying vec2 v_uv;\nvarying vec4 v_color;\n\nvoid main()\n{\n  // \u53ea\u4f7f\u7528\u8d34\u56fe\u7684Alpha\u505aMask\uff0c\u8fd9\u6837Tint Color\u4f9d\u7136\u53ef\u4ee5\u63a7\u5236\u63a7\u4ef6Fade Out\n  vec4 baseColor = texture2D(s_diffuse, v_uv);\n  gl_FragColor = baseColor * v_color;\n}\n";
      Zn.create("Sprite", ju, Xu);
      var Ku,
        qu = (function () {
          function e(e) {
            (this._gl = void 0),
              (this._batchedQueue = void 0),
              (this._targetTexture = void 0),
              (this._glSprite = void 0),
              (this._camera = void 0),
              (this._gl = e.gl),
              (this._batchedQueue = []),
              (this._targetTexture = null),
              (this._glSprite = new Wu(e.gl)),
              (this._camera = null);
          }
          var t = e.prototype;
          return (
            (t.flush = function (e, t) {
              if (0 !== this._batchedQueue.length)
                if (this._targetTexture) {
                  var n = t.shaderData;
                  n.setTexture("s_diffuse", this._targetTexture),
                    n.setMatrix("matView", this._camera.viewMatrix),
                    n.setMatrix("matProjection", this._camera.projectionMatrix);
                  var i = yt.compileMacros;
                  i.clear();
                  var r = t.shader._getShaderProgram(e, i);
                  if (r.isValid) {
                    r.groupingOtherUniformBlock(),
                      r.uploadAll(r.materialUniformBlock, n),
                      t.renderState._apply(e),
                      this._glSprite.beginDraw(this._batchedQueue.length);
                    for (var a = 0, o = this._batchedQueue.length; a < o; a++) {
                      var s = this._batchedQueue[a].positionQuad,
                        c = this._batchedQueue[a].uvRect,
                        u = this._batchedQueue[a].tintColor;
                      this._glSprite.drawSprite(s, c, u);
                    }
                    this._glSprite.endDraw(r),
                      (this._batchedQueue = []),
                      (this._targetTexture = null),
                      (this._camera = null);
                  }
                } else Se.error("No texture!");
            }),
            (t.canBatch = function (e, t, n) {
              return null === this._targetTexture || (e === this._targetTexture && n === this._camera);
            }),
            (t.drawSprite = function (e, t, n, i, r, a, o) {
              this.canBatch(r, a, o) || this.flush(o.engine, e),
                (this._targetTexture = r),
                (this._camera = o),
                this._batchedQueue.push({ positionQuad: t, uvRect: n, tintColor: i });
            }),
            (t.finalize = function () {
              this._glSprite.finalize();
            }),
            e
          );
        })();
      (function (e) {
        (e[(e["Auto"] = 0)] = "Auto"), (e[(e["WebGL2"] = 1)] = "WebGL2"), (e[(e["WebGL1"] = 2)] = "WebGL1");
      })(Ku || (Ku = {}));
      var Qu = (function () {
          function e(e) {
            void 0 === e && (e = {}),
              (this._currentBind = void 0),
              (this._options = void 0),
              (this._gl = void 0),
              (this._renderStates = void 0),
              (this._extensions = void 0),
              (this._spriteBatcher = void 0),
              (this._capability = void 0),
              (this._isWebGL2 = void 0),
              (this._activedTextureID = void 0),
              (this._activeTextures = new Array(32)),
              (this._options = e);
          }
          Fu(e, [
            {
              key: "isWebGL2",
              get: function () {
                return this._isWebGL2;
              }
            }
          ]);
          var t = e.prototype;
          return (
            (t.init = function (e) {
              var t,
                n = this._options,
                i = e._webCanvas,
                r = n.webGLMode || Ku.Auto;
              if (
                ((r != Ku.Auto && r != Ku.WebGL2) ||
                  ((t = i.getContext("webgl2", n)),
                  !t && i instanceof HTMLCanvasElement && (t = i.getContext("experimental-webgl2", n)),
                  (this._isWebGL2 = !0)),
                t ||
                  (r != Ku.Auto && r != Ku.WebGL1) ||
                  ((t = i.getContext("webgl", n)),
                  !t && i instanceof HTMLCanvasElement && (t = i.getContext("experimental-webgl", n)),
                  (this._isWebGL2 = !1)),
                !t)
              )
                throw new Error("Get GL Context FAILED.");
              (this._gl = t),
                (this._renderStates = new Hu(t)),
                (this._extensions = new ku(this)),
                (this._capability = new Uu(this)),
                (this._options = null);
            }),
            (t.createPlatformPrimitive = function (e) {
              return new Vu(this, e);
            }),
            (t.requireExtension = function (e) {
              return this._extensions.requireExtension(e);
            }),
            (t.canIUse = function (e) {
              return this.capability.canIUse(e);
            }),
            (t.canIUseCompressedTextureInternalFormat = function (e) {
              return this.capability.canIUseCompressedTextureInternalFormat(e);
            }),
            (t.viewport = function (e, t, n, i) {
              var r = this._gl;
              r.viewport(e, r.drawingBufferHeight - t - i, n, i);
            }),
            (t.colorMask = function (e, t, n, i) {
              this._gl.colorMask(e, t, n, i);
            }),
            (t.clearRenderTarget = function (e, t) {
              var n = this._gl;
              switch (e) {
                case ue.SOLID_COLOR:
                  n.clearColor(t.x, t.y, t.z, t.w), n.clear(n.COLOR_BUFFER_BIT | n.DEPTH_BUFFER_BIT);
                  break;
                case ue.DEPTH_ONLY:
                  n.clear(n.DEPTH_BUFFER_BIT);
                  break;
                case ue.COLOR_ONLY:
                  n.clearColor(t.x, t.y, t.z, t.w), n.clear(n.COLOR_BUFFER_BIT);
                  break;
                case ue.STENCIL_ONLY:
                  n.clear(n.STENCIL_BUFFER_BIT);
                  break;
                case ue.ALL_CLEAR:
                  n.clearColor(t.x, t.y, t.z, t.w),
                    n.clear(n.COLOR_BUFFER_BIT | n.DEPTH_BUFFER_BIT | n.STENCIL_BUFFER_BIT);
                  break;
                case ue.DONT_CLEAR:
                  break;
              }
            }),
            (t.drawPrimitive = function (e, t, n) {
              e ? e._draw(n, t) : Se.error("draw primitive failed.");
            }),
            (t.drawSprite = function (e, t, n, i, r, a, o) {
              this._spriteBatcher || (this._spriteBatcher = new qu(this)),
                this._spriteBatcher.drawSprite(e, t, n, i, r, a, o);
            }),
            (t.flushSprite = function (e, t) {
              this._spriteBatcher && this._spriteBatcher.flush(e, t);
            }),
            (t.activeRenderTarget = function (e, t) {
              var n = this._gl;
              if (e) {
                e._activeRenderTarget();
                var i = e.width,
                  r = e.height;
                n.viewport(0, 0, i, r);
              } else {
                n.bindFramebuffer(n.FRAMEBUFFER, null);
                var a = t.viewport,
                  o = n.drawingBufferWidth,
                  s = n.drawingBufferHeight;
                this.viewport(a.x * o, a.y * s, a.z * o, a.w * s);
              }
            }),
            (t.blitRenderTarget = function (e) {
              e && e._MSAAFrameBuffer && e._blitRenderTarget();
            }),
            (t.setRenderTargetFace = function (e, t) {
              e && e._setRenderTargetFace(t);
            }),
            (t.destroy = function () {}),
            (t.activeTexture = function (e) {
              this._activedTextureID !== e && (this._gl.activeTexture(e), (this._activedTextureID = e));
            }),
            (t.bindTexture = function (e, t) {
              var n = this._gl;
              this._activeTextures[this._activedTextureID - n.TEXTURE0] !== t &&
                (n.bindTexture(e, t), (this._activeTextures[this._activedTextureID - n.TEXTURE0] = t));
            }),
            Fu(e, [
              {
                key: "gl",
                get: function () {
                  return this._gl;
                }
              },
              {
                key: "renderStates",
                get: function () {
                  return this._renderStates;
                }
              },
              {
                key: "capability",
                get: function () {
                  return this._capability;
                }
              },
              {
                key: "canIUseMoreJoints",
                get: function () {
                  return this.capability.canIUseMoreJoints;
                }
              }
            ]),
            e
          );
        })(),
        Yu = (function (e) {
          function t(t, n) {
            var i = new Gu("string" === typeof t ? document.getElementById(t) : t),
              r = new Qu(n);
            return e.call(this, i, r) || this;
          }
          return (
            Du(t, e),
            Fu(t, [
              {
                key: "canvas",
                get: function () {
                  return this._canvas;
                }
              }
            ]),
            t
          );
        })(Cr);
      n.d(t, "version", function () {
        return Ju;
      }),
        n.d(t, "ABoxCollider", function () {
          return $r;
        }),
        n.d(t, "ACollider", function () {
          return Zr;
        }),
        n.d(t, "ASphereCollider", function () {
          return ea;
        }),
        n.d(t, "AlphaMode", function () {
          return Sa;
        }),
        n.d(t, "AmbientLight", function () {
          return ei;
        }),
        n.d(t, "Animation", function () {
          return po;
        }),
        n.d(t, "AnimationClip", function () {
          return ro;
        }),
        n.d(t, "AnimationEvent", function () {
          return Za;
        }),
        n.d(t, "AssetPromise", function () {
          return k;
        }),
        n.d(t, "AssetPromiseStatus", function () {
          return x;
        }),
        n.d(t, "AssetType", function () {
          return qr;
        }),
        n.d(t, "BasicRenderPipeline", function () {
          return zr;
        }),
        n.d(t, "BlendFactor", function () {
          return dt;
        }),
        n.d(t, "BlendFunc", function () {
          return me;
        }),
        n.d(t, "BlendOperation", function () {
          return ht;
        }),
        n.d(t, "BlinnPhongMaterial", function () {
          return Ia;
        }),
        n.d(t, "BoxCollider", function () {
          return Bo;
        }),
        n.d(t, "Buffer", function () {
          return Ka;
        }),
        n.d(t, "BufferBindFlag", function () {
          return Ha;
        }),
        n.d(t, "BufferGeometry", function () {
          return go;
        }),
        n.d(t, "BufferUsage", function () {
          return Ba;
        }),
        n.d(t, "BufferUtil", function () {
          return ja;
        }),
        n.d(t, "Camera", function () {
          return Gr;
        }),
        n.d(t, "CircleGeometry", function () {
          return Ao;
        }),
        n.d(t, "ClearMode", function () {
          return ue;
        }),
        n.d(t, "ColliderFeature", function () {
          return Jr;
        }),
        n.d(t, "CollisionDetection", function () {
          return ko;
        }),
        n.d(t, "ColorWriteMask", function () {
          return ft;
        }),
        n.d(t, "CompFunc", function () {
          return pe;
        }),
        n.d(t, "CompareFunction", function () {
          return _t;
        }),
        n.d(t, "Component", function () {
          return at;
        }),
        n.d(t, "CubeProbe", function () {
          return Yo;
        }),
        n.d(t, "CuboidGeometry", function () {
          return yo;
        }),
        n.d(t, "CullFace", function () {
          return fe;
        }),
        n.d(t, "CullMode", function () {
          return pt;
        }),
        n.d(t, "CylinderGeometry", function () {
          return wo;
        }),
        n.d(t, "DataType", function () {
          return ge;
        }),
        n.d(t, "DirectLight", function () {
          return ti;
        }),
        n.d(t, "EXP2Fog", function () {
          return Wo;
        }),
        n.d(t, "Engine", function () {
          return Cr;
        }),
        n.d(t, "EngineFeature", function () {
          return Sr;
        }),
        n.d(t, "EngineObject", function () {
          return be;
        }),
        n.d(t, "Entity", function () {
          return ct;
        }),
        n.d(t, "EnvironmentMapLight", function () {
          return ni;
        }),
        n.d(t, "Event", function () {
          return q;
        }),
        n.d(t, "EventDispatcher", function () {
          return we;
        }),
        n.d(t, "Fog", function () {
          return Ho;
        }),
        n.d(t, "FrontFace", function () {
          return he;
        }),
        n.d(t, "GLCapabilityType", function () {
          return xe;
        }),
        n.d(t, "GLCompressedTextureInternalFormat", function () {
          return si;
        }),
        n.d(t, "GeometryRenderer", function () {
          return vo;
        }),
        n.d(t, "IndexBufferBinding", function () {
          return qa;
        }),
        n.d(t, "IndexFormat", function () {
          return Na;
        }),
        n.d(t, "InternalAssetType", function () {
          return ce;
        }),
        n.d(t, "InterpolationType", function () {
          return $a;
        }),
        n.d(t, "LODGroup", function () {
          return La;
        }),
        n.d(t, "Layer", function () {
          return Ee;
        }),
        n.d(t, "Light", function () {
          return $n;
        }),
        n.d(t, "LightFeature", function () {
          return oi;
        }),
        n.d(t, "LinearFog", function () {
          return jo;
        }),
        n.d(t, "Loader", function () {
          return Yr;
        }),
        n.d(t, "Logger", function () {
          return Se;
        }),
        n.d(t, "Material", function () {
          return Or;
        }),
        n.d(t, "MaterialType", function () {
          return le;
        }),
        n.d(t, "Mesh", function () {
          return _a;
        }),
        n.d(t, "MeshRenderer", function () {
          return Ra;
        }),
        n.d(t, "Model", function () {
          return Co;
        }),
        n.d(t, "ObjectValues", function () {
          return W;
        }),
        n.d(t, "PBRMaterial", function () {
          return za;
        }),
        n.d(t, "ParticleRenderer", function () {
          return Eo;
        }),
        n.d(t, "PlaneCollider", function () {
          return ta;
        }),
        n.d(t, "PlaneGeometry", function () {
          return bo;
        }),
        n.d(t, "PointLight", function () {
          return ii;
        }),
        n.d(t, "Primitive", function () {
          return Ya;
        }),
        n.d(t, "PrimitiveTopology", function () {
          return Xa;
        }),
        n.d(t, "Probe", function () {
          return Xo;
        }),
        n.d(t, "RefObject", function () {
          return fi;
        }),
        n.d(t, "RefreshRate", function () {
          return ye;
        }),
        n.d(t, "RenderBufferColorFormat", function () {
          return ci;
        }),
        n.d(t, "RenderBufferDepthFormat", function () {
          return ui;
        }),
        n.d(t, "RenderColorTexture", function () {
          return Va;
        }),
        n.d(t, "RenderDepthTexture", function () {
          return Ua;
        }),
        n.d(t, "RenderElement", function () {
          return lt;
        }),
        n.d(t, "RenderPass", function () {
          return Fr;
        }),
        n.d(t, "RenderQueue", function () {
          return yt;
        }),
        n.d(t, "RenderQueueType", function () {
          return vt;
        }),
        n.d(t, "RenderState", function () {
          return de;
        }),
        n.d(t, "RenderTarget", function () {
          return ka;
        }),
        n.d(t, "Renderer", function () {
          return Er;
        }),
        n.d(t, "ResourceManager", function () {
          return j;
        }),
        n.d(t, "Scene", function () {
          return gi;
        }),
        n.d(t, "SceneFeature", function () {
          return mt;
        }),
        n.d(t, "ScreenQuadGeometry", function () {
          return To;
        }),
        n.d(t, "Script", function () {
          return Rr;
        }),
        n.d(t, "SetDataOptions", function () {
          return Wa;
        }),
        n.d(t, "Shader", function () {
          return Zn;
        }),
        n.d(t, "ShaderFactory", function () {
          return Xn;
        }),
        n.d(t, "ShapeGeometry", function () {
          return mo;
        }),
        n.d(t, "Side", function () {
          return _e;
        }),
        n.d(t, "Skin", function () {
          return pa;
        }),
        n.d(t, "SkinnedMeshRenderer", function () {
          return Oa;
        }),
        n.d(t, "SkyBox", function () {
          return Ro;
        }),
        n.d(t, "SphereCollider", function () {
          return Do;
        }),
        n.d(t, "SphereGeometry", function () {
          return xo;
        }),
        n.d(t, "SpotLight", function () {
          return ri;
        }),
        n.d(t, "SpriteRenderer", function () {
          return io;
        }),
        n.d(t, "StencilOperation", function () {
          return gt;
        }),
        n.d(t, "SubPrimitive", function () {
          return no;
        }),
        n.d(t, "SystemInfo", function () {
          return Pr;
        }),
        n.d(t, "Texture", function () {
          return _i;
        }),
        n.d(t, "Texture2D", function () {
          return Ea;
        }),
        n.d(t, "TextureCubeFace", function () {
          return Fa;
        }),
        n.d(t, "TextureCubeMap", function () {
          return Ga;
        }),
        n.d(t, "TextureFilterMode", function () {
          return li;
        }),
        n.d(t, "TextureFormat", function () {
          return di;
        }),
        n.d(t, "TextureWrapMode", function () {
          return hi;
        }),
        n.d(t, "Time", function () {
          return Re;
        }),
        n.d(t, "TorusGeometry", function () {
          return Mo;
        }),
        n.d(t, "TrailMaterial", function () {
          return Fo;
        }),
        n.d(t, "TrailRenderer", function () {
          return zo;
        }),
        n.d(t, "Transform", function () {
          return st;
        }),
        n.d(t, "UniformSemantic", function () {
          return ve;
        }),
        n.d(t, "UpdateFlag", function () {
          return ot;
        }),
        n.d(t, "Util", function () {
          return V;
        }),
        n.d(t, "VertexBufferBinding", function () {
          return Qa;
        }),
        n.d(t, "VertexElement", function () {
          return to;
        }),
        n.d(t, "VertexElementFormat", function () {
          return Da;
        }),
        n.d(t, "WrapMode", function () {
          return Ja;
        }),
        n.d(t, "dependencies", function () {
          return Ve;
        }),
        n.d(t, "request", function () {
          return Wr;
        }),
        n.d(t, "resourceLoader", function () {
          return X;
        }),
        n.d(t, "GLTFModel", function () {
          return zc;
        }),
        n.d(t, "Oasis", function () {
          return Tu;
        }),
        n.d(t, "Parser", function () {
          return Eu;
        }),
        n.d(t, "RegistExtension", function () {
          return $s;
        }),
        n.d(t, "SchemaResource", function () {
          return kc;
        }),
        n.d(t, "parseSingleKTX", function () {
          return Pc;
        }),
        n.d(t, "parser", function () {
          return Ou;
        }),
        n.d(t, "registerResource", function () {
          return yu;
        }),
        n.d(t, "script", function () {
          return Xc;
        }),
        n.d(t, "BoundingBox", function () {
          return c;
        }),
        n.d(t, "BoundingFrustum", function () {
          return d;
        }),
        n.d(t, "BoundingSphere", function () {
          return s;
        }),
        n.d(t, "CollisionUtil", function () {
          return u;
        }),
        n.d(t, "Color", function () {
          return b;
        }),
        n.d(t, "ContainmentType", function () {
          return i;
        }),
        n.d(t, "MathUtil", function () {
          return a;
        }),
        n.d(t, "Matrix", function () {
          return _;
        }),
        n.d(t, "Matrix3x3", function () {
          return h;
        }),
        n.d(t, "Plane", function () {
          return l;
        }),
        n.d(t, "PlaneIntersectionType", function () {
          return r;
        }),
        n.d(t, "Quaternion", function () {
          return f;
        }),
        n.d(t, "Ray", function () {
          return p;
        }),
        n.d(t, "Spherical", function () {
          return v;
        }),
        n.d(t, "Vector2", function () {
          return m;
        }),
        n.d(t, "Vector3", function () {
          return o;
        }),
        n.d(t, "Vector4", function () {
          return y;
        }),
        n.d(t, "GLTexture", function () {
          return Nu;
        }),
        n.d(t, "WebCanvas", function () {
          return Gu;
        }),
        n.d(t, "WebGLEngine", function () {
          return Yu;
        }),
        n.d(t, "WebGLMode", function () {
          return Ku;
        }),
        n.d(t, "WebGLRenderer", function () {
          return Qu;
        }),
        Eu.registerComponents("o3", {
          GLTFModel: zc,
          SpriteRenderer: io,
          PointLight: ii,
          AmbientLight: ei,
          DirectLight: ti,
          EnvironmentMapLight: ni,
          ParticleRenderer: Eo,
          SkyBox: Ro,
          BoxCollider: Bo,
          GeometryRenderer: vo,
          Camera: Gr,
          Component: at,
          SphereCollider: Do,
          Model: Co
        });
      var Ju = "__buildVersion";
      console.log("oasis engine version: ".concat(Ju));
    }
  });
});
